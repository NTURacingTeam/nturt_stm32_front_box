
2022_NTUR_FrontBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800ab40  0800ab40  0001ab40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b11c  0800b11c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b11c  0800b11c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b11c  0800b11c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b11c  0800b11c  0001b11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  2000020c  0800b330  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  0800b330  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000165e6  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003137  00000000  00000000  0003681b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001528  00000000  00000000  00039958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  0003ae80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b116  00000000  00000000  0003c278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f34  00000000  00000000  0005738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009848a  00000000  00000000  0006f2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010774c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d3c  00000000  00000000  0010779c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab24 	.word	0x0800ab24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	0800ab24 	.word	0x0800ab24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 800111c:	2300      	movs	r3, #0
 800111e:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8001120:	e015      	b.n	800114e <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b29a      	uxth	r2, r3
 800112c:	89fb      	ldrh	r3, [r7, #14]
 800112e:	4053      	eors	r3, r2
 8001130:	b29b      	uxth	r3, r3
 8001132:	b2db      	uxtb	r3, r3
 8001134:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <CRC8_Calc+0x58>)
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	b21a      	sxth	r2, r3
 800113e:	89fb      	ldrh	r3, [r7, #14]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21b      	sxth	r3, r3
 8001144:	4053      	eors	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	b2db      	uxtb	r3, r3
 800114c:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	70fa      	strb	r2, [r7, #3]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1e4      	bne.n	8001122 <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	b2db      	uxtb	r3, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	0800ac2c 	.word	0x0800ac2c

0800116c <MLX90614_ReadReg>:

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af04      	add	r7, sp, #16
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	b29b      	uxth	r3, r3
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	b299      	uxth	r1, r3
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	b29a      	uxth	r2, r3
 800118a:	2364      	movs	r3, #100	; 0x64
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2303      	movs	r3, #3
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <MLX90614_ReadReg+0xa8>)
 800119c:	f003 fdfc 	bl	8004d98 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 80011b8:	7c3b      	ldrb	r3, [r7, #16]
 80011ba:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 80011bc:	7c7b      	ldrb	r3, [r7, #17]
 80011be:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2105      	movs	r1, #5
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffa2 	bl	8001110 <CRC8_Calc>
 80011cc:	4603      	mov	r3, r0
 80011ce:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 80011d0:	7c7b      	ldrb	r3, [r7, #17]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	7c3b      	ldrb	r3, [r7, #16]
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21b      	sxth	r3, r3
 80011de:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 80011e0:	7cbb      	ldrb	r3, [r7, #18]
 80011e2:	7d7a      	ldrb	r2, [r7, #21]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <MLX90614_ReadReg+0x80>
		data = 0x0000;
 80011e8:	2300      	movs	r3, #0
 80011ea:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10b      	bne.n	800120a <MLX90614_ReadReg+0x9e>
 80011f2:	7cbb      	ldrb	r3, [r7, #18]
 80011f4:	8afc      	ldrh	r4, [r7, #22]
 80011f6:	79b8      	ldrb	r0, [r7, #6]
 80011f8:	79f9      	ldrb	r1, [r7, #7]
 80011fa:	7d7a      	ldrb	r2, [r7, #21]
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4623      	mov	r3, r4
 8001202:	4602      	mov	r2, r0
 8001204:	2001      	movs	r0, #1
 8001206:	f000 f807 	bl	8001218 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 800120a:	8afb      	ldrh	r3, [r7, #22]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}
 8001214:	20000344 	.word	0x20000344

08001218 <MLX90614_SendDebugMsg>:
				  HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
					//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
			  }
		  }
}
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af04      	add	r7, sp, #16
 800121e:	4604      	mov	r4, r0
 8001220:	4608      	mov	r0, r1
 8001222:	4611      	mov	r1, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	71fb      	strb	r3, [r7, #7]
 800122a:	4603      	mov	r3, r0
 800122c:	71bb      	strb	r3, [r7, #6]
 800122e:	460b      	mov	r3, r1
 8001230:	717b      	strb	r3, [r7, #5]
 8001232:	4613      	mov	r3, r2
 8001234:	807b      	strh	r3, [r7, #2]
	if(op_type == MLX90614_DBG_MSG_W) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d118      	bne.n	800126e <MLX90614_SendDebugMsg+0x56>
		snprintf(temp_buff, sizeof(temp_buff), "W Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_calc);
 800123c:	79b8      	ldrb	r0, [r7, #6]
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	7f39      	ldrb	r1, [r7, #28]
 8001244:	9102      	str	r1, [sp, #8]
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	4603      	mov	r3, r0
 800124c:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <MLX90614_SendDebugMsg+0x98>)
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 8001252:	f007 f907 	bl	8008464 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
 8001256:	4817      	ldr	r0, [pc, #92]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 8001258:	f7fe ff7a 	bl	8000150 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001264:	4913      	ldr	r1, [pc, #76]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MLX90614_SendDebugMsg+0xa0>)
 8001268:	f005 ff69 	bl	800713e <HAL_UART_Transmit>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
		//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
	}

}
 800126c:	e01c      	b.n	80012a8 <MLX90614_SendDebugMsg+0x90>
	else if (op_type == MLX90614_DBG_MSG_R) {
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d119      	bne.n	80012a8 <MLX90614_SendDebugMsg+0x90>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
 8001274:	79bc      	ldrb	r4, [r7, #6]
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	7e39      	ldrb	r1, [r7, #24]
 800127c:	7f38      	ldrb	r0, [r7, #28]
 800127e:	9003      	str	r0, [sp, #12]
 8001280:	9102      	str	r1, [sp, #8]
 8001282:	9201      	str	r2, [sp, #4]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4623      	mov	r3, r4
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <MLX90614_SendDebugMsg+0xa4>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 800128e:	f007 f8e9 	bl	8008464 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 8001294:	f7fe ff5c 	bl	8000150 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b29a      	uxth	r2, r3
 800129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a0:	4904      	ldr	r1, [pc, #16]	; (80012b4 <MLX90614_SendDebugMsg+0x9c>)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MLX90614_SendDebugMsg+0xa0>)
 80012a4:	f005 ff4b 	bl	800713e <HAL_UART_Transmit>
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd90      	pop	{r4, r7, pc}
 80012b0:	0800ab4c 	.word	0x0800ab4c
 80012b4:	20000228 	.word	0x20000228
 80012b8:	20000438 	.word	0x20000438
 80012bc:	0800ab8c 	.word	0x0800ab8c

080012c0 <setCSLine>:
#define RES12           12
#define RES14           14


void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 80012d0:	787a      	ldrb	r2, [r7, #1]
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	4619      	mov	r1, r3
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f003 fbd1 	bl	8004a7e <HAL_GPIO_WritePin>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	460b      	mov	r3, r1
 80012f2:	72fb      	strb	r3, [r7, #11]
 80012f4:	4613      	mov	r3, r2
 80012f6:	813b      	strh	r3, [r7, #8]
  //to hold received data
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 80012f8:	893b      	ldrh	r3, [r7, #8]
 80012fa:	2200      	movs	r2, #0
 80012fc:	4619      	mov	r1, r3
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ffde 	bl	80012c0 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
  HAL_Delay(3);
 8001304:	2003      	movs	r0, #3
 8001306:	f001 fd43 	bl	8002d90 <HAL_Delay>
  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800130a:	f107 0217 	add.w	r2, r7, #23
 800130e:	f107 010b 	add.w	r1, r7, #11
 8001312:	230a      	movs	r3, #10
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f004 ff7d 	bl	8006218 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  HAL_Delay(3);
 800131e:	2003      	movs	r0, #3
 8001320:	f001 fd36 	bl	8002d90 <HAL_Delay>
  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8001324:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001328:	893b      	ldrh	r3, [r7, #8]
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffc7 	bl	80012c0 <setCSLine>

  return data;
 8001332:	7dfb      	ldrb	r3, [r7, #23]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	; 0x30
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	4611      	mov	r1, r2
 8001348:	461a      	mov	r2, r3
 800134a:	460b      	mov	r3, r1
 800134c:	80fb      	strh	r3, [r7, #6]
 800134e:	4613      	mov	r3, r2
 8001350:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2200      	movs	r2, #0
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	2100      	movs	r1, #0
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff ffc1 	bl	80012e4 <spiWriteRead>
 8001362:	4603      	mov	r3, r0
 8001364:	b29b      	uxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
  HAL_Delay(3);
 800136a:	2003      	movs	r0, #3
 800136c:	f001 fd10 	bl	8002d90 <HAL_Delay>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1 );
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2201      	movs	r2, #1
 8001374:	9200      	str	r2, [sp, #0]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	2100      	movs	r1, #0
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f7ff ffb2 	bl	80012e4 <spiWriteRead>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001386:	4313      	orrs	r3, r2
 8001388:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	e010      	b.n	80013b2 <getPositionSPI+0x76>
 8001390:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	fa42 f303 	asr.w	r3, r2, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	b2d9      	uxtb	r1, r3
 80013a0:	f107 0210 	add.w	r2, r7, #16
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	4413      	add	r3, r2
 80013a8:	460a      	mov	r2, r1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	6a3b      	ldr	r3, [r7, #32]
 80013ae:	3301      	adds	r3, #1
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2b0f      	cmp	r3, #15
 80013b6:	ddeb      	ble.n	8001390 <getPositionSPI+0x54>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
  if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80013b8:	7ffb      	ldrb	r3, [r7, #31]
 80013ba:	4619      	mov	r1, r3
 80013bc:	7f7a      	ldrb	r2, [r7, #29]
 80013be:	7efb      	ldrb	r3, [r7, #27]
 80013c0:	4053      	eors	r3, r2
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7e7b      	ldrb	r3, [r7, #25]
 80013c6:	4053      	eors	r3, r2
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	4053      	eors	r3, r2
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	7d7b      	ldrb	r3, [r7, #21]
 80013d2:	4053      	eors	r3, r2
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	4053      	eors	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	7c7b      	ldrb	r3, [r7, #17]
 80013de:	429a      	cmp	r2, r3
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4299      	cmp	r1, r3
 80013ea:	d11e      	bne.n	800142a <getPositionSPI+0xee>
          && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 80013ec:	7fbb      	ldrb	r3, [r7, #30]
 80013ee:	4619      	mov	r1, r3
 80013f0:	7f3a      	ldrb	r2, [r7, #28]
 80013f2:	7ebb      	ldrb	r3, [r7, #26]
 80013f4:	4053      	eors	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	7e3b      	ldrb	r3, [r7, #24]
 80013fa:	4053      	eors	r3, r2
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	7dbb      	ldrb	r3, [r7, #22]
 8001400:	4053      	eors	r3, r2
 8001402:	b2da      	uxtb	r2, r3
 8001404:	7d3b      	ldrb	r3, [r7, #20]
 8001406:	4053      	eors	r3, r2
 8001408:	b2da      	uxtb	r2, r3
 800140a:	7cbb      	ldrb	r3, [r7, #18]
 800140c:	4053      	eors	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	7c3b      	ldrb	r3, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	bf0c      	ite	eq
 8001416:	2301      	moveq	r3, #1
 8001418:	2300      	movne	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4299      	cmp	r1, r3
 800141e:	d104      	bne.n	800142a <getPositionSPI+0xee>
    {
      //we got back a good position, so just mask away the checkbits
      currentPosition &= 0x3FFF;
 8001420:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001422:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001426:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001428:	e002      	b.n	8001430 <getPositionSPI+0xf4>
    }
  else
  {
    currentPosition = 0xFFFF; //bad position
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8001430:	797b      	ldrb	r3, [r7, #5]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d107      	bne.n	8001446 <getPositionSPI+0x10a>
 8001436:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143c:	4293      	cmp	r3, r2
 800143e:	d002      	beq.n	8001446 <getPositionSPI+0x10a>
 8001440:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001442:	089b      	lsrs	r3, r3, #2
 8001444:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8001446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001448:	4618      	mov	r0, r3
 800144a:	3728      	adds	r7, #40	; 0x28
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <APPS1_transfer_function>:
  * @brief  transfer function for the analog APPS1 on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down
  */
uint8_t APPS1_transfer_function(uint32_t reading){
 8001450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001454:	b087      	sub	sp, #28
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x = (float)reading;
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fc1a 	bl	8000c94 <__aeabi_ui2f>
 8001460:	4603      	mov	r3, r0
 8001462:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 8001464:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001468:	613b      	str	r3, [r7, #16]
	value = (9397*a-5497*x)/(9000*(a-x))-sqrt(88303609*a*a-189063818*a*x+115970209*x*x)/(9000*(a-x));
 800146a:	4965      	ldr	r1, [pc, #404]	; (8001600 <APPS1_transfer_function+0x1b0>)
 800146c:	6938      	ldr	r0, [r7, #16]
 800146e:	f7ff fc69 	bl	8000d44 <__aeabi_fmul>
 8001472:	4603      	mov	r3, r0
 8001474:	461c      	mov	r4, r3
 8001476:	4963      	ldr	r1, [pc, #396]	; (8001604 <APPS1_transfer_function+0x1b4>)
 8001478:	6978      	ldr	r0, [r7, #20]
 800147a:	f7ff fc63 	bl	8000d44 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff fb54 	bl	8000b30 <__aeabi_fsub>
 8001488:	4603      	mov	r3, r0
 800148a:	461c      	mov	r4, r3
 800148c:	6979      	ldr	r1, [r7, #20]
 800148e:	6938      	ldr	r0, [r7, #16]
 8001490:	f7ff fb4e 	bl	8000b30 <__aeabi_fsub>
 8001494:	4603      	mov	r3, r0
 8001496:	495c      	ldr	r1, [pc, #368]	; (8001608 <APPS1_transfer_function+0x1b8>)
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fc53 	bl	8000d44 <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff fd02 	bl	8000eac <__aeabi_fdiv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7fe ffbc 	bl	8000428 <__aeabi_f2d>
 80014b0:	4604      	mov	r4, r0
 80014b2:	460d      	mov	r5, r1
 80014b4:	4955      	ldr	r1, [pc, #340]	; (800160c <APPS1_transfer_function+0x1bc>)
 80014b6:	6938      	ldr	r0, [r7, #16]
 80014b8:	f7ff fc44 	bl	8000d44 <__aeabi_fmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	6939      	ldr	r1, [r7, #16]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc3f 	bl	8000d44 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	461e      	mov	r6, r3
 80014ca:	4951      	ldr	r1, [pc, #324]	; (8001610 <APPS1_transfer_function+0x1c0>)
 80014cc:	6938      	ldr	r0, [r7, #16]
 80014ce:	f7ff fc39 	bl	8000d44 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	6979      	ldr	r1, [r7, #20]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fc34 	bl	8000d44 <__aeabi_fmul>
 80014dc:	4603      	mov	r3, r0
 80014de:	4619      	mov	r1, r3
 80014e0:	4630      	mov	r0, r6
 80014e2:	f7ff fb25 	bl	8000b30 <__aeabi_fsub>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461e      	mov	r6, r3
 80014ea:	494a      	ldr	r1, [pc, #296]	; (8001614 <APPS1_transfer_function+0x1c4>)
 80014ec:	6978      	ldr	r0, [r7, #20]
 80014ee:	f7ff fc29 	bl	8000d44 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	6979      	ldr	r1, [r7, #20]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fc24 	bl	8000d44 <__aeabi_fmul>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4619      	mov	r1, r3
 8001500:	4630      	mov	r0, r6
 8001502:	f7ff fb17 	bl	8000b34 <__addsf3>
 8001506:	4603      	mov	r3, r0
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff8d 	bl	8000428 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f009 fa31 	bl	800a97c <sqrt>
 800151a:	4680      	mov	r8, r0
 800151c:	4689      	mov	r9, r1
 800151e:	6979      	ldr	r1, [r7, #20]
 8001520:	6938      	ldr	r0, [r7, #16]
 8001522:	f7ff fb05 	bl	8000b30 <__aeabi_fsub>
 8001526:	4603      	mov	r3, r0
 8001528:	4937      	ldr	r1, [pc, #220]	; (8001608 <APPS1_transfer_function+0x1b8>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc0a 	bl	8000d44 <__aeabi_fmul>
 8001530:	4603      	mov	r3, r0
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ff78 	bl	8000428 <__aeabi_f2d>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4640      	mov	r0, r8
 800153e:	4649      	mov	r1, r9
 8001540:	f7ff f8f4 	bl	800072c <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f7fe fe0c 	bl	8000168 <__aeabi_dsub>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	f7ff fa96 	bl	8000a88 <__aeabi_d2f>
 800155c:	4603      	mov	r3, r0
 800155e:	60fb      	str	r3, [r7, #12]
	value = (value-(50-39.5)/50) * (50)/(37);
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7fe ff61 	bl	8000428 <__aeabi_f2d>
 8001566:	a324      	add	r3, pc, #144	; (adr r3, 80015f8 <APPS1_transfer_function+0x1a8>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7fe fdfc 	bl	8000168 <__aeabi_dsub>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <APPS1_transfer_function+0x1c8>)
 800157e:	f7fe ffab 	bl	80004d8 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <APPS1_transfer_function+0x1cc>)
 8001590:	f7ff f8cc 	bl	800072c <__aeabi_ddiv>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fa74 	bl	8000a88 <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
	value = value*254;
 80015a4:	491e      	ldr	r1, [pc, #120]	; (8001620 <APPS1_transfer_function+0x1d0>)
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f7ff fbcc 	bl	8000d44 <__aeabi_fmul>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 80015b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7ff fabd 	bl	8000b34 <__addsf3>
 80015ba:	4603      	mov	r3, r0
 80015bc:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 80015be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff fd5c 	bl	8001080 <__aeabi_fcmplt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <APPS1_transfer_function+0x182>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e00d      	b.n	80015ee <APPS1_transfer_function+0x19e>
    else if(value>=255)	{return 255;}
 80015d2:	4914      	ldr	r1, [pc, #80]	; (8001624 <APPS1_transfer_function+0x1d4>)
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f7ff fd67 	bl	80010a8 <__aeabi_fcmpge>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <APPS1_transfer_function+0x194>
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	e004      	b.n	80015ee <APPS1_transfer_function+0x19e>
    else 				{return (uint8_t)value;}
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd73 	bl	80010d0 <__aeabi_f2uiz>
 80015ea:	4603      	mov	r3, r0
 80015ec:	b2db      	uxtb	r3, r3
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015f8:	ae147ae1 	.word	0xae147ae1
 80015fc:	3fcae147 	.word	0x3fcae147
 8001600:	4612d400 	.word	0x4612d400
 8001604:	45abc800 	.word	0x45abc800
 8001608:	460ca000 	.word	0x460ca000
 800160c:	4ca86cff 	.word	0x4ca86cff
 8001610:	4d344e29 	.word	0x4d344e29
 8001614:	4cdd3214 	.word	0x4cdd3214
 8001618:	40490000 	.word	0x40490000
 800161c:	40428000 	.word	0x40428000
 8001620:	437e0000 	.word	0x437e0000
 8001624:	437f0000 	.word	0x437f0000

08001628 <APPS2_transfer_function>:
  * @brief  transfer function for the analog APPS2 on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down.
  */
uint8_t APPS2_transfer_function(uint32_t reading){
 8001628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800162c:	b087      	sub	sp, #28
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x = (float)reading;
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fb2e 	bl	8000c94 <__aeabi_ui2f>
 8001638:	4603      	mov	r3, r0
 800163a:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 800163c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001640:	613b      	str	r3, [r7, #16]
	value = (919*a - 530*x)/(1020*(a - x)) - sqrt(844561*a*a - 1798820*a*x + 1105580*x*x)/(1020*(a - x));
 8001642:	4965      	ldr	r1, [pc, #404]	; (80017d8 <APPS2_transfer_function+0x1b0>)
 8001644:	6938      	ldr	r0, [r7, #16]
 8001646:	f7ff fb7d 	bl	8000d44 <__aeabi_fmul>
 800164a:	4603      	mov	r3, r0
 800164c:	461c      	mov	r4, r3
 800164e:	4963      	ldr	r1, [pc, #396]	; (80017dc <APPS2_transfer_function+0x1b4>)
 8001650:	6978      	ldr	r0, [r7, #20]
 8001652:	f7ff fb77 	bl	8000d44 <__aeabi_fmul>
 8001656:	4603      	mov	r3, r0
 8001658:	4619      	mov	r1, r3
 800165a:	4620      	mov	r0, r4
 800165c:	f7ff fa68 	bl	8000b30 <__aeabi_fsub>
 8001660:	4603      	mov	r3, r0
 8001662:	461c      	mov	r4, r3
 8001664:	6979      	ldr	r1, [r7, #20]
 8001666:	6938      	ldr	r0, [r7, #16]
 8001668:	f7ff fa62 	bl	8000b30 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	495c      	ldr	r1, [pc, #368]	; (80017e0 <APPS2_transfer_function+0x1b8>)
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb67 	bl	8000d44 <__aeabi_fmul>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fc16 	bl	8000eac <__aeabi_fdiv>
 8001680:	4603      	mov	r3, r0
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fed0 	bl	8000428 <__aeabi_f2d>
 8001688:	4604      	mov	r4, r0
 800168a:	460d      	mov	r5, r1
 800168c:	4955      	ldr	r1, [pc, #340]	; (80017e4 <APPS2_transfer_function+0x1bc>)
 800168e:	6938      	ldr	r0, [r7, #16]
 8001690:	f7ff fb58 	bl	8000d44 <__aeabi_fmul>
 8001694:	4603      	mov	r3, r0
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb53 	bl	8000d44 <__aeabi_fmul>
 800169e:	4603      	mov	r3, r0
 80016a0:	461e      	mov	r6, r3
 80016a2:	4951      	ldr	r1, [pc, #324]	; (80017e8 <APPS2_transfer_function+0x1c0>)
 80016a4:	6938      	ldr	r0, [r7, #16]
 80016a6:	f7ff fb4d 	bl	8000d44 <__aeabi_fmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	6979      	ldr	r1, [r7, #20]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb48 	bl	8000d44 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff fa39 	bl	8000b30 <__aeabi_fsub>
 80016be:	4603      	mov	r3, r0
 80016c0:	461e      	mov	r6, r3
 80016c2:	494a      	ldr	r1, [pc, #296]	; (80017ec <APPS2_transfer_function+0x1c4>)
 80016c4:	6978      	ldr	r0, [r7, #20]
 80016c6:	f7ff fb3d 	bl	8000d44 <__aeabi_fmul>
 80016ca:	4603      	mov	r3, r0
 80016cc:	6979      	ldr	r1, [r7, #20]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb38 	bl	8000d44 <__aeabi_fmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4630      	mov	r0, r6
 80016da:	f7ff fa2b 	bl	8000b34 <__addsf3>
 80016de:	4603      	mov	r3, r0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fea1 	bl	8000428 <__aeabi_f2d>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f009 f945 	bl	800a97c <sqrt>
 80016f2:	4680      	mov	r8, r0
 80016f4:	4689      	mov	r9, r1
 80016f6:	6979      	ldr	r1, [r7, #20]
 80016f8:	6938      	ldr	r0, [r7, #16]
 80016fa:	f7ff fa19 	bl	8000b30 <__aeabi_fsub>
 80016fe:	4603      	mov	r3, r0
 8001700:	4937      	ldr	r1, [pc, #220]	; (80017e0 <APPS2_transfer_function+0x1b8>)
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb1e 	bl	8000d44 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe fe8c 	bl	8000428 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4640      	mov	r0, r8
 8001716:	4649      	mov	r1, r9
 8001718:	f7ff f808 	bl	800072c <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4620      	mov	r0, r4
 8001722:	4629      	mov	r1, r5
 8001724:	f7fe fd20 	bl	8000168 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f7ff f9aa 	bl	8000a88 <__aeabi_d2f>
 8001734:	4603      	mov	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]
	value = (value-(50-39.5)/50) * (50)/(37);
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7fe fe75 	bl	8000428 <__aeabi_f2d>
 800173e:	a324      	add	r3, pc, #144	; (adr r3, 80017d0 <APPS2_transfer_function+0x1a8>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fd10 	bl	8000168 <__aeabi_dsub>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <APPS2_transfer_function+0x1c8>)
 8001756:	f7fe febf 	bl	80004d8 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <APPS2_transfer_function+0x1cc>)
 8001768:	f7fe ffe0 	bl	800072c <__aeabi_ddiv>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f988 	bl	8000a88 <__aeabi_d2f>
 8001778:	4603      	mov	r3, r0
 800177a:	60fb      	str	r3, [r7, #12]
	value = value*254;
 800177c:	491e      	ldr	r1, [pc, #120]	; (80017f8 <APPS2_transfer_function+0x1d0>)
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fae0 	bl	8000d44 <__aeabi_fmul>
 8001784:	4603      	mov	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 8001788:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f7ff f9d1 	bl	8000b34 <__addsf3>
 8001792:	4603      	mov	r3, r0
 8001794:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 8001796:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff fc70 	bl	8001080 <__aeabi_fcmplt>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <APPS2_transfer_function+0x182>
 80017a6:	2300      	movs	r3, #0
 80017a8:	e00d      	b.n	80017c6 <APPS2_transfer_function+0x19e>
	else if(value>=255)	{return 255;}
 80017aa:	4914      	ldr	r1, [pc, #80]	; (80017fc <APPS2_transfer_function+0x1d4>)
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fc7b 	bl	80010a8 <__aeabi_fcmpge>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <APPS2_transfer_function+0x194>
 80017b8:	23ff      	movs	r3, #255	; 0xff
 80017ba:	e004      	b.n	80017c6 <APPS2_transfer_function+0x19e>
	else 				{return (uint8_t)value;}
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fc87 	bl	80010d0 <__aeabi_f2uiz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	b2db      	uxtb	r3, r3
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	371c      	adds	r7, #28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d0:	ae147ae1 	.word	0xae147ae1
 80017d4:	3fcae147 	.word	0x3fcae147
 80017d8:	4465c000 	.word	0x4465c000
 80017dc:	44048000 	.word	0x44048000
 80017e0:	447f0000 	.word	0x447f0000
 80017e4:	494e3110 	.word	0x494e3110
 80017e8:	49db9520 	.word	0x49db9520
 80017ec:	4986f560 	.word	0x4986f560
 80017f0:	40490000 	.word	0x40490000
 80017f4:	40428000 	.word	0x40428000
 80017f8:	437e0000 	.word	0x437e0000
 80017fc:	437f0000 	.word	0x437f0000

08001800 <BSE_transfer_function>:
  * @brief  transfer function for the analog BSE on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down.
  */
uint8_t BSE_transfer_function(uint32_t reading){
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 24.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x=(float)reading;
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fa43 	bl	8000c94 <__aeabi_ui2f>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 8001812:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001816:	613b      	str	r3, [r7, #16]
	value = (sqrt(7767369*a*a - 10940888*a*x + 7074144*x*x) - 2787*a + 812*x)/(2*(812*x - 812*a));
 8001818:	4967      	ldr	r1, [pc, #412]	; (80019b8 <BSE_transfer_function+0x1b8>)
 800181a:	6938      	ldr	r0, [r7, #16]
 800181c:	f7ff fa92 	bl	8000d44 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fa8d 	bl	8000d44 <__aeabi_fmul>
 800182a:	4603      	mov	r3, r0
 800182c:	461c      	mov	r4, r3
 800182e:	4963      	ldr	r1, [pc, #396]	; (80019bc <BSE_transfer_function+0x1bc>)
 8001830:	6938      	ldr	r0, [r7, #16]
 8001832:	f7ff fa87 	bl	8000d44 <__aeabi_fmul>
 8001836:	4603      	mov	r3, r0
 8001838:	6979      	ldr	r1, [r7, #20]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fa82 	bl	8000d44 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4619      	mov	r1, r3
 8001844:	4620      	mov	r0, r4
 8001846:	f7ff f973 	bl	8000b30 <__aeabi_fsub>
 800184a:	4603      	mov	r3, r0
 800184c:	461c      	mov	r4, r3
 800184e:	495c      	ldr	r1, [pc, #368]	; (80019c0 <BSE_transfer_function+0x1c0>)
 8001850:	6978      	ldr	r0, [r7, #20]
 8001852:	f7ff fa77 	bl	8000d44 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	6979      	ldr	r1, [r7, #20]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fa72 	bl	8000d44 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff f965 	bl	8000b34 <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fddb 	bl	8000428 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f009 f87f 	bl	800a97c <sqrt>
 800187e:	4604      	mov	r4, r0
 8001880:	460d      	mov	r5, r1
 8001882:	4950      	ldr	r1, [pc, #320]	; (80019c4 <BSE_transfer_function+0x1c4>)
 8001884:	6938      	ldr	r0, [r7, #16]
 8001886:	f7ff fa5d 	bl	8000d44 <__aeabi_fmul>
 800188a:	4603      	mov	r3, r0
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fdcb 	bl	8000428 <__aeabi_f2d>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fc65 	bl	8000168 <__aeabi_dsub>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4614      	mov	r4, r2
 80018a4:	461d      	mov	r5, r3
 80018a6:	4948      	ldr	r1, [pc, #288]	; (80019c8 <BSE_transfer_function+0x1c8>)
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f7ff fa4b 	bl	8000d44 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fdb9 	bl	8000428 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fc55 	bl	800016c <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4614      	mov	r4, r2
 80018c8:	461d      	mov	r5, r3
 80018ca:	493f      	ldr	r1, [pc, #252]	; (80019c8 <BSE_transfer_function+0x1c8>)
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f7ff fa39 	bl	8000d44 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461e      	mov	r6, r3
 80018d6:	493c      	ldr	r1, [pc, #240]	; (80019c8 <BSE_transfer_function+0x1c8>)
 80018d8:	6938      	ldr	r0, [r7, #16]
 80018da:	f7ff fa33 	bl	8000d44 <__aeabi_fmul>
 80018de:	4603      	mov	r3, r0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4630      	mov	r0, r6
 80018e4:	f7ff f924 	bl	8000b30 <__aeabi_fsub>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4619      	mov	r1, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff f921 	bl	8000b34 <__addsf3>
 80018f2:	4603      	mov	r3, r0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fd97 	bl	8000428 <__aeabi_f2d>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe ff13 	bl	800072c <__aeabi_ddiv>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f8bb 	bl	8000a88 <__aeabi_d2f>
 8001912:	4603      	mov	r3, r0
 8001914:	60fb      	str	r3, [r7, #12]
	value = (value-(50-24.5)/25) * (25)/(24.5-2.5);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	a324      	add	r3, pc, #144	; (adr r3, 80019b0 <BSE_transfer_function+0x1b0>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fc21 	bl	8000168 <__aeabi_dsub>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <BSE_transfer_function+0x1cc>)
 8001934:	f7fe fdd0 	bl	80004d8 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <BSE_transfer_function+0x1d0>)
 8001946:	f7fe fef1 	bl	800072c <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f899 	bl	8000a88 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	60fb      	str	r3, [r7, #12]
	value *= 254;
 800195a:	491e      	ldr	r1, [pc, #120]	; (80019d4 <BSE_transfer_function+0x1d4>)
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f7ff f9f1 	bl	8000d44 <__aeabi_fmul>
 8001962:	4603      	mov	r3, r0
 8001964:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 8001966:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff f8e2 	bl	8000b34 <__addsf3>
 8001970:	4603      	mov	r3, r0
 8001972:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 8001974:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7ff fb81 	bl	8001080 <__aeabi_fcmplt>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <BSE_transfer_function+0x188>
 8001984:	2300      	movs	r3, #0
 8001986:	e00d      	b.n	80019a4 <BSE_transfer_function+0x1a4>
	else if(value>=255)	{return 255;}
 8001988:	4913      	ldr	r1, [pc, #76]	; (80019d8 <BSE_transfer_function+0x1d8>)
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fb8c 	bl	80010a8 <__aeabi_fcmpge>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <BSE_transfer_function+0x19a>
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	e004      	b.n	80019a4 <BSE_transfer_function+0x1a4>
	else 				{return (uint8_t)value;}
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f7ff fb98 	bl	80010d0 <__aeabi_f2uiz>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b2db      	uxtb	r3, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ac:	f3af 8000 	nop.w
 80019b0:	851eb852 	.word	0x851eb852
 80019b4:	3ff051eb 	.word	0x3ff051eb
 80019b8:	4aed0a92 	.word	0x4aed0a92
 80019bc:	4b26f1d8 	.word	0x4b26f1d8
 80019c0:	4ad7e2c0 	.word	0x4ad7e2c0
 80019c4:	452e3000 	.word	0x452e3000
 80019c8:	444b0000 	.word	0x444b0000
 80019cc:	40390000 	.word	0x40390000
 80019d0:	40360000 	.word	0x40360000
 80019d4:	437e0000 	.word	0x437e0000
 80019d8:	437f0000 	.word	0x437f0000
 80019dc:	00000000 	.word	0x00000000

080019e0 <oil_pressure_transfer_function>:
/**
  * @brief  transfer function for the brake oil pressure sensor on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the 8 bit number reperesenting the suspension travel that matches the format on the CAN protocol.
  */
uint8_t oil_pressure_transfer_function(uint32_t reading){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	/*TO BE DETERMINED not sure if it is the correct transfer function
	 * assume linear transfer:
	 * sensor outputs 1~5V, which is mapped to 0~5kPar
	 * 0~5kPar is mapped linearly to 0~255 in the CAN protocol*/
	float value=0;
 80019e8:	f04f 0300 	mov.w	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
	float input = reading;
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff f950 	bl	8000c94 <__aeabi_ui2f>
 80019f4:	4603      	mov	r3, r0
 80019f6:	60bb      	str	r3, [r7, #8]
	value = (input - 4096.0/5)*(255 /(4096 *(4.0/5.0) ) );
 80019f8:	68b8      	ldr	r0, [r7, #8]
 80019fa:	f7fe fd15 	bl	8000428 <__aeabi_f2d>
 80019fe:	a31a      	add	r3, pc, #104	; (adr r3, 8001a68 <oil_pressure_transfer_function+0x88>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fbb0 	bl	8000168 <__aeabi_dsub>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	a317      	add	r3, pc, #92	; (adr r3, 8001a70 <oil_pressure_transfer_function+0x90>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fd5f 	bl	80004d8 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff f831 	bl	8000a88 <__aeabi_d2f>
 8001a26:	4603      	mov	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]

	if(value>=256)		{return 255;}
 8001a2a:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff fb3a 	bl	80010a8 <__aeabi_fcmpge>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <oil_pressure_transfer_function+0x5e>
 8001a3a:	23ff      	movs	r3, #255	; 0xff
 8001a3c:	e00e      	b.n	8001a5c <oil_pressure_transfer_function+0x7c>
	else if(value<=0)	{return 0;}
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff fb26 	bl	8001094 <__aeabi_fcmple>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <oil_pressure_transfer_function+0x72>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	e004      	b.n	8001a5c <oil_pressure_transfer_function+0x7c>
	else				{return (uint8_t)value;}
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f7ff fb3c 	bl	80010d0 <__aeabi_f2uiz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	b2db      	uxtb	r3, r3
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	f3af 8000 	nop.w
 8001a68:	9999999a 	.word	0x9999999a
 8001a6c:	40899999 	.word	0x40899999
 8001a70:	00000000 	.word	0x00000000
 8001a74:	3fb3ec00 	.word	0x3fb3ec00

08001a78 <suspension_travel_transfer_function>:
/**
  * @brief  transfer function for the analog suspension travel on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the 8 bit number reperesenting the suspension travel that matches the format on the CAN protocol.
  */
uint8_t suspension_travel_transfer_function(uint32_t reading){
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	/*The length of the suspension measuring sensor goes from 200~245mm, which corresponds to 5.5~50.5mm extension
	 * The length of the allowable extension is mapped linearly to 0~255
	 * that is, the function should be a straight line passing through( 5.5*(4096/75) , 0 ) and (50.5*(4096/75),256)
	 */

	float value = 0.0;
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
	float input = (float)reading;
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff f904 	bl	8000c94 <__aeabi_ui2f>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60bb      	str	r3, [r7, #8]
	value = (input-5.5*(max_adc_value/75))*(256/(max_adc_value*(50.5-5.5)/75));
 8001a90:	68b8      	ldr	r0, [r7, #8]
 8001a92:	f7fe fcc9 	bl	8000428 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001a9e:	4930      	ldr	r1, [pc, #192]	; (8001b60 <suspension_travel_transfer_function+0xe8>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fa03 	bl	8000eac <__aeabi_fdiv>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcbd 	bl	8000428 <__aeabi_f2d>
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <suspension_travel_transfer_function+0xec>)
 8001ab4:	f7fe fd10 	bl	80004d8 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fb52 	bl	8000168 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
 8001acc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fca9 	bl	8000428 <__aeabi_f2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <suspension_travel_transfer_function+0xf0>)
 8001adc:	f7fe fcfc 	bl	80004d8 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	a31b      	add	r3, pc, #108	; (adr r3, 8001b58 <suspension_travel_transfer_function+0xe0>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fe1d 	bl	800072c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	f04f 0000 	mov.w	r0, #0
 8001afa:	491c      	ldr	r1, [pc, #112]	; (8001b6c <suspension_travel_transfer_function+0xf4>)
 8001afc:	f7fe fe16 	bl	800072c <__aeabi_ddiv>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fce6 	bl	80004d8 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7fe ffb8 	bl	8000a88 <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60fb      	str	r3, [r7, #12]

	if(value>=256)		{return 255;}
 8001b1c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff fac1 	bl	80010a8 <__aeabi_fcmpge>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <suspension_travel_transfer_function+0xb8>
 8001b2c:	23ff      	movs	r3, #255	; 0xff
 8001b2e:	e00e      	b.n	8001b4e <suspension_travel_transfer_function+0xd6>
	else if(value<=0)	{return 0;}
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff faad 	bl	8001094 <__aeabi_fcmple>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <suspension_travel_transfer_function+0xcc>
 8001b40:	2300      	movs	r3, #0
 8001b42:	e004      	b.n	8001b4e <suspension_travel_transfer_function+0xd6>
	else				{return (uint8_t)value;}
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fac3 	bl	80010d0 <__aeabi_f2uiz>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b2db      	uxtb	r3, r3
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdb0      	pop	{r4, r5, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	4052c000 	.word	0x4052c000
 8001b60:	42960000 	.word	0x42960000
 8001b64:	40160000 	.word	0x40160000
 8001b68:	40468000 	.word	0x40468000
 8001b6c:	40700000 	.word	0x40700000

08001b70 <wheel_speed_transfer_function>:
  * @brief  transfer function for the hall tachometer on ep4
  * @param  reading: the number of hall trigger per 10ms
  * @retval the wheel speed in rad/s, times 256
  * @note the result is multiplied by 256 so that the MSB represents the integer part of the number while LSB represents the part less than 1
  */
uint16_t wheel_speed_transfer_function(uint32_t reading){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	/**/
	float input = reading;
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f88b 	bl	8000c94 <__aeabi_ui2f>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	617b      	str	r3, [r7, #20]
	const float tooth_per_rev = 1.0; /*	TO BE DETERMINED*/
 8001b82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001b86:	613b      	str	r3, [r7, #16]
	float value = 0.0;
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
	value = input *100 /tooth_per_rev *pi *256;
 8001b8e:	4910      	ldr	r1, [pc, #64]	; (8001bd0 <wheel_speed_transfer_function+0x60>)
 8001b90:	6978      	ldr	r0, [r7, #20]
 8001b92:	f7ff f8d7 	bl	8000d44 <__aeabi_fmul>
 8001b96:	4603      	mov	r3, r0
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f986 	bl	8000eac <__aeabi_fdiv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <wheel_speed_transfer_function+0x64>)
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f7ff f8cb 	bl	8000d44 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff f8c5 	bl	8000d44 <__aeabi_fmul>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60fb      	str	r3, [r7, #12]
	return (uint16_t)value;
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fa86 	bl	80010d0 <__aeabi_f2uiz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29b      	uxth	r3, r3

}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	42c80000 	.word	0x42c80000
 8001bd4:	40490fdb 	.word	0x40490fdb

08001bd8 <tire_temp_transfer_function>:
/**
  * @brief  transfer function for the IR tire temperature sensor on ep4
  * @param  the absolute measured temperature, times 50(the direct output of the MLX90614 sensors)
  * @retval the tire temperature in degree C, times 2
  */
uint8_t tire_temp_transfer_function(uint16_t reading){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
	float value;
	float input = reading;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f855 	bl	8000c94 <__aeabi_ui2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	60fb      	str	r3, [r7, #12]
	value = (input/50-273.15)*2;
 8001bee:	4920      	ldr	r1, [pc, #128]	; (8001c70 <tire_temp_transfer_function+0x98>)
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f7ff f95b 	bl	8000eac <__aeabi_fdiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fc15 	bl	8000428 <__aeabi_f2d>
 8001bfe:	a31a      	add	r3, pc, #104	; (adr r3, 8001c68 <tire_temp_transfer_function+0x90>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fab0 	bl	8000168 <__aeabi_dsub>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	f7fe faaa 	bl	800016c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff32 	bl	8000a88 <__aeabi_d2f>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60bb      	str	r3, [r7, #8]

	if(value>=256)		{return 255;}
 8001c28:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001c2c:	68b8      	ldr	r0, [r7, #8]
 8001c2e:	f7ff fa3b 	bl	80010a8 <__aeabi_fcmpge>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <tire_temp_transfer_function+0x64>
 8001c38:	23ff      	movs	r3, #255	; 0xff
 8001c3a:	e00e      	b.n	8001c5a <tire_temp_transfer_function+0x82>
	else if(value<=0)	{return 0;}
 8001c3c:	f04f 0100 	mov.w	r1, #0
 8001c40:	68b8      	ldr	r0, [r7, #8]
 8001c42:	f7ff fa27 	bl	8001094 <__aeabi_fcmple>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <tire_temp_transfer_function+0x78>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e004      	b.n	8001c5a <tire_temp_transfer_function+0x82>
	else				{return (uint8_t)value;}
 8001c50:	68b8      	ldr	r0, [r7, #8]
 8001c52:	f7ff fa3d 	bl	80010d0 <__aeabi_f2uiz>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b2db      	uxtb	r3, r3
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	f3af 8000 	nop.w
 8001c68:	66666666 	.word	0x66666666
 8001c6c:	40711266 	.word	0x40711266
 8001c70:	42480000 	.word	0x42480000

08001c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c78:	f001 f828 	bl	8002ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7c:	f000 f813 	bl	8001ca6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c80:	f000 fa1e 	bl	80020c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c84:	f000 fa06 	bl	8002094 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c88:	f000 f86a 	bl	8001d60 <MX_ADC1_Init>
  MX_CAN_Init();
 8001c8c:	f000 f8ee 	bl	8001e6c <MX_CAN_Init>
  MX_I2C1_Init();
 8001c90:	f000 f924 	bl	8001edc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c94:	f000 f9d4 	bl	8002040 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001c98:	f000 f984 	bl	8001fa4 <MX_TIM3_Init>
  MX_SPI2_Init();
 8001c9c:	f000 f94c 	bl	8001f38 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  user_main();
 8001ca0:	f000 fe44 	bl	800292c <user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x30>

08001ca6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b094      	sub	sp, #80	; 0x50
 8001caa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cb0:	2228      	movs	r2, #40	; 0x28
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f005 fef7 	bl	8007aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
 8001cc4:	609a      	str	r2, [r3, #8]
 8001cc6:	60da      	str	r2, [r3, #12]
 8001cc8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cf2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fd37 	bl	8005770 <HAL_RCC_OscConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d08:	f000 fa92 	bl	8002230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d1c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2102      	movs	r1, #2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 ffa2 	bl	8005c74 <HAL_RCC_ClockConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d36:	f000 fa7b 	bl	8002230 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d42:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 f92c 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001d52:	f000 fa6d 	bl	8002230 <Error_Handler>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3750      	adds	r7, #80	; 0x50
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d70:	4b3c      	ldr	r3, [pc, #240]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d72:	4a3d      	ldr	r2, [pc, #244]	; (8001e68 <MX_ADC1_Init+0x108>)
 8001d74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d76:	4b3b      	ldr	r3, [pc, #236]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d84:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d8a:	4b36      	ldr	r3, [pc, #216]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d8c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001d98:	4b32      	ldr	r3, [pc, #200]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001d9a:	2206      	movs	r2, #6
 8001d9c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d9e:	4831      	ldr	r0, [pc, #196]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001da0:	f001 f81a 	bl	8002dd8 <HAL_ADC_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001daa:	f000 fa41 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001dae:	2306      	movs	r3, #6
 8001db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 8001db6:	2304      	movs	r3, #4
 8001db8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4829      	ldr	r0, [pc, #164]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001dc0:	f001 f9dc 	bl	800317c <HAL_ADC_ConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dca:	f000 fa31 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001dce:	2309      	movs	r3, #9
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4822      	ldr	r0, [pc, #136]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001ddc:	f001 f9ce 	bl	800317c <HAL_ADC_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001de6:	f000 fa23 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001dea:	2308      	movs	r3, #8
 8001dec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001dee:	2303      	movs	r3, #3
 8001df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	481b      	ldr	r0, [pc, #108]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001df8:	f001 f9c0 	bl	800317c <HAL_ADC_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001e02:	f000 fa15 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4814      	ldr	r0, [pc, #80]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001e14:	f001 f9b2 	bl	800317c <HAL_ADC_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001e1e:	f000 fa07 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001e22:	2303      	movs	r3, #3
 8001e24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001e26:	2305      	movs	r3, #5
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480d      	ldr	r0, [pc, #52]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001e30:	f001 f9a4 	bl	800317c <HAL_ADC_ConfigChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001e3a:	f000 f9f9 	bl	8002230 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001e42:	2306      	movs	r3, #6
 8001e44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4806      	ldr	r0, [pc, #24]	; (8001e64 <MX_ADC1_Init+0x104>)
 8001e4c:	f001 f996 	bl	800317c <HAL_ADC_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001e56:	f000 f9eb 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200002a8 	.word	0x200002a8
 8001e68:	40012400 	.word	0x40012400

08001e6c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e72:	4a19      	ldr	r2, [pc, #100]	; (8001ed8 <MX_CAN_Init+0x6c>)
 8001e74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8001e82:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e88:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e90:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e94:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001e98:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_CAN_Init+0x68>)
 8001ec0:	f001 fb55 	bl	800356e <HAL_CAN_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001eca:	f000 f9b1 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	2000031c 	.word	0x2000031c
 8001ed8:	40006400 	.word	0x40006400

08001edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ee2:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <MX_I2C1_Init+0x54>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ee8:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <MX_I2C1_Init+0x58>)
 8001eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_I2C1_Init+0x50>)
 8001f1a:	f002 fdf9 	bl	8004b10 <HAL_I2C_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f24:	f000 f984 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000344 	.word	0x20000344
 8001f30:	40005400 	.word	0x40005400
 8001f34:	000186a0 	.word	0x000186a0

08001f38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <MX_SPI2_Init+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f56:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f6c:	2228      	movs	r2, #40	; 0x28
 8001f6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f84:	220a      	movs	r2, #10
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_SPI2_Init+0x64>)
 8001f8a:	f004 f8c1 	bl	8006110 <HAL_SPI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f94:	f000 f94c 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000398 	.word	0x20000398
 8001fa0:	40003800 	.word	0x40003800

08001fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	463b      	mov	r3, r7
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	; (800203c <MX_TIM3_Init+0x98>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fc8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fd6:	2263      	movs	r2, #99	; 0x63
 8001fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <MX_TIM3_Init+0x94>)
 8001fe8:	f004 fc62 	bl	80068b0 <HAL_TIM_Base_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001ff2:	f000 f91d 	bl	8002230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <MX_TIM3_Init+0x94>)
 8002004:	f004 fdfe 	bl	8006c04 <HAL_TIM_ConfigClockSource>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800200e:	f000 f90f 	bl	8002230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201a:	463b      	mov	r3, r7
 800201c:	4619      	mov	r1, r3
 800201e:	4806      	ldr	r0, [pc, #24]	; (8002038 <MX_TIM3_Init+0x94>)
 8002020:	f004 ffd0 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800202a:	f000 f901 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200003f0 	.word	0x200003f0
 800203c:	40000400 	.word	0x40000400

08002040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_USART1_UART_Init+0x50>)
 8002048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800204c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002078:	f005 f814 	bl	80070a4 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002082:	f000 f8d5 	bl	8002230 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000438 	.word	0x20000438
 8002090:	40013800 	.word	0x40013800

08002094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <MX_DMA_Init+0x28>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <MX_DMA_Init+0x28>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <MX_DMA_Init+0x28>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]

}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr
 80020bc:	40021000 	.word	0x40021000

080020c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020d4:	4b51      	ldr	r3, [pc, #324]	; (800221c <MX_GPIO_Init+0x15c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a50      	ldr	r2, [pc, #320]	; (800221c <MX_GPIO_Init+0x15c>)
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b4e      	ldr	r3, [pc, #312]	; (800221c <MX_GPIO_Init+0x15c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ec:	4b4b      	ldr	r3, [pc, #300]	; (800221c <MX_GPIO_Init+0x15c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a4a      	ldr	r2, [pc, #296]	; (800221c <MX_GPIO_Init+0x15c>)
 80020f2:	f043 0320 	orr.w	r3, r3, #32
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <MX_GPIO_Init+0x15c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <MX_GPIO_Init+0x15c>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a44      	ldr	r2, [pc, #272]	; (800221c <MX_GPIO_Init+0x15c>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b42      	ldr	r3, [pc, #264]	; (800221c <MX_GPIO_Init+0x15c>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <MX_GPIO_Init+0x15c>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	4a3e      	ldr	r2, [pc, #248]	; (800221c <MX_GPIO_Init+0x15c>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	6193      	str	r3, [r2, #24]
 8002128:	4b3c      	ldr	r3, [pc, #240]	; (800221c <MX_GPIO_Init+0x15c>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800213a:	4839      	ldr	r0, [pc, #228]	; (8002220 <MX_GPIO_Init+0x160>)
 800213c:	f002 fc9f 	bl	8004a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8002140:	2201      	movs	r2, #1
 8002142:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002146:	4836      	ldr	r0, [pc, #216]	; (8002220 <MX_GPIO_Init+0x160>)
 8002148:	f002 fc99 	bl	8004a7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800214c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002152:	2301      	movs	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2302      	movs	r3, #2
 800215c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	4619      	mov	r1, r3
 8002164:	482e      	ldr	r0, [pc, #184]	; (8002220 <MX_GPIO_Init+0x160>)
 8002166:	f002 faef 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800216a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800216e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002178:	2301      	movs	r3, #1
 800217a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	4619      	mov	r1, r3
 8002182:	4827      	ldr	r0, [pc, #156]	; (8002220 <MX_GPIO_Init+0x160>)
 8002184:	f002 fae0 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800218e:	4b25      	ldr	r3, [pc, #148]	; (8002224 <MX_GPIO_Init+0x164>)
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	4820      	ldr	r0, [pc, #128]	; (8002220 <MX_GPIO_Init+0x160>)
 800219e:	f002 fad3 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 80021a2:	2383      	movs	r3, #131	; 0x83
 80021a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021a6:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_GPIO_Init+0x164>)
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	481c      	ldr	r0, [pc, #112]	; (8002228 <MX_GPIO_Init+0x168>)
 80021b6:	f002 fac7 	bl	8004748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ba:	2320      	movs	r3, #32
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <MX_GPIO_Init+0x164>)
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	4817      	ldr	r0, [pc, #92]	; (800222c <MX_GPIO_Init+0x16c>)
 80021ce:	f002 fabb 	bl	8004748 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	2006      	movs	r0, #6
 80021d8:	f002 f8e7 	bl	80043aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021dc:	2006      	movs	r0, #6
 80021de:	f002 f900 	bl	80043e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2007      	movs	r0, #7
 80021e8:	f002 f8df 	bl	80043aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021ec:	2007      	movs	r0, #7
 80021ee:	f002 f8f8 	bl	80043e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	2017      	movs	r0, #23
 80021f8:	f002 f8d7 	bl	80043aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021fc:	2017      	movs	r0, #23
 80021fe:	f002 f8f0 	bl	80043e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2100      	movs	r1, #0
 8002206:	2028      	movs	r0, #40	; 0x28
 8002208:	f002 f8cf 	bl	80043aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800220c:	2028      	movs	r0, #40	; 0x28
 800220e:	f002 f8e8 	bl	80043e2 <HAL_NVIC_EnableIRQ>

}
 8002212:	bf00      	nop
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40011000 	.word	0x40011000
 8002224:	10210000 	.word	0x10210000
 8002228:	40010800 	.word	0x40010800
 800222c:	40010c00 	.word	0x40010c00

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002234:	b672      	cpsid	i
}
 8002236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8002238:	20c8      	movs	r0, #200	; 0xc8
 800223a:	f000 fda9 	bl	8002d90 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800223e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002242:	4802      	ldr	r0, [pc, #8]	; (800224c <Error_Handler+0x1c>)
 8002244:	f002 fc33 	bl	8004aae <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8002248:	e7f6      	b.n	8002238 <Error_Handler+0x8>
 800224a:	bf00      	nop
 800224c:	40011000 	.word	0x40011000

08002250 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8002258:	1d39      	adds	r1, r7, #4
 800225a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225e:	2201      	movs	r2, #1
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <__io_putchar+0x20>)
 8002262:	f004 ff6c 	bl	800713e <HAL_UART_Transmit>
	return ch;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000438 	.word	0x20000438

08002274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_MspInit+0x5c>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_MspInit+0x5c>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6193      	str	r3, [r2, #24]
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_MspInit+0x5c>)
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60bb      	str	r3, [r7, #8]
 8002290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_MspInit+0x5c>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_MspInit+0x5c>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <HAL_MspInit+0x5c>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022aa:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_MspInit+0x60>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <HAL_MspInit+0x60>)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40010000 	.word	0x40010000

080022d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0318 	add.w	r3, r7, #24
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a33      	ldr	r2, [pc, #204]	; (80023c0 <HAL_ADC_MspInit+0xe8>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d15f      	bne.n	80023b8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022f8:	4b32      	ldr	r3, [pc, #200]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a31      	ldr	r2, [pc, #196]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 80022fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_ADC_MspInit+0xec>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8002340:	235c      	movs	r3, #92	; 0x5c
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002344:	2303      	movs	r3, #3
 8002346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 0318 	add.w	r3, r7, #24
 800234c:	4619      	mov	r1, r3
 800234e:	481e      	ldr	r0, [pc, #120]	; (80023c8 <HAL_ADC_MspInit+0xf0>)
 8002350:	f002 f9fa 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002354:	2303      	movs	r3, #3
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002358:	2303      	movs	r3, #3
 800235a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 0318 	add.w	r3, r7, #24
 8002360:	4619      	mov	r1, r3
 8002362:	481a      	ldr	r0, [pc, #104]	; (80023cc <HAL_ADC_MspInit+0xf4>)
 8002364:	f002 f9f0 	bl	8004748 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 800236a:	4a1a      	ldr	r2, [pc, #104]	; (80023d4 <HAL_ADC_MspInit+0xfc>)
 800236c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236e:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002374:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 800238a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800238e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 8002392:	2220      	movs	r2, #32
 8002394:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002396:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 8002398:	2200      	movs	r2, #0
 800239a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 800239e:	f002 f83b 	bl	8004418 <HAL_DMA_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80023a8:	f7ff ff42 	bl	8002230 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 80023b0:	621a      	str	r2, [r3, #32]
 80023b2:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_ADC_MspInit+0xf8>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023b8:	bf00      	nop
 80023ba:	3728      	adds	r7, #40	; 0x28
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40012400 	.word	0x40012400
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40010800 	.word	0x40010800
 80023cc:	40010c00 	.word	0x40010c00
 80023d0:	200002d8 	.word	0x200002d8
 80023d4:	40020008 	.word	0x40020008

080023d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a29      	ldr	r2, [pc, #164]	; (8002498 <HAL_CAN_MspInit+0xc0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d14b      	bne.n	8002490 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023f8:	4b28      	ldr	r3, [pc, #160]	; (800249c <HAL_CAN_MspInit+0xc4>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <HAL_CAN_MspInit+0xc4>)
 80023fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002402:	61d3      	str	r3, [r2, #28]
 8002404:	4b25      	ldr	r3, [pc, #148]	; (800249c <HAL_CAN_MspInit+0xc4>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <HAL_CAN_MspInit+0xc4>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a21      	ldr	r2, [pc, #132]	; (800249c <HAL_CAN_MspInit+0xc4>)
 8002416:	f043 0308 	orr.w	r3, r3, #8
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b1f      	ldr	r3, [pc, #124]	; (800249c <HAL_CAN_MspInit+0xc4>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4818      	ldr	r0, [pc, #96]	; (80024a0 <HAL_CAN_MspInit+0xc8>)
 800243e:	f002 f983 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4812      	ldr	r0, [pc, #72]	; (80024a0 <HAL_CAN_MspInit+0xc8>)
 8002458:	f002 f976 	bl	8004748 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_CAN_MspInit+0xcc>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <HAL_CAN_MspInit+0xcc>)
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2014      	movs	r0, #20
 8002486:	f001 ff90 	bl	80043aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800248a:	2014      	movs	r0, #20
 800248c:	f001 ffa9 	bl	80043e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002490:	bf00      	nop
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40006400 	.word	0x40006400
 800249c:	40021000 	.word	0x40021000
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	40010000 	.word	0x40010000

080024a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HAL_I2C_MspInit+0x70>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d123      	bne.n	8002510 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_I2C_MspInit+0x74>)
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_I2C_MspInit+0x74>)
 80024ce:	f043 0308 	orr.w	r3, r3, #8
 80024d2:	6193      	str	r3, [r2, #24]
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_I2C_MspInit+0x74>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024e4:	2312      	movs	r3, #18
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024e8:	2303      	movs	r3, #3
 80024ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4619      	mov	r1, r3
 80024f2:	480b      	ldr	r0, [pc, #44]	; (8002520 <HAL_I2C_MspInit+0x78>)
 80024f4:	f002 f928 	bl	8004748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_I2C_MspInit+0x74>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_I2C_MspInit+0x74>)
 80024fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002502:	61d3      	str	r3, [r2, #28]
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_I2C_MspInit+0x74>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	3720      	adds	r7, #32
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40005400 	.word	0x40005400
 800251c:	40021000 	.word	0x40021000
 8002520:	40010c00 	.word	0x40010c00

08002524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a20      	ldr	r2, [pc, #128]	; (80025c0 <HAL_SPI_MspInit+0x9c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d139      	bne.n	80025b8 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 800254a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254e:	61d3      	str	r3, [r2, #28]
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6193      	str	r3, [r2, #24]
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_SPI_MspInit+0xa0>)
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002574:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002578:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800257e:	2303      	movs	r3, #3
 8002580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4619      	mov	r1, r3
 8002588:	480f      	ldr	r0, [pc, #60]	; (80025c8 <HAL_SPI_MspInit+0xa4>)
 800258a:	f002 f8dd 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800258e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4619      	mov	r1, r3
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <HAL_SPI_MspInit+0xa4>)
 80025a4:	f002 f8d0 	bl	8004748 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2024      	movs	r0, #36	; 0x24
 80025ae:	f001 fefc 	bl	80043aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80025b2:	2024      	movs	r0, #36	; 0x24
 80025b4:	f001 ff15 	bl	80043e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40003800 	.word	0x40003800
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010c00 	.word	0x40010c00

080025cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <HAL_TIM_Base_MspInit+0x44>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d113      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	61d3      	str	r3, [r2, #28]
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_TIM_Base_MspInit+0x48>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	201d      	movs	r0, #29
 80025fc:	f001 fed5 	bl	80043aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002600:	201d      	movs	r0, #29
 8002602:	f001 feee 	bl	80043e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40000400 	.word	0x40000400
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <HAL_UART_MspInit+0x9c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d139      	bne.n	80026ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a1e      	ldr	r2, [pc, #120]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 800263e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <HAL_UART_MspInit+0xa0>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800266c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266e:	2302      	movs	r3, #2
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002672:	2303      	movs	r3, #3
 8002674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4619      	mov	r1, r3
 800267c:	480f      	ldr	r0, [pc, #60]	; (80026bc <HAL_UART_MspInit+0xa4>)
 800267e:	f002 f863 	bl	8004748 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	4809      	ldr	r0, [pc, #36]	; (80026bc <HAL_UART_MspInit+0xa4>)
 8002698:	f002 f856 	bl	8004748 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	2025      	movs	r0, #37	; 0x25
 80026a2:	f001 fe82 	bl	80043aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026a6:	2025      	movs	r0, #37	; 0x25
 80026a8:	f001 fe9b 	bl	80043e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013800 	.word	0x40013800
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40010800 	.word	0x40010800

080026c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <NMI_Handler+0x4>

080026c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <MemManage_Handler+0x4>

080026d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d6:	e7fe      	b.n	80026d6 <BusFault_Handler+0x4>

080026d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026dc:	e7fe      	b.n	80026dc <UsageFault_Handler+0x4>

080026de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026ee:	bf00      	nop
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr

080026f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002706:	f000 fb27 	bl	8002d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800270a:	bf00      	nop
 800270c:	bd80      	pop	{r7, pc}

0800270e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002712:	2001      	movs	r0, #1
 8002714:	f002 f9e4 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}

0800271c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002720:	2002      	movs	r0, #2
 8002722:	f002 f9dd 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002732:	f001 fb34 	bl	8003d9e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000031c 	.word	0x2000031c

08002740 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002744:	2020      	movs	r0, #32
 8002746:	f002 f9cb 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800274a:	2080      	movs	r0, #128	; 0x80
 800274c:	f002 f9c8 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}

08002754 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <TIM3_IRQHandler+0x10>)
 800275a:	f004 f94b 	bl	80069f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200003f0 	.word	0x200003f0

08002768 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <SPI2_IRQHandler+0x10>)
 800276e:	f003 fef5 	bl	800655c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000398 	.word	0x20000398

0800277c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002780:	4802      	ldr	r0, [pc, #8]	; (800278c <USART1_IRQHandler+0x10>)
 8002782:	f004 fd6f 	bl	8007264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000438 	.word	0x20000438

08002790 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002794:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002798:	f002 f9a2 	bl	8004ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
	return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <_kill>:

int _kill(int pid, int sig)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027b8:	f005 f94c 	bl	8007a54 <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	2216      	movs	r2, #22
 80027c0:	601a      	str	r2, [r3, #0]
	return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <_exit>:

void _exit (int status)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027d6:	f04f 31ff 	mov.w	r1, #4294967295
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffe7 	bl	80027ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80027e0:	e7fe      	b.n	80027e0 <_exit+0x12>

080027e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e00a      	b.n	800280a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027f4:	f3af 8000 	nop.w
 80027f8:	4601      	mov	r1, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbf0      	blt.n	80027f4 <_read+0x12>
	}

return len;
 8002812:	687b      	ldr	r3, [r7, #4]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e009      	b.n	8002842 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fd0a 	bl	8002250 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	dbf1      	blt.n	800282e <_write+0x12>
	}
	return len;
 800284a:	687b      	ldr	r3, [r7, #4]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_close>:

int _close(int file)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	return -1;
 800285c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800287a:	605a      	str	r2, [r3, #4]
	return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <_isatty>:

int _isatty(int file)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
	return 1;
 8002890:	2301      	movs	r3, #1
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
	return 0;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <_sbrk+0x5c>)
 80028be:	4b15      	ldr	r3, [pc, #84]	; (8002914 <_sbrk+0x60>)
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <_sbrk+0x64>)
 80028d2:	4a12      	ldr	r2, [pc, #72]	; (800291c <_sbrk+0x68>)
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <_sbrk+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4413      	add	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d207      	bcs.n	80028f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028e4:	f005 f8b6 	bl	8007a54 <__errno>
 80028e8:	4603      	mov	r3, r0
 80028ea:	220c      	movs	r2, #12
 80028ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
 80028f2:	e009      	b.n	8002908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <_sbrk+0x64>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <_sbrk+0x64>)
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <_sbrk+0x64>)
 8002904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20005000 	.word	0x20005000
 8002914:	00000400 	.word	0x00000400
 8002918:	2000047c 	.word	0x2000047c
 800291c:	200004f8 	.word	0x200004f8

08002920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <user_main>:
  * 		including the super loop.
  * 		Should be called once after all auto-gererated init functions in main()
  * @param  None
  * @retval None
  */
void user_main(){
 800292c:	b5b0      	push	{r4, r5, r7, lr}
 800292e:	b092      	sub	sp, #72	; 0x48
 8002930:	af00      	add	r7, sp, #0
	 /*ADC1 DMA mode Start*/
	 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_value,6);
 8002932:	2206      	movs	r2, #6
 8002934:	4973      	ldr	r1, [pc, #460]	; (8002b04 <user_main+0x1d8>)
 8002936:	4874      	ldr	r0, [pc, #464]	; (8002b08 <user_main+0x1dc>)
 8002938:	f000 fb26 	bl	8002f88 <HAL_ADC_Start_DMA>

	 /*timer3 interrupt mode start, used in hall sensors calculations*/
	 HAL_TIM_Base_Start_IT(&htim3);
 800293c:	4873      	ldr	r0, [pc, #460]	; (8002b0c <user_main+0x1e0>)
 800293e:	f004 f807 	bl	8006950 <HAL_TIM_Base_Start_IT>

	/*CAN receive filter configuration "for testing purposes"*/
	  CAN_FilterTypeDef canfilterconfig = {
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <user_main+0x1e4>)
 8002944:	1d3c      	adds	r4, r7, #4
 8002946:	461d      	mov	r5, r3
 8002948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002950:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002954:	e884 0003 	stmia.w	r4, {r0, r1}
			  .FilterIdHigh = 0x333<<5,
			  .FilterIdLow = 0,
			  .FilterMaskIdHigh = 0x333<<5,
			  .FilterMaskIdLow = 0x0000
	  };
	  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!=HAL_OK){
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	4619      	mov	r1, r3
 800295c:	486d      	ldr	r0, [pc, #436]	; (8002b14 <user_main+0x1e8>)
 800295e:	f000 ff01 	bl	8003764 <HAL_CAN_ConfigFilter>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <user_main+0x40>
		  Error_Handler();
 8002968:	f7ff fc62 	bl	8002230 <Error_Handler>
	  }
	 /*turn on receiving interrupt, then starts the CAN module*/
	  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800296c:	2102      	movs	r1, #2
 800296e:	4869      	ldr	r0, [pc, #420]	; (8002b14 <user_main+0x1e8>)
 8002970:	f001 f9f0 	bl	8003d54 <HAL_CAN_ActivateNotification>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <user_main+0x52>
		  Error_Handler();
 800297a:	f7ff fc59 	bl	8002230 <Error_Handler>
	  }
	  HAL_CAN_Start(&hcan);
 800297e:	4865      	ldr	r0, [pc, #404]	; (8002b14 <user_main+0x1e8>)
 8002980:	f000 ffb9 	bl	80038f6 <HAL_CAN_Start>

	  /*super loop*/
	  while(1){
		  /*APPS and BSE raw value obtaining and test output */
		  uint32_t APPS1test = ADC_value[ADC_DMA_ARRAY_RANK_APPS1];
 8002984:	4b5f      	ldr	r3, [pc, #380]	; (8002b04 <user_main+0x1d8>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	647b      	str	r3, [r7, #68]	; 0x44
		  uint32_t APPS2test = ADC_value[ADC_DMA_ARRAY_RANK_APPS2];
 800298a:	4b5e      	ldr	r3, [pc, #376]	; (8002b04 <user_main+0x1d8>)
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
		  uint32_t BSEtest = ADC_value[ADC_DMA_ARRAY_RANK_BSE];
 8002990:	4b5c      	ldr	r3, [pc, #368]	; (8002b04 <user_main+0x1d8>)
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
		  /*the pinsare connected to NO pin on the switch, which is connected to Gnd, and the switch is pressed when
		   *the pedals are at the fully extended state. So, The boolean state of the pin matches whether the pedal
		   *is pressed or not.*/
		  uint8_t APPSmicro = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8002996:	2102      	movs	r1, #2
 8002998:	485f      	ldr	r0, [pc, #380]	; (8002b18 <user_main+0x1ec>)
 800299a:	f002 f859 	bl	8004a50 <HAL_GPIO_ReadPin>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  uint8_t BSEmicro = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80029a4:	2101      	movs	r1, #1
 80029a6:	485c      	ldr	r0, [pc, #368]	; (8002b18 <user_main+0x1ec>)
 80029a8:	f002 f852 	bl	8004a50 <HAL_GPIO_ReadPin>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  /*APPS&BSE value preprocessing*/
		  uint8_t APPS1Value = APPS1_transfer_function(APPS1test);
 80029b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80029b4:	f7fe fd4c 	bl	8001450 <APPS1_transfer_function>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		  uint8_t APPS2Value = APPS2_transfer_function(APPS2test);
 80029be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80029c0:	f7fe fe32 	bl	8001628 <APPS2_transfer_function>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		  uint8_t BSEValue = BSE_transfer_function(BSEtest);
 80029ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80029cc:	f7fe ff18 	bl	8001800 <BSE_transfer_function>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  /*wheel speed output*/
		  uint16_t wheel_speedL = wheel_speed_transfer_function(hall_counter_result[0]);
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <user_main+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f8c8 	bl	8001b70 <wheel_speed_transfer_function>
 80029e0:	4603      	mov	r3, r0
 80029e2:	86bb      	strh	r3, [r7, #52]	; 0x34
		  uint16_t wheel_speedR = wheel_speed_transfer_function(hall_counter_result[1]);
 80029e4:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <user_main+0x1f0>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff f8c1 	bl	8001b70 <wheel_speed_transfer_function>
 80029ee:	4603      	mov	r3, r0
 80029f0:	867b      	strh	r3, [r7, #50]	; 0x32

		  /*temp sensor MLX90614 read API */
		  uint8_t temp_L1 = tire_temp_transfer_function( MLX90614_ReadReg(0x5A,0x08,0) );
 80029f2:	2200      	movs	r2, #0
 80029f4:	2108      	movs	r1, #8
 80029f6:	205a      	movs	r0, #90	; 0x5a
 80029f8:	f7fe fbb8 	bl	800116c <MLX90614_ReadReg>
 80029fc:	4603      	mov	r3, r0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff f8ea 	bl	8001bd8 <tire_temp_transfer_function>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		 // printf("%.2f C \r\n",MLX90614_ReadReg(0x5A,0x07,0)*0.02-273.15);
		 // printf("%.2f C \r\n",MLX90614_ReadReg(0x5A,0x08,0)*0.02-273.15);
		 // printf("%x\r\n",MLX90614_ReadReg(0x5A,0x08,0));

		  /*grabbing the suspension travel data*/
		  uint8_t travel_L = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_LTRAVEL]);
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	; (8002b04 <user_main+0x1d8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff f832 	bl	8001a78 <suspension_travel_transfer_function>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		  uint8_t travel_R = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_RTRAVEL]);
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <user_main+0x1d8>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f82a 	bl	8001a78 <suspension_travel_transfer_function>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		  /*grabbing the oil pressure sensor data*/
		  uint8_t oil_pressure = oil_pressure_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_OILPRESSURE]);
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <user_main+0x1d8>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe ffd6 	bl	80019e0 <oil_pressure_transfer_function>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

		  /*grab the absolute encoder data TODO: needs to be tested*/
		  uint16_t amt22_pos = getPositionSPI(&hspi2, GPIOC, GPIO_PIN_14, 12);
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <user_main+0x1f4>)
 8002a42:	4838      	ldr	r0, [pc, #224]	; (8002b24 <user_main+0x1f8>)
 8002a44:	f7fe fc7a 	bl	800133c <getPositionSPI>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	85bb      	strh	r3, [r7, #44]	; 0x2c

		  /*loading data into message array*/
		  CAN_TxData_1[0] = (uint8_t)(wheel_speedL>>8);
 8002a4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b34      	ldr	r3, [pc, #208]	; (8002b28 <user_main+0x1fc>)
 8002a56:	701a      	strb	r2, [r3, #0]
		  CAN_TxData_1[1] = (uint8_t)(wheel_speedL & 0x00FF);
 8002a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b32      	ldr	r3, [pc, #200]	; (8002b28 <user_main+0x1fc>)
 8002a5e:	705a      	strb	r2, [r3, #1]
		  CAN_TxData_1[2] = (uint8_t)(wheel_speedR>>8);
 8002a60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b2f      	ldr	r3, [pc, #188]	; (8002b28 <user_main+0x1fc>)
 8002a6a:	709a      	strb	r2, [r3, #2]
		  CAN_TxData_1[3] = (uint8_t)(wheel_speedR & 0x00FF);
 8002a6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <user_main+0x1fc>)
 8002a72:	70da      	strb	r2, [r3, #3]
		  CAN_TxData_1[4] = temp_L1;
 8002a74:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <user_main+0x1fc>)
 8002a76:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002a7a:	7113      	strb	r3, [r2, #4]

		  CAN_TxData_2[0] = BSEValue;
 8002a7c:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <user_main+0x200>)
 8002a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a82:	7013      	strb	r3, [r2, #0]
		  CAN_TxData_2[1] = APPS1Value;
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <user_main+0x200>)
 8002a86:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002a8a:	7053      	strb	r3, [r2, #1]
		  CAN_TxData_2[2] = APPS2Value;
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <user_main+0x200>)
 8002a8e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002a92:	7093      	strb	r3, [r2, #2]
		  CAN_TxData_2[3] = (uint8_t)(amt22_pos>>4);
 8002a94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b23      	ldr	r3, [pc, #140]	; (8002b2c <user_main+0x200>)
 8002a9e:	70da      	strb	r2, [r3, #3]
		  CAN_TxData_2[4] = travel_L;
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <user_main+0x200>)
 8002aa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aa6:	7113      	strb	r3, [r2, #4]
		  CAN_TxData_2[5] = travel_R;
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <user_main+0x200>)
 8002aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aae:	7153      	strb	r3, [r2, #5]
		  CAN_TxData_2[6] = oil_pressure;
 8002ab0:	4a1e      	ldr	r2, [pc, #120]	; (8002b2c <user_main+0x200>)
 8002ab2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ab6:	7193      	strb	r3, [r2, #6]
		  CAN_TxData_2[7] = (APPSmicro|(BSEmicro<<1)); //bit0 contains APPS switch data, bit1 contains BSE switch data
 8002ab8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	b25a      	sxtb	r2, r3
 8002ac0:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <user_main+0x200>)
 8002acc:	71da      	strb	r2, [r3, #7]
		  /*the CAN transmit HAL API*/
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader1,CAN_TxData_1,&TxMailbox1);
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <user_main+0x204>)
 8002ad0:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <user_main+0x1fc>)
 8002ad2:	4918      	ldr	r1, [pc, #96]	; (8002b34 <user_main+0x208>)
 8002ad4:	480f      	ldr	r0, [pc, #60]	; (8002b14 <user_main+0x1e8>)
 8002ad6:	f000 ff52 	bl	800397e <HAL_CAN_AddTxMessage>
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader2,CAN_TxData_2,&TxMailbox2);
 8002ada:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <user_main+0x20c>)
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <user_main+0x200>)
 8002ade:	4917      	ldr	r1, [pc, #92]	; (8002b3c <user_main+0x210>)
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <user_main+0x1e8>)
 8002ae2:	f000 ff4c 	bl	800397e <HAL_CAN_AddTxMessage>

		  if(HAL_CAN_GetError(&hcan)==HAL_CAN_ERROR_BOF){
 8002ae6:	480b      	ldr	r0, [pc, #44]	; (8002b14 <user_main+0x1e8>)
 8002ae8:	f001 fb7c 	bl	80041e4 <HAL_CAN_GetError>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d104      	bne.n	8002afc <user_main+0x1d0>
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002af2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002af6:	480a      	ldr	r0, [pc, #40]	; (8002b20 <user_main+0x1f4>)
 8002af8:	f001 ffd9 	bl	8004aae <HAL_GPIO_TogglePin>
		  printf("brake oil pressure: %d\r\n",oil_pressure);
		  printf("left wheel speed is %d rpm\n",wheel_speedL);
		  printf("right wheel speed is %d rpm\n",wheel_speedR);
#endif
		  /*superloop execution interval*/
		  HAL_Delay(20);
 8002afc:	2014      	movs	r0, #20
 8002afe:	f000 f947 	bl	8002d90 <HAL_Delay>
	  while(1){
 8002b02:	e73f      	b.n	8002984 <user_main+0x58>
 8002b04:	20000480 	.word	0x20000480
 8002b08:	200002a8 	.word	0x200002a8
 8002b0c:	200003f0 	.word	0x200003f0
 8002b10:	0800abdc 	.word	0x0800abdc
 8002b14:	2000031c 	.word	0x2000031c
 8002b18:	40010800 	.word	0x40010800
 8002b1c:	200004a0 	.word	0x200004a0
 8002b20:	40011000 	.word	0x40011000
 8002b24:	20000398 	.word	0x20000398
 8002b28:	200004a8 	.word	0x200004a8
 8002b2c:	200004b0 	.word	0x200004b0
 8002b30:	200004bc 	.word	0x200004bc
 8002b34:	20000004 	.word	0x20000004
 8002b38:	200004b8 	.word	0x200004b8
 8002b3c:	2000001c 	.word	0x2000001c

08002b40 <HAL_GPIO_EXTI_Callback>:
  * @brief  User defined EXTI interrupt callback function, namely EXTI ISR.
  * 		Shall only be called by HAL interrupt handlers
  * @param  GPIO_PIN: the GPIO pin that generated the interrupt.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_PIN){
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b50:	d023      	beq.n	8002b9a <HAL_GPIO_EXTI_Callback+0x5a>
 8002b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b56:	dc24      	bgt.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
 8002b58:	2b80      	cmp	r3, #128	; 0x80
 8002b5a:	d010      	beq.n	8002b7e <HAL_GPIO_EXTI_Callback+0x3e>
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	dc20      	bgt.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d006      	beq.n	8002b72 <HAL_GPIO_EXTI_Callback+0x32>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	dc1c      	bgt.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d00e      	beq.n	8002b8a <HAL_GPIO_EXTI_Callback+0x4a>
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d010      	beq.n	8002b92 <HAL_GPIO_EXTI_Callback+0x52>
 8002b70:	e017      	b.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_5: /*right wheel hall sensor*/
			hall_counter[1]++;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	3301      	adds	r3, #1
 8002b78:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b7a:	6053      	str	r3, [r2, #4]
#ifdef PRINTF_TEST_OUTPUT
			printf("EXTI5:%d\n",hall_counter[1]);
#endif
			break;
 8002b7c:	e011      	b.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_7: /*left wheel hall sensor*/
			hall_counter[0]++;
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b86:	6013      	str	r3, [r2, #0]
#ifdef PRINTF_TEST_OUTPUT
			printf("EXTI7:%d\n",hall_counter[0]);
#endif
			break;
 8002b88:	e00b      	b.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_0:
			printf("EXTI0\n");
 8002b8a:	480b      	ldr	r0, [pc, #44]	; (8002bb8 <HAL_GPIO_EXTI_Callback+0x78>)
 8002b8c:	f005 fc62 	bl	8008454 <puts>
			break;
 8002b90:	e007      	b.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_1:
			printf("EXTI1\n");
 8002b92:	480a      	ldr	r0, [pc, #40]	; (8002bbc <HAL_GPIO_EXTI_Callback+0x7c>)
 8002b94:	f005 fc5e 	bl	8008454 <puts>
			break;
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_15:
			printf("EXTI15\n");
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b9c:	f005 fc5a 	bl	8008454 <puts>
			break;
 8002ba0:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba6:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <HAL_GPIO_EXTI_Callback+0x84>)
 8002ba8:	f001 ff81 	bl	8004aae <HAL_GPIO_TogglePin>
	return;
 8002bac:	bf00      	nop
}
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20000498 	.word	0x20000498
 8002bb8:	0800ac04 	.word	0x0800ac04
 8002bbc:	0800ac0c 	.word	0x0800ac0c
 8002bc0:	0800ac14 	.word	0x0800ac14
 8002bc4:	40011000 	.word	0x40011000

08002bc8 <HAL_TIM_PeriodElapsedCallback>:
  * @note 	For timer3, which should update in a fixed interval defined in CubeMX, we grab
  * 		the current hall sensor counts, then reset it.
  * @param  htim: the timer that generated the interrupt.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d118      	bne.n	8002c0a <HAL_TIM_PeriodElapsedCallback+0x42>
		int i=0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
		for(i=0;i<sizeof(hall_counter)/sizeof(hall_counter[0]);i++){
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e00f      	b.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x3a>
			hall_counter_result[i]=hall_counter[i];
 8002be2:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bea:	490c      	ldr	r1, [pc, #48]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			hall_counter[i]=0;
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0;i<sizeof(hall_counter)/sizeof(hall_counter[0]);i++){
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d9ec      	bls.n	8002be2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
	}
	return;
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
}
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr
 8002c14:	200003f0 	.word	0x200003f0
 8002c18:	20000498 	.word	0x20000498
 8002c1c:	200004a0 	.word	0x200004a0

08002c20 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * 		Shall only be called by HAL interrupt handlers
  * @param  hcan: the can handle structure that received the message.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK){
 8002c28:	4b12      	ldr	r3, [pc, #72]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002c2a:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 ff7f 	bl	8003b32 <HAL_CAN_GetRxMessage>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 8002c3a:	f7ff faf9 	bl	8002230 <Error_Handler>
  }
   if (CAN_RxData[0]==0x01&&CAN_RxData[1]==0x02&&CAN_RxData[2]==0x03&&CAN_RxData[3]==0x04){
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d111      	bne.n	8002c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002c46:	4b0b      	ldr	r3, [pc, #44]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002c48:	785b      	ldrb	r3, [r3, #1]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d10d      	bne.n	8002c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002c50:	789b      	ldrb	r3, [r3, #2]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d109      	bne.n	8002c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002c58:	78db      	ldrb	r3, [r3, #3]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d105      	bne.n	8002c6a <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8002c64:	f001 ff23 	bl	8004aae <HAL_GPIO_TogglePin>
  }

   return;
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
}
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200004dc 	.word	0x200004dc
 8002c78:	200004c0 	.word	0x200004c0
 8002c7c:	40011000 	.word	0x40011000

08002c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c80:	480c      	ldr	r0, [pc, #48]	; (8002cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c82:	490d      	ldr	r1, [pc, #52]	; (8002cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c88:	e002      	b.n	8002c90 <LoopCopyDataInit>

08002c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8e:	3304      	adds	r3, #4

08002c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c94:	d3f9      	bcc.n	8002c8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c98:	4c0a      	ldr	r4, [pc, #40]	; (8002cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c9c:	e001      	b.n	8002ca2 <LoopFillZerobss>

08002c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca0:	3204      	adds	r2, #4

08002ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca4:	d3fb      	bcc.n	8002c9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ca6:	f7ff fe3b 	bl	8002920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002caa:	f004 fed9 	bl	8007a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cae:	f7fe ffe1 	bl	8001c74 <main>
  bx lr
 8002cb2:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002cbc:	0800b124 	.word	0x0800b124
  ldr r2, =_sbss
 8002cc0:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002cc4:	200004f4 	.word	0x200004f4

08002cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cc8:	e7fe      	b.n	8002cc8 <ADC1_2_IRQHandler>
	...

08002ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_Init+0x28>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_Init+0x28>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cdc:	2003      	movs	r0, #3
 8002cde:	f001 fb59 	bl	8004394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce2:	200f      	movs	r0, #15
 8002ce4:	f000 f808 	bl	8002cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce8:	f7ff fac4 	bl	8002274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40022000 	.word	0x40022000

08002cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x54>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <HAL_InitTick+0x58>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fb71 	bl	80043fe <HAL_SYSTICK_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00e      	b.n	8002d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b0f      	cmp	r3, #15
 8002d2a:	d80a      	bhi.n	8002d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f001 fb39 	bl	80043aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d38:	4a06      	ldr	r2, [pc, #24]	; (8002d54 <HAL_InitTick+0x5c>)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e000      	b.n	8002d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	20000038 	.word	0x20000038
 8002d54:	20000034 	.word	0x20000034

08002d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_IncTick+0x1c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_IncTick+0x20>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <HAL_IncTick+0x20>)
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr
 8002d74:	20000038 	.word	0x20000038
 8002d78:	200004e0 	.word	0x200004e0

08002d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_GetTick+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	200004e0 	.word	0x200004e0

08002d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff fff0 	bl	8002d7c <HAL_GetTick>
 8002d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d005      	beq.n	8002db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002daa:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <HAL_Delay+0x44>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4413      	add	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db6:	bf00      	nop
 8002db8:	f7ff ffe0 	bl	8002d7c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d8f7      	bhi.n	8002db8 <HAL_Delay+0x28>
  {
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000038 	.word	0x20000038

08002dd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0be      	b.n	8002f78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff fa5e 	bl	80022d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 faff 	bl	8003420 <ADC_ConversionStop_Disable>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8099 	bne.w	8002f66 <HAL_ADC_Init+0x18e>
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f040 8095 	bne.w	8002f66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e44:	f023 0302 	bic.w	r3, r3, #2
 8002e48:	f043 0202 	orr.w	r2, r3, #2
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7b1b      	ldrb	r3, [r3, #12]
 8002e5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e70:	d003      	beq.n	8002e7a <HAL_ADC_Init+0xa2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d102      	bne.n	8002e80 <HAL_ADC_Init+0xa8>
 8002e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e7e:	e000      	b.n	8002e82 <HAL_ADC_Init+0xaa>
 8002e80:	2300      	movs	r3, #0
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7d1b      	ldrb	r3, [r3, #20]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d119      	bne.n	8002ec4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	7b1b      	ldrb	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d109      	bne.n	8002eac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	035a      	lsls	r2, r3, #13
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	f043 0220 	orr.w	r2, r3, #32
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	f043 0201 	orr.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_ADC_Init+0x1a8>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef4:	d003      	beq.n	8002efe <HAL_ADC_Init+0x126>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	051b      	lsls	r3, r3, #20
 8002f06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_ADC_Init+0x1ac>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f36:	f023 0303 	bic.w	r3, r3, #3
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f42:	e018      	b.n	8002f76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	f023 0312 	bic.w	r3, r3, #18
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f64:	e007      	b.n	8002f76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	ffe1f7fd 	.word	0xffe1f7fd
 8002f84:	ff1f0efe 	.word	0xff1f0efe

08002f88 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a64      	ldr	r2, [pc, #400]	; (8003130 <HAL_ADC_Start_DMA+0x1a8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <HAL_ADC_Start_DMA+0x24>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a63      	ldr	r2, [pc, #396]	; (8003134 <HAL_ADC_Start_DMA+0x1ac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d106      	bne.n	8002fba <HAL_ADC_Start_DMA+0x32>
 8002fac:	4b60      	ldr	r3, [pc, #384]	; (8003130 <HAL_ADC_Start_DMA+0x1a8>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f040 80b3 	bne.w	8003120 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_Start_DMA+0x40>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0ae      	b.n	8003126 <HAL_ADC_Start_DMA+0x19e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f9cb 	bl	800336c <ADC_Enable>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002fda:	7dfb      	ldrb	r3, [r7, #23]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f040 809a 	bne.w	8003116 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fea:	f023 0301 	bic.w	r3, r3, #1
 8002fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a4e      	ldr	r2, [pc, #312]	; (8003134 <HAL_ADC_Start_DMA+0x1ac>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_Start_DMA+0x84>
 8003000:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_ADC_Start_DMA+0x1a8>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d115      	bne.n	8003038 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003022:	2b00      	cmp	r3, #0
 8003024:	d026      	beq.n	8003074 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800302e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003036:	e01d      	b.n	8003074 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a39      	ldr	r2, [pc, #228]	; (8003130 <HAL_ADC_Start_DMA+0x1a8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_ADC_Start_DMA+0xd0>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a38      	ldr	r2, [pc, #224]	; (8003134 <HAL_ADC_Start_DMA+0x1ac>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d10d      	bne.n	8003074 <HAL_ADC_Start_DMA+0xec>
 8003058:	4b35      	ldr	r3, [pc, #212]	; (8003130 <HAL_ADC_Start_DMA+0x1a8>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800306c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	f023 0206 	bic.w	r2, r3, #6
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c
 800308c:	e002      	b.n	8003094 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <HAL_ADC_Start_DMA+0x1b0>)
 80030a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a24      	ldr	r2, [pc, #144]	; (800313c <HAL_ADC_Start_DMA+0x1b4>)
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_ADC_Start_DMA+0x1b8>)
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0202 	mvn.w	r2, #2
 80030bc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030cc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a18      	ldr	r0, [r3, #32]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	334c      	adds	r3, #76	; 0x4c
 80030d8:	4619      	mov	r1, r3
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f001 f9f5 	bl	80044cc <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030ec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030f0:	d108      	bne.n	8003104 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003100:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003102:	e00f      	b.n	8003124 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003112:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003114:	e006      	b.n	8003124 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800311e:	e001      	b.n	8003124 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40012400 	.word	0x40012400
 8003134:	40012800 	.word	0x40012800
 8003138:	080034a3 	.word	0x080034a3
 800313c:	0800351f 	.word	0x0800351f
 8003140:	0800353b 	.word	0x0800353b

08003144 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
	...

0800317c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_ConfigChannel+0x20>
 8003198:	2302      	movs	r3, #2
 800319a:	e0dc      	b.n	8003356 <HAL_ADC_ConfigChannel+0x1da>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b06      	cmp	r3, #6
 80031aa:	d81c      	bhi.n	80031e6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	3b05      	subs	r3, #5
 80031be:	221f      	movs	r2, #31
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	4019      	ands	r1, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	3b05      	subs	r3, #5
 80031d8:	fa00 f203 	lsl.w	r2, r0, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34
 80031e4:	e03c      	b.n	8003260 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b0c      	cmp	r3, #12
 80031ec:	d81c      	bhi.n	8003228 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	3b23      	subs	r3, #35	; 0x23
 8003200:	221f      	movs	r2, #31
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	4019      	ands	r1, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4413      	add	r3, r2
 8003218:	3b23      	subs	r3, #35	; 0x23
 800321a:	fa00 f203 	lsl.w	r2, r0, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
 8003226:	e01b      	b.n	8003260 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b41      	subs	r3, #65	; 0x41
 800323a:	221f      	movs	r2, #31
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	4019      	ands	r1, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b41      	subs	r3, #65	; 0x41
 8003254:	fa00 f203 	lsl.w	r2, r0, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b09      	cmp	r3, #9
 8003266:	d91c      	bls.n	80032a2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4413      	add	r3, r2
 8003278:	3b1e      	subs	r3, #30
 800327a:	2207      	movs	r2, #7
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	4019      	ands	r1, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6898      	ldr	r0, [r3, #8]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4413      	add	r3, r2
 8003292:	3b1e      	subs	r3, #30
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	e019      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6919      	ldr	r1, [r3, #16]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	2207      	movs	r2, #7
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	4019      	ands	r1, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	6898      	ldr	r0, [r3, #8]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d003      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032e2:	2b11      	cmp	r3, #17
 80032e4:	d132      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_ADC_ConfigChannel+0x1e4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d125      	bne.n	800333c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d126      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800330c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b10      	cmp	r3, #16
 8003314:	d11a      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_ADC_ConfigChannel+0x1e8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a13      	ldr	r2, [pc, #76]	; (8003368 <HAL_ADC_ConfigChannel+0x1ec>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	0c9a      	lsrs	r2, r3, #18
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800332c:	e002      	b.n	8003334 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	3b01      	subs	r3, #1
 8003332:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f9      	bne.n	800332e <HAL_ADC_ConfigChannel+0x1b2>
 800333a:	e007      	b.n	800334c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40012400 	.word	0x40012400
 8003364:	20000000 	.word	0x20000000
 8003368:	431bde83 	.word	0x431bde83

0800336c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d040      	beq.n	800340c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <ADC_Enable+0xac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <ADC_Enable+0xb0>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	0c9b      	lsrs	r3, r3, #18
 80033a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033a8:	e002      	b.n	80033b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f9      	bne.n	80033aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033b6:	f7ff fce1 	bl	8002d7c <HAL_GetTick>
 80033ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033bc:	e01f      	b.n	80033fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033be:	f7ff fcdd 	bl	8002d7c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d918      	bls.n	80033fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d011      	beq.n	80033fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f043 0210 	orr.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e007      	b.n	800340e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d1d8      	bne.n	80033be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83

08003420 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d12e      	bne.n	8003498 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800344a:	f7ff fc97 	bl	8002d7c <HAL_GetTick>
 800344e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003450:	e01b      	b.n	800348a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003452:	f7ff fc93 	bl	8002d7c <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d914      	bls.n	800348a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10d      	bne.n	800348a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	f043 0210 	orr.w	r2, r3, #16
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347e:	f043 0201 	orr.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e007      	b.n	800349a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d0dc      	beq.n	8003452 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d127      	bne.n	800350c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034d6:	d115      	bne.n	8003504 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe1d 	bl	8003144 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800350a:	e004      	b.n	8003516 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
}
 8003516:	bf00      	nop
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b084      	sub	sp, #16
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff fe12 	bl	8003156 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f043 0204 	orr.w	r2, r3, #4
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fe01 	bl	8003168 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e0ed      	b.n	800375c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fe ff23 	bl	80023d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a2:	f7ff fbeb 	bl	8002d7c <HAL_GetTick>
 80035a6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035a8:	e012      	b.n	80035d0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035aa:	f7ff fbe7 	bl	8002d7c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b0a      	cmp	r3, #10
 80035b6:	d90b      	bls.n	80035d0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2205      	movs	r2, #5
 80035c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0c5      	b.n	800375c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0e5      	beq.n	80035aa <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ee:	f7ff fbc5 	bl	8002d7c <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035f4:	e012      	b.n	800361c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035f6:	f7ff fbc1 	bl	8002d7c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b0a      	cmp	r3, #10
 8003602:	d90b      	bls.n	800361c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2205      	movs	r2, #5
 8003614:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e09f      	b.n	800375c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e5      	bne.n	80035f6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e1b      	ldrb	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7e5b      	ldrb	r3, [r3, #25]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e007      	b.n	800367e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7e9b      	ldrb	r3, [r3, #26]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0220 	orr.w	r2, r2, #32
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e007      	b.n	80036a8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0220 	bic.w	r2, r2, #32
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7edb      	ldrb	r3, [r3, #27]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0210 	bic.w	r2, r2, #16
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e007      	b.n	80036d2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0210 	orr.w	r2, r2, #16
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f1b      	ldrb	r3, [r3, #28]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0208 	orr.w	r2, r2, #8
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0208 	bic.w	r2, r2, #8
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7f5b      	ldrb	r3, [r3, #29]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d108      	bne.n	8003716 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0204 	orr.w	r2, r2, #4
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e007      	b.n	8003726 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0204 	bic.w	r2, r2, #4
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	ea42 0103 	orr.w	r1, r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	1e5a      	subs	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800377a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d003      	beq.n	800378a <HAL_CAN_ConfigFilter+0x26>
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b02      	cmp	r3, #2
 8003786:	f040 80aa 	bne.w	80038de <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2201      	movs	r2, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	401a      	ands	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d123      	bne.n	800380c <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	43db      	mvns	r3, r3
 80037ce:	401a      	ands	r2, r3
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3248      	adds	r2, #72	; 0x48
 80037ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003800:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	3348      	adds	r3, #72	; 0x48
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d122      	bne.n	800385a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	431a      	orrs	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003834:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	3248      	adds	r2, #72	; 0x48
 800383a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800384e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	3348      	adds	r3, #72	; 0x48
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	43db      	mvns	r3, r3
 800386c:	401a      	ands	r2, r3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003874:	e007      	b.n	8003886 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	431a      	orrs	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43db      	mvns	r3, r3
 8003898:	401a      	ands	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80038a0:	e007      	b.n	80038b2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d107      	bne.n	80038ca <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e006      	b.n	80038ec <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d12e      	bne.n	8003968 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2202      	movs	r2, #2
 800390e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003922:	f7ff fa2b 	bl	8002d7c <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003928:	e012      	b.n	8003950 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800392a:	f7ff fa27 	bl	8002d7c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b0a      	cmp	r3, #10
 8003936:	d90b      	bls.n	8003950 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2205      	movs	r2, #5
 8003948:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e012      	b.n	8003976 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e006      	b.n	8003976 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800397e:	b480      	push	{r7}
 8003980:	b089      	sub	sp, #36	; 0x24
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
 800398a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003992:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800399c:	7ffb      	ldrb	r3, [r7, #31]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d003      	beq.n	80039aa <HAL_CAN_AddTxMessage+0x2c>
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	f040 80b8 	bne.w	8003b1a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80a0 	beq.w	8003b0a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d907      	bls.n	80039ea <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e09e      	b.n	8003b28 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039ea:	2201      	movs	r2, #1
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	409a      	lsls	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	6809      	ldr	r1, [r1, #0]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	440b      	add	r3, r1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e00f      	b.n	8003a38 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a22:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a28:	68f9      	ldr	r1, [r7, #12]
 8003a2a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a2c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3318      	adds	r3, #24
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	440b      	add	r3, r1
 8003a36:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	3318      	adds	r3, #24
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	440b      	add	r3, r1
 8003a48:	3304      	adds	r3, #4
 8003a4a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	7d1b      	ldrb	r3, [r3, #20]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d111      	bne.n	8003a78 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	6811      	ldr	r1, [r2, #0]
 8003a68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	3318      	adds	r3, #24
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	440b      	add	r3, r1
 8003a74:	3304      	adds	r3, #4
 8003a76:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3307      	adds	r3, #7
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	061a      	lsls	r2, r3, #24
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3306      	adds	r3, #6
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	041b      	lsls	r3, r3, #16
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3305      	adds	r3, #5
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4313      	orrs	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	3204      	adds	r2, #4
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	6811      	ldr	r1, [r2, #0]
 8003aa0:	ea43 0200 	orr.w	r2, r3, r0
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3303      	adds	r3, #3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	061a      	lsls	r2, r3, #24
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3302      	adds	r3, #2
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	4313      	orrs	r3, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	7812      	ldrb	r2, [r2, #0]
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	6811      	ldr	r1, [r2, #0]
 8003ad6:	ea43 0200 	orr.w	r2, r3, r0
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	440b      	add	r3, r1
 8003ae0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ae4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3318      	adds	r3, #24
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	4413      	add	r3, r2
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	6811      	ldr	r1, [r2, #0]
 8003af8:	f043 0201 	orr.w	r2, r3, #1
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	3318      	adds	r3, #24
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	440b      	add	r3, r1
 8003b04:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e00e      	b.n	8003b28 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e006      	b.n	8003b28 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
  }
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3724      	adds	r7, #36	; 0x24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d003      	beq.n	8003b56 <HAL_CAN_GetRxMessage+0x24>
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f040 80f3 	bne.w	8003d3c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10e      	bne.n	8003b7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0e7      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0d8      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	331b      	adds	r3, #27
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4413      	add	r3, r2
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0204 	and.w	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	331b      	adds	r3, #27
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0d5b      	lsrs	r3, r3, #21
 8003bc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	08db      	lsrs	r3, r3, #3
 8003be0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	331b      	adds	r3, #27
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0202 	and.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	331b      	adds	r3, #27
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	331b      	adds	r3, #27
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	3304      	adds	r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	331b      	adds	r3, #27
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	4413      	add	r3, r2
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0c1b      	lsrs	r3, r3, #16
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0a1a      	lsrs	r2, r3, #8
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0c1a      	lsrs	r2, r3, #16
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0e1a      	lsrs	r2, r3, #24
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	0a1a      	lsrs	r2, r3, #8
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0c1a      	lsrs	r2, r3, #16
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e1a      	lsrs	r2, r3, #24
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	e007      	b.n	8003d38 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0220 	orr.w	r2, r2, #32
 8003d36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e006      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bc80      	pop	{r7}
 8003d52:	4770      	bx	lr

08003d54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d002      	beq.n	8003d72 <HAL_CAN_ActivateNotification+0x1e>
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d109      	bne.n	8003d86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6959      	ldr	r1, [r3, #20]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e006      	b.n	8003d94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
  }
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bc80      	pop	{r7}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b08a      	sub	sp, #40	; 0x28
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d07c      	beq.n	8003ede <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d023      	beq.n	8003e36 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2201      	movs	r2, #1
 8003df4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f983 	bl	800410c <HAL_CAN_TxMailbox0CompleteCallback>
 8003e06:	e016      	b.n	8003e36 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1a:	e00c      	b.n	8003e36 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	e002      	b.n	8003e36 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f986 	bl	8004142 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d024      	beq.n	8003e8a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e48:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f962 	bl	800411e <HAL_CAN_TxMailbox1CompleteCallback>
 8003e5a:	e016      	b.n	8003e8a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6e:	e00c      	b.n	8003e8a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
 8003e82:	e002      	b.n	8003e8a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f965 	bl	8004154 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d024      	beq.n	8003ede <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f941 	bl	8004130 <HAL_CAN_TxMailbox2CompleteCallback>
 8003eae:	e016      	b.n	8003ede <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e00c      	b.n	8003ede <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d004      	beq.n	8003ed8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	e002      	b.n	8003ede <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f944 	bl	8004166 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2210      	movs	r2, #16
 8003f00:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00b      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f92a 	bl	8004178 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fe fe6f 	bl	8002c20 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f90a 	bl	800419c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8f2 	bl	800418a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2210      	movs	r2, #16
 8003fc0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8f3 	bl	80041ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d006      	beq.n	8003fea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8eb 	bl	80041c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d07b      	beq.n	80040ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d072      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004058:	2b00      	cmp	r3, #0
 800405a:	d043      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004062:	2b00      	cmp	r3, #0
 8004064:	d03e      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d02b      	beq.n	80040c8 <HAL_CAN_IRQHandler+0x32a>
 8004070:	2b60      	cmp	r3, #96	; 0x60
 8004072:	d82e      	bhi.n	80040d2 <HAL_CAN_IRQHandler+0x334>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d022      	beq.n	80040be <HAL_CAN_IRQHandler+0x320>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d82a      	bhi.n	80040d2 <HAL_CAN_IRQHandler+0x334>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d019      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x316>
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d826      	bhi.n	80040d2 <HAL_CAN_IRQHandler+0x334>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d010      	beq.n	80040aa <HAL_CAN_IRQHandler+0x30c>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d822      	bhi.n	80040d2 <HAL_CAN_IRQHandler+0x334>
 800408c:	2b10      	cmp	r3, #16
 800408e:	d002      	beq.n	8004096 <HAL_CAN_IRQHandler+0x2f8>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d005      	beq.n	80040a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004094:	e01d      	b.n	80040d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	f043 0308 	orr.w	r3, r3, #8
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800409e:	e019      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	f043 0310 	orr.w	r3, r3, #16
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a8:	e014      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	f043 0320 	orr.w	r3, r3, #32
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b2:	e00f      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040bc:	e00a      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c6:	e005      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d0:	e000      	b.n	80040d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80040d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2204      	movs	r2, #4
 80040ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f867 	bl	80041d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004104:	bf00      	nop
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr

080041ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr

080041e4 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr
	...

080041fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800420c:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422e:	4a04      	ldr	r2, [pc, #16]	; (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	60d3      	str	r3, [r2, #12]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <__NVIC_GetPriorityGrouping+0x18>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0307 	and.w	r3, r3, #7
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db0b      	blt.n	800428a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004272:	79fb      	ldrb	r3, [r7, #7]
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4906      	ldr	r1, [pc, #24]	; (8004294 <__NVIC_EnableIRQ+0x34>)
 800427a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2001      	movs	r0, #1
 8004282:	fa00 f202 	lsl.w	r2, r0, r2
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	e000e100 	.word	0xe000e100

08004298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	6039      	str	r1, [r7, #0]
 80042a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	db0a      	blt.n	80042c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	490c      	ldr	r1, [pc, #48]	; (80042e4 <__NVIC_SetPriority+0x4c>)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	0112      	lsls	r2, r2, #4
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	440b      	add	r3, r1
 80042bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c0:	e00a      	b.n	80042d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4908      	ldr	r1, [pc, #32]	; (80042e8 <__NVIC_SetPriority+0x50>)
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	3b04      	subs	r3, #4
 80042d0:	0112      	lsls	r2, r2, #4
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	440b      	add	r3, r1
 80042d6:	761a      	strb	r2, [r3, #24]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	bc80      	pop	{r7}
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	e000e100 	.word	0xe000e100
 80042e8:	e000ed00 	.word	0xe000ed00

080042ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	f1c3 0307 	rsb	r3, r3, #7
 8004306:	2b04      	cmp	r3, #4
 8004308:	bf28      	it	cs
 800430a:	2304      	movcs	r3, #4
 800430c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3304      	adds	r3, #4
 8004312:	2b06      	cmp	r3, #6
 8004314:	d902      	bls.n	800431c <NVIC_EncodePriority+0x30>
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3b03      	subs	r3, #3
 800431a:	e000      	b.n	800431e <NVIC_EncodePriority+0x32>
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	401a      	ands	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004334:	f04f 31ff 	mov.w	r1, #4294967295
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43d9      	mvns	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004344:	4313      	orrs	r3, r2
         );
}
 8004346:	4618      	mov	r0, r3
 8004348:	3724      	adds	r7, #36	; 0x24
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr

08004350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3b01      	subs	r3, #1
 800435c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004360:	d301      	bcc.n	8004366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004362:	2301      	movs	r3, #1
 8004364:	e00f      	b.n	8004386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <SysTick_Config+0x40>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3b01      	subs	r3, #1
 800436c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800436e:	210f      	movs	r1, #15
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	f7ff ff90 	bl	8004298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <SysTick_Config+0x40>)
 800437a:	2200      	movs	r2, #0
 800437c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800437e:	4b04      	ldr	r3, [pc, #16]	; (8004390 <SysTick_Config+0x40>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	e000e010 	.word	0xe000e010

08004394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff2d 	bl	80041fc <__NVIC_SetPriorityGrouping>
}
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	4603      	mov	r3, r0
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043bc:	f7ff ff42 	bl	8004244 <__NVIC_GetPriorityGrouping>
 80043c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	f7ff ff90 	bl	80042ec <NVIC_EncodePriority>
 80043cc:	4602      	mov	r2, r0
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff5f 	bl	8004298 <__NVIC_SetPriority>
}
 80043da:	bf00      	nop
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b082      	sub	sp, #8
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	4603      	mov	r3, r0
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff35 	bl	8004260 <__NVIC_EnableIRQ>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ffa2 	bl	8004350 <SysTick_Config>
 800440c:	4603      	mov	r3, r0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e043      	b.n	80044b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <HAL_DMA_Init+0xa8>)
 8004436:	4413      	add	r3, r2
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_DMA_Init+0xac>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	009a      	lsls	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <HAL_DMA_Init+0xb0>)
 800444a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004462:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr
 80044c0:	bffdfff8 	.word	0xbffdfff8
 80044c4:	cccccccd 	.word	0xcccccccd
 80044c8:	40020000 	.word	0x40020000

080044cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_DMA_Start_IT+0x20>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e04a      	b.n	8004582 <HAL_DMA_Start_IT+0xb6>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d13a      	bne.n	8004574 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f8e2 	bl	80046ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 020e 	orr.w	r2, r2, #14
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e00f      	b.n	8004562 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0204 	bic.w	r2, r2, #4
 8004550:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f042 020a 	orr.w	r2, r2, #10
 8004560:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e005      	b.n	8004580 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800459c:	2b02      	cmp	r3, #2
 800459e:	d008      	beq.n	80045b2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2204      	movs	r2, #4
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e020      	b.n	80045f4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020e 	bic.w	r2, r2, #14
 80045c0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f202 	lsl.w	r2, r1, r2
 80045e0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
	...

08004600 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004612:	2b02      	cmp	r3, #2
 8004614:	d005      	beq.n	8004622 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2204      	movs	r2, #4
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e051      	b.n	80046c6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 020e 	bic.w	r2, r2, #14
 8004630:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a22      	ldr	r2, [pc, #136]	; (80046d0 <HAL_DMA_Abort_IT+0xd0>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d029      	beq.n	80046a0 <HAL_DMA_Abort_IT+0xa0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a20      	ldr	r2, [pc, #128]	; (80046d4 <HAL_DMA_Abort_IT+0xd4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_DMA_Abort_IT+0x9c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <HAL_DMA_Abort_IT+0xd8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d01a      	beq.n	8004696 <HAL_DMA_Abort_IT+0x96>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <HAL_DMA_Abort_IT+0xdc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d012      	beq.n	8004690 <HAL_DMA_Abort_IT+0x90>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <HAL_DMA_Abort_IT+0xe0>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00a      	beq.n	800468a <HAL_DMA_Abort_IT+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_DMA_Abort_IT+0xe4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d102      	bne.n	8004684 <HAL_DMA_Abort_IT+0x84>
 800467e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004682:	e00e      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 8004684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004688:	e00b      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 800468a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800468e:	e008      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 8004690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004694:	e005      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 8004696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800469a:	e002      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 800469c:	2310      	movs	r3, #16
 800469e:	e000      	b.n	80046a2 <HAL_DMA_Abort_IT+0xa2>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4a11      	ldr	r2, [pc, #68]	; (80046e8 <HAL_DMA_Abort_IT+0xe8>)
 80046a4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
    } 
  }
  return status;
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40020008 	.word	0x40020008
 80046d4:	4002001c 	.word	0x4002001c
 80046d8:	40020030 	.word	0x40020030
 80046dc:	40020044 	.word	0x40020044
 80046e0:	40020058 	.word	0x40020058
 80046e4:	4002006c 	.word	0x4002006c
 80046e8:	40020000 	.word	0x40020000

080046ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	2101      	movs	r1, #1
 8004704:	fa01 f202 	lsl.w	r2, r1, r2
 8004708:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b10      	cmp	r3, #16
 8004718:	d108      	bne.n	800472c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800472a:	e007      	b.n	800473c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	60da      	str	r2, [r3, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
	...

08004748 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004748:	b480      	push	{r7}
 800474a:	b08b      	sub	sp, #44	; 0x2c
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004756:	2300      	movs	r3, #0
 8004758:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800475a:	e169      	b.n	8004a30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800475c:	2201      	movs	r2, #1
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69fa      	ldr	r2, [r7, #28]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	429a      	cmp	r2, r3
 8004776:	f040 8158 	bne.w	8004a2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	4a9a      	ldr	r2, [pc, #616]	; (80049e8 <HAL_GPIO_Init+0x2a0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d05e      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
 8004784:	4a98      	ldr	r2, [pc, #608]	; (80049e8 <HAL_GPIO_Init+0x2a0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d875      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 800478a:	4a98      	ldr	r2, [pc, #608]	; (80049ec <HAL_GPIO_Init+0x2a4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d058      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
 8004790:	4a96      	ldr	r2, [pc, #600]	; (80049ec <HAL_GPIO_Init+0x2a4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d86f      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 8004796:	4a96      	ldr	r2, [pc, #600]	; (80049f0 <HAL_GPIO_Init+0x2a8>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d052      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
 800479c:	4a94      	ldr	r2, [pc, #592]	; (80049f0 <HAL_GPIO_Init+0x2a8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d869      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 80047a2:	4a94      	ldr	r2, [pc, #592]	; (80049f4 <HAL_GPIO_Init+0x2ac>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d04c      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
 80047a8:	4a92      	ldr	r2, [pc, #584]	; (80049f4 <HAL_GPIO_Init+0x2ac>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d863      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 80047ae:	4a92      	ldr	r2, [pc, #584]	; (80049f8 <HAL_GPIO_Init+0x2b0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d046      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
 80047b4:	4a90      	ldr	r2, [pc, #576]	; (80049f8 <HAL_GPIO_Init+0x2b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d85d      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 80047ba:	2b12      	cmp	r3, #18
 80047bc:	d82a      	bhi.n	8004814 <HAL_GPIO_Init+0xcc>
 80047be:	2b12      	cmp	r3, #18
 80047c0:	d859      	bhi.n	8004876 <HAL_GPIO_Init+0x12e>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_GPIO_Init+0x80>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	08004843 	.word	0x08004843
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	0800482f 	.word	0x0800482f
 80047d4:	08004871 	.word	0x08004871
 80047d8:	08004877 	.word	0x08004877
 80047dc:	08004877 	.word	0x08004877
 80047e0:	08004877 	.word	0x08004877
 80047e4:	08004877 	.word	0x08004877
 80047e8:	08004877 	.word	0x08004877
 80047ec:	08004877 	.word	0x08004877
 80047f0:	08004877 	.word	0x08004877
 80047f4:	08004877 	.word	0x08004877
 80047f8:	08004877 	.word	0x08004877
 80047fc:	08004877 	.word	0x08004877
 8004800:	08004877 	.word	0x08004877
 8004804:	08004877 	.word	0x08004877
 8004808:	08004877 	.word	0x08004877
 800480c:	08004825 	.word	0x08004825
 8004810:	08004839 	.word	0x08004839
 8004814:	4a79      	ldr	r2, [pc, #484]	; (80049fc <HAL_GPIO_Init+0x2b4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800481a:	e02c      	b.n	8004876 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	623b      	str	r3, [r7, #32]
          break;
 8004822:	e029      	b.n	8004878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	623b      	str	r3, [r7, #32]
          break;
 800482c:	e024      	b.n	8004878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	3308      	adds	r3, #8
 8004834:	623b      	str	r3, [r7, #32]
          break;
 8004836:	e01f      	b.n	8004878 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	330c      	adds	r3, #12
 800483e:	623b      	str	r3, [r7, #32]
          break;
 8004840:	e01a      	b.n	8004878 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800484a:	2304      	movs	r3, #4
 800484c:	623b      	str	r3, [r7, #32]
          break;
 800484e:	e013      	b.n	8004878 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004858:	2308      	movs	r3, #8
 800485a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	611a      	str	r2, [r3, #16]
          break;
 8004862:	e009      	b.n	8004878 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004864:	2308      	movs	r3, #8
 8004866:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69fa      	ldr	r2, [r7, #28]
 800486c:	615a      	str	r2, [r3, #20]
          break;
 800486e:	e003      	b.n	8004878 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004870:	2300      	movs	r3, #0
 8004872:	623b      	str	r3, [r7, #32]
          break;
 8004874:	e000      	b.n	8004878 <HAL_GPIO_Init+0x130>
          break;
 8004876:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2bff      	cmp	r3, #255	; 0xff
 800487c:	d801      	bhi.n	8004882 <HAL_GPIO_Init+0x13a>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	e001      	b.n	8004886 <HAL_GPIO_Init+0x13e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3304      	adds	r3, #4
 8004886:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2bff      	cmp	r3, #255	; 0xff
 800488c:	d802      	bhi.n	8004894 <HAL_GPIO_Init+0x14c>
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	e002      	b.n	800489a <HAL_GPIO_Init+0x152>
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	3b08      	subs	r3, #8
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	210f      	movs	r1, #15
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	fa01 f303 	lsl.w	r3, r1, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	401a      	ands	r2, r3
 80048ac:	6a39      	ldr	r1, [r7, #32]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 80b1 	beq.w	8004a2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80048c8:	4b4d      	ldr	r3, [pc, #308]	; (8004a00 <HAL_GPIO_Init+0x2b8>)
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <HAL_GPIO_Init+0x2b8>)
 80048ce:	f043 0301 	orr.w	r3, r3, #1
 80048d2:	6193      	str	r3, [r2, #24]
 80048d4:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_GPIO_Init+0x2b8>)
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80048e0:	4a48      	ldr	r2, [pc, #288]	; (8004a04 <HAL_GPIO_Init+0x2bc>)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	089b      	lsrs	r3, r3, #2
 80048e6:	3302      	adds	r3, #2
 80048e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	220f      	movs	r2, #15
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4013      	ands	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a40      	ldr	r2, [pc, #256]	; (8004a08 <HAL_GPIO_Init+0x2c0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_GPIO_Init+0x1ec>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3f      	ldr	r2, [pc, #252]	; (8004a0c <HAL_GPIO_Init+0x2c4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00d      	beq.n	8004930 <HAL_GPIO_Init+0x1e8>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3e      	ldr	r2, [pc, #248]	; (8004a10 <HAL_GPIO_Init+0x2c8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <HAL_GPIO_Init+0x1e4>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3d      	ldr	r2, [pc, #244]	; (8004a14 <HAL_GPIO_Init+0x2cc>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d101      	bne.n	8004928 <HAL_GPIO_Init+0x1e0>
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <HAL_GPIO_Init+0x1ee>
 8004928:	2304      	movs	r3, #4
 800492a:	e004      	b.n	8004936 <HAL_GPIO_Init+0x1ee>
 800492c:	2302      	movs	r3, #2
 800492e:	e002      	b.n	8004936 <HAL_GPIO_Init+0x1ee>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_GPIO_Init+0x1ee>
 8004934:	2300      	movs	r3, #0
 8004936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004938:	f002 0203 	and.w	r2, r2, #3
 800493c:	0092      	lsls	r2, r2, #2
 800493e:	4093      	lsls	r3, r2
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004946:	492f      	ldr	r1, [pc, #188]	; (8004a04 <HAL_GPIO_Init+0x2bc>)
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	089b      	lsrs	r3, r3, #2
 800494c:	3302      	adds	r3, #2
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d006      	beq.n	800496e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004960:	4b2d      	ldr	r3, [pc, #180]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	492c      	ldr	r1, [pc, #176]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	600b      	str	r3, [r1, #0]
 800496c:	e006      	b.n	800497c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800496e:	4b2a      	ldr	r3, [pc, #168]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	43db      	mvns	r3, r3
 8004976:	4928      	ldr	r1, [pc, #160]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 8004978:	4013      	ands	r3, r2
 800497a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d006      	beq.n	8004996 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	4922      	ldr	r1, [pc, #136]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
 8004994:	e006      	b.n	80049a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	43db      	mvns	r3, r3
 800499e:	491e      	ldr	r1, [pc, #120]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d006      	beq.n	80049be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80049b0:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	4918      	ldr	r1, [pc, #96]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]
 80049bc:	e006      	b.n	80049cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	4914      	ldr	r1, [pc, #80]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d021      	beq.n	8004a1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	490e      	ldr	r1, [pc, #56]	; (8004a18 <HAL_GPIO_Init+0x2d0>)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60cb      	str	r3, [r1, #12]
 80049e4:	e021      	b.n	8004a2a <HAL_GPIO_Init+0x2e2>
 80049e6:	bf00      	nop
 80049e8:	10320000 	.word	0x10320000
 80049ec:	10310000 	.word	0x10310000
 80049f0:	10220000 	.word	0x10220000
 80049f4:	10210000 	.word	0x10210000
 80049f8:	10120000 	.word	0x10120000
 80049fc:	10110000 	.word	0x10110000
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010800 	.word	0x40010800
 8004a0c:	40010c00 	.word	0x40010c00
 8004a10:	40011000 	.word	0x40011000
 8004a14:	40011400 	.word	0x40011400
 8004a18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_GPIO_Init+0x304>)
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	4909      	ldr	r1, [pc, #36]	; (8004a4c <HAL_GPIO_Init+0x304>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f47f ae8e 	bne.w	800475c <HAL_GPIO_Init+0x14>
  }
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	372c      	adds	r7, #44	; 0x2c
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr
 8004a4c:	40010400 	.word	0x40010400

08004a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	887b      	ldrh	r3, [r7, #2]
 8004a62:	4013      	ands	r3, r2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
 8004a6c:	e001      	b.n	8004a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	807b      	strh	r3, [r7, #2]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a8e:	787b      	ldrb	r3, [r7, #1]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004a9a:	e003      	b.n	8004aa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	041a      	lsls	r2, r3, #16
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	611a      	str	r2, [r3, #16]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bc80      	pop	{r7}
 8004aac:	4770      	bx	lr

08004aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ac0:	887a      	ldrh	r2, [r7, #2]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	041a      	lsls	r2, r3, #16
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43d9      	mvns	r1, r3
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	400b      	ands	r3, r1
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004af6:	4a05      	ldr	r2, [pc, #20]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe f81e 	bl	8002b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40010400 	.word	0x40010400

08004b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e12b      	b.n	8004d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd fcb6 	bl	80024a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	; 0x24
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b74:	f001 f9d0 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 8004b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a81      	ldr	r2, [pc, #516]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d807      	bhi.n	8004b94 <HAL_I2C_Init+0x84>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a80      	ldr	r2, [pc, #512]	; (8004d88 <HAL_I2C_Init+0x278>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bf94      	ite	ls
 8004b8c:	2301      	movls	r3, #1
 8004b8e:	2300      	movhi	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e006      	b.n	8004ba2 <HAL_I2C_Init+0x92>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4a7d      	ldr	r2, [pc, #500]	; (8004d8c <HAL_I2C_Init+0x27c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	bf94      	ite	ls
 8004b9c:	2301      	movls	r3, #1
 8004b9e:	2300      	movhi	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e0e7      	b.n	8004d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4a78      	ldr	r2, [pc, #480]	; (8004d90 <HAL_I2C_Init+0x280>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0c9b      	lsrs	r3, r3, #18
 8004bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4a6a      	ldr	r2, [pc, #424]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d802      	bhi.n	8004be4 <HAL_I2C_Init+0xd4>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	3301      	adds	r3, #1
 8004be2:	e009      	b.n	8004bf8 <HAL_I2C_Init+0xe8>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bea:	fb02 f303 	mul.w	r3, r2, r3
 8004bee:	4a69      	ldr	r2, [pc, #420]	; (8004d94 <HAL_I2C_Init+0x284>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	495c      	ldr	r1, [pc, #368]	; (8004d84 <HAL_I2C_Init+0x274>)
 8004c14:	428b      	cmp	r3, r1
 8004c16:	d819      	bhi.n	8004c4c <HAL_I2C_Init+0x13c>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e59      	subs	r1, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c2c:	400b      	ands	r3, r1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_I2C_Init+0x138>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1e59      	subs	r1, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c46:	e051      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	e04f      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d111      	bne.n	8004c78 <HAL_I2C_Init+0x168>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e58      	subs	r0, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	440b      	add	r3, r1
 8004c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c66:	3301      	adds	r3, #1
 8004c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	bf0c      	ite	eq
 8004c70:	2301      	moveq	r3, #1
 8004c72:	2300      	movne	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e012      	b.n	8004c9e <HAL_I2C_Init+0x18e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1e58      	subs	r0, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6859      	ldr	r1, [r3, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	0099      	lsls	r1, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bf0c      	ite	eq
 8004c98:	2301      	moveq	r3, #1
 8004c9a:	2300      	movne	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <HAL_I2C_Init+0x196>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e022      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10e      	bne.n	8004ccc <HAL_I2C_Init+0x1bc>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1e58      	subs	r0, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6859      	ldr	r1, [r3, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	440b      	add	r3, r1
 8004cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	e00f      	b.n	8004cec <HAL_I2C_Init+0x1dc>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1e58      	subs	r0, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	0099      	lsls	r1, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	6809      	ldr	r1, [r1, #0]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6911      	ldr	r1, [r2, #16]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68d2      	ldr	r2, [r2, #12]
 8004d26:	4311      	orrs	r1, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	000186a0 	.word	0x000186a0
 8004d88:	001e847f 	.word	0x001e847f
 8004d8c:	003d08ff 	.word	0x003d08ff
 8004d90:	431bde83 	.word	0x431bde83
 8004d94:	10624dd3 	.word	0x10624dd3

08004d98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08c      	sub	sp, #48	; 0x30
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	817b      	strh	r3, [r7, #10]
 8004daa:	460b      	mov	r3, r1
 8004dac:	813b      	strh	r3, [r7, #8]
 8004dae:	4613      	mov	r3, r2
 8004db0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004db6:	f7fd ffe1 	bl	8002d7c <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	f040 8244 	bne.w	8005252 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	2319      	movs	r3, #25
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	4982      	ldr	r1, [pc, #520]	; (8004fdc <HAL_I2C_Mem_Read+0x244>)
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f000 fb2f 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004de0:	2302      	movs	r3, #2
 8004de2:	e237      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d101      	bne.n	8004df2 <HAL_I2C_Mem_Read+0x5a>
 8004dee:	2302      	movs	r3, #2
 8004df0:	e230      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d007      	beq.n	8004e18 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2222      	movs	r2, #34	; 0x22
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4a62      	ldr	r2, [pc, #392]	; (8004fe0 <HAL_I2C_Mem_Read+0x248>)
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e5a:	88f8      	ldrh	r0, [r7, #6]
 8004e5c:	893a      	ldrh	r2, [r7, #8]
 8004e5e:	8979      	ldrh	r1, [r7, #10]
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	4603      	mov	r3, r0
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f9fc 	bl	8005268 <I2C_RequestMemoryRead>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e1ec      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d113      	bne.n	8004eaa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e1c0      	b.n	800522c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d11e      	bne.n	8004ef0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ec2:	b672      	cpsid	i
}
 8004ec4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	61bb      	str	r3, [r7, #24]
 8004eda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004eec:	b662      	cpsie	i
}
 8004eee:	e035      	b.n	8004f5c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d11e      	bne.n	8004f36 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f08:	b672      	cpsid	i
}
 8004f0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004f32:	b662      	cpsie	i
}
 8004f34:	e012      	b.n	8004f5c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004f5c:	e166      	b.n	800522c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	f200 811f 	bhi.w	80051a6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d123      	bne.n	8004fb8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 fb76 	bl	8005666 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e167      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004fb6:	e139      	b.n	800522c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d152      	bne.n	8005066 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <HAL_I2C_Mem_Read+0x24c>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 fa34 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e13c      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
 8004fda:	bf00      	nop
 8004fdc:	00100002 	.word	0x00100002
 8004fe0:	ffff0000 	.word	0xffff0000
 8004fe4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004fe8:	b672      	cpsid	i
}
 8004fea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	691a      	ldr	r2, [r3, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	3b01      	subs	r3, #1
 8005028:	b29a      	uxth	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800502e:	b662      	cpsie	i
}
 8005030:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005064:	e0e2      	b.n	800522c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	2200      	movs	r2, #0
 800506e:	497b      	ldr	r1, [pc, #492]	; (800525c <HAL_I2C_Mem_Read+0x4c4>)
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f9e1 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0e9      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800508e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005090:	b672      	cpsid	i
}
 8005092:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80050c6:	4b66      	ldr	r3, [pc, #408]	; (8005260 <HAL_I2C_Mem_Read+0x4c8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	08db      	lsrs	r3, r3, #3
 80050cc:	4a65      	ldr	r2, [pc, #404]	; (8005264 <HAL_I2C_Mem_Read+0x4cc>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	0a1a      	lsrs	r2, r3, #8
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00da      	lsls	r2, r3, #3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d118      	bne.n	800511e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800510e:	b662      	cpsie	i
}
 8005110:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e09a      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b04      	cmp	r3, #4
 800512a:	d1d9      	bne.n	80050e0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800516e:	b662      	cpsie	i
}
 8005170:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	3b01      	subs	r3, #1
 8005190:	b29a      	uxth	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051a4:	e042      	b.n	800522c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 fa5b 	bl	8005666 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e04c      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d118      	bne.n	800522c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f ae94 	bne.w	8004f5e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	e000      	b.n	8005254 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005252:	2302      	movs	r3, #2
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	; 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	00010004 	.word	0x00010004
 8005260:	20000000 	.word	0x20000000
 8005264:	14f8b589 	.word	0x14f8b589

08005268 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	4608      	mov	r0, r1
 8005272:	4611      	mov	r1, r2
 8005274:	461a      	mov	r2, r3
 8005276:	4603      	mov	r3, r0
 8005278:	817b      	strh	r3, [r7, #10]
 800527a:	460b      	mov	r3, r1
 800527c:	813b      	strh	r3, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005290:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f8c2 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00d      	beq.n	80052d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c8:	d103      	bne.n	80052d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0aa      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052d6:	897b      	ldrh	r3, [r7, #10]
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	4952      	ldr	r1, [pc, #328]	; (8005434 <I2C_RequestMemoryRead+0x1cc>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f8fa 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e097      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fc:	2300      	movs	r3, #0
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f964 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e076      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533e:	88fb      	ldrh	r3, [r7, #6]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d105      	bne.n	8005350 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005344:	893b      	ldrh	r3, [r7, #8]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e021      	b.n	8005394 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005350:	893b      	ldrh	r3, [r7, #8]
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	b29b      	uxth	r3, r3
 8005356:	b2da      	uxtb	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005360:	6a39      	ldr	r1, [r7, #32]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f93e 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00d      	beq.n	800538a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b04      	cmp	r3, #4
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005384:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e050      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800538a:	893b      	ldrh	r3, [r7, #8]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005396:	6a39      	ldr	r1, [r7, #32]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f923 	bl	80055e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d107      	bne.n	80053bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e035      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 f82b 	bl	8005438 <I2C_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00d      	beq.n	8005404 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f6:	d103      	bne.n	8005400 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e013      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005404:	897b      	ldrh	r3, [r7, #10]
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	b2da      	uxtb	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	6a3a      	ldr	r2, [r7, #32]
 8005418:	4906      	ldr	r1, [pc, #24]	; (8005434 <I2C_RequestMemoryRead+0x1cc>)
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f863 	bl	80054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	00010002 	.word	0x00010002

08005438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	4613      	mov	r3, r2
 8005446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005448:	e025      	b.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d021      	beq.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7fd fc93 	bl	8002d7c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d116      	bne.n	8005496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e023      	b.n	80054de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10d      	bne.n	80054bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	43da      	mvns	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	e00c      	b.n	80054d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d0b6      	beq.n	800544a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054f4:	e051      	b.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005504:	d123      	bne.n	800554e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800551e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	f043 0204 	orr.w	r2, r3, #4
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e046      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d021      	beq.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005556:	f7fd fc11 	bl	8002d7c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d302      	bcc.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d116      	bne.n	800559a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e020      	b.n	80055dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	0c1b      	lsrs	r3, r3, #16
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10c      	bne.n	80055be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	43da      	mvns	r2, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4013      	ands	r3, r2
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e00b      	b.n	80055d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d18d      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055f0:	e02d      	b.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f88d 	bl	8005712 <I2C_IsAcknowledgeFailed>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e02d      	b.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d021      	beq.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fd fbb7 	bl	8002d7c <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d116      	bne.n	800564e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e007      	b.n	800565e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d1ca      	bne.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005672:	e042      	b.n	80056fa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d119      	bne.n	80056b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0210 	mvn.w	r2, #16
 800568a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e029      	b.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b6:	f7fd fb61 	bl	8002d7c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d302      	bcc.n	80056cc <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0220 	orr.w	r2, r3, #32
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e007      	b.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005704:	2b40      	cmp	r3, #64	; 0x40
 8005706:	d1b5      	bne.n	8005674 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d11b      	bne.n	8005762 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005732:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f043 0204 	orr.w	r2, r3, #4
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr
	...

08005770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e272      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 8087 	beq.w	800589e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005790:	4b92      	ldr	r3, [pc, #584]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 030c 	and.w	r3, r3, #12
 8005798:	2b04      	cmp	r3, #4
 800579a:	d00c      	beq.n	80057b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800579c:	4b8f      	ldr	r3, [pc, #572]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 030c 	and.w	r3, r3, #12
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d112      	bne.n	80057ce <HAL_RCC_OscConfig+0x5e>
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b4:	d10b      	bne.n	80057ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b6:	4b89      	ldr	r3, [pc, #548]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d06c      	beq.n	800589c <HAL_RCC_OscConfig+0x12c>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d168      	bne.n	800589c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e24c      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x76>
 80057d8:	4b80      	ldr	r3, [pc, #512]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a7f      	ldr	r2, [pc, #508]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e02e      	b.n	8005844 <HAL_RCC_OscConfig+0xd4>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10c      	bne.n	8005808 <HAL_RCC_OscConfig+0x98>
 80057ee:	4b7b      	ldr	r3, [pc, #492]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a7a      	ldr	r2, [pc, #488]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	4b78      	ldr	r3, [pc, #480]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a77      	ldr	r2, [pc, #476]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	e01d      	b.n	8005844 <HAL_RCC_OscConfig+0xd4>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005810:	d10c      	bne.n	800582c <HAL_RCC_OscConfig+0xbc>
 8005812:	4b72      	ldr	r3, [pc, #456]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a71      	ldr	r2, [pc, #452]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	4b6f      	ldr	r3, [pc, #444]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6e      	ldr	r2, [pc, #440]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	e00b      	b.n	8005844 <HAL_RCC_OscConfig+0xd4>
 800582c:	4b6b      	ldr	r3, [pc, #428]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a6a      	ldr	r2, [pc, #424]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4b68      	ldr	r3, [pc, #416]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a67      	ldr	r2, [pc, #412]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 800583e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d013      	beq.n	8005874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800584c:	f7fd fa96 	bl	8002d7c <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005854:	f7fd fa92 	bl	8002d7c <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b64      	cmp	r3, #100	; 0x64
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e200      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005866:	4b5d      	ldr	r3, [pc, #372]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0f0      	beq.n	8005854 <HAL_RCC_OscConfig+0xe4>
 8005872:	e014      	b.n	800589e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005874:	f7fd fa82 	bl	8002d7c <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587c:	f7fd fa7e 	bl	8002d7c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e1ec      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800588e:	4b53      	ldr	r3, [pc, #332]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x10c>
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d063      	beq.n	8005972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058aa:	4b4c      	ldr	r3, [pc, #304]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00b      	beq.n	80058ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058b6:	4b49      	ldr	r3, [pc, #292]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d11c      	bne.n	80058fc <HAL_RCC_OscConfig+0x18c>
 80058c2:	4b46      	ldr	r3, [pc, #280]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d116      	bne.n	80058fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ce:	4b43      	ldr	r3, [pc, #268]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d005      	beq.n	80058e6 <HAL_RCC_OscConfig+0x176>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d001      	beq.n	80058e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e1c0      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e6:	4b3d      	ldr	r3, [pc, #244]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4939      	ldr	r1, [pc, #228]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058fa:	e03a      	b.n	8005972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d020      	beq.n	8005946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005904:	4b36      	ldr	r3, [pc, #216]	; (80059e0 <HAL_RCC_OscConfig+0x270>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800590a:	f7fd fa37 	bl	8002d7c <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005912:	f7fd fa33 	bl	8002d7c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e1a1      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005930:	4b2a      	ldr	r3, [pc, #168]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4927      	ldr	r1, [pc, #156]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005940:	4313      	orrs	r3, r2
 8005942:	600b      	str	r3, [r1, #0]
 8005944:	e015      	b.n	8005972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005946:	4b26      	ldr	r3, [pc, #152]	; (80059e0 <HAL_RCC_OscConfig+0x270>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fd fa16 	bl	8002d7c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005954:	f7fd fa12 	bl	8002d7c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e180      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005966:	4b1d      	ldr	r3, [pc, #116]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03a      	beq.n	80059f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d019      	beq.n	80059ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <HAL_RCC_OscConfig+0x274>)
 8005988:	2201      	movs	r2, #1
 800598a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800598c:	f7fd f9f6 	bl	8002d7c <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005994:	f7fd f9f2 	bl	8002d7c <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e160      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059a6:	4b0d      	ldr	r3, [pc, #52]	; (80059dc <HAL_RCC_OscConfig+0x26c>)
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059b2:	2001      	movs	r0, #1
 80059b4:	f000 fad8 	bl	8005f68 <RCC_Delay>
 80059b8:	e01c      	b.n	80059f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ba:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <HAL_RCC_OscConfig+0x274>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c0:	f7fd f9dc 	bl	8002d7c <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059c6:	e00f      	b.n	80059e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c8:	f7fd f9d8 	bl	8002d7c <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d908      	bls.n	80059e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e146      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
 80059da:	bf00      	nop
 80059dc:	40021000 	.word	0x40021000
 80059e0:	42420000 	.word	0x42420000
 80059e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e8:	4b92      	ldr	r3, [pc, #584]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1e9      	bne.n	80059c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a6 	beq.w	8005b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a06:	4b8b      	ldr	r3, [pc, #556]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10d      	bne.n	8005a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	4b88      	ldr	r3, [pc, #544]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	4a87      	ldr	r2, [pc, #540]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	61d3      	str	r3, [r2, #28]
 8005a1e:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2e:	4b82      	ldr	r3, [pc, #520]	; (8005c38 <HAL_RCC_OscConfig+0x4c8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d118      	bne.n	8005a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a3a:	4b7f      	ldr	r3, [pc, #508]	; (8005c38 <HAL_RCC_OscConfig+0x4c8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a7e      	ldr	r2, [pc, #504]	; (8005c38 <HAL_RCC_OscConfig+0x4c8>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a46:	f7fd f999 	bl	8002d7c <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fd f995 	bl	8002d7c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b64      	cmp	r3, #100	; 0x64
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e103      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a60:	4b75      	ldr	r3, [pc, #468]	; (8005c38 <HAL_RCC_OscConfig+0x4c8>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d106      	bne.n	8005a82 <HAL_RCC_OscConfig+0x312>
 8005a74:	4b6f      	ldr	r3, [pc, #444]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4a6e      	ldr	r2, [pc, #440]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	6213      	str	r3, [r2, #32]
 8005a80:	e02d      	b.n	8005ade <HAL_RCC_OscConfig+0x36e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10c      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x334>
 8005a8a:	4b6a      	ldr	r3, [pc, #424]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	4a69      	ldr	r2, [pc, #420]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a90:	f023 0301 	bic.w	r3, r3, #1
 8005a94:	6213      	str	r3, [r2, #32]
 8005a96:	4b67      	ldr	r3, [pc, #412]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	4a66      	ldr	r2, [pc, #408]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005a9c:	f023 0304 	bic.w	r3, r3, #4
 8005aa0:	6213      	str	r3, [r2, #32]
 8005aa2:	e01c      	b.n	8005ade <HAL_RCC_OscConfig+0x36e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	2b05      	cmp	r3, #5
 8005aaa:	d10c      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x356>
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4a60      	ldr	r2, [pc, #384]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005ab2:	f043 0304 	orr.w	r3, r3, #4
 8005ab6:	6213      	str	r3, [r2, #32]
 8005ab8:	4b5e      	ldr	r3, [pc, #376]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	4a5d      	ldr	r2, [pc, #372]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6213      	str	r3, [r2, #32]
 8005ac4:	e00b      	b.n	8005ade <HAL_RCC_OscConfig+0x36e>
 8005ac6:	4b5b      	ldr	r3, [pc, #364]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	4a5a      	ldr	r2, [pc, #360]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	6213      	str	r3, [r2, #32]
 8005ad2:	4b58      	ldr	r3, [pc, #352]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	4a57      	ldr	r2, [pc, #348]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005ad8:	f023 0304 	bic.w	r3, r3, #4
 8005adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d015      	beq.n	8005b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae6:	f7fd f949 	bl	8002d7c <HAL_GetTick>
 8005aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fd f945 	bl	8002d7c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e0b1      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b04:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ee      	beq.n	8005aee <HAL_RCC_OscConfig+0x37e>
 8005b10:	e014      	b.n	8005b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b12:	f7fd f933 	bl	8002d7c <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1a:	f7fd f92f 	bl	8002d7c <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e09b      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b30:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ee      	bne.n	8005b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d105      	bne.n	8005b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b42:	4b3c      	ldr	r3, [pc, #240]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8087 	beq.w	8005c66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b58:	4b36      	ldr	r3, [pc, #216]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f003 030c 	and.w	r3, r3, #12
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d061      	beq.n	8005c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d146      	bne.n	8005bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b6c:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCC_OscConfig+0x4cc>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b72:	f7fd f903 	bl	8002d7c <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fd f8ff 	bl	8002d7c <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e06d      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8c:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba0:	d108      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	4921      	ldr	r1, [pc, #132]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bb4:	4b1f      	ldr	r3, [pc, #124]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a19      	ldr	r1, [r3, #32]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	430b      	orrs	r3, r1
 8005bc6:	491b      	ldr	r1, [pc, #108]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bcc:	4b1b      	ldr	r3, [pc, #108]	; (8005c3c <HAL_RCC_OscConfig+0x4cc>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd2:	f7fd f8d3 	bl	8002d7c <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bda:	f7fd f8cf 	bl	8002d7c <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e03d      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bec:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x46a>
 8005bf8:	e035      	b.n	8005c66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfa:	4b10      	ldr	r3, [pc, #64]	; (8005c3c <HAL_RCC_OscConfig+0x4cc>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c00:	f7fd f8bc 	bl	8002d7c <HAL_GetTick>
 8005c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c06:	e008      	b.n	8005c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c08:	f7fd f8b8 	bl	8002d7c <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e026      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c1a:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1f0      	bne.n	8005c08 <HAL_RCC_OscConfig+0x498>
 8005c26:	e01e      	b.n	8005c66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d107      	bne.n	8005c40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e019      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
 8005c34:	40021000 	.word	0x40021000
 8005c38:	40007000 	.word	0x40007000
 8005c3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c40:	4b0b      	ldr	r3, [pc, #44]	; (8005c70 <HAL_RCC_OscConfig+0x500>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d106      	bne.n	8005c62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d001      	beq.n	8005c66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40021000 	.word	0x40021000

08005c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e0d0      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b6a      	ldr	r3, [pc, #424]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d910      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b67      	ldr	r3, [pc, #412]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0207 	bic.w	r2, r3, #7
 8005c9e:	4965      	ldr	r1, [pc, #404]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca6:	4b63      	ldr	r3, [pc, #396]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0b8      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cd0:	4b59      	ldr	r3, [pc, #356]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4a58      	ldr	r2, [pc, #352]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005cd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ce8:	4b53      	ldr	r3, [pc, #332]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	4a52      	ldr	r2, [pc, #328]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005cee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf4:	4b50      	ldr	r3, [pc, #320]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	494d      	ldr	r1, [pc, #308]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d040      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d107      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1a:	4b47      	ldr	r3, [pc, #284]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d115      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e07f      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d107      	bne.n	8005d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d32:	4b41      	ldr	r3, [pc, #260]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e073      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d42:	4b3d      	ldr	r3, [pc, #244]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e06b      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d52:	4b39      	ldr	r3, [pc, #228]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f023 0203 	bic.w	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4936      	ldr	r1, [pc, #216]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d64:	f7fd f80a 	bl	8002d7c <HAL_GetTick>
 8005d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6c:	f7fd f806 	bl	8002d7c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e053      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d82:	4b2d      	ldr	r3, [pc, #180]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	f003 020c 	and.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d1eb      	bne.n	8005d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d210      	bcs.n	8005dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b24      	ldr	r3, [pc, #144]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 0207 	bic.w	r2, r3, #7
 8005daa:	4922      	ldr	r1, [pc, #136]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b20      	ldr	r3, [pc, #128]	; (8005e34 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e032      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dd0:	4b19      	ldr	r3, [pc, #100]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	4916      	ldr	r1, [pc, #88]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d009      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	490e      	ldr	r1, [pc, #56]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e02:	f000 f821 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005e06:	4602      	mov	r2, r0
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	490a      	ldr	r1, [pc, #40]	; (8005e3c <HAL_RCC_ClockConfig+0x1c8>)
 8005e14:	5ccb      	ldrb	r3, [r1, r3]
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <HAL_RCC_ClockConfig+0x1cc>)
 8005e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_RCC_ClockConfig+0x1d0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fc ff68 	bl	8002cf8 <HAL_InitTick>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40022000 	.word	0x40022000
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	0800ad2c 	.word	0x0800ad2c
 8005e40:	20000000 	.word	0x20000000
 8005e44:	20000034 	.word	0x20000034

08005e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e48:	b490      	push	{r4, r7}
 8005e4a:	b08a      	sub	sp, #40	; 0x28
 8005e4c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e4e:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005e50:	1d3c      	adds	r4, r7, #4
 8005e52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e58:	f240 2301 	movw	r3, #513	; 0x201
 8005e5c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	2300      	movs	r3, #0
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e72:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d002      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x40>
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d003      	beq.n	8005e8e <HAL_RCC_GetSysClockFreq+0x46>
 8005e86:	e02b      	b.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e88:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e8a:	623b      	str	r3, [r7, #32]
      break;
 8005e8c:	e02b      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	0c9b      	lsrs	r3, r3, #18
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	3328      	adds	r3, #40	; 0x28
 8005e98:	443b      	add	r3, r7
 8005e9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e9e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d012      	beq.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eaa:	4b13      	ldr	r3, [pc, #76]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	0c5b      	lsrs	r3, r3, #17
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	3328      	adds	r3, #40	; 0x28
 8005eb6:	443b      	add	r3, r7
 8005eb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005ebc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4a0e      	ldr	r2, [pc, #56]	; (8005efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ec2:	fb03 f202 	mul.w	r2, r3, r2
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ece:	e004      	b.n	8005eda <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	4a0b      	ldr	r2, [pc, #44]	; (8005f00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ed4:	fb02 f303 	mul.w	r3, r2, r3
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	623b      	str	r3, [r7, #32]
      break;
 8005ede:	e002      	b.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ee0:	4b06      	ldr	r3, [pc, #24]	; (8005efc <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ee2:	623b      	str	r3, [r7, #32]
      break;
 8005ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3728      	adds	r7, #40	; 0x28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc90      	pop	{r4, r7}
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	0800ac1c 	.word	0x0800ac1c
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	007a1200 	.word	0x007a1200
 8005f00:	003d0900 	.word	0x003d0900

08005f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f08:	4b02      	ldr	r3, [pc, #8]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	20000000 	.word	0x20000000

08005f18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f1c:	f7ff fff2 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	4903      	ldr	r1, [pc, #12]	; (8005f3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f2e:	5ccb      	ldrb	r3, [r1, r3]
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	0800ad3c 	.word	0x0800ad3c

08005f40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f44:	f7ff ffde 	bl	8005f04 <HAL_RCC_GetHCLKFreq>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	0adb      	lsrs	r3, r3, #11
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	4903      	ldr	r1, [pc, #12]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f56:	5ccb      	ldrb	r3, [r1, r3]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800ad3c 	.word	0x0800ad3c

08005f68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <RCC_Delay+0x34>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a0a      	ldr	r2, [pc, #40]	; (8005fa0 <RCC_Delay+0x38>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f84:	bf00      	nop
  }
  while (Delay --);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	60fa      	str	r2, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f9      	bne.n	8005f84 <RCC_Delay+0x1c>
}
 8005f90:	bf00      	nop
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	20000000 	.word	0x20000000
 8005fa0:	10624dd3 	.word	0x10624dd3

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	613b      	str	r3, [r7, #16]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d07d      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc4:	4b4f      	ldr	r3, [pc, #316]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd0:	4b4c      	ldr	r3, [pc, #304]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd2:	69db      	ldr	r3, [r3, #28]
 8005fd4:	4a4b      	ldr	r2, [pc, #300]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fda:	61d3      	str	r3, [r2, #28]
 8005fdc:	4b49      	ldr	r3, [pc, #292]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	60bb      	str	r3, [r7, #8]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	4b46      	ldr	r3, [pc, #280]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d118      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff8:	4b43      	ldr	r3, [pc, #268]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a42      	ldr	r2, [pc, #264]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006002:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006004:	f7fc feba 	bl	8002d7c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600a:	e008      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800600c:	f7fc feb6 	bl	8002d7c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b64      	cmp	r3, #100	; 0x64
 8006018:	d901      	bls.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e06d      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601e:	4b3a      	ldr	r3, [pc, #232]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800602a:	4b36      	ldr	r3, [pc, #216]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d02e      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	d027      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006048:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006050:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006052:	4b2e      	ldr	r3, [pc, #184]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006054:	2201      	movs	r2, #1
 8006056:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006058:	4b2c      	ldr	r3, [pc, #176]	; (800610c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800605e:	4a29      	ldr	r2, [pc, #164]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d014      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606e:	f7fc fe85 	bl	8002d7c <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006074:	e00a      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006076:	f7fc fe81 	bl	8002d7c <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f241 3288 	movw	r2, #5000	; 0x1388
 8006084:	4293      	cmp	r3, r2
 8006086:	d901      	bls.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e036      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0ee      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006098:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	4917      	ldr	r1, [pc, #92]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d105      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b0:	4b14      	ldr	r3, [pc, #80]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	4a13      	ldr	r2, [pc, #76]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0302 	and.w	r3, r3, #2
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d008      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	490b      	ldr	r1, [pc, #44]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	4904      	ldr	r1, [pc, #16]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	40021000 	.word	0x40021000
 8006108:	40007000 	.word	0x40007000
 800610c:	42420440 	.word	0x42420440

08006110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e076      	b.n	8006210 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006132:	d009      	beq.n	8006148 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
 800613a:	e005      	b.n	8006148 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc f9de 	bl	8002524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061cc:	ea42 0103 	orr.w	r1, r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	0c1a      	lsrs	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f002 0204 	and.w	r2, r2, #4
 80061ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006226:	2301      	movs	r3, #1
 8006228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <HAL_SPI_TransmitReceive+0x26>
 800623a:	2302      	movs	r3, #2
 800623c:	e18a      	b.n	8006554 <HAL_SPI_TransmitReceive+0x33c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006246:	f7fc fd99 	bl	8002d7c <HAL_GetTick>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006260:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006264:	2b01      	cmp	r3, #1
 8006266:	d00f      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626e:	d107      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <HAL_SPI_TransmitReceive+0x68>
 8006278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800627c:	2b04      	cmp	r3, #4
 800627e:	d003      	beq.n	8006288 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006280:	2302      	movs	r3, #2
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006286:	e15b      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <HAL_SPI_TransmitReceive+0x82>
 8006294:	887b      	ldrh	r3, [r7, #2]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80062a0:	e14e      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	d003      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2205      	movs	r2, #5
 80062b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	887a      	ldrh	r2, [r7, #2]
 80062c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	887a      	ldrh	r2, [r7, #2]
 80062cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	d007      	beq.n	800630a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006312:	d178      	bne.n	8006406 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_TransmitReceive+0x10a>
 800631c:	8b7b      	ldrh	r3, [r7, #26]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d166      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633c:	b29b      	uxth	r3, r3
 800633e:	3b01      	subs	r3, #1
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006346:	e053      	b.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d11b      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d016      	beq.n	800638e <HAL_SPI_TransmitReceive+0x176>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	2b01      	cmp	r3, #1
 8006364:	d113      	bne.n	800638e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	881a      	ldrh	r2, [r3, #0]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	1c9a      	adds	r2, r3, #2
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d119      	bne.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d014      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68da      	ldr	r2, [r3, #12]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	b292      	uxth	r2, r2
 80063b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	1c9a      	adds	r2, r3, #2
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063cc:	2301      	movs	r3, #1
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063d0:	f7fc fcd4 	bl	8002d7c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063dc:	429a      	cmp	r2, r3
 80063de:	d807      	bhi.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e6:	d003      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ee:	e0a7      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1a6      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1a1      	bne.n	8006348 <HAL_SPI_TransmitReceive+0x130>
 8006404:	e07c      	b.n	8006500 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_SPI_TransmitReceive+0x1fc>
 800640e:	8b7b      	ldrh	r3, [r7, #26]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d16b      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800643a:	e057      	b.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b02      	cmp	r3, #2
 8006448:	d11c      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d017      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d114      	bne.n	8006484 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	330c      	adds	r3, #12
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006476:	b29b      	uxth	r3, r3
 8006478:	3b01      	subs	r3, #1
 800647a:	b29a      	uxth	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d119      	bne.n	80064c6 <HAL_SPI_TransmitReceive+0x2ae>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006496:	b29b      	uxth	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d014      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	3b01      	subs	r3, #1
 80064bc:	b29a      	uxth	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064c2:	2301      	movs	r3, #1
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064c6:	f7fc fc59 	bl	8002d7c <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d803      	bhi.n	80064de <HAL_SPI_TransmitReceive+0x2c6>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064dc:	d102      	bne.n	80064e4 <HAL_SPI_TransmitReceive+0x2cc>
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064ea:	e029      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1a2      	bne.n	800643c <HAL_SPI_TransmitReceive+0x224>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d19d      	bne.n	800643c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f9b5 	bl	8006874 <SPI_EndRxTxTransaction>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2220      	movs	r2, #32
 800651a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800651c:	e010      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	e000      	b.n	8006540 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800653e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006554:	4618      	mov	r0, r3
 8006556:	3730      	adds	r7, #48	; 0x30
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	099b      	lsrs	r3, r3, #6
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10f      	bne.n	80065a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00a      	beq.n	80065a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	099b      	lsrs	r3, r3, #6
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d004      	beq.n	80065a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
    return;
 800659e:	e0be      	b.n	800671e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	085b      	lsrs	r3, r3, #1
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00a      	beq.n	80065c2 <HAL_SPI_IRQHandler+0x66>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	09db      	lsrs	r3, r3, #7
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
    return;
 80065c0:	e0ad      	b.n	800671e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d106      	bne.n	80065dc <HAL_SPI_IRQHandler+0x80>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	099b      	lsrs	r3, r3, #6
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80a1 	beq.w	800671e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 809a 	beq.w	800671e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	099b      	lsrs	r3, r3, #6
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d023      	beq.n	800663e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b03      	cmp	r3, #3
 8006600:	d011      	beq.n	8006626 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006606:	f043 0204 	orr.w	r2, r3, #4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800660e:	2300      	movs	r3, #0
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	e00b      	b.n	800663e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006626:	2300      	movs	r3, #0
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
        return;
 800663c:	e06f      	b.n	800671e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d014      	beq.n	8006674 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	f043 0201 	orr.w	r2, r3, #1
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	2b00      	cmp	r3, #0
 800667a:	d04f      	beq.n	800671c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800668a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <HAL_SPI_IRQHandler+0x14c>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d034      	beq.n	8006712 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685a      	ldr	r2, [r3, #4]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0203 	bic.w	r2, r2, #3
 80066b6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d011      	beq.n	80066e4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c4:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_SPI_IRQHandler+0x1c8>)
 80066c6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd ff97 	bl	8004600 <HAL_DMA_Abort_IT>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d016      	beq.n	800671a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f0:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <HAL_SPI_IRQHandler+0x1c8>)
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fd ff81 	bl	8004600 <HAL_DMA_Abort_IT>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006710:	e003      	b.n	800671a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f808 	bl	8006728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006718:	e000      	b.n	800671c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800671a:	bf00      	nop
    return;
 800671c:	bf00      	nop
  }
}
 800671e:	3720      	adds	r7, #32
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	0800673b 	.word	0x0800673b

08006728 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff ffe7 	bl	8006728 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	603b      	str	r3, [r7, #0]
 8006770:	4613      	mov	r3, r2
 8006772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006774:	f7fc fb02 	bl	8002d7c <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4413      	add	r3, r2
 8006782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006784:	f7fc fafa 	bl	8002d7c <HAL_GetTick>
 8006788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800678a:	4b39      	ldr	r3, [pc, #228]	; (8006870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	015b      	lsls	r3, r3, #5
 8006790:	0d1b      	lsrs	r3, r3, #20
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	fb02 f303 	mul.w	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800679a:	e054      	b.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a2:	d050      	beq.n	8006846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067a4:	f7fc faea 	bl	8002d7c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	69fa      	ldr	r2, [r7, #28]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d902      	bls.n	80067ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d13d      	bne.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d2:	d111      	bne.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067dc:	d004      	beq.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e6:	d107      	bne.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d10f      	bne.n	8006822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e017      	b.n	8006866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	3b01      	subs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4013      	ands	r3, r2
 8006850:	68ba      	ldr	r2, [r7, #8]
 8006852:	429a      	cmp	r2, r3
 8006854:	bf0c      	ite	eq
 8006856:	2301      	moveq	r3, #1
 8006858:	2300      	movne	r3, #0
 800685a:	b2db      	uxtb	r3, r3
 800685c:	461a      	mov	r2, r3
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	429a      	cmp	r2, r3
 8006862:	d19b      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000000 	.word	0x20000000

08006874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff ff6a 	bl	8006764 <SPI_WaitFlagStateUntilTimeout>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e000      	b.n	80068a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d101      	bne.n	80068c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e041      	b.n	8006946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d106      	bne.n	80068dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7fb fe78 	bl	80025cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f000 fa70 	bl	8006dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	d001      	beq.n	8006968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e03a      	b.n	80069de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2202      	movs	r2, #2
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <HAL_TIM_Base_Start_IT+0x98>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x58>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006992:	d009      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x58>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_TIM_Base_Start_IT+0x9c>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0x58>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a13      	ldr	r2, [pc, #76]	; (80069f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d111      	bne.n	80069cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d010      	beq.n	80069dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ca:	e007      	b.n	80069dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bc80      	pop	{r7}
 80069e6:	4770      	bx	lr
 80069e8:	40012c00 	.word	0x40012c00
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800

080069f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d122      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d11b      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0202 	mvn.w	r2, #2
 8006a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f9b1 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9a4 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9b3 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d122      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0204 	mvn.w	r2, #4
 8006a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f987 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006a90:	e005      	b.n	8006a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f97a 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f989 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0208 	mvn.w	r2, #8
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f95d 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f950 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f95f 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0210 	mvn.w	r2, #16
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2208      	movs	r2, #8
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f933 	bl	8006d9e <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f926 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f935 	bl	8006db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0201 	mvn.w	r2, #1
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fc f828 	bl	8002bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fa77 	bl	8007092 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f8f9 	bl	8006dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d10e      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d107      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0220 	mvn.w	r2, #32
 8006bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa42 	bl	8007080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_TIM_ConfigClockSource+0x18>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0b3      	b.n	8006d84 <HAL_TIM_ConfigClockSource+0x180>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c54:	d03e      	beq.n	8006cd4 <HAL_TIM_ConfigClockSource+0xd0>
 8006c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5a:	f200 8087 	bhi.w	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	f000 8085 	beq.w	8006d70 <HAL_TIM_ConfigClockSource+0x16c>
 8006c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c6a:	d87f      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c6c:	2b70      	cmp	r3, #112	; 0x70
 8006c6e:	d01a      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0xa2>
 8006c70:	2b70      	cmp	r3, #112	; 0x70
 8006c72:	d87b      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c74:	2b60      	cmp	r3, #96	; 0x60
 8006c76:	d050      	beq.n	8006d1a <HAL_TIM_ConfigClockSource+0x116>
 8006c78:	2b60      	cmp	r3, #96	; 0x60
 8006c7a:	d877      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c7c:	2b50      	cmp	r3, #80	; 0x50
 8006c7e:	d03c      	beq.n	8006cfa <HAL_TIM_ConfigClockSource+0xf6>
 8006c80:	2b50      	cmp	r3, #80	; 0x50
 8006c82:	d873      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c84:	2b40      	cmp	r3, #64	; 0x40
 8006c86:	d058      	beq.n	8006d3a <HAL_TIM_ConfigClockSource+0x136>
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d86f      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c8c:	2b30      	cmp	r3, #48	; 0x30
 8006c8e:	d064      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006c90:	2b30      	cmp	r3, #48	; 0x30
 8006c92:	d86b      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d060      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d867      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05c      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
 8006ca0:	2b10      	cmp	r3, #16
 8006ca2:	d05a      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006ca4:	e062      	b.n	8006d6c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6899      	ldr	r1, [r3, #8]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f000 f966 	bl	8006f86 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cc8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	609a      	str	r2, [r3, #8]
      break;
 8006cd2:	e04e      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6899      	ldr	r1, [r3, #8]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f000 f94f 	bl	8006f86 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cf6:	609a      	str	r2, [r3, #8]
      break;
 8006cf8:	e03b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	461a      	mov	r2, r3
 8006d08:	f000 f8c6 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2150      	movs	r1, #80	; 0x50
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 f91d 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d18:	e02b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	6859      	ldr	r1, [r3, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f000 f8e4 	bl	8006ef4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2160      	movs	r1, #96	; 0x60
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f90d 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d38:	e01b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6818      	ldr	r0, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	461a      	mov	r2, r3
 8006d48:	f000 f8a6 	bl	8006e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2140      	movs	r1, #64	; 0x40
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 f8fd 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 8006d58:	e00b      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f000 f8f4 	bl	8006f52 <TIM_ITRx_SetConfig>
        break;
 8006d6a:	e002      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006d70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr

08006d9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bc80      	pop	{r7}
 8006dc0:	4770      	bx	lr

08006dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dca:	bf00      	nop
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a29      	ldr	r2, [pc, #164]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00b      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a26      	ldr	r2, [pc, #152]	; (8006e90 <TIM_Base_SetConfig+0xbc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0x30>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a25      	ldr	r2, [pc, #148]	; (8006e94 <TIM_Base_SetConfig+0xc0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d108      	bne.n	8006e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a1c      	ldr	r2, [pc, #112]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00b      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e24:	d007      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <TIM_Base_SetConfig+0xbc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_Base_SetConfig+0x62>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a18      	ldr	r2, [pc, #96]	; (8006e94 <TIM_Base_SetConfig+0xc0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d108      	bne.n	8006e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <TIM_Base_SetConfig+0xb8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d103      	bne.n	8006e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	691a      	ldr	r2, [r3, #16]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	615a      	str	r2, [r3, #20]
}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bc80      	pop	{r7}
 8006e8a:	4770      	bx	lr
 8006e8c:	40012c00 	.word	0x40012c00
 8006e90:	40000400 	.word	0x40000400
 8006e94:	40000800 	.word	0x40000800

08006e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	f023 0201 	bic.w	r2, r3, #1
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 030a 	bic.w	r3, r3, #10
 8006ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	621a      	str	r2, [r3, #32]
}
 8006eea:	bf00      	nop
 8006eec:	371c      	adds	r7, #28
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f023 0210 	bic.w	r2, r3, #16
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	031b      	lsls	r3, r3, #12
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	011b      	lsls	r3, r3, #4
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bc80      	pop	{r7}
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	609a      	str	r2, [r3, #8]
}
 8006fba:	bf00      	nop
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bc80      	pop	{r7}
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e046      	b.n	800706a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007002:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a16      	ldr	r2, [pc, #88]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007028:	d009      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a12      	ldr	r2, [pc, #72]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a10      	ldr	r2, [pc, #64]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10c      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4313      	orrs	r3, r2
 800704e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	bc80      	pop	{r7}
 8007072:	4770      	bx	lr
 8007074:	40012c00 	.word	0x40012c00
 8007078:	40000400 	.word	0x40000400
 800707c:	40000800 	.word	0x40000800

08007080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr

08007092 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800709a:	bf00      	nop
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e03f      	b.n	8007136 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d106      	bne.n	80070d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7fb faa4 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2224      	movs	r2, #36	; 0x24
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fc25 	bl	8007938 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800710c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800711c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b08a      	sub	sp, #40	; 0x28
 8007142:	af02      	add	r7, sp, #8
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4613      	mov	r3, r2
 800714c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b20      	cmp	r3, #32
 800715c:	d17c      	bne.n	8007258 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <HAL_UART_Transmit+0x2c>
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e075      	b.n	800725a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d101      	bne.n	800717c <HAL_UART_Transmit+0x3e>
 8007178:	2302      	movs	r3, #2
 800717a:	e06e      	b.n	800725a <HAL_UART_Transmit+0x11c>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2221      	movs	r2, #33	; 0x21
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007192:	f7fb fdf3 	bl	8002d7c <HAL_GetTick>
 8007196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ac:	d108      	bne.n	80071c0 <HAL_UART_Transmit+0x82>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	e003      	b.n	80071c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071c4:	2300      	movs	r3, #0
 80071c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071d0:	e02a      	b.n	8007228 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2200      	movs	r2, #0
 80071da:	2180      	movs	r1, #128	; 0x80
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fa11 	bl	8007604 <UART_WaitOnFlagUntilTimeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e036      	b.n	800725a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	3302      	adds	r3, #2
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e007      	b.n	800721a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	3301      	adds	r3, #1
 8007218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1cf      	bne.n	80071d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2200      	movs	r2, #0
 800723a:	2140      	movs	r1, #64	; 0x40
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f9e1 	bl	8007604 <UART_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e006      	b.n	800725a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3720      	adds	r7, #32
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08a      	sub	sp, #40	; 0x28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800728c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10d      	bne.n	80072b6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <HAL_UART_IRQHandler+0x52>
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	f003 0320 	and.w	r3, r3, #32
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fa99 	bl	80077e6 <UART_Receive_IT>
      return;
 80072b4:	e17b      	b.n	80075ae <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f000 80b1 	beq.w	8007420 <HAL_UART_IRQHandler+0x1bc>
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d105      	bne.n	80072d4 <HAL_UART_IRQHandler+0x70>
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 80a6 	beq.w	8007420 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_UART_IRQHandler+0x90>
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	f043 0201 	orr.w	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00a      	beq.n	8007314 <HAL_UART_IRQHandler+0xb0>
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730c:	f043 0202 	orr.w	r2, r3, #2
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <HAL_UART_IRQHandler+0xd0>
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	f043 0204 	orr.w	r2, r3, #4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00f      	beq.n	800735e <HAL_UART_IRQHandler+0xfa>
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_UART_IRQHandler+0xee>
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	f043 0208 	orr.w	r2, r3, #8
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 811e 	beq.w	80075a4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d007      	beq.n	8007382 <HAL_UART_IRQHandler+0x11e>
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa32 	bl	80077e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d102      	bne.n	80073aa <HAL_UART_IRQHandler+0x146>
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d031      	beq.n	800740e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f974 	bl	8007698 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d023      	beq.n	8007406 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073cc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d013      	beq.n	80073fe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	4a76      	ldr	r2, [pc, #472]	; (80075b4 <HAL_UART_IRQHandler+0x350>)
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fd f90c 	bl	8004600 <HAL_DMA_Abort_IT>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d016      	beq.n	800741c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073fc:	e00e      	b.n	800741c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f8ec 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007404:	e00a      	b.n	800741c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f8e8 	bl	80075dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	e006      	b.n	800741c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8e4 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800741a:	e0c3      	b.n	80075a4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	bf00      	nop
    return;
 800741e:	e0c1      	b.n	80075a4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	2b01      	cmp	r3, #1
 8007426:	f040 80a1 	bne.w	800756c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 809b 	beq.w	800756c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8095 	beq.w	800756c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007442:	2300      	movs	r3, #0
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007462:	2b00      	cmp	r3, #0
 8007464:	d04e      	beq.n	8007504 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007470:	8a3b      	ldrh	r3, [r7, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 8098 	beq.w	80075a8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800747c:	8a3a      	ldrh	r2, [r7, #16]
 800747e:	429a      	cmp	r2, r3
 8007480:	f080 8092 	bcs.w	80075a8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8a3a      	ldrh	r2, [r7, #16]
 8007488:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b20      	cmp	r3, #32
 8007492:	d02b      	beq.n	80074ec <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074a2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695a      	ldr	r2, [r3, #20]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074c2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0210 	bic.w	r2, r2, #16
 80074e0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fd f84f 	bl	800458a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f876 	bl	80075ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007502:	e051      	b.n	80075a8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800750c:	b29b      	uxth	r3, r3
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d047      	beq.n	80075ac <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800751c:	8a7b      	ldrh	r3, [r7, #18]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d044      	beq.n	80075ac <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007530:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0201 	bic.w	r2, r2, #1
 8007540:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0210 	bic.w	r2, r2, #16
 800755e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007560:	8a7b      	ldrh	r3, [r7, #18]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f842 	bl	80075ee <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800756a:	e01f      	b.n	80075ac <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007572:	2b00      	cmp	r3, #0
 8007574:	d008      	beq.n	8007588 <HAL_UART_IRQHandler+0x324>
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f8c9 	bl	8007718 <UART_Transmit_IT>
    return;
 8007586:	e012      	b.n	80075ae <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <HAL_UART_IRQHandler+0x34a>
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d008      	beq.n	80075ae <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 f90a 	bl	80077b6 <UART_EndTransmit_IT>
    return;
 80075a2:	e004      	b.n	80075ae <HAL_UART_IRQHandler+0x34a>
    return;
 80075a4:	bf00      	nop
 80075a6:	e002      	b.n	80075ae <HAL_UART_IRQHandler+0x34a>
      return;
 80075a8:	bf00      	nop
 80075aa:	e000      	b.n	80075ae <HAL_UART_IRQHandler+0x34a>
      return;
 80075ac:	bf00      	nop
  }
}
 80075ae:	3728      	adds	r7, #40	; 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	080076f1 	.word	0x080076f1

080075b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075d2:	bf00      	nop
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr

080075dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr

080075ee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4613      	mov	r3, r2
 8007612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007614:	e02c      	b.n	8007670 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761c:	d028      	beq.n	8007670 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <UART_WaitOnFlagUntilTimeout+0x30>
 8007624:	f7fb fbaa 	bl	8002d7c <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	429a      	cmp	r2, r3
 8007632:	d21d      	bcs.n	8007670 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007642:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0201 	bic.w	r2, r2, #1
 8007652:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e00f      	b.n	8007690 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4013      	ands	r3, r2
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	429a      	cmp	r2, r3
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	429a      	cmp	r2, r3
 800768c:	d0c3      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695a      	ldr	r2, [r3, #20]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d107      	bne.n	80076d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68da      	ldr	r2, [r3, #12]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 0210 	bic.w	r2, r2, #16
 80076d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bc80      	pop	{r7}
 80076ee:	4770      	bx	lr

080076f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff ff66 	bl	80075dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b21      	cmp	r3, #33	; 0x21
 800772a:	d13e      	bne.n	80077aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007734:	d114      	bne.n	8007760 <UART_Transmit_IT+0x48>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d110      	bne.n	8007760 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	881b      	ldrh	r3, [r3, #0]
 8007748:	461a      	mov	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007752:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	1c9a      	adds	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	621a      	str	r2, [r3, #32]
 800775e:	e008      	b.n	8007772 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	1c59      	adds	r1, r3, #1
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6211      	str	r1, [r2, #32]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007776:	b29b      	uxth	r3, r3
 8007778:	3b01      	subs	r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4619      	mov	r1, r3
 8007780:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10f      	bne.n	80077a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007794:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e000      	b.n	80077ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077aa:	2302      	movs	r3, #2
  }
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b082      	sub	sp, #8
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7ff feee 	bl	80075b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b22      	cmp	r3, #34	; 0x22
 80077f8:	f040 8099 	bne.w	800792e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007804:	d117      	bne.n	8007836 <UART_Receive_IT+0x50>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d113      	bne.n	8007836 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b29b      	uxth	r3, r3
 8007820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007824:	b29a      	uxth	r2, r3
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782e:	1c9a      	adds	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	629a      	str	r2, [r3, #40]	; 0x28
 8007834:	e026      	b.n	8007884 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800783c:	2300      	movs	r3, #0
 800783e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007848:	d007      	beq.n	800785a <UART_Receive_IT+0x74>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <UART_Receive_IT+0x82>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	b2da      	uxtb	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	e008      	b.n	800787a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007874:	b2da      	uxtb	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29b      	uxth	r3, r3
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	4619      	mov	r1, r3
 8007892:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007894:	2b00      	cmp	r3, #0
 8007896:	d148      	bne.n	800792a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0220 	bic.w	r2, r2, #32
 80078a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	695a      	ldr	r2, [r3, #20]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d123      	bne.n	8007920 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0210 	bic.w	r2, r2, #16
 80078ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b10      	cmp	r3, #16
 80078fa:	d10a      	bne.n	8007912 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fe68 	bl	80075ee <HAL_UARTEx_RxEventCallback>
 800791e:	e002      	b.n	8007926 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fe52 	bl	80075ca <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e002      	b.n	8007930 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800792e:	2302      	movs	r3, #2
  }
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68da      	ldr	r2, [r3, #12]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007972:	f023 030c 	bic.w	r3, r3, #12
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6812      	ldr	r2, [r2, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	430b      	orrs	r3, r1
 800797e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a2c      	ldr	r2, [pc, #176]	; (8007a4c <UART_SetConfig+0x114>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d103      	bne.n	80079a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fe face 	bl	8005f40 <HAL_RCC_GetPCLK2Freq>
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	e002      	b.n	80079ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079a8:	f7fe fab6 	bl	8005f18 <HAL_RCC_GetPCLK1Freq>
 80079ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009a      	lsls	r2, r3, #2
 80079b8:	441a      	add	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <UART_SetConfig+0x118>)
 80079c6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ca:	095b      	lsrs	r3, r3, #5
 80079cc:	0119      	lsls	r1, r3, #4
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009a      	lsls	r2, r3, #2
 80079d8:	441a      	add	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80079e4:	4b1a      	ldr	r3, [pc, #104]	; (8007a50 <UART_SetConfig+0x118>)
 80079e6:	fba3 0302 	umull	r0, r3, r3, r2
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	2064      	movs	r0, #100	; 0x64
 80079ee:	fb00 f303 	mul.w	r3, r0, r3
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	3332      	adds	r3, #50	; 0x32
 80079f8:	4a15      	ldr	r2, [pc, #84]	; (8007a50 <UART_SetConfig+0x118>)
 80079fa:	fba2 2303 	umull	r2, r3, r2, r3
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a04:	4419      	add	r1, r3
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009a      	lsls	r2, r3, #2
 8007a10:	441a      	add	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a1c:	4b0c      	ldr	r3, [pc, #48]	; (8007a50 <UART_SetConfig+0x118>)
 8007a1e:	fba3 0302 	umull	r0, r3, r3, r2
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	2064      	movs	r0, #100	; 0x64
 8007a26:	fb00 f303 	mul.w	r3, r0, r3
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	3332      	adds	r3, #50	; 0x32
 8007a30:	4a07      	ldr	r2, [pc, #28]	; (8007a50 <UART_SetConfig+0x118>)
 8007a32:	fba2 2303 	umull	r2, r3, r2, r3
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	f003 020f 	and.w	r2, r3, #15
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	440a      	add	r2, r1
 8007a42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	51eb851f 	.word	0x51eb851f

08007a54 <__errno>:
 8007a54:	4b01      	ldr	r3, [pc, #4]	; (8007a5c <__errno+0x8>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	2000003c 	.word	0x2000003c

08007a60 <__libc_init_array>:
 8007a60:	b570      	push	{r4, r5, r6, lr}
 8007a62:	2600      	movs	r6, #0
 8007a64:	4d0c      	ldr	r5, [pc, #48]	; (8007a98 <__libc_init_array+0x38>)
 8007a66:	4c0d      	ldr	r4, [pc, #52]	; (8007a9c <__libc_init_array+0x3c>)
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	42a6      	cmp	r6, r4
 8007a6e:	d109      	bne.n	8007a84 <__libc_init_array+0x24>
 8007a70:	f003 f858 	bl	800ab24 <_init>
 8007a74:	2600      	movs	r6, #0
 8007a76:	4d0a      	ldr	r5, [pc, #40]	; (8007aa0 <__libc_init_array+0x40>)
 8007a78:	4c0a      	ldr	r4, [pc, #40]	; (8007aa4 <__libc_init_array+0x44>)
 8007a7a:	1b64      	subs	r4, r4, r5
 8007a7c:	10a4      	asrs	r4, r4, #2
 8007a7e:	42a6      	cmp	r6, r4
 8007a80:	d105      	bne.n	8007a8e <__libc_init_array+0x2e>
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a88:	4798      	blx	r3
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7ee      	b.n	8007a6c <__libc_init_array+0xc>
 8007a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a92:	4798      	blx	r3
 8007a94:	3601      	adds	r6, #1
 8007a96:	e7f2      	b.n	8007a7e <__libc_init_array+0x1e>
 8007a98:	0800b11c 	.word	0x0800b11c
 8007a9c:	0800b11c 	.word	0x0800b11c
 8007aa0:	0800b11c 	.word	0x0800b11c
 8007aa4:	0800b120 	.word	0x0800b120

08007aa8 <memset>:
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4402      	add	r2, r0
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d100      	bne.n	8007ab2 <memset+0xa>
 8007ab0:	4770      	bx	lr
 8007ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab6:	e7f9      	b.n	8007aac <memset+0x4>

08007ab8 <__cvt>:
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007abe:	461f      	mov	r7, r3
 8007ac0:	bfbb      	ittet	lt
 8007ac2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007ac6:	461f      	movlt	r7, r3
 8007ac8:	2300      	movge	r3, #0
 8007aca:	232d      	movlt	r3, #45	; 0x2d
 8007acc:	b088      	sub	sp, #32
 8007ace:	4614      	mov	r4, r2
 8007ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ad2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007ad4:	7013      	strb	r3, [r2, #0]
 8007ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ad8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007adc:	f023 0820 	bic.w	r8, r3, #32
 8007ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ae4:	d005      	beq.n	8007af2 <__cvt+0x3a>
 8007ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007aea:	d100      	bne.n	8007aee <__cvt+0x36>
 8007aec:	3501      	adds	r5, #1
 8007aee:	2302      	movs	r3, #2
 8007af0:	e000      	b.n	8007af4 <__cvt+0x3c>
 8007af2:	2303      	movs	r3, #3
 8007af4:	aa07      	add	r2, sp, #28
 8007af6:	9204      	str	r2, [sp, #16]
 8007af8:	aa06      	add	r2, sp, #24
 8007afa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007afe:	e9cd 3500 	strd	r3, r5, [sp]
 8007b02:	4622      	mov	r2, r4
 8007b04:	463b      	mov	r3, r7
 8007b06:	f000 fe2f 	bl	8008768 <_dtoa_r>
 8007b0a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007b0e:	4606      	mov	r6, r0
 8007b10:	d102      	bne.n	8007b18 <__cvt+0x60>
 8007b12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b14:	07db      	lsls	r3, r3, #31
 8007b16:	d522      	bpl.n	8007b5e <__cvt+0xa6>
 8007b18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b1c:	eb06 0905 	add.w	r9, r6, r5
 8007b20:	d110      	bne.n	8007b44 <__cvt+0x8c>
 8007b22:	7833      	ldrb	r3, [r6, #0]
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	d10a      	bne.n	8007b3e <__cvt+0x86>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8007b34:	b918      	cbnz	r0, 8007b3e <__cvt+0x86>
 8007b36:	f1c5 0501 	rsb	r5, r5, #1
 8007b3a:	f8ca 5000 	str.w	r5, [sl]
 8007b3e:	f8da 3000 	ldr.w	r3, [sl]
 8007b42:	4499      	add	r9, r3
 8007b44:	2200      	movs	r2, #0
 8007b46:	2300      	movs	r3, #0
 8007b48:	4620      	mov	r0, r4
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 8007b50:	b108      	cbz	r0, 8007b56 <__cvt+0x9e>
 8007b52:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b56:	2230      	movs	r2, #48	; 0x30
 8007b58:	9b07      	ldr	r3, [sp, #28]
 8007b5a:	454b      	cmp	r3, r9
 8007b5c:	d307      	bcc.n	8007b6e <__cvt+0xb6>
 8007b5e:	4630      	mov	r0, r6
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b64:	1b9b      	subs	r3, r3, r6
 8007b66:	6013      	str	r3, [r2, #0]
 8007b68:	b008      	add	sp, #32
 8007b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6e:	1c59      	adds	r1, r3, #1
 8007b70:	9107      	str	r1, [sp, #28]
 8007b72:	701a      	strb	r2, [r3, #0]
 8007b74:	e7f0      	b.n	8007b58 <__cvt+0xa0>

08007b76 <__exponent>:
 8007b76:	4603      	mov	r3, r0
 8007b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7a:	2900      	cmp	r1, #0
 8007b7c:	f803 2b02 	strb.w	r2, [r3], #2
 8007b80:	bfb6      	itet	lt
 8007b82:	222d      	movlt	r2, #45	; 0x2d
 8007b84:	222b      	movge	r2, #43	; 0x2b
 8007b86:	4249      	neglt	r1, r1
 8007b88:	2909      	cmp	r1, #9
 8007b8a:	7042      	strb	r2, [r0, #1]
 8007b8c:	dd2b      	ble.n	8007be6 <__exponent+0x70>
 8007b8e:	f10d 0407 	add.w	r4, sp, #7
 8007b92:	46a4      	mov	ip, r4
 8007b94:	270a      	movs	r7, #10
 8007b96:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b9a:	460a      	mov	r2, r1
 8007b9c:	46a6      	mov	lr, r4
 8007b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8007ba2:	2a63      	cmp	r2, #99	; 0x63
 8007ba4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007ba8:	4631      	mov	r1, r6
 8007baa:	f104 34ff 	add.w	r4, r4, #4294967295
 8007bae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007bb2:	dcf0      	bgt.n	8007b96 <__exponent+0x20>
 8007bb4:	3130      	adds	r1, #48	; 0x30
 8007bb6:	f1ae 0502 	sub.w	r5, lr, #2
 8007bba:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	1c44      	adds	r4, r0, #1
 8007bc2:	4561      	cmp	r1, ip
 8007bc4:	d30a      	bcc.n	8007bdc <__exponent+0x66>
 8007bc6:	f10d 0209 	add.w	r2, sp, #9
 8007bca:	eba2 020e 	sub.w	r2, r2, lr
 8007bce:	4565      	cmp	r5, ip
 8007bd0:	bf88      	it	hi
 8007bd2:	2200      	movhi	r2, #0
 8007bd4:	4413      	add	r3, r2
 8007bd6:	1a18      	subs	r0, r3, r0
 8007bd8:	b003      	add	sp, #12
 8007bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007be0:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007be4:	e7ed      	b.n	8007bc2 <__exponent+0x4c>
 8007be6:	2330      	movs	r3, #48	; 0x30
 8007be8:	3130      	adds	r1, #48	; 0x30
 8007bea:	7083      	strb	r3, [r0, #2]
 8007bec:	70c1      	strb	r1, [r0, #3]
 8007bee:	1d03      	adds	r3, r0, #4
 8007bf0:	e7f1      	b.n	8007bd6 <__exponent+0x60>
	...

08007bf4 <_printf_float>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	b091      	sub	sp, #68	; 0x44
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007c00:	4616      	mov	r6, r2
 8007c02:	461f      	mov	r7, r3
 8007c04:	4605      	mov	r5, r0
 8007c06:	f001 fd51 	bl	80096ac <_localeconv_r>
 8007c0a:	6803      	ldr	r3, [r0, #0]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c10:	f7f8 fa9e 	bl	8000150 <strlen>
 8007c14:	2300      	movs	r3, #0
 8007c16:	930e      	str	r3, [sp, #56]	; 0x38
 8007c18:	f8d8 3000 	ldr.w	r3, [r8]
 8007c1c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c1e:	3307      	adds	r3, #7
 8007c20:	f023 0307 	bic.w	r3, r3, #7
 8007c24:	f103 0208 	add.w	r2, r3, #8
 8007c28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8007c30:	f8c8 2000 	str.w	r2, [r8]
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c3c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007c40:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	4640      	mov	r0, r8
 8007c4c:	4b9c      	ldr	r3, [pc, #624]	; (8007ec0 <_printf_float+0x2cc>)
 8007c4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c50:	f7f8 fedc 	bl	8000a0c <__aeabi_dcmpun>
 8007c54:	bb70      	cbnz	r0, 8007cb4 <_printf_float+0xc0>
 8007c56:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	4b98      	ldr	r3, [pc, #608]	; (8007ec0 <_printf_float+0x2cc>)
 8007c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c60:	f7f8 feb6 	bl	80009d0 <__aeabi_dcmple>
 8007c64:	bb30      	cbnz	r0, 8007cb4 <_printf_float+0xc0>
 8007c66:	2200      	movs	r2, #0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	f7f8 fea5 	bl	80009bc <__aeabi_dcmplt>
 8007c72:	b110      	cbz	r0, 8007c7a <_printf_float+0x86>
 8007c74:	232d      	movs	r3, #45	; 0x2d
 8007c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7a:	4b92      	ldr	r3, [pc, #584]	; (8007ec4 <_printf_float+0x2d0>)
 8007c7c:	4892      	ldr	r0, [pc, #584]	; (8007ec8 <_printf_float+0x2d4>)
 8007c7e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007c82:	bf94      	ite	ls
 8007c84:	4698      	movls	r8, r3
 8007c86:	4680      	movhi	r8, r0
 8007c88:	2303      	movs	r3, #3
 8007c8a:	f04f 0a00 	mov.w	sl, #0
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	f02b 0304 	bic.w	r3, fp, #4
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	4633      	mov	r3, r6
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	9700      	str	r7, [sp, #0]
 8007c9e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007ca0:	f000 f9d4 	bl	800804c <_printf_common>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f040 8090 	bne.w	8007dca <_printf_float+0x1d6>
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	b011      	add	sp, #68	; 0x44
 8007cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cb4:	4642      	mov	r2, r8
 8007cb6:	4653      	mov	r3, sl
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4651      	mov	r1, sl
 8007cbc:	f7f8 fea6 	bl	8000a0c <__aeabi_dcmpun>
 8007cc0:	b148      	cbz	r0, 8007cd6 <_printf_float+0xe2>
 8007cc2:	f1ba 0f00 	cmp.w	sl, #0
 8007cc6:	bfb8      	it	lt
 8007cc8:	232d      	movlt	r3, #45	; 0x2d
 8007cca:	4880      	ldr	r0, [pc, #512]	; (8007ecc <_printf_float+0x2d8>)
 8007ccc:	bfb8      	it	lt
 8007cce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cd2:	4b7f      	ldr	r3, [pc, #508]	; (8007ed0 <_printf_float+0x2dc>)
 8007cd4:	e7d3      	b.n	8007c7e <_printf_float+0x8a>
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007cdc:	1c5a      	adds	r2, r3, #1
 8007cde:	d142      	bne.n	8007d66 <_printf_float+0x172>
 8007ce0:	2306      	movs	r3, #6
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	9206      	str	r2, [sp, #24]
 8007ce8:	aa0e      	add	r2, sp, #56	; 0x38
 8007cea:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007cee:	aa0d      	add	r2, sp, #52	; 0x34
 8007cf0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007cf4:	9203      	str	r2, [sp, #12]
 8007cf6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8007cfa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	4642      	mov	r2, r8
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	4628      	mov	r0, r5
 8007d08:	4653      	mov	r3, sl
 8007d0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007d0c:	f7ff fed4 	bl	8007ab8 <__cvt>
 8007d10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d12:	4680      	mov	r8, r0
 8007d14:	2947      	cmp	r1, #71	; 0x47
 8007d16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007d18:	d108      	bne.n	8007d2c <_printf_float+0x138>
 8007d1a:	1cc8      	adds	r0, r1, #3
 8007d1c:	db02      	blt.n	8007d24 <_printf_float+0x130>
 8007d1e:	6863      	ldr	r3, [r4, #4]
 8007d20:	4299      	cmp	r1, r3
 8007d22:	dd40      	ble.n	8007da6 <_printf_float+0x1b2>
 8007d24:	f1a9 0902 	sub.w	r9, r9, #2
 8007d28:	fa5f f989 	uxtb.w	r9, r9
 8007d2c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007d30:	d81f      	bhi.n	8007d72 <_printf_float+0x17e>
 8007d32:	464a      	mov	r2, r9
 8007d34:	3901      	subs	r1, #1
 8007d36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d3a:	910d      	str	r1, [sp, #52]	; 0x34
 8007d3c:	f7ff ff1b 	bl	8007b76 <__exponent>
 8007d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d42:	4682      	mov	sl, r0
 8007d44:	1813      	adds	r3, r2, r0
 8007d46:	2a01      	cmp	r2, #1
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	dc02      	bgt.n	8007d52 <_printf_float+0x15e>
 8007d4c:	6822      	ldr	r2, [r4, #0]
 8007d4e:	07d2      	lsls	r2, r2, #31
 8007d50:	d501      	bpl.n	8007d56 <_printf_float+0x162>
 8007d52:	3301      	adds	r3, #1
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d09b      	beq.n	8007c96 <_printf_float+0xa2>
 8007d5e:	232d      	movs	r3, #45	; 0x2d
 8007d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d64:	e797      	b.n	8007c96 <_printf_float+0xa2>
 8007d66:	2947      	cmp	r1, #71	; 0x47
 8007d68:	d1bc      	bne.n	8007ce4 <_printf_float+0xf0>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ba      	bne.n	8007ce4 <_printf_float+0xf0>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7b7      	b.n	8007ce2 <_printf_float+0xee>
 8007d72:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007d76:	d118      	bne.n	8007daa <_printf_float+0x1b6>
 8007d78:	2900      	cmp	r1, #0
 8007d7a:	6863      	ldr	r3, [r4, #4]
 8007d7c:	dd0b      	ble.n	8007d96 <_printf_float+0x1a2>
 8007d7e:	6121      	str	r1, [r4, #16]
 8007d80:	b913      	cbnz	r3, 8007d88 <_printf_float+0x194>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	07d0      	lsls	r0, r2, #31
 8007d86:	d502      	bpl.n	8007d8e <_printf_float+0x19a>
 8007d88:	3301      	adds	r3, #1
 8007d8a:	440b      	add	r3, r1
 8007d8c:	6123      	str	r3, [r4, #16]
 8007d8e:	f04f 0a00 	mov.w	sl, #0
 8007d92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d94:	e7df      	b.n	8007d56 <_printf_float+0x162>
 8007d96:	b913      	cbnz	r3, 8007d9e <_printf_float+0x1aa>
 8007d98:	6822      	ldr	r2, [r4, #0]
 8007d9a:	07d2      	lsls	r2, r2, #31
 8007d9c:	d501      	bpl.n	8007da2 <_printf_float+0x1ae>
 8007d9e:	3302      	adds	r3, #2
 8007da0:	e7f4      	b.n	8007d8c <_printf_float+0x198>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e7f2      	b.n	8007d8c <_printf_float+0x198>
 8007da6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dac:	4299      	cmp	r1, r3
 8007dae:	db05      	blt.n	8007dbc <_printf_float+0x1c8>
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	6121      	str	r1, [r4, #16]
 8007db4:	07d8      	lsls	r0, r3, #31
 8007db6:	d5ea      	bpl.n	8007d8e <_printf_float+0x19a>
 8007db8:	1c4b      	adds	r3, r1, #1
 8007dba:	e7e7      	b.n	8007d8c <_printf_float+0x198>
 8007dbc:	2900      	cmp	r1, #0
 8007dbe:	bfcc      	ite	gt
 8007dc0:	2201      	movgt	r2, #1
 8007dc2:	f1c1 0202 	rsble	r2, r1, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	e7e0      	b.n	8007d8c <_printf_float+0x198>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	055a      	lsls	r2, r3, #21
 8007dce:	d407      	bmi.n	8007de0 <_printf_float+0x1ec>
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	4628      	mov	r0, r5
 8007dd8:	47b8      	blx	r7
 8007dda:	3001      	adds	r0, #1
 8007ddc:	d12b      	bne.n	8007e36 <_printf_float+0x242>
 8007dde:	e764      	b.n	8007caa <_printf_float+0xb6>
 8007de0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007de4:	f240 80dd 	bls.w	8007fa2 <_printf_float+0x3ae>
 8007de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dec:	2200      	movs	r2, #0
 8007dee:	2300      	movs	r3, #0
 8007df0:	f7f8 fdda 	bl	80009a8 <__aeabi_dcmpeq>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d033      	beq.n	8007e60 <_printf_float+0x26c>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	4a35      	ldr	r2, [pc, #212]	; (8007ed4 <_printf_float+0x2e0>)
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f af51 	beq.w	8007caa <_printf_float+0xb6>
 8007e08:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	db02      	blt.n	8007e16 <_printf_float+0x222>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07d8      	lsls	r0, r3, #31
 8007e14:	d50f      	bpl.n	8007e36 <_printf_float+0x242>
 8007e16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f af42 	beq.w	8007caa <_printf_float+0xb6>
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	f104 091a 	add.w	r9, r4, #26
 8007e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e30:	3b01      	subs	r3, #1
 8007e32:	4543      	cmp	r3, r8
 8007e34:	dc09      	bgt.n	8007e4a <_printf_float+0x256>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	079b      	lsls	r3, r3, #30
 8007e3a:	f100 8102 	bmi.w	8008042 <_printf_float+0x44e>
 8007e3e:	68e0      	ldr	r0, [r4, #12]
 8007e40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e42:	4298      	cmp	r0, r3
 8007e44:	bfb8      	it	lt
 8007e46:	4618      	movlt	r0, r3
 8007e48:	e731      	b.n	8007cae <_printf_float+0xba>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	464a      	mov	r2, r9
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f af28 	beq.w	8007caa <_printf_float+0xb6>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	e7e6      	b.n	8007e2e <_printf_float+0x23a>
 8007e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	dc38      	bgt.n	8007ed8 <_printf_float+0x2e4>
 8007e66:	2301      	movs	r3, #1
 8007e68:	4631      	mov	r1, r6
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4a19      	ldr	r2, [pc, #100]	; (8007ed4 <_printf_float+0x2e0>)
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	f43f af1a 	beq.w	8007caa <_printf_float+0xb6>
 8007e76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	d102      	bne.n	8007e84 <_printf_float+0x290>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	07d9      	lsls	r1, r3, #31
 8007e82:	d5d8      	bpl.n	8007e36 <_printf_float+0x242>
 8007e84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af0b 	beq.w	8007caa <_printf_float+0xb6>
 8007e94:	f04f 0900 	mov.w	r9, #0
 8007e98:	f104 0a1a 	add.w	sl, r4, #26
 8007e9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e9e:	425b      	negs	r3, r3
 8007ea0:	454b      	cmp	r3, r9
 8007ea2:	dc01      	bgt.n	8007ea8 <_printf_float+0x2b4>
 8007ea4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ea6:	e794      	b.n	8007dd2 <_printf_float+0x1de>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4652      	mov	r2, sl
 8007eac:	4631      	mov	r1, r6
 8007eae:	4628      	mov	r0, r5
 8007eb0:	47b8      	blx	r7
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	f43f aef9 	beq.w	8007caa <_printf_float+0xb6>
 8007eb8:	f109 0901 	add.w	r9, r9, #1
 8007ebc:	e7ee      	b.n	8007e9c <_printf_float+0x2a8>
 8007ebe:	bf00      	nop
 8007ec0:	7fefffff 	.word	0x7fefffff
 8007ec4:	0800ad48 	.word	0x0800ad48
 8007ec8:	0800ad4c 	.word	0x0800ad4c
 8007ecc:	0800ad54 	.word	0x0800ad54
 8007ed0:	0800ad50 	.word	0x0800ad50
 8007ed4:	0800ad58 	.word	0x0800ad58
 8007ed8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007edc:	429a      	cmp	r2, r3
 8007ede:	bfa8      	it	ge
 8007ee0:	461a      	movge	r2, r3
 8007ee2:	2a00      	cmp	r2, #0
 8007ee4:	4691      	mov	r9, r2
 8007ee6:	dc37      	bgt.n	8007f58 <_printf_float+0x364>
 8007ee8:	f04f 0b00 	mov.w	fp, #0
 8007eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ef0:	f104 021a 	add.w	r2, r4, #26
 8007ef4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007ef8:	ebaa 0309 	sub.w	r3, sl, r9
 8007efc:	455b      	cmp	r3, fp
 8007efe:	dc33      	bgt.n	8007f68 <_printf_float+0x374>
 8007f00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f04:	429a      	cmp	r2, r3
 8007f06:	db3b      	blt.n	8007f80 <_printf_float+0x38c>
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	07da      	lsls	r2, r3, #31
 8007f0c:	d438      	bmi.n	8007f80 <_printf_float+0x38c>
 8007f0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007f12:	eba3 020a 	sub.w	r2, r3, sl
 8007f16:	eba3 0901 	sub.w	r9, r3, r1
 8007f1a:	4591      	cmp	r9, r2
 8007f1c:	bfa8      	it	ge
 8007f1e:	4691      	movge	r9, r2
 8007f20:	f1b9 0f00 	cmp.w	r9, #0
 8007f24:	dc34      	bgt.n	8007f90 <_printf_float+0x39c>
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f2e:	f104 0a1a 	add.w	sl, r4, #26
 8007f32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	eba3 0309 	sub.w	r3, r3, r9
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	f77f af7a 	ble.w	8007e36 <_printf_float+0x242>
 8007f42:	2301      	movs	r3, #1
 8007f44:	4652      	mov	r2, sl
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f aeac 	beq.w	8007caa <_printf_float+0xb6>
 8007f52:	f108 0801 	add.w	r8, r8, #1
 8007f56:	e7ec      	b.n	8007f32 <_printf_float+0x33e>
 8007f58:	4613      	mov	r3, r2
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	4628      	mov	r0, r5
 8007f60:	47b8      	blx	r7
 8007f62:	3001      	adds	r0, #1
 8007f64:	d1c0      	bne.n	8007ee8 <_printf_float+0x2f4>
 8007f66:	e6a0      	b.n	8007caa <_printf_float+0xb6>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f70:	47b8      	blx	r7
 8007f72:	3001      	adds	r0, #1
 8007f74:	f43f ae99 	beq.w	8007caa <_printf_float+0xb6>
 8007f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f7a:	f10b 0b01 	add.w	fp, fp, #1
 8007f7e:	e7b9      	b.n	8007ef4 <_printf_float+0x300>
 8007f80:	4631      	mov	r1, r6
 8007f82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f86:	4628      	mov	r0, r5
 8007f88:	47b8      	blx	r7
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d1bf      	bne.n	8007f0e <_printf_float+0x31a>
 8007f8e:	e68c      	b.n	8007caa <_printf_float+0xb6>
 8007f90:	464b      	mov	r3, r9
 8007f92:	4631      	mov	r1, r6
 8007f94:	4628      	mov	r0, r5
 8007f96:	eb08 020a 	add.w	r2, r8, sl
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d1c2      	bne.n	8007f26 <_printf_float+0x332>
 8007fa0:	e683      	b.n	8007caa <_printf_float+0xb6>
 8007fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007fa4:	2a01      	cmp	r2, #1
 8007fa6:	dc01      	bgt.n	8007fac <_printf_float+0x3b8>
 8007fa8:	07db      	lsls	r3, r3, #31
 8007faa:	d537      	bpl.n	800801c <_printf_float+0x428>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4642      	mov	r2, r8
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f ae77 	beq.w	8007caa <_printf_float+0xb6>
 8007fbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f ae6f 	beq.w	8007caa <_printf_float+0xb6>
 8007fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f7f8 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_printf_float+0x41e>
 8007fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fdc:	f108 0201 	add.w	r2, r8, #1
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d10e      	bne.n	800800a <_printf_float+0x416>
 8007fec:	e65d      	b.n	8007caa <_printf_float+0xb6>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	464a      	mov	r2, r9
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae56 	beq.w	8007caa <_printf_float+0xb6>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008004:	3b01      	subs	r3, #1
 8008006:	4543      	cmp	r3, r8
 8008008:	dcf1      	bgt.n	8007fee <_printf_float+0x3fa>
 800800a:	4653      	mov	r3, sl
 800800c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008010:	e6e0      	b.n	8007dd4 <_printf_float+0x1e0>
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	f104 091a 	add.w	r9, r4, #26
 800801a:	e7f2      	b.n	8008002 <_printf_float+0x40e>
 800801c:	2301      	movs	r3, #1
 800801e:	4642      	mov	r2, r8
 8008020:	e7df      	b.n	8007fe2 <_printf_float+0x3ee>
 8008022:	2301      	movs	r3, #1
 8008024:	464a      	mov	r2, r9
 8008026:	4631      	mov	r1, r6
 8008028:	4628      	mov	r0, r5
 800802a:	47b8      	blx	r7
 800802c:	3001      	adds	r0, #1
 800802e:	f43f ae3c 	beq.w	8007caa <_printf_float+0xb6>
 8008032:	f108 0801 	add.w	r8, r8, #1
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800803a:	1a5b      	subs	r3, r3, r1
 800803c:	4543      	cmp	r3, r8
 800803e:	dcf0      	bgt.n	8008022 <_printf_float+0x42e>
 8008040:	e6fd      	b.n	8007e3e <_printf_float+0x24a>
 8008042:	f04f 0800 	mov.w	r8, #0
 8008046:	f104 0919 	add.w	r9, r4, #25
 800804a:	e7f4      	b.n	8008036 <_printf_float+0x442>

0800804c <_printf_common>:
 800804c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	4616      	mov	r6, r2
 8008052:	4699      	mov	r9, r3
 8008054:	688a      	ldr	r2, [r1, #8]
 8008056:	690b      	ldr	r3, [r1, #16]
 8008058:	4607      	mov	r7, r0
 800805a:	4293      	cmp	r3, r2
 800805c:	bfb8      	it	lt
 800805e:	4613      	movlt	r3, r2
 8008060:	6033      	str	r3, [r6, #0]
 8008062:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008066:	460c      	mov	r4, r1
 8008068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800806c:	b10a      	cbz	r2, 8008072 <_printf_common+0x26>
 800806e:	3301      	adds	r3, #1
 8008070:	6033      	str	r3, [r6, #0]
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	0699      	lsls	r1, r3, #26
 8008076:	bf42      	ittt	mi
 8008078:	6833      	ldrmi	r3, [r6, #0]
 800807a:	3302      	addmi	r3, #2
 800807c:	6033      	strmi	r3, [r6, #0]
 800807e:	6825      	ldr	r5, [r4, #0]
 8008080:	f015 0506 	ands.w	r5, r5, #6
 8008084:	d106      	bne.n	8008094 <_printf_common+0x48>
 8008086:	f104 0a19 	add.w	sl, r4, #25
 800808a:	68e3      	ldr	r3, [r4, #12]
 800808c:	6832      	ldr	r2, [r6, #0]
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	42ab      	cmp	r3, r5
 8008092:	dc28      	bgt.n	80080e6 <_printf_common+0x9a>
 8008094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008098:	1e13      	subs	r3, r2, #0
 800809a:	6822      	ldr	r2, [r4, #0]
 800809c:	bf18      	it	ne
 800809e:	2301      	movne	r3, #1
 80080a0:	0692      	lsls	r2, r2, #26
 80080a2:	d42d      	bmi.n	8008100 <_printf_common+0xb4>
 80080a4:	4649      	mov	r1, r9
 80080a6:	4638      	mov	r0, r7
 80080a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ac:	47c0      	blx	r8
 80080ae:	3001      	adds	r0, #1
 80080b0:	d020      	beq.n	80080f4 <_printf_common+0xa8>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	68e5      	ldr	r5, [r4, #12]
 80080b6:	f003 0306 	and.w	r3, r3, #6
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	bf18      	it	ne
 80080be:	2500      	movne	r5, #0
 80080c0:	6832      	ldr	r2, [r6, #0]
 80080c2:	f04f 0600 	mov.w	r6, #0
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	bf08      	it	eq
 80080ca:	1aad      	subeq	r5, r5, r2
 80080cc:	6922      	ldr	r2, [r4, #16]
 80080ce:	bf08      	it	eq
 80080d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080d4:	4293      	cmp	r3, r2
 80080d6:	bfc4      	itt	gt
 80080d8:	1a9b      	subgt	r3, r3, r2
 80080da:	18ed      	addgt	r5, r5, r3
 80080dc:	341a      	adds	r4, #26
 80080de:	42b5      	cmp	r5, r6
 80080e0:	d11a      	bne.n	8008118 <_printf_common+0xcc>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e008      	b.n	80080f8 <_printf_common+0xac>
 80080e6:	2301      	movs	r3, #1
 80080e8:	4652      	mov	r2, sl
 80080ea:	4649      	mov	r1, r9
 80080ec:	4638      	mov	r0, r7
 80080ee:	47c0      	blx	r8
 80080f0:	3001      	adds	r0, #1
 80080f2:	d103      	bne.n	80080fc <_printf_common+0xb0>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fc:	3501      	adds	r5, #1
 80080fe:	e7c4      	b.n	800808a <_printf_common+0x3e>
 8008100:	2030      	movs	r0, #48	; 0x30
 8008102:	18e1      	adds	r1, r4, r3
 8008104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800810e:	4422      	add	r2, r4
 8008110:	3302      	adds	r3, #2
 8008112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008116:	e7c5      	b.n	80080a4 <_printf_common+0x58>
 8008118:	2301      	movs	r3, #1
 800811a:	4622      	mov	r2, r4
 800811c:	4649      	mov	r1, r9
 800811e:	4638      	mov	r0, r7
 8008120:	47c0      	blx	r8
 8008122:	3001      	adds	r0, #1
 8008124:	d0e6      	beq.n	80080f4 <_printf_common+0xa8>
 8008126:	3601      	adds	r6, #1
 8008128:	e7d9      	b.n	80080de <_printf_common+0x92>
	...

0800812c <_printf_i>:
 800812c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008130:	7e0f      	ldrb	r7, [r1, #24]
 8008132:	4691      	mov	r9, r2
 8008134:	2f78      	cmp	r7, #120	; 0x78
 8008136:	4680      	mov	r8, r0
 8008138:	460c      	mov	r4, r1
 800813a:	469a      	mov	sl, r3
 800813c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800813e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008142:	d807      	bhi.n	8008154 <_printf_i+0x28>
 8008144:	2f62      	cmp	r7, #98	; 0x62
 8008146:	d80a      	bhi.n	800815e <_printf_i+0x32>
 8008148:	2f00      	cmp	r7, #0
 800814a:	f000 80d9 	beq.w	8008300 <_printf_i+0x1d4>
 800814e:	2f58      	cmp	r7, #88	; 0x58
 8008150:	f000 80a4 	beq.w	800829c <_printf_i+0x170>
 8008154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800815c:	e03a      	b.n	80081d4 <_printf_i+0xa8>
 800815e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008162:	2b15      	cmp	r3, #21
 8008164:	d8f6      	bhi.n	8008154 <_printf_i+0x28>
 8008166:	a101      	add	r1, pc, #4	; (adr r1, 800816c <_printf_i+0x40>)
 8008168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800816c:	080081c5 	.word	0x080081c5
 8008170:	080081d9 	.word	0x080081d9
 8008174:	08008155 	.word	0x08008155
 8008178:	08008155 	.word	0x08008155
 800817c:	08008155 	.word	0x08008155
 8008180:	08008155 	.word	0x08008155
 8008184:	080081d9 	.word	0x080081d9
 8008188:	08008155 	.word	0x08008155
 800818c:	08008155 	.word	0x08008155
 8008190:	08008155 	.word	0x08008155
 8008194:	08008155 	.word	0x08008155
 8008198:	080082e7 	.word	0x080082e7
 800819c:	08008209 	.word	0x08008209
 80081a0:	080082c9 	.word	0x080082c9
 80081a4:	08008155 	.word	0x08008155
 80081a8:	08008155 	.word	0x08008155
 80081ac:	08008309 	.word	0x08008309
 80081b0:	08008155 	.word	0x08008155
 80081b4:	08008209 	.word	0x08008209
 80081b8:	08008155 	.word	0x08008155
 80081bc:	08008155 	.word	0x08008155
 80081c0:	080082d1 	.word	0x080082d1
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	1d1a      	adds	r2, r3, #4
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	602a      	str	r2, [r5, #0]
 80081cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d4:	2301      	movs	r3, #1
 80081d6:	e0a4      	b.n	8008322 <_printf_i+0x1f6>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	6829      	ldr	r1, [r5, #0]
 80081dc:	0606      	lsls	r6, r0, #24
 80081de:	f101 0304 	add.w	r3, r1, #4
 80081e2:	d50a      	bpl.n	80081fa <_printf_i+0xce>
 80081e4:	680e      	ldr	r6, [r1, #0]
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	da03      	bge.n	80081f4 <_printf_i+0xc8>
 80081ec:	232d      	movs	r3, #45	; 0x2d
 80081ee:	4276      	negs	r6, r6
 80081f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f4:	230a      	movs	r3, #10
 80081f6:	485e      	ldr	r0, [pc, #376]	; (8008370 <_printf_i+0x244>)
 80081f8:	e019      	b.n	800822e <_printf_i+0x102>
 80081fa:	680e      	ldr	r6, [r1, #0]
 80081fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008200:	602b      	str	r3, [r5, #0]
 8008202:	bf18      	it	ne
 8008204:	b236      	sxthne	r6, r6
 8008206:	e7ef      	b.n	80081e8 <_printf_i+0xbc>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	6820      	ldr	r0, [r4, #0]
 800820c:	1d19      	adds	r1, r3, #4
 800820e:	6029      	str	r1, [r5, #0]
 8008210:	0601      	lsls	r1, r0, #24
 8008212:	d501      	bpl.n	8008218 <_printf_i+0xec>
 8008214:	681e      	ldr	r6, [r3, #0]
 8008216:	e002      	b.n	800821e <_printf_i+0xf2>
 8008218:	0646      	lsls	r6, r0, #25
 800821a:	d5fb      	bpl.n	8008214 <_printf_i+0xe8>
 800821c:	881e      	ldrh	r6, [r3, #0]
 800821e:	2f6f      	cmp	r7, #111	; 0x6f
 8008220:	bf0c      	ite	eq
 8008222:	2308      	moveq	r3, #8
 8008224:	230a      	movne	r3, #10
 8008226:	4852      	ldr	r0, [pc, #328]	; (8008370 <_printf_i+0x244>)
 8008228:	2100      	movs	r1, #0
 800822a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800822e:	6865      	ldr	r5, [r4, #4]
 8008230:	2d00      	cmp	r5, #0
 8008232:	bfa8      	it	ge
 8008234:	6821      	ldrge	r1, [r4, #0]
 8008236:	60a5      	str	r5, [r4, #8]
 8008238:	bfa4      	itt	ge
 800823a:	f021 0104 	bicge.w	r1, r1, #4
 800823e:	6021      	strge	r1, [r4, #0]
 8008240:	b90e      	cbnz	r6, 8008246 <_printf_i+0x11a>
 8008242:	2d00      	cmp	r5, #0
 8008244:	d04d      	beq.n	80082e2 <_printf_i+0x1b6>
 8008246:	4615      	mov	r5, r2
 8008248:	fbb6 f1f3 	udiv	r1, r6, r3
 800824c:	fb03 6711 	mls	r7, r3, r1, r6
 8008250:	5dc7      	ldrb	r7, [r0, r7]
 8008252:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008256:	4637      	mov	r7, r6
 8008258:	42bb      	cmp	r3, r7
 800825a:	460e      	mov	r6, r1
 800825c:	d9f4      	bls.n	8008248 <_printf_i+0x11c>
 800825e:	2b08      	cmp	r3, #8
 8008260:	d10b      	bne.n	800827a <_printf_i+0x14e>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	07de      	lsls	r6, r3, #31
 8008266:	d508      	bpl.n	800827a <_printf_i+0x14e>
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	6861      	ldr	r1, [r4, #4]
 800826c:	4299      	cmp	r1, r3
 800826e:	bfde      	ittt	le
 8008270:	2330      	movle	r3, #48	; 0x30
 8008272:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008276:	f105 35ff 	addle.w	r5, r5, #4294967295
 800827a:	1b52      	subs	r2, r2, r5
 800827c:	6122      	str	r2, [r4, #16]
 800827e:	464b      	mov	r3, r9
 8008280:	4621      	mov	r1, r4
 8008282:	4640      	mov	r0, r8
 8008284:	f8cd a000 	str.w	sl, [sp]
 8008288:	aa03      	add	r2, sp, #12
 800828a:	f7ff fedf 	bl	800804c <_printf_common>
 800828e:	3001      	adds	r0, #1
 8008290:	d14c      	bne.n	800832c <_printf_i+0x200>
 8008292:	f04f 30ff 	mov.w	r0, #4294967295
 8008296:	b004      	add	sp, #16
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829c:	4834      	ldr	r0, [pc, #208]	; (8008370 <_printf_i+0x244>)
 800829e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082a2:	6829      	ldr	r1, [r5, #0]
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	f851 6b04 	ldr.w	r6, [r1], #4
 80082aa:	6029      	str	r1, [r5, #0]
 80082ac:	061d      	lsls	r5, r3, #24
 80082ae:	d514      	bpl.n	80082da <_printf_i+0x1ae>
 80082b0:	07df      	lsls	r7, r3, #31
 80082b2:	bf44      	itt	mi
 80082b4:	f043 0320 	orrmi.w	r3, r3, #32
 80082b8:	6023      	strmi	r3, [r4, #0]
 80082ba:	b91e      	cbnz	r6, 80082c4 <_printf_i+0x198>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	f023 0320 	bic.w	r3, r3, #32
 80082c2:	6023      	str	r3, [r4, #0]
 80082c4:	2310      	movs	r3, #16
 80082c6:	e7af      	b.n	8008228 <_printf_i+0xfc>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	f043 0320 	orr.w	r3, r3, #32
 80082ce:	6023      	str	r3, [r4, #0]
 80082d0:	2378      	movs	r3, #120	; 0x78
 80082d2:	4828      	ldr	r0, [pc, #160]	; (8008374 <_printf_i+0x248>)
 80082d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082d8:	e7e3      	b.n	80082a2 <_printf_i+0x176>
 80082da:	0659      	lsls	r1, r3, #25
 80082dc:	bf48      	it	mi
 80082de:	b2b6      	uxthmi	r6, r6
 80082e0:	e7e6      	b.n	80082b0 <_printf_i+0x184>
 80082e2:	4615      	mov	r5, r2
 80082e4:	e7bb      	b.n	800825e <_printf_i+0x132>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	6826      	ldr	r6, [r4, #0]
 80082ea:	1d18      	adds	r0, r3, #4
 80082ec:	6961      	ldr	r1, [r4, #20]
 80082ee:	6028      	str	r0, [r5, #0]
 80082f0:	0635      	lsls	r5, r6, #24
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	d501      	bpl.n	80082fa <_printf_i+0x1ce>
 80082f6:	6019      	str	r1, [r3, #0]
 80082f8:	e002      	b.n	8008300 <_printf_i+0x1d4>
 80082fa:	0670      	lsls	r0, r6, #25
 80082fc:	d5fb      	bpl.n	80082f6 <_printf_i+0x1ca>
 80082fe:	8019      	strh	r1, [r3, #0]
 8008300:	2300      	movs	r3, #0
 8008302:	4615      	mov	r5, r2
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	e7ba      	b.n	800827e <_printf_i+0x152>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	2100      	movs	r1, #0
 800830c:	1d1a      	adds	r2, r3, #4
 800830e:	602a      	str	r2, [r5, #0]
 8008310:	681d      	ldr	r5, [r3, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	4628      	mov	r0, r5
 8008316:	f001 fa3d 	bl	8009794 <memchr>
 800831a:	b108      	cbz	r0, 8008320 <_printf_i+0x1f4>
 800831c:	1b40      	subs	r0, r0, r5
 800831e:	6060      	str	r0, [r4, #4]
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	6123      	str	r3, [r4, #16]
 8008324:	2300      	movs	r3, #0
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832a:	e7a8      	b.n	800827e <_printf_i+0x152>
 800832c:	462a      	mov	r2, r5
 800832e:	4649      	mov	r1, r9
 8008330:	4640      	mov	r0, r8
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	47d0      	blx	sl
 8008336:	3001      	adds	r0, #1
 8008338:	d0ab      	beq.n	8008292 <_printf_i+0x166>
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	079b      	lsls	r3, r3, #30
 800833e:	d413      	bmi.n	8008368 <_printf_i+0x23c>
 8008340:	68e0      	ldr	r0, [r4, #12]
 8008342:	9b03      	ldr	r3, [sp, #12]
 8008344:	4298      	cmp	r0, r3
 8008346:	bfb8      	it	lt
 8008348:	4618      	movlt	r0, r3
 800834a:	e7a4      	b.n	8008296 <_printf_i+0x16a>
 800834c:	2301      	movs	r3, #1
 800834e:	4632      	mov	r2, r6
 8008350:	4649      	mov	r1, r9
 8008352:	4640      	mov	r0, r8
 8008354:	47d0      	blx	sl
 8008356:	3001      	adds	r0, #1
 8008358:	d09b      	beq.n	8008292 <_printf_i+0x166>
 800835a:	3501      	adds	r5, #1
 800835c:	68e3      	ldr	r3, [r4, #12]
 800835e:	9903      	ldr	r1, [sp, #12]
 8008360:	1a5b      	subs	r3, r3, r1
 8008362:	42ab      	cmp	r3, r5
 8008364:	dcf2      	bgt.n	800834c <_printf_i+0x220>
 8008366:	e7eb      	b.n	8008340 <_printf_i+0x214>
 8008368:	2500      	movs	r5, #0
 800836a:	f104 0619 	add.w	r6, r4, #25
 800836e:	e7f5      	b.n	800835c <_printf_i+0x230>
 8008370:	0800ad5a 	.word	0x0800ad5a
 8008374:	0800ad6b 	.word	0x0800ad6b

08008378 <_puts_r>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	460e      	mov	r6, r1
 800837c:	4605      	mov	r5, r0
 800837e:	b118      	cbz	r0, 8008388 <_puts_r+0x10>
 8008380:	6983      	ldr	r3, [r0, #24]
 8008382:	b90b      	cbnz	r3, 8008388 <_puts_r+0x10>
 8008384:	f001 f8f4 	bl	8009570 <__sinit>
 8008388:	69ab      	ldr	r3, [r5, #24]
 800838a:	68ac      	ldr	r4, [r5, #8]
 800838c:	b913      	cbnz	r3, 8008394 <_puts_r+0x1c>
 800838e:	4628      	mov	r0, r5
 8008390:	f001 f8ee 	bl	8009570 <__sinit>
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <_puts_r+0xd0>)
 8008396:	429c      	cmp	r4, r3
 8008398:	d120      	bne.n	80083dc <_puts_r+0x64>
 800839a:	686c      	ldr	r4, [r5, #4]
 800839c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800839e:	07db      	lsls	r3, r3, #31
 80083a0:	d405      	bmi.n	80083ae <_puts_r+0x36>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	0598      	lsls	r0, r3, #22
 80083a6:	d402      	bmi.n	80083ae <_puts_r+0x36>
 80083a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083aa:	f001 f984 	bl	80096b6 <__retarget_lock_acquire_recursive>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	0719      	lsls	r1, r3, #28
 80083b2:	d51d      	bpl.n	80083f0 <_puts_r+0x78>
 80083b4:	6923      	ldr	r3, [r4, #16]
 80083b6:	b1db      	cbz	r3, 80083f0 <_puts_r+0x78>
 80083b8:	3e01      	subs	r6, #1
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083c0:	3b01      	subs	r3, #1
 80083c2:	60a3      	str	r3, [r4, #8]
 80083c4:	bb39      	cbnz	r1, 8008416 <_puts_r+0x9e>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da38      	bge.n	800843c <_puts_r+0xc4>
 80083ca:	4622      	mov	r2, r4
 80083cc:	210a      	movs	r1, #10
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f87c 	bl	80084cc <__swbuf_r>
 80083d4:	3001      	adds	r0, #1
 80083d6:	d011      	beq.n	80083fc <_puts_r+0x84>
 80083d8:	250a      	movs	r5, #10
 80083da:	e011      	b.n	8008400 <_puts_r+0x88>
 80083dc:	4b1b      	ldr	r3, [pc, #108]	; (800844c <_puts_r+0xd4>)
 80083de:	429c      	cmp	r4, r3
 80083e0:	d101      	bne.n	80083e6 <_puts_r+0x6e>
 80083e2:	68ac      	ldr	r4, [r5, #8]
 80083e4:	e7da      	b.n	800839c <_puts_r+0x24>
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <_puts_r+0xd8>)
 80083e8:	429c      	cmp	r4, r3
 80083ea:	bf08      	it	eq
 80083ec:	68ec      	ldreq	r4, [r5, #12]
 80083ee:	e7d5      	b.n	800839c <_puts_r+0x24>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 f8bc 	bl	8008570 <__swsetup_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d0dd      	beq.n	80083b8 <_puts_r+0x40>
 80083fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d405      	bmi.n	8008412 <_puts_r+0x9a>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	059b      	lsls	r3, r3, #22
 800840a:	d402      	bmi.n	8008412 <_puts_r+0x9a>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f001 f953 	bl	80096b8 <__retarget_lock_release_recursive>
 8008412:	4628      	mov	r0, r5
 8008414:	bd70      	pop	{r4, r5, r6, pc}
 8008416:	2b00      	cmp	r3, #0
 8008418:	da04      	bge.n	8008424 <_puts_r+0xac>
 800841a:	69a2      	ldr	r2, [r4, #24]
 800841c:	429a      	cmp	r2, r3
 800841e:	dc06      	bgt.n	800842e <_puts_r+0xb6>
 8008420:	290a      	cmp	r1, #10
 8008422:	d004      	beq.n	800842e <_puts_r+0xb6>
 8008424:	6823      	ldr	r3, [r4, #0]
 8008426:	1c5a      	adds	r2, r3, #1
 8008428:	6022      	str	r2, [r4, #0]
 800842a:	7019      	strb	r1, [r3, #0]
 800842c:	e7c5      	b.n	80083ba <_puts_r+0x42>
 800842e:	4622      	mov	r2, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f000 f84b 	bl	80084cc <__swbuf_r>
 8008436:	3001      	adds	r0, #1
 8008438:	d1bf      	bne.n	80083ba <_puts_r+0x42>
 800843a:	e7df      	b.n	80083fc <_puts_r+0x84>
 800843c:	250a      	movs	r5, #10
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	6022      	str	r2, [r4, #0]
 8008444:	701d      	strb	r5, [r3, #0]
 8008446:	e7db      	b.n	8008400 <_puts_r+0x88>
 8008448:	0800ae2c 	.word	0x0800ae2c
 800844c:	0800ae4c 	.word	0x0800ae4c
 8008450:	0800ae0c 	.word	0x0800ae0c

08008454 <puts>:
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <puts+0xc>)
 8008456:	4601      	mov	r1, r0
 8008458:	6818      	ldr	r0, [r3, #0]
 800845a:	f7ff bf8d 	b.w	8008378 <_puts_r>
 800845e:	bf00      	nop
 8008460:	2000003c 	.word	0x2000003c

08008464 <sniprintf>:
 8008464:	b40c      	push	{r2, r3}
 8008466:	b530      	push	{r4, r5, lr}
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <sniprintf+0x64>)
 800846a:	1e0c      	subs	r4, r1, #0
 800846c:	681d      	ldr	r5, [r3, #0]
 800846e:	b09d      	sub	sp, #116	; 0x74
 8008470:	da08      	bge.n	8008484 <sniprintf+0x20>
 8008472:	238b      	movs	r3, #139	; 0x8b
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	b01d      	add	sp, #116	; 0x74
 800847c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008480:	b002      	add	sp, #8
 8008482:	4770      	bx	lr
 8008484:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800848c:	bf0c      	ite	eq
 800848e:	4623      	moveq	r3, r4
 8008490:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	9006      	str	r0, [sp, #24]
 80084a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084a4:	4628      	mov	r0, r5
 80084a6:	ab21      	add	r3, sp, #132	; 0x84
 80084a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80084aa:	a902      	add	r1, sp, #8
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	f001 fe5b 	bl	800a168 <_svfiprintf_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	bfbc      	itt	lt
 80084b6:	238b      	movlt	r3, #139	; 0x8b
 80084b8:	602b      	strlt	r3, [r5, #0]
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	d0dd      	beq.n	800847a <sniprintf+0x16>
 80084be:	2200      	movs	r2, #0
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e7d9      	b.n	800847a <sniprintf+0x16>
 80084c6:	bf00      	nop
 80084c8:	2000003c 	.word	0x2000003c

080084cc <__swbuf_r>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	460e      	mov	r6, r1
 80084d0:	4614      	mov	r4, r2
 80084d2:	4605      	mov	r5, r0
 80084d4:	b118      	cbz	r0, 80084de <__swbuf_r+0x12>
 80084d6:	6983      	ldr	r3, [r0, #24]
 80084d8:	b90b      	cbnz	r3, 80084de <__swbuf_r+0x12>
 80084da:	f001 f849 	bl	8009570 <__sinit>
 80084de:	4b21      	ldr	r3, [pc, #132]	; (8008564 <__swbuf_r+0x98>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	d12b      	bne.n	800853c <__swbuf_r+0x70>
 80084e4:	686c      	ldr	r4, [r5, #4]
 80084e6:	69a3      	ldr	r3, [r4, #24]
 80084e8:	60a3      	str	r3, [r4, #8]
 80084ea:	89a3      	ldrh	r3, [r4, #12]
 80084ec:	071a      	lsls	r2, r3, #28
 80084ee:	d52f      	bpl.n	8008550 <__swbuf_r+0x84>
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	b36b      	cbz	r3, 8008550 <__swbuf_r+0x84>
 80084f4:	6923      	ldr	r3, [r4, #16]
 80084f6:	6820      	ldr	r0, [r4, #0]
 80084f8:	b2f6      	uxtb	r6, r6
 80084fa:	1ac0      	subs	r0, r0, r3
 80084fc:	6963      	ldr	r3, [r4, #20]
 80084fe:	4637      	mov	r7, r6
 8008500:	4283      	cmp	r3, r0
 8008502:	dc04      	bgt.n	800850e <__swbuf_r+0x42>
 8008504:	4621      	mov	r1, r4
 8008506:	4628      	mov	r0, r5
 8008508:	f000 ff9e 	bl	8009448 <_fflush_r>
 800850c:	bb30      	cbnz	r0, 800855c <__swbuf_r+0x90>
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	3001      	adds	r0, #1
 8008512:	3b01      	subs	r3, #1
 8008514:	60a3      	str	r3, [r4, #8]
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	701e      	strb	r6, [r3, #0]
 800851e:	6963      	ldr	r3, [r4, #20]
 8008520:	4283      	cmp	r3, r0
 8008522:	d004      	beq.n	800852e <__swbuf_r+0x62>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	07db      	lsls	r3, r3, #31
 8008528:	d506      	bpl.n	8008538 <__swbuf_r+0x6c>
 800852a:	2e0a      	cmp	r6, #10
 800852c:	d104      	bne.n	8008538 <__swbuf_r+0x6c>
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 ff89 	bl	8009448 <_fflush_r>
 8008536:	b988      	cbnz	r0, 800855c <__swbuf_r+0x90>
 8008538:	4638      	mov	r0, r7
 800853a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853c:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <__swbuf_r+0x9c>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d101      	bne.n	8008546 <__swbuf_r+0x7a>
 8008542:	68ac      	ldr	r4, [r5, #8]
 8008544:	e7cf      	b.n	80084e6 <__swbuf_r+0x1a>
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <__swbuf_r+0xa0>)
 8008548:	429c      	cmp	r4, r3
 800854a:	bf08      	it	eq
 800854c:	68ec      	ldreq	r4, [r5, #12]
 800854e:	e7ca      	b.n	80084e6 <__swbuf_r+0x1a>
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 f80c 	bl	8008570 <__swsetup_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	d0cb      	beq.n	80084f4 <__swbuf_r+0x28>
 800855c:	f04f 37ff 	mov.w	r7, #4294967295
 8008560:	e7ea      	b.n	8008538 <__swbuf_r+0x6c>
 8008562:	bf00      	nop
 8008564:	0800ae2c 	.word	0x0800ae2c
 8008568:	0800ae4c 	.word	0x0800ae4c
 800856c:	0800ae0c 	.word	0x0800ae0c

08008570 <__swsetup_r>:
 8008570:	4b32      	ldr	r3, [pc, #200]	; (800863c <__swsetup_r+0xcc>)
 8008572:	b570      	push	{r4, r5, r6, lr}
 8008574:	681d      	ldr	r5, [r3, #0]
 8008576:	4606      	mov	r6, r0
 8008578:	460c      	mov	r4, r1
 800857a:	b125      	cbz	r5, 8008586 <__swsetup_r+0x16>
 800857c:	69ab      	ldr	r3, [r5, #24]
 800857e:	b913      	cbnz	r3, 8008586 <__swsetup_r+0x16>
 8008580:	4628      	mov	r0, r5
 8008582:	f000 fff5 	bl	8009570 <__sinit>
 8008586:	4b2e      	ldr	r3, [pc, #184]	; (8008640 <__swsetup_r+0xd0>)
 8008588:	429c      	cmp	r4, r3
 800858a:	d10f      	bne.n	80085ac <__swsetup_r+0x3c>
 800858c:	686c      	ldr	r4, [r5, #4]
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008594:	0719      	lsls	r1, r3, #28
 8008596:	d42c      	bmi.n	80085f2 <__swsetup_r+0x82>
 8008598:	06dd      	lsls	r5, r3, #27
 800859a:	d411      	bmi.n	80085c0 <__swsetup_r+0x50>
 800859c:	2309      	movs	r3, #9
 800859e:	6033      	str	r3, [r6, #0]
 80085a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	81a3      	strh	r3, [r4, #12]
 80085aa:	e03e      	b.n	800862a <__swsetup_r+0xba>
 80085ac:	4b25      	ldr	r3, [pc, #148]	; (8008644 <__swsetup_r+0xd4>)
 80085ae:	429c      	cmp	r4, r3
 80085b0:	d101      	bne.n	80085b6 <__swsetup_r+0x46>
 80085b2:	68ac      	ldr	r4, [r5, #8]
 80085b4:	e7eb      	b.n	800858e <__swsetup_r+0x1e>
 80085b6:	4b24      	ldr	r3, [pc, #144]	; (8008648 <__swsetup_r+0xd8>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	bf08      	it	eq
 80085bc:	68ec      	ldreq	r4, [r5, #12]
 80085be:	e7e6      	b.n	800858e <__swsetup_r+0x1e>
 80085c0:	0758      	lsls	r0, r3, #29
 80085c2:	d512      	bpl.n	80085ea <__swsetup_r+0x7a>
 80085c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085c6:	b141      	cbz	r1, 80085da <__swsetup_r+0x6a>
 80085c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085cc:	4299      	cmp	r1, r3
 80085ce:	d002      	beq.n	80085d6 <__swsetup_r+0x66>
 80085d0:	4630      	mov	r0, r6
 80085d2:	f001 fc91 	bl	8009ef8 <_free_r>
 80085d6:	2300      	movs	r3, #0
 80085d8:	6363      	str	r3, [r4, #52]	; 0x34
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	2300      	movs	r3, #0
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f043 0308 	orr.w	r3, r3, #8
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	b94b      	cbnz	r3, 800860a <__swsetup_r+0x9a>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008600:	d003      	beq.n	800860a <__swsetup_r+0x9a>
 8008602:	4621      	mov	r1, r4
 8008604:	4630      	mov	r0, r6
 8008606:	f001 f87d 	bl	8009704 <__smakebuf_r>
 800860a:	89a0      	ldrh	r0, [r4, #12]
 800860c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008610:	f010 0301 	ands.w	r3, r0, #1
 8008614:	d00a      	beq.n	800862c <__swsetup_r+0xbc>
 8008616:	2300      	movs	r3, #0
 8008618:	60a3      	str	r3, [r4, #8]
 800861a:	6963      	ldr	r3, [r4, #20]
 800861c:	425b      	negs	r3, r3
 800861e:	61a3      	str	r3, [r4, #24]
 8008620:	6923      	ldr	r3, [r4, #16]
 8008622:	b943      	cbnz	r3, 8008636 <__swsetup_r+0xc6>
 8008624:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008628:	d1ba      	bne.n	80085a0 <__swsetup_r+0x30>
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	0781      	lsls	r1, r0, #30
 800862e:	bf58      	it	pl
 8008630:	6963      	ldrpl	r3, [r4, #20]
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	e7f4      	b.n	8008620 <__swsetup_r+0xb0>
 8008636:	2000      	movs	r0, #0
 8008638:	e7f7      	b.n	800862a <__swsetup_r+0xba>
 800863a:	bf00      	nop
 800863c:	2000003c 	.word	0x2000003c
 8008640:	0800ae2c 	.word	0x0800ae2c
 8008644:	0800ae4c 	.word	0x0800ae4c
 8008648:	0800ae0c 	.word	0x0800ae0c

0800864c <quorem>:
 800864c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	6903      	ldr	r3, [r0, #16]
 8008652:	690c      	ldr	r4, [r1, #16]
 8008654:	4607      	mov	r7, r0
 8008656:	42a3      	cmp	r3, r4
 8008658:	f2c0 8082 	blt.w	8008760 <quorem+0x114>
 800865c:	3c01      	subs	r4, #1
 800865e:	f100 0514 	add.w	r5, r0, #20
 8008662:	f101 0814 	add.w	r8, r1, #20
 8008666:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008670:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008674:	3301      	adds	r3, #1
 8008676:	429a      	cmp	r2, r3
 8008678:	fbb2 f6f3 	udiv	r6, r2, r3
 800867c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008684:	d331      	bcc.n	80086ea <quorem+0x9e>
 8008686:	f04f 0e00 	mov.w	lr, #0
 800868a:	4640      	mov	r0, r8
 800868c:	46ac      	mov	ip, r5
 800868e:	46f2      	mov	sl, lr
 8008690:	f850 2b04 	ldr.w	r2, [r0], #4
 8008694:	b293      	uxth	r3, r2
 8008696:	fb06 e303 	mla	r3, r6, r3, lr
 800869a:	0c12      	lsrs	r2, r2, #16
 800869c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	fb06 e202 	mla	r2, r6, r2, lr
 80086a6:	ebaa 0303 	sub.w	r3, sl, r3
 80086aa:	f8dc a000 	ldr.w	sl, [ip]
 80086ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086b2:	fa1f fa8a 	uxth.w	sl, sl
 80086b6:	4453      	add	r3, sl
 80086b8:	f8dc a000 	ldr.w	sl, [ip]
 80086bc:	b292      	uxth	r2, r2
 80086be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086cc:	4581      	cmp	r9, r0
 80086ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086d2:	f84c 3b04 	str.w	r3, [ip], #4
 80086d6:	d2db      	bcs.n	8008690 <quorem+0x44>
 80086d8:	f855 300b 	ldr.w	r3, [r5, fp]
 80086dc:	b92b      	cbnz	r3, 80086ea <quorem+0x9e>
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	429d      	cmp	r5, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	d32f      	bcc.n	8008748 <quorem+0xfc>
 80086e8:	613c      	str	r4, [r7, #16]
 80086ea:	4638      	mov	r0, r7
 80086ec:	f001 faec 	bl	8009cc8 <__mcmp>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	db25      	blt.n	8008740 <quorem+0xf4>
 80086f4:	4628      	mov	r0, r5
 80086f6:	f04f 0c00 	mov.w	ip, #0
 80086fa:	3601      	adds	r6, #1
 80086fc:	f858 1b04 	ldr.w	r1, [r8], #4
 8008700:	f8d0 e000 	ldr.w	lr, [r0]
 8008704:	b28b      	uxth	r3, r1
 8008706:	ebac 0303 	sub.w	r3, ip, r3
 800870a:	fa1f f28e 	uxth.w	r2, lr
 800870e:	4413      	add	r3, r2
 8008710:	0c0a      	lsrs	r2, r1, #16
 8008712:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800871a:	b29b      	uxth	r3, r3
 800871c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008720:	45c1      	cmp	r9, r8
 8008722:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008726:	f840 3b04 	str.w	r3, [r0], #4
 800872a:	d2e7      	bcs.n	80086fc <quorem+0xb0>
 800872c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008730:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008734:	b922      	cbnz	r2, 8008740 <quorem+0xf4>
 8008736:	3b04      	subs	r3, #4
 8008738:	429d      	cmp	r5, r3
 800873a:	461a      	mov	r2, r3
 800873c:	d30a      	bcc.n	8008754 <quorem+0x108>
 800873e:	613c      	str	r4, [r7, #16]
 8008740:	4630      	mov	r0, r6
 8008742:	b003      	add	sp, #12
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	3b04      	subs	r3, #4
 800874c:	2a00      	cmp	r2, #0
 800874e:	d1cb      	bne.n	80086e8 <quorem+0x9c>
 8008750:	3c01      	subs	r4, #1
 8008752:	e7c6      	b.n	80086e2 <quorem+0x96>
 8008754:	6812      	ldr	r2, [r2, #0]
 8008756:	3b04      	subs	r3, #4
 8008758:	2a00      	cmp	r2, #0
 800875a:	d1f0      	bne.n	800873e <quorem+0xf2>
 800875c:	3c01      	subs	r4, #1
 800875e:	e7eb      	b.n	8008738 <quorem+0xec>
 8008760:	2000      	movs	r0, #0
 8008762:	e7ee      	b.n	8008742 <quorem+0xf6>
 8008764:	0000      	movs	r0, r0
	...

08008768 <_dtoa_r>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	461f      	mov	r7, r3
 8008770:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008772:	b099      	sub	sp, #100	; 0x64
 8008774:	4605      	mov	r5, r0
 8008776:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800877a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800877e:	b974      	cbnz	r4, 800879e <_dtoa_r+0x36>
 8008780:	2010      	movs	r0, #16
 8008782:	f000 ffff 	bl	8009784 <malloc>
 8008786:	4602      	mov	r2, r0
 8008788:	6268      	str	r0, [r5, #36]	; 0x24
 800878a:	b920      	cbnz	r0, 8008796 <_dtoa_r+0x2e>
 800878c:	21ea      	movs	r1, #234	; 0xea
 800878e:	4ba8      	ldr	r3, [pc, #672]	; (8008a30 <_dtoa_r+0x2c8>)
 8008790:	48a8      	ldr	r0, [pc, #672]	; (8008a34 <_dtoa_r+0x2cc>)
 8008792:	f001 fe4f 	bl	800a434 <__assert_func>
 8008796:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800879a:	6004      	str	r4, [r0, #0]
 800879c:	60c4      	str	r4, [r0, #12]
 800879e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	b151      	cbz	r1, 80087ba <_dtoa_r+0x52>
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	2301      	movs	r3, #1
 80087a8:	4093      	lsls	r3, r2
 80087aa:	604a      	str	r2, [r1, #4]
 80087ac:	608b      	str	r3, [r1, #8]
 80087ae:	4628      	mov	r0, r5
 80087b0:	f001 f84c 	bl	800984c <_Bfree>
 80087b4:	2200      	movs	r2, #0
 80087b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	1e3b      	subs	r3, r7, #0
 80087bc:	bfaf      	iteee	ge
 80087be:	2300      	movge	r3, #0
 80087c0:	2201      	movlt	r2, #1
 80087c2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087c6:	9305      	strlt	r3, [sp, #20]
 80087c8:	bfa8      	it	ge
 80087ca:	f8c8 3000 	strge.w	r3, [r8]
 80087ce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80087d2:	4b99      	ldr	r3, [pc, #612]	; (8008a38 <_dtoa_r+0x2d0>)
 80087d4:	bfb8      	it	lt
 80087d6:	f8c8 2000 	strlt.w	r2, [r8]
 80087da:	ea33 0309 	bics.w	r3, r3, r9
 80087de:	d119      	bne.n	8008814 <_dtoa_r+0xac>
 80087e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80087e6:	6013      	str	r3, [r2, #0]
 80087e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087ec:	4333      	orrs	r3, r6
 80087ee:	f000 857f 	beq.w	80092f0 <_dtoa_r+0xb88>
 80087f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80087f4:	b953      	cbnz	r3, 800880c <_dtoa_r+0xa4>
 80087f6:	4b91      	ldr	r3, [pc, #580]	; (8008a3c <_dtoa_r+0x2d4>)
 80087f8:	e022      	b.n	8008840 <_dtoa_r+0xd8>
 80087fa:	4b91      	ldr	r3, [pc, #580]	; (8008a40 <_dtoa_r+0x2d8>)
 80087fc:	9303      	str	r3, [sp, #12]
 80087fe:	3308      	adds	r3, #8
 8008800:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	9803      	ldr	r0, [sp, #12]
 8008806:	b019      	add	sp, #100	; 0x64
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880c:	4b8b      	ldr	r3, [pc, #556]	; (8008a3c <_dtoa_r+0x2d4>)
 800880e:	9303      	str	r3, [sp, #12]
 8008810:	3303      	adds	r3, #3
 8008812:	e7f5      	b.n	8008800 <_dtoa_r+0x98>
 8008814:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008818:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800881c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008820:	2200      	movs	r2, #0
 8008822:	2300      	movs	r3, #0
 8008824:	f7f8 f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8008828:	4680      	mov	r8, r0
 800882a:	b158      	cbz	r0, 8008844 <_dtoa_r+0xdc>
 800882c:	2301      	movs	r3, #1
 800882e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 8558 	beq.w	80092ea <_dtoa_r+0xb82>
 800883a:	4882      	ldr	r0, [pc, #520]	; (8008a44 <_dtoa_r+0x2dc>)
 800883c:	6018      	str	r0, [r3, #0]
 800883e:	1e43      	subs	r3, r0, #1
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	e7df      	b.n	8008804 <_dtoa_r+0x9c>
 8008844:	ab16      	add	r3, sp, #88	; 0x58
 8008846:	9301      	str	r3, [sp, #4]
 8008848:	ab17      	add	r3, sp, #92	; 0x5c
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	4628      	mov	r0, r5
 800884e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008852:	f001 fae1 	bl	8009e18 <__d2b>
 8008856:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800885a:	4683      	mov	fp, r0
 800885c:	2c00      	cmp	r4, #0
 800885e:	d07f      	beq.n	8008960 <_dtoa_r+0x1f8>
 8008860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008866:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800886a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800886e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008872:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008876:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800887a:	2200      	movs	r2, #0
 800887c:	4b72      	ldr	r3, [pc, #456]	; (8008a48 <_dtoa_r+0x2e0>)
 800887e:	f7f7 fc73 	bl	8000168 <__aeabi_dsub>
 8008882:	a365      	add	r3, pc, #404	; (adr r3, 8008a18 <_dtoa_r+0x2b0>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fe26 	bl	80004d8 <__aeabi_dmul>
 800888c:	a364      	add	r3, pc, #400	; (adr r3, 8008a20 <_dtoa_r+0x2b8>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f7 fc6b 	bl	800016c <__adddf3>
 8008896:	4606      	mov	r6, r0
 8008898:	4620      	mov	r0, r4
 800889a:	460f      	mov	r7, r1
 800889c:	f7f7 fdb2 	bl	8000404 <__aeabi_i2d>
 80088a0:	a361      	add	r3, pc, #388	; (adr r3, 8008a28 <_dtoa_r+0x2c0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 fe17 	bl	80004d8 <__aeabi_dmul>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4630      	mov	r0, r6
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fc5b 	bl	800016c <__adddf3>
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	f7f8 f8bd 	bl	8000a38 <__aeabi_d2iz>
 80088be:	2200      	movs	r2, #0
 80088c0:	4682      	mov	sl, r0
 80088c2:	2300      	movs	r3, #0
 80088c4:	4630      	mov	r0, r6
 80088c6:	4639      	mov	r1, r7
 80088c8:	f7f8 f878 	bl	80009bc <__aeabi_dcmplt>
 80088cc:	b148      	cbz	r0, 80088e2 <_dtoa_r+0x17a>
 80088ce:	4650      	mov	r0, sl
 80088d0:	f7f7 fd98 	bl	8000404 <__aeabi_i2d>
 80088d4:	4632      	mov	r2, r6
 80088d6:	463b      	mov	r3, r7
 80088d8:	f7f8 f866 	bl	80009a8 <__aeabi_dcmpeq>
 80088dc:	b908      	cbnz	r0, 80088e2 <_dtoa_r+0x17a>
 80088de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e2:	f1ba 0f16 	cmp.w	sl, #22
 80088e6:	d858      	bhi.n	800899a <_dtoa_r+0x232>
 80088e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088ec:	4b57      	ldr	r3, [pc, #348]	; (8008a4c <_dtoa_r+0x2e4>)
 80088ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f8 f861 	bl	80009bc <__aeabi_dcmplt>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d04f      	beq.n	800899e <_dtoa_r+0x236>
 80088fe:	2300      	movs	r3, #0
 8008900:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008904:	930f      	str	r3, [sp, #60]	; 0x3c
 8008906:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008908:	1b1c      	subs	r4, r3, r4
 800890a:	1e63      	subs	r3, r4, #1
 800890c:	9309      	str	r3, [sp, #36]	; 0x24
 800890e:	bf49      	itett	mi
 8008910:	f1c4 0301 	rsbmi	r3, r4, #1
 8008914:	2300      	movpl	r3, #0
 8008916:	9306      	strmi	r3, [sp, #24]
 8008918:	2300      	movmi	r3, #0
 800891a:	bf54      	ite	pl
 800891c:	9306      	strpl	r3, [sp, #24]
 800891e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008920:	f1ba 0f00 	cmp.w	sl, #0
 8008924:	db3d      	blt.n	80089a2 <_dtoa_r+0x23a>
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800892c:	4453      	add	r3, sl
 800892e:	9309      	str	r3, [sp, #36]	; 0x24
 8008930:	2300      	movs	r3, #0
 8008932:	930a      	str	r3, [sp, #40]	; 0x28
 8008934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008936:	2b09      	cmp	r3, #9
 8008938:	f200 808c 	bhi.w	8008a54 <_dtoa_r+0x2ec>
 800893c:	2b05      	cmp	r3, #5
 800893e:	bfc4      	itt	gt
 8008940:	3b04      	subgt	r3, #4
 8008942:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008946:	bfc8      	it	gt
 8008948:	2400      	movgt	r4, #0
 800894a:	f1a3 0302 	sub.w	r3, r3, #2
 800894e:	bfd8      	it	le
 8008950:	2401      	movle	r4, #1
 8008952:	2b03      	cmp	r3, #3
 8008954:	f200 808a 	bhi.w	8008a6c <_dtoa_r+0x304>
 8008958:	e8df f003 	tbb	[pc, r3]
 800895c:	5b4d4f2d 	.word	0x5b4d4f2d
 8008960:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008964:	441c      	add	r4, r3
 8008966:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800896a:	2b20      	cmp	r3, #32
 800896c:	bfc3      	ittte	gt
 800896e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008972:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008976:	fa09 f303 	lslgt.w	r3, r9, r3
 800897a:	f1c3 0320 	rsble	r3, r3, #32
 800897e:	bfc6      	itte	gt
 8008980:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008984:	4318      	orrgt	r0, r3
 8008986:	fa06 f003 	lslle.w	r0, r6, r3
 800898a:	f7f7 fd2b 	bl	80003e4 <__aeabi_ui2d>
 800898e:	2301      	movs	r3, #1
 8008990:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008994:	3c01      	subs	r4, #1
 8008996:	9313      	str	r3, [sp, #76]	; 0x4c
 8008998:	e76f      	b.n	800887a <_dtoa_r+0x112>
 800899a:	2301      	movs	r3, #1
 800899c:	e7b2      	b.n	8008904 <_dtoa_r+0x19c>
 800899e:	900f      	str	r0, [sp, #60]	; 0x3c
 80089a0:	e7b1      	b.n	8008906 <_dtoa_r+0x19e>
 80089a2:	9b06      	ldr	r3, [sp, #24]
 80089a4:	eba3 030a 	sub.w	r3, r3, sl
 80089a8:	9306      	str	r3, [sp, #24]
 80089aa:	f1ca 0300 	rsb	r3, sl, #0
 80089ae:	930a      	str	r3, [sp, #40]	; 0x28
 80089b0:	2300      	movs	r3, #0
 80089b2:	930e      	str	r3, [sp, #56]	; 0x38
 80089b4:	e7be      	b.n	8008934 <_dtoa_r+0x1cc>
 80089b6:	2300      	movs	r3, #0
 80089b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80089ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	dc58      	bgt.n	8008a72 <_dtoa_r+0x30a>
 80089c0:	f04f 0901 	mov.w	r9, #1
 80089c4:	464b      	mov	r3, r9
 80089c6:	f8cd 9020 	str.w	r9, [sp, #32]
 80089ca:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80089ce:	2200      	movs	r2, #0
 80089d0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80089d2:	6042      	str	r2, [r0, #4]
 80089d4:	2204      	movs	r2, #4
 80089d6:	f102 0614 	add.w	r6, r2, #20
 80089da:	429e      	cmp	r6, r3
 80089dc:	6841      	ldr	r1, [r0, #4]
 80089de:	d94e      	bls.n	8008a7e <_dtoa_r+0x316>
 80089e0:	4628      	mov	r0, r5
 80089e2:	f000 fef3 	bl	80097cc <_Balloc>
 80089e6:	9003      	str	r0, [sp, #12]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d14c      	bne.n	8008a86 <_dtoa_r+0x31e>
 80089ec:	4602      	mov	r2, r0
 80089ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089f2:	4b17      	ldr	r3, [pc, #92]	; (8008a50 <_dtoa_r+0x2e8>)
 80089f4:	e6cc      	b.n	8008790 <_dtoa_r+0x28>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e7de      	b.n	80089b8 <_dtoa_r+0x250>
 80089fa:	2300      	movs	r3, #0
 80089fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008a00:	eb0a 0903 	add.w	r9, sl, r3
 8008a04:	f109 0301 	add.w	r3, r9, #1
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	9308      	str	r3, [sp, #32]
 8008a0c:	bfb8      	it	lt
 8008a0e:	2301      	movlt	r3, #1
 8008a10:	e7dd      	b.n	80089ce <_dtoa_r+0x266>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e7f2      	b.n	80089fc <_dtoa_r+0x294>
 8008a16:	bf00      	nop
 8008a18:	636f4361 	.word	0x636f4361
 8008a1c:	3fd287a7 	.word	0x3fd287a7
 8008a20:	8b60c8b3 	.word	0x8b60c8b3
 8008a24:	3fc68a28 	.word	0x3fc68a28
 8008a28:	509f79fb 	.word	0x509f79fb
 8008a2c:	3fd34413 	.word	0x3fd34413
 8008a30:	0800ad89 	.word	0x0800ad89
 8008a34:	0800ada0 	.word	0x0800ada0
 8008a38:	7ff00000 	.word	0x7ff00000
 8008a3c:	0800ad85 	.word	0x0800ad85
 8008a40:	0800ad7c 	.word	0x0800ad7c
 8008a44:	0800ad59 	.word	0x0800ad59
 8008a48:	3ff80000 	.word	0x3ff80000
 8008a4c:	0800aef0 	.word	0x0800aef0
 8008a50:	0800adfb 	.word	0x0800adfb
 8008a54:	2401      	movs	r4, #1
 8008a56:	2300      	movs	r3, #0
 8008a58:	940b      	str	r4, [sp, #44]	; 0x2c
 8008a5a:	9322      	str	r3, [sp, #136]	; 0x88
 8008a5c:	f04f 39ff 	mov.w	r9, #4294967295
 8008a60:	2200      	movs	r2, #0
 8008a62:	2312      	movs	r3, #18
 8008a64:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a68:	9223      	str	r2, [sp, #140]	; 0x8c
 8008a6a:	e7b0      	b.n	80089ce <_dtoa_r+0x266>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a70:	e7f4      	b.n	8008a5c <_dtoa_r+0x2f4>
 8008a72:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008a76:	464b      	mov	r3, r9
 8008a78:	f8cd 9020 	str.w	r9, [sp, #32]
 8008a7c:	e7a7      	b.n	80089ce <_dtoa_r+0x266>
 8008a7e:	3101      	adds	r1, #1
 8008a80:	6041      	str	r1, [r0, #4]
 8008a82:	0052      	lsls	r2, r2, #1
 8008a84:	e7a7      	b.n	80089d6 <_dtoa_r+0x26e>
 8008a86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008a88:	9a03      	ldr	r2, [sp, #12]
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	9b08      	ldr	r3, [sp, #32]
 8008a8e:	2b0e      	cmp	r3, #14
 8008a90:	f200 80a8 	bhi.w	8008be4 <_dtoa_r+0x47c>
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	f000 80a5 	beq.w	8008be4 <_dtoa_r+0x47c>
 8008a9a:	f1ba 0f00 	cmp.w	sl, #0
 8008a9e:	dd34      	ble.n	8008b0a <_dtoa_r+0x3a2>
 8008aa0:	4a9a      	ldr	r2, [pc, #616]	; (8008d0c <_dtoa_r+0x5a4>)
 8008aa2:	f00a 030f 	and.w	r3, sl, #15
 8008aa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aaa:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008aae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008ab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ab6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008aba:	d016      	beq.n	8008aea <_dtoa_r+0x382>
 8008abc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008ac0:	4b93      	ldr	r3, [pc, #588]	; (8008d10 <_dtoa_r+0x5a8>)
 8008ac2:	2703      	movs	r7, #3
 8008ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ac8:	f7f7 fe30 	bl	800072c <__aeabi_ddiv>
 8008acc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ad0:	f004 040f 	and.w	r4, r4, #15
 8008ad4:	4e8e      	ldr	r6, [pc, #568]	; (8008d10 <_dtoa_r+0x5a8>)
 8008ad6:	b954      	cbnz	r4, 8008aee <_dtoa_r+0x386>
 8008ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008adc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ae0:	f7f7 fe24 	bl	800072c <__aeabi_ddiv>
 8008ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ae8:	e029      	b.n	8008b3e <_dtoa_r+0x3d6>
 8008aea:	2702      	movs	r7, #2
 8008aec:	e7f2      	b.n	8008ad4 <_dtoa_r+0x36c>
 8008aee:	07e1      	lsls	r1, r4, #31
 8008af0:	d508      	bpl.n	8008b04 <_dtoa_r+0x39c>
 8008af2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008af6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008afa:	f7f7 fced 	bl	80004d8 <__aeabi_dmul>
 8008afe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008b02:	3701      	adds	r7, #1
 8008b04:	1064      	asrs	r4, r4, #1
 8008b06:	3608      	adds	r6, #8
 8008b08:	e7e5      	b.n	8008ad6 <_dtoa_r+0x36e>
 8008b0a:	f000 80a5 	beq.w	8008c58 <_dtoa_r+0x4f0>
 8008b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b12:	f1ca 0400 	rsb	r4, sl, #0
 8008b16:	4b7d      	ldr	r3, [pc, #500]	; (8008d0c <_dtoa_r+0x5a4>)
 8008b18:	f004 020f 	and.w	r2, r4, #15
 8008b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b24:	f7f7 fcd8 	bl	80004d8 <__aeabi_dmul>
 8008b28:	2702      	movs	r7, #2
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b30:	4e77      	ldr	r6, [pc, #476]	; (8008d10 <_dtoa_r+0x5a8>)
 8008b32:	1124      	asrs	r4, r4, #4
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f040 8084 	bne.w	8008c42 <_dtoa_r+0x4da>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1d2      	bne.n	8008ae4 <_dtoa_r+0x37c>
 8008b3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 808b 	beq.w	8008c5c <_dtoa_r+0x4f4>
 8008b46:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008b4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b52:	2200      	movs	r2, #0
 8008b54:	4b6f      	ldr	r3, [pc, #444]	; (8008d14 <_dtoa_r+0x5ac>)
 8008b56:	f7f7 ff31 	bl	80009bc <__aeabi_dcmplt>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d07e      	beq.n	8008c5c <_dtoa_r+0x4f4>
 8008b5e:	9b08      	ldr	r3, [sp, #32]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d07b      	beq.n	8008c5c <_dtoa_r+0x4f4>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	dd38      	ble.n	8008bdc <_dtoa_r+0x474>
 8008b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4b69      	ldr	r3, [pc, #420]	; (8008d18 <_dtoa_r+0x5b0>)
 8008b72:	f7f7 fcb1 	bl	80004d8 <__aeabi_dmul>
 8008b76:	464c      	mov	r4, r9
 8008b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b7c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008b80:	3701      	adds	r7, #1
 8008b82:	4638      	mov	r0, r7
 8008b84:	f7f7 fc3e 	bl	8000404 <__aeabi_i2d>
 8008b88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8c:	f7f7 fca4 	bl	80004d8 <__aeabi_dmul>
 8008b90:	2200      	movs	r2, #0
 8008b92:	4b62      	ldr	r3, [pc, #392]	; (8008d1c <_dtoa_r+0x5b4>)
 8008b94:	f7f7 faea 	bl	800016c <__adddf3>
 8008b98:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008b9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ba0:	9611      	str	r6, [sp, #68]	; 0x44
 8008ba2:	2c00      	cmp	r4, #0
 8008ba4:	d15d      	bne.n	8008c62 <_dtoa_r+0x4fa>
 8008ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008baa:	2200      	movs	r2, #0
 8008bac:	4b5c      	ldr	r3, [pc, #368]	; (8008d20 <_dtoa_r+0x5b8>)
 8008bae:	f7f7 fadb 	bl	8000168 <__aeabi_dsub>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bba:	4633      	mov	r3, r6
 8008bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bbe:	f7f7 ff1b 	bl	80009f8 <__aeabi_dcmpgt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f040 829c 	bne.w	8009100 <_dtoa_r+0x998>
 8008bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008bce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008bd2:	f7f7 fef3 	bl	80009bc <__aeabi_dcmplt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f040 8290 	bne.w	80090fc <_dtoa_r+0x994>
 8008bdc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008be0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008be4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f2c0 8152 	blt.w	8008e90 <_dtoa_r+0x728>
 8008bec:	f1ba 0f0e 	cmp.w	sl, #14
 8008bf0:	f300 814e 	bgt.w	8008e90 <_dtoa_r+0x728>
 8008bf4:	4b45      	ldr	r3, [pc, #276]	; (8008d0c <_dtoa_r+0x5a4>)
 8008bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008bfe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008c02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f280 80db 	bge.w	8008dc0 <_dtoa_r+0x658>
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f300 80d7 	bgt.w	8008dc0 <_dtoa_r+0x658>
 8008c12:	f040 8272 	bne.w	80090fa <_dtoa_r+0x992>
 8008c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4b40      	ldr	r3, [pc, #256]	; (8008d20 <_dtoa_r+0x5b8>)
 8008c1e:	f7f7 fc5b 	bl	80004d8 <__aeabi_dmul>
 8008c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c26:	f7f7 fedd 	bl	80009e4 <__aeabi_dcmpge>
 8008c2a:	9c08      	ldr	r4, [sp, #32]
 8008c2c:	4626      	mov	r6, r4
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	f040 8248 	bne.w	80090c4 <_dtoa_r+0x95c>
 8008c34:	2331      	movs	r3, #49	; 0x31
 8008c36:	9f03      	ldr	r7, [sp, #12]
 8008c38:	f10a 0a01 	add.w	sl, sl, #1
 8008c3c:	f807 3b01 	strb.w	r3, [r7], #1
 8008c40:	e244      	b.n	80090cc <_dtoa_r+0x964>
 8008c42:	07e2      	lsls	r2, r4, #31
 8008c44:	d505      	bpl.n	8008c52 <_dtoa_r+0x4ea>
 8008c46:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c4a:	f7f7 fc45 	bl	80004d8 <__aeabi_dmul>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	3701      	adds	r7, #1
 8008c52:	1064      	asrs	r4, r4, #1
 8008c54:	3608      	adds	r6, #8
 8008c56:	e76d      	b.n	8008b34 <_dtoa_r+0x3cc>
 8008c58:	2702      	movs	r7, #2
 8008c5a:	e770      	b.n	8008b3e <_dtoa_r+0x3d6>
 8008c5c:	46d0      	mov	r8, sl
 8008c5e:	9c08      	ldr	r4, [sp, #32]
 8008c60:	e78f      	b.n	8008b82 <_dtoa_r+0x41a>
 8008c62:	9903      	ldr	r1, [sp, #12]
 8008c64:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <_dtoa_r+0x5a4>)
 8008c66:	4421      	add	r1, r4
 8008c68:	9112      	str	r1, [sp, #72]	; 0x48
 8008c6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c6c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008c70:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008c74:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c78:	2900      	cmp	r1, #0
 8008c7a:	d055      	beq.n	8008d28 <_dtoa_r+0x5c0>
 8008c7c:	2000      	movs	r0, #0
 8008c7e:	4929      	ldr	r1, [pc, #164]	; (8008d24 <_dtoa_r+0x5bc>)
 8008c80:	f7f7 fd54 	bl	800072c <__aeabi_ddiv>
 8008c84:	463b      	mov	r3, r7
 8008c86:	4632      	mov	r2, r6
 8008c88:	f7f7 fa6e 	bl	8000168 <__aeabi_dsub>
 8008c8c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008c90:	9f03      	ldr	r7, [sp, #12]
 8008c92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c96:	f7f7 fecf 	bl	8000a38 <__aeabi_d2iz>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	f7f7 fbb2 	bl	8000404 <__aeabi_i2d>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ca8:	f7f7 fa5e 	bl	8000168 <__aeabi_dsub>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	3430      	adds	r4, #48	; 0x30
 8008cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008cb6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cba:	f807 4b01 	strb.w	r4, [r7], #1
 8008cbe:	f7f7 fe7d 	bl	80009bc <__aeabi_dcmplt>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d174      	bne.n	8008db0 <_dtoa_r+0x648>
 8008cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cca:	2000      	movs	r0, #0
 8008ccc:	4911      	ldr	r1, [pc, #68]	; (8008d14 <_dtoa_r+0x5ac>)
 8008cce:	f7f7 fa4b 	bl	8000168 <__aeabi_dsub>
 8008cd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008cd6:	f7f7 fe71 	bl	80009bc <__aeabi_dcmplt>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	f040 80b7 	bne.w	8008e4e <_dtoa_r+0x6e6>
 8008ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ce2:	429f      	cmp	r7, r3
 8008ce4:	f43f af7a 	beq.w	8008bdc <_dtoa_r+0x474>
 8008ce8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008cec:	2200      	movs	r2, #0
 8008cee:	4b0a      	ldr	r3, [pc, #40]	; (8008d18 <_dtoa_r+0x5b0>)
 8008cf0:	f7f7 fbf2 	bl	80004d8 <__aeabi_dmul>
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008cfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <_dtoa_r+0x5b0>)
 8008d00:	f7f7 fbea 	bl	80004d8 <__aeabi_dmul>
 8008d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d08:	e7c3      	b.n	8008c92 <_dtoa_r+0x52a>
 8008d0a:	bf00      	nop
 8008d0c:	0800aef0 	.word	0x0800aef0
 8008d10:	0800aec8 	.word	0x0800aec8
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	401c0000 	.word	0x401c0000
 8008d20:	40140000 	.word	0x40140000
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fbd4 	bl	80004d8 <__aeabi_dmul>
 8008d30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008d36:	9c03      	ldr	r4, [sp, #12]
 8008d38:	9314      	str	r3, [sp, #80]	; 0x50
 8008d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d3e:	f7f7 fe7b 	bl	8000a38 <__aeabi_d2iz>
 8008d42:	9015      	str	r0, [sp, #84]	; 0x54
 8008d44:	f7f7 fb5e 	bl	8000404 <__aeabi_i2d>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d50:	f7f7 fa0a 	bl	8000168 <__aeabi_dsub>
 8008d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d56:	4606      	mov	r6, r0
 8008d58:	3330      	adds	r3, #48	; 0x30
 8008d5a:	f804 3b01 	strb.w	r3, [r4], #1
 8008d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008d60:	460f      	mov	r7, r1
 8008d62:	429c      	cmp	r4, r3
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	d124      	bne.n	8008db4 <_dtoa_r+0x64c>
 8008d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d6e:	4bb0      	ldr	r3, [pc, #704]	; (8009030 <_dtoa_r+0x8c8>)
 8008d70:	f7f7 f9fc 	bl	800016c <__adddf3>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	4630      	mov	r0, r6
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fe3c 	bl	80009f8 <__aeabi_dcmpgt>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d163      	bne.n	8008e4c <_dtoa_r+0x6e4>
 8008d84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d88:	2000      	movs	r0, #0
 8008d8a:	49a9      	ldr	r1, [pc, #676]	; (8009030 <_dtoa_r+0x8c8>)
 8008d8c:	f7f7 f9ec 	bl	8000168 <__aeabi_dsub>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4630      	mov	r0, r6
 8008d96:	4639      	mov	r1, r7
 8008d98:	f7f7 fe10 	bl	80009bc <__aeabi_dcmplt>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	f43f af1d 	beq.w	8008bdc <_dtoa_r+0x474>
 8008da2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008da4:	1e7b      	subs	r3, r7, #1
 8008da6:	9314      	str	r3, [sp, #80]	; 0x50
 8008da8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d0f8      	beq.n	8008da2 <_dtoa_r+0x63a>
 8008db0:	46c2      	mov	sl, r8
 8008db2:	e03b      	b.n	8008e2c <_dtoa_r+0x6c4>
 8008db4:	4b9f      	ldr	r3, [pc, #636]	; (8009034 <_dtoa_r+0x8cc>)
 8008db6:	f7f7 fb8f 	bl	80004d8 <__aeabi_dmul>
 8008dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008dbe:	e7bc      	b.n	8008d3a <_dtoa_r+0x5d2>
 8008dc0:	9f03      	ldr	r7, [sp, #12]
 8008dc2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008dc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fcad 	bl	800072c <__aeabi_ddiv>
 8008dd2:	f7f7 fe31 	bl	8000a38 <__aeabi_d2iz>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7f7 fb14 	bl	8000404 <__aeabi_i2d>
 8008ddc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de0:	f7f7 fb7a 	bl	80004d8 <__aeabi_dmul>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	4640      	mov	r0, r8
 8008dea:	4649      	mov	r1, r9
 8008dec:	f7f7 f9bc 	bl	8000168 <__aeabi_dsub>
 8008df0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008df4:	f807 6b01 	strb.w	r6, [r7], #1
 8008df8:	9e03      	ldr	r6, [sp, #12]
 8008dfa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008dfe:	1bbe      	subs	r6, r7, r6
 8008e00:	45b4      	cmp	ip, r6
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	d136      	bne.n	8008e76 <_dtoa_r+0x70e>
 8008e08:	f7f7 f9b0 	bl	800016c <__adddf3>
 8008e0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e10:	4680      	mov	r8, r0
 8008e12:	4689      	mov	r9, r1
 8008e14:	f7f7 fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8008e18:	bb58      	cbnz	r0, 8008e72 <_dtoa_r+0x70a>
 8008e1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e1e:	4640      	mov	r0, r8
 8008e20:	4649      	mov	r1, r9
 8008e22:	f7f7 fdc1 	bl	80009a8 <__aeabi_dcmpeq>
 8008e26:	b108      	cbz	r0, 8008e2c <_dtoa_r+0x6c4>
 8008e28:	07e1      	lsls	r1, r4, #31
 8008e2a:	d422      	bmi.n	8008e72 <_dtoa_r+0x70a>
 8008e2c:	4628      	mov	r0, r5
 8008e2e:	4659      	mov	r1, fp
 8008e30:	f000 fd0c 	bl	800984c <_Bfree>
 8008e34:	2300      	movs	r3, #0
 8008e36:	703b      	strb	r3, [r7, #0]
 8008e38:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008e3a:	f10a 0001 	add.w	r0, sl, #1
 8008e3e:	6018      	str	r0, [r3, #0]
 8008e40:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f43f acde 	beq.w	8008804 <_dtoa_r+0x9c>
 8008e48:	601f      	str	r7, [r3, #0]
 8008e4a:	e4db      	b.n	8008804 <_dtoa_r+0x9c>
 8008e4c:	4627      	mov	r7, r4
 8008e4e:	463b      	mov	r3, r7
 8008e50:	461f      	mov	r7, r3
 8008e52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e56:	2a39      	cmp	r2, #57	; 0x39
 8008e58:	d107      	bne.n	8008e6a <_dtoa_r+0x702>
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d1f7      	bne.n	8008e50 <_dtoa_r+0x6e8>
 8008e60:	2230      	movs	r2, #48	; 0x30
 8008e62:	9903      	ldr	r1, [sp, #12]
 8008e64:	f108 0801 	add.w	r8, r8, #1
 8008e68:	700a      	strb	r2, [r1, #0]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e79e      	b.n	8008db0 <_dtoa_r+0x648>
 8008e72:	46d0      	mov	r8, sl
 8008e74:	e7eb      	b.n	8008e4e <_dtoa_r+0x6e6>
 8008e76:	2200      	movs	r2, #0
 8008e78:	4b6e      	ldr	r3, [pc, #440]	; (8009034 <_dtoa_r+0x8cc>)
 8008e7a:	f7f7 fb2d 	bl	80004d8 <__aeabi_dmul>
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2300      	movs	r3, #0
 8008e82:	4680      	mov	r8, r0
 8008e84:	4689      	mov	r9, r1
 8008e86:	f7f7 fd8f 	bl	80009a8 <__aeabi_dcmpeq>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d09b      	beq.n	8008dc6 <_dtoa_r+0x65e>
 8008e8e:	e7cd      	b.n	8008e2c <_dtoa_r+0x6c4>
 8008e90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e92:	2a00      	cmp	r2, #0
 8008e94:	f000 80d0 	beq.w	8009038 <_dtoa_r+0x8d0>
 8008e98:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008e9a:	2a01      	cmp	r2, #1
 8008e9c:	f300 80ae 	bgt.w	8008ffc <_dtoa_r+0x894>
 8008ea0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f000 80a6 	beq.w	8008ff4 <_dtoa_r+0x88c>
 8008ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008eac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008eae:	9f06      	ldr	r7, [sp, #24]
 8008eb0:	9a06      	ldr	r2, [sp, #24]
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	441a      	add	r2, r3
 8008eb6:	9206      	str	r2, [sp, #24]
 8008eb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008eba:	4628      	mov	r0, r5
 8008ebc:	441a      	add	r2, r3
 8008ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec0:	f000 fd7a 	bl	80099b8 <__i2b>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	2f00      	cmp	r7, #0
 8008ec8:	dd0c      	ble.n	8008ee4 <_dtoa_r+0x77c>
 8008eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd09      	ble.n	8008ee4 <_dtoa_r+0x77c>
 8008ed0:	42bb      	cmp	r3, r7
 8008ed2:	bfa8      	it	ge
 8008ed4:	463b      	movge	r3, r7
 8008ed6:	9a06      	ldr	r2, [sp, #24]
 8008ed8:	1aff      	subs	r7, r7, r3
 8008eda:	1ad2      	subs	r2, r2, r3
 8008edc:	9206      	str	r2, [sp, #24]
 8008ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ee6:	b1f3      	cbz	r3, 8008f26 <_dtoa_r+0x7be>
 8008ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80a8 	beq.w	8009040 <_dtoa_r+0x8d8>
 8008ef0:	2c00      	cmp	r4, #0
 8008ef2:	dd10      	ble.n	8008f16 <_dtoa_r+0x7ae>
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 fe1b 	bl	8009b34 <__pow5mult>
 8008efe:	465a      	mov	r2, fp
 8008f00:	4601      	mov	r1, r0
 8008f02:	4606      	mov	r6, r0
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 fd6d 	bl	80099e4 <__multiply>
 8008f0a:	4680      	mov	r8, r0
 8008f0c:	4659      	mov	r1, fp
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 fc9c 	bl	800984c <_Bfree>
 8008f14:	46c3      	mov	fp, r8
 8008f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f18:	1b1a      	subs	r2, r3, r4
 8008f1a:	d004      	beq.n	8008f26 <_dtoa_r+0x7be>
 8008f1c:	4659      	mov	r1, fp
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 fe08 	bl	8009b34 <__pow5mult>
 8008f24:	4683      	mov	fp, r0
 8008f26:	2101      	movs	r1, #1
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 fd45 	bl	80099b8 <__i2b>
 8008f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f30:	4604      	mov	r4, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f340 8086 	ble.w	8009044 <_dtoa_r+0x8dc>
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 fdf9 	bl	8009b34 <__pow5mult>
 8008f42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f44:	4604      	mov	r4, r0
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	dd7f      	ble.n	800904a <_dtoa_r+0x8e2>
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	6923      	ldr	r3, [r4, #16]
 8008f50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f54:	6918      	ldr	r0, [r3, #16]
 8008f56:	f000 fce1 	bl	800991c <__hi0bits>
 8008f5a:	f1c0 0020 	rsb	r0, r0, #32
 8008f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f60:	4418      	add	r0, r3
 8008f62:	f010 001f 	ands.w	r0, r0, #31
 8008f66:	f000 8092 	beq.w	800908e <_dtoa_r+0x926>
 8008f6a:	f1c0 0320 	rsb	r3, r0, #32
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	f340 808a 	ble.w	8009088 <_dtoa_r+0x920>
 8008f74:	f1c0 001c 	rsb	r0, r0, #28
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	4407      	add	r7, r0
 8008f7c:	4403      	add	r3, r0
 8008f7e:	9306      	str	r3, [sp, #24]
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	4403      	add	r3, r0
 8008f84:	9309      	str	r3, [sp, #36]	; 0x24
 8008f86:	9b06      	ldr	r3, [sp, #24]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x830>
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4628      	mov	r0, r5
 8008f92:	f000 fe29 	bl	8009be8 <__lshift>
 8008f96:	4683      	mov	fp, r0
 8008f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd05      	ble.n	8008faa <_dtoa_r+0x842>
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 fe20 	bl	8009be8 <__lshift>
 8008fa8:	4604      	mov	r4, r0
 8008faa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d070      	beq.n	8009092 <_dtoa_r+0x92a>
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	f000 fe88 	bl	8009cc8 <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	da6a      	bge.n	8009092 <_dtoa_r+0x92a>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4659      	mov	r1, fp
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 fc64 	bl	8009890 <__multadd>
 8008fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fca:	4683      	mov	fp, r0
 8008fcc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8194 	beq.w	80092fe <_dtoa_r+0xb96>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	2300      	movs	r3, #0
 8008fda:	220a      	movs	r2, #10
 8008fdc:	4628      	mov	r0, r5
 8008fde:	f000 fc57 	bl	8009890 <__multadd>
 8008fe2:	f1b9 0f00 	cmp.w	r9, #0
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	f300 8093 	bgt.w	8009112 <_dtoa_r+0x9aa>
 8008fec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	dc57      	bgt.n	80090a2 <_dtoa_r+0x93a>
 8008ff2:	e08e      	b.n	8009112 <_dtoa_r+0x9aa>
 8008ff4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ffa:	e757      	b.n	8008eac <_dtoa_r+0x744>
 8008ffc:	9b08      	ldr	r3, [sp, #32]
 8008ffe:	1e5c      	subs	r4, r3, #1
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	42a3      	cmp	r3, r4
 8009004:	bfb7      	itett	lt
 8009006:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009008:	1b1c      	subge	r4, r3, r4
 800900a:	1ae2      	sublt	r2, r4, r3
 800900c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800900e:	bfbe      	ittt	lt
 8009010:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009012:	189b      	addlt	r3, r3, r2
 8009014:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009016:	9b08      	ldr	r3, [sp, #32]
 8009018:	bfb8      	it	lt
 800901a:	2400      	movlt	r4, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	bfbb      	ittet	lt
 8009020:	9b06      	ldrlt	r3, [sp, #24]
 8009022:	9a08      	ldrlt	r2, [sp, #32]
 8009024:	9f06      	ldrge	r7, [sp, #24]
 8009026:	1a9f      	sublt	r7, r3, r2
 8009028:	bfac      	ite	ge
 800902a:	9b08      	ldrge	r3, [sp, #32]
 800902c:	2300      	movlt	r3, #0
 800902e:	e73f      	b.n	8008eb0 <_dtoa_r+0x748>
 8009030:	3fe00000 	.word	0x3fe00000
 8009034:	40240000 	.word	0x40240000
 8009038:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800903a:	9f06      	ldr	r7, [sp, #24]
 800903c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800903e:	e742      	b.n	8008ec6 <_dtoa_r+0x75e>
 8009040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009042:	e76b      	b.n	8008f1c <_dtoa_r+0x7b4>
 8009044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009046:	2b01      	cmp	r3, #1
 8009048:	dc19      	bgt.n	800907e <_dtoa_r+0x916>
 800904a:	9b04      	ldr	r3, [sp, #16]
 800904c:	b9bb      	cbnz	r3, 800907e <_dtoa_r+0x916>
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009054:	b99b      	cbnz	r3, 800907e <_dtoa_r+0x916>
 8009056:	9b05      	ldr	r3, [sp, #20]
 8009058:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800905c:	0d1b      	lsrs	r3, r3, #20
 800905e:	051b      	lsls	r3, r3, #20
 8009060:	b183      	cbz	r3, 8009084 <_dtoa_r+0x91c>
 8009062:	f04f 0801 	mov.w	r8, #1
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	3301      	adds	r3, #1
 800906a:	9306      	str	r3, [sp, #24]
 800906c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800906e:	3301      	adds	r3, #1
 8009070:	9309      	str	r3, [sp, #36]	; 0x24
 8009072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	f47f af6a 	bne.w	8008f4e <_dtoa_r+0x7e6>
 800907a:	2001      	movs	r0, #1
 800907c:	e76f      	b.n	8008f5e <_dtoa_r+0x7f6>
 800907e:	f04f 0800 	mov.w	r8, #0
 8009082:	e7f6      	b.n	8009072 <_dtoa_r+0x90a>
 8009084:	4698      	mov	r8, r3
 8009086:	e7f4      	b.n	8009072 <_dtoa_r+0x90a>
 8009088:	f43f af7d 	beq.w	8008f86 <_dtoa_r+0x81e>
 800908c:	4618      	mov	r0, r3
 800908e:	301c      	adds	r0, #28
 8009090:	e772      	b.n	8008f78 <_dtoa_r+0x810>
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dc36      	bgt.n	8009106 <_dtoa_r+0x99e>
 8009098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909a:	2b02      	cmp	r3, #2
 800909c:	dd33      	ble.n	8009106 <_dtoa_r+0x99e>
 800909e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80090a2:	f1b9 0f00 	cmp.w	r9, #0
 80090a6:	d10d      	bne.n	80090c4 <_dtoa_r+0x95c>
 80090a8:	4621      	mov	r1, r4
 80090aa:	464b      	mov	r3, r9
 80090ac:	2205      	movs	r2, #5
 80090ae:	4628      	mov	r0, r5
 80090b0:	f000 fbee 	bl	8009890 <__multadd>
 80090b4:	4601      	mov	r1, r0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4658      	mov	r0, fp
 80090ba:	f000 fe05 	bl	8009cc8 <__mcmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f73f adb8 	bgt.w	8008c34 <_dtoa_r+0x4cc>
 80090c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090c6:	9f03      	ldr	r7, [sp, #12]
 80090c8:	ea6f 0a03 	mvn.w	sl, r3
 80090cc:	f04f 0800 	mov.w	r8, #0
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 fbba 	bl	800984c <_Bfree>
 80090d8:	2e00      	cmp	r6, #0
 80090da:	f43f aea7 	beq.w	8008e2c <_dtoa_r+0x6c4>
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	d005      	beq.n	80090f0 <_dtoa_r+0x988>
 80090e4:	45b0      	cmp	r8, r6
 80090e6:	d003      	beq.n	80090f0 <_dtoa_r+0x988>
 80090e8:	4641      	mov	r1, r8
 80090ea:	4628      	mov	r0, r5
 80090ec:	f000 fbae 	bl	800984c <_Bfree>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4628      	mov	r0, r5
 80090f4:	f000 fbaa 	bl	800984c <_Bfree>
 80090f8:	e698      	b.n	8008e2c <_dtoa_r+0x6c4>
 80090fa:	2400      	movs	r4, #0
 80090fc:	4626      	mov	r6, r4
 80090fe:	e7e1      	b.n	80090c4 <_dtoa_r+0x95c>
 8009100:	46c2      	mov	sl, r8
 8009102:	4626      	mov	r6, r4
 8009104:	e596      	b.n	8008c34 <_dtoa_r+0x4cc>
 8009106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 80fd 	beq.w	800930c <_dtoa_r+0xba4>
 8009112:	2f00      	cmp	r7, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x9ba>
 8009116:	4631      	mov	r1, r6
 8009118:	463a      	mov	r2, r7
 800911a:	4628      	mov	r0, r5
 800911c:	f000 fd64 	bl	8009be8 <__lshift>
 8009120:	4606      	mov	r6, r0
 8009122:	f1b8 0f00 	cmp.w	r8, #0
 8009126:	d05c      	beq.n	80091e2 <_dtoa_r+0xa7a>
 8009128:	4628      	mov	r0, r5
 800912a:	6871      	ldr	r1, [r6, #4]
 800912c:	f000 fb4e 	bl	80097cc <_Balloc>
 8009130:	4607      	mov	r7, r0
 8009132:	b928      	cbnz	r0, 8009140 <_dtoa_r+0x9d8>
 8009134:	4602      	mov	r2, r0
 8009136:	f240 21ea 	movw	r1, #746	; 0x2ea
 800913a:	4b7f      	ldr	r3, [pc, #508]	; (8009338 <_dtoa_r+0xbd0>)
 800913c:	f7ff bb28 	b.w	8008790 <_dtoa_r+0x28>
 8009140:	6932      	ldr	r2, [r6, #16]
 8009142:	f106 010c 	add.w	r1, r6, #12
 8009146:	3202      	adds	r2, #2
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	300c      	adds	r0, #12
 800914c:	f000 fb30 	bl	80097b0 <memcpy>
 8009150:	2201      	movs	r2, #1
 8009152:	4639      	mov	r1, r7
 8009154:	4628      	mov	r0, r5
 8009156:	f000 fd47 	bl	8009be8 <__lshift>
 800915a:	46b0      	mov	r8, r6
 800915c:	4606      	mov	r6, r0
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	3301      	adds	r3, #1
 8009162:	9308      	str	r3, [sp, #32]
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	444b      	add	r3, r9
 8009168:	930a      	str	r3, [sp, #40]	; 0x28
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	9309      	str	r3, [sp, #36]	; 0x24
 8009172:	9b08      	ldr	r3, [sp, #32]
 8009174:	4621      	mov	r1, r4
 8009176:	3b01      	subs	r3, #1
 8009178:	4658      	mov	r0, fp
 800917a:	9304      	str	r3, [sp, #16]
 800917c:	f7ff fa66 	bl	800864c <quorem>
 8009180:	4603      	mov	r3, r0
 8009182:	4641      	mov	r1, r8
 8009184:	3330      	adds	r3, #48	; 0x30
 8009186:	9006      	str	r0, [sp, #24]
 8009188:	4658      	mov	r0, fp
 800918a:	930b      	str	r3, [sp, #44]	; 0x2c
 800918c:	f000 fd9c 	bl	8009cc8 <__mcmp>
 8009190:	4632      	mov	r2, r6
 8009192:	4681      	mov	r9, r0
 8009194:	4621      	mov	r1, r4
 8009196:	4628      	mov	r0, r5
 8009198:	f000 fdb2 	bl	8009d00 <__mdiff>
 800919c:	68c2      	ldr	r2, [r0, #12]
 800919e:	4607      	mov	r7, r0
 80091a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a2:	bb02      	cbnz	r2, 80091e6 <_dtoa_r+0xa7e>
 80091a4:	4601      	mov	r1, r0
 80091a6:	4658      	mov	r0, fp
 80091a8:	f000 fd8e 	bl	8009cc8 <__mcmp>
 80091ac:	4602      	mov	r2, r0
 80091ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b0:	4639      	mov	r1, r7
 80091b2:	4628      	mov	r0, r5
 80091b4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80091b8:	f000 fb48 	bl	800984c <_Bfree>
 80091bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091c0:	9f08      	ldr	r7, [sp, #32]
 80091c2:	ea43 0102 	orr.w	r1, r3, r2
 80091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c8:	430b      	orrs	r3, r1
 80091ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091cc:	d10d      	bne.n	80091ea <_dtoa_r+0xa82>
 80091ce:	2b39      	cmp	r3, #57	; 0x39
 80091d0:	d029      	beq.n	8009226 <_dtoa_r+0xabe>
 80091d2:	f1b9 0f00 	cmp.w	r9, #0
 80091d6:	dd01      	ble.n	80091dc <_dtoa_r+0xa74>
 80091d8:	9b06      	ldr	r3, [sp, #24]
 80091da:	3331      	adds	r3, #49	; 0x31
 80091dc:	9a04      	ldr	r2, [sp, #16]
 80091de:	7013      	strb	r3, [r2, #0]
 80091e0:	e776      	b.n	80090d0 <_dtoa_r+0x968>
 80091e2:	4630      	mov	r0, r6
 80091e4:	e7b9      	b.n	800915a <_dtoa_r+0x9f2>
 80091e6:	2201      	movs	r2, #1
 80091e8:	e7e2      	b.n	80091b0 <_dtoa_r+0xa48>
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	db06      	blt.n	80091fe <_dtoa_r+0xa96>
 80091f0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80091f2:	ea41 0909 	orr.w	r9, r1, r9
 80091f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091f8:	ea59 0101 	orrs.w	r1, r9, r1
 80091fc:	d120      	bne.n	8009240 <_dtoa_r+0xad8>
 80091fe:	2a00      	cmp	r2, #0
 8009200:	ddec      	ble.n	80091dc <_dtoa_r+0xa74>
 8009202:	4659      	mov	r1, fp
 8009204:	2201      	movs	r2, #1
 8009206:	4628      	mov	r0, r5
 8009208:	9308      	str	r3, [sp, #32]
 800920a:	f000 fced 	bl	8009be8 <__lshift>
 800920e:	4621      	mov	r1, r4
 8009210:	4683      	mov	fp, r0
 8009212:	f000 fd59 	bl	8009cc8 <__mcmp>
 8009216:	2800      	cmp	r0, #0
 8009218:	9b08      	ldr	r3, [sp, #32]
 800921a:	dc02      	bgt.n	8009222 <_dtoa_r+0xaba>
 800921c:	d1de      	bne.n	80091dc <_dtoa_r+0xa74>
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d5dc      	bpl.n	80091dc <_dtoa_r+0xa74>
 8009222:	2b39      	cmp	r3, #57	; 0x39
 8009224:	d1d8      	bne.n	80091d8 <_dtoa_r+0xa70>
 8009226:	2339      	movs	r3, #57	; 0x39
 8009228:	9a04      	ldr	r2, [sp, #16]
 800922a:	7013      	strb	r3, [r2, #0]
 800922c:	463b      	mov	r3, r7
 800922e:	461f      	mov	r7, r3
 8009230:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009234:	3b01      	subs	r3, #1
 8009236:	2a39      	cmp	r2, #57	; 0x39
 8009238:	d050      	beq.n	80092dc <_dtoa_r+0xb74>
 800923a:	3201      	adds	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e747      	b.n	80090d0 <_dtoa_r+0x968>
 8009240:	2a00      	cmp	r2, #0
 8009242:	dd03      	ble.n	800924c <_dtoa_r+0xae4>
 8009244:	2b39      	cmp	r3, #57	; 0x39
 8009246:	d0ee      	beq.n	8009226 <_dtoa_r+0xabe>
 8009248:	3301      	adds	r3, #1
 800924a:	e7c7      	b.n	80091dc <_dtoa_r+0xa74>
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009250:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009254:	428a      	cmp	r2, r1
 8009256:	d02a      	beq.n	80092ae <_dtoa_r+0xb46>
 8009258:	4659      	mov	r1, fp
 800925a:	2300      	movs	r3, #0
 800925c:	220a      	movs	r2, #10
 800925e:	4628      	mov	r0, r5
 8009260:	f000 fb16 	bl	8009890 <__multadd>
 8009264:	45b0      	cmp	r8, r6
 8009266:	4683      	mov	fp, r0
 8009268:	f04f 0300 	mov.w	r3, #0
 800926c:	f04f 020a 	mov.w	r2, #10
 8009270:	4641      	mov	r1, r8
 8009272:	4628      	mov	r0, r5
 8009274:	d107      	bne.n	8009286 <_dtoa_r+0xb1e>
 8009276:	f000 fb0b 	bl	8009890 <__multadd>
 800927a:	4680      	mov	r8, r0
 800927c:	4606      	mov	r6, r0
 800927e:	9b08      	ldr	r3, [sp, #32]
 8009280:	3301      	adds	r3, #1
 8009282:	9308      	str	r3, [sp, #32]
 8009284:	e775      	b.n	8009172 <_dtoa_r+0xa0a>
 8009286:	f000 fb03 	bl	8009890 <__multadd>
 800928a:	4631      	mov	r1, r6
 800928c:	4680      	mov	r8, r0
 800928e:	2300      	movs	r3, #0
 8009290:	220a      	movs	r2, #10
 8009292:	4628      	mov	r0, r5
 8009294:	f000 fafc 	bl	8009890 <__multadd>
 8009298:	4606      	mov	r6, r0
 800929a:	e7f0      	b.n	800927e <_dtoa_r+0xb16>
 800929c:	f1b9 0f00 	cmp.w	r9, #0
 80092a0:	bfcc      	ite	gt
 80092a2:	464f      	movgt	r7, r9
 80092a4:	2701      	movle	r7, #1
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	9a03      	ldr	r2, [sp, #12]
 80092ac:	4417      	add	r7, r2
 80092ae:	4659      	mov	r1, fp
 80092b0:	2201      	movs	r2, #1
 80092b2:	4628      	mov	r0, r5
 80092b4:	9308      	str	r3, [sp, #32]
 80092b6:	f000 fc97 	bl	8009be8 <__lshift>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4683      	mov	fp, r0
 80092be:	f000 fd03 	bl	8009cc8 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	dcb2      	bgt.n	800922c <_dtoa_r+0xac4>
 80092c6:	d102      	bne.n	80092ce <_dtoa_r+0xb66>
 80092c8:	9b08      	ldr	r3, [sp, #32]
 80092ca:	07db      	lsls	r3, r3, #31
 80092cc:	d4ae      	bmi.n	800922c <_dtoa_r+0xac4>
 80092ce:	463b      	mov	r3, r7
 80092d0:	461f      	mov	r7, r3
 80092d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d6:	2a30      	cmp	r2, #48	; 0x30
 80092d8:	d0fa      	beq.n	80092d0 <_dtoa_r+0xb68>
 80092da:	e6f9      	b.n	80090d0 <_dtoa_r+0x968>
 80092dc:	9a03      	ldr	r2, [sp, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d1a5      	bne.n	800922e <_dtoa_r+0xac6>
 80092e2:	2331      	movs	r3, #49	; 0x31
 80092e4:	f10a 0a01 	add.w	sl, sl, #1
 80092e8:	e779      	b.n	80091de <_dtoa_r+0xa76>
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <_dtoa_r+0xbd4>)
 80092ec:	f7ff baa8 	b.w	8008840 <_dtoa_r+0xd8>
 80092f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f47f aa81 	bne.w	80087fa <_dtoa_r+0x92>
 80092f8:	4b11      	ldr	r3, [pc, #68]	; (8009340 <_dtoa_r+0xbd8>)
 80092fa:	f7ff baa1 	b.w	8008840 <_dtoa_r+0xd8>
 80092fe:	f1b9 0f00 	cmp.w	r9, #0
 8009302:	dc03      	bgt.n	800930c <_dtoa_r+0xba4>
 8009304:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009306:	2b02      	cmp	r3, #2
 8009308:	f73f aecb 	bgt.w	80090a2 <_dtoa_r+0x93a>
 800930c:	9f03      	ldr	r7, [sp, #12]
 800930e:	4621      	mov	r1, r4
 8009310:	4658      	mov	r0, fp
 8009312:	f7ff f99b 	bl	800864c <quorem>
 8009316:	9a03      	ldr	r2, [sp, #12]
 8009318:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800931c:	f807 3b01 	strb.w	r3, [r7], #1
 8009320:	1aba      	subs	r2, r7, r2
 8009322:	4591      	cmp	r9, r2
 8009324:	ddba      	ble.n	800929c <_dtoa_r+0xb34>
 8009326:	4659      	mov	r1, fp
 8009328:	2300      	movs	r3, #0
 800932a:	220a      	movs	r2, #10
 800932c:	4628      	mov	r0, r5
 800932e:	f000 faaf 	bl	8009890 <__multadd>
 8009332:	4683      	mov	fp, r0
 8009334:	e7eb      	b.n	800930e <_dtoa_r+0xba6>
 8009336:	bf00      	nop
 8009338:	0800adfb 	.word	0x0800adfb
 800933c:	0800ad58 	.word	0x0800ad58
 8009340:	0800ad7c 	.word	0x0800ad7c

08009344 <__sflush_r>:
 8009344:	898a      	ldrh	r2, [r1, #12]
 8009346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009348:	4605      	mov	r5, r0
 800934a:	0710      	lsls	r0, r2, #28
 800934c:	460c      	mov	r4, r1
 800934e:	d457      	bmi.n	8009400 <__sflush_r+0xbc>
 8009350:	684b      	ldr	r3, [r1, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	dc04      	bgt.n	8009360 <__sflush_r+0x1c>
 8009356:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc01      	bgt.n	8009360 <__sflush_r+0x1c>
 800935c:	2000      	movs	r0, #0
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009362:	2e00      	cmp	r6, #0
 8009364:	d0fa      	beq.n	800935c <__sflush_r+0x18>
 8009366:	2300      	movs	r3, #0
 8009368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800936c:	682f      	ldr	r7, [r5, #0]
 800936e:	602b      	str	r3, [r5, #0]
 8009370:	d032      	beq.n	80093d8 <__sflush_r+0x94>
 8009372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	075a      	lsls	r2, r3, #29
 8009378:	d505      	bpl.n	8009386 <__sflush_r+0x42>
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	1ac0      	subs	r0, r0, r3
 800937e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009380:	b10b      	cbz	r3, 8009386 <__sflush_r+0x42>
 8009382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009384:	1ac0      	subs	r0, r0, r3
 8009386:	2300      	movs	r3, #0
 8009388:	4602      	mov	r2, r0
 800938a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800938c:	4628      	mov	r0, r5
 800938e:	6a21      	ldr	r1, [r4, #32]
 8009390:	47b0      	blx	r6
 8009392:	1c43      	adds	r3, r0, #1
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	d106      	bne.n	80093a6 <__sflush_r+0x62>
 8009398:	6829      	ldr	r1, [r5, #0]
 800939a:	291d      	cmp	r1, #29
 800939c:	d82c      	bhi.n	80093f8 <__sflush_r+0xb4>
 800939e:	4a29      	ldr	r2, [pc, #164]	; (8009444 <__sflush_r+0x100>)
 80093a0:	40ca      	lsrs	r2, r1
 80093a2:	07d6      	lsls	r6, r2, #31
 80093a4:	d528      	bpl.n	80093f8 <__sflush_r+0xb4>
 80093a6:	2200      	movs	r2, #0
 80093a8:	6062      	str	r2, [r4, #4]
 80093aa:	6922      	ldr	r2, [r4, #16]
 80093ac:	04d9      	lsls	r1, r3, #19
 80093ae:	6022      	str	r2, [r4, #0]
 80093b0:	d504      	bpl.n	80093bc <__sflush_r+0x78>
 80093b2:	1c42      	adds	r2, r0, #1
 80093b4:	d101      	bne.n	80093ba <__sflush_r+0x76>
 80093b6:	682b      	ldr	r3, [r5, #0]
 80093b8:	b903      	cbnz	r3, 80093bc <__sflush_r+0x78>
 80093ba:	6560      	str	r0, [r4, #84]	; 0x54
 80093bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093be:	602f      	str	r7, [r5, #0]
 80093c0:	2900      	cmp	r1, #0
 80093c2:	d0cb      	beq.n	800935c <__sflush_r+0x18>
 80093c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093c8:	4299      	cmp	r1, r3
 80093ca:	d002      	beq.n	80093d2 <__sflush_r+0x8e>
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 fd93 	bl	8009ef8 <_free_r>
 80093d2:	2000      	movs	r0, #0
 80093d4:	6360      	str	r0, [r4, #52]	; 0x34
 80093d6:	e7c2      	b.n	800935e <__sflush_r+0x1a>
 80093d8:	6a21      	ldr	r1, [r4, #32]
 80093da:	2301      	movs	r3, #1
 80093dc:	4628      	mov	r0, r5
 80093de:	47b0      	blx	r6
 80093e0:	1c41      	adds	r1, r0, #1
 80093e2:	d1c7      	bne.n	8009374 <__sflush_r+0x30>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0c4      	beq.n	8009374 <__sflush_r+0x30>
 80093ea:	2b1d      	cmp	r3, #29
 80093ec:	d001      	beq.n	80093f2 <__sflush_r+0xae>
 80093ee:	2b16      	cmp	r3, #22
 80093f0:	d101      	bne.n	80093f6 <__sflush_r+0xb2>
 80093f2:	602f      	str	r7, [r5, #0]
 80093f4:	e7b2      	b.n	800935c <__sflush_r+0x18>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	e7ae      	b.n	800935e <__sflush_r+0x1a>
 8009400:	690f      	ldr	r7, [r1, #16]
 8009402:	2f00      	cmp	r7, #0
 8009404:	d0aa      	beq.n	800935c <__sflush_r+0x18>
 8009406:	0793      	lsls	r3, r2, #30
 8009408:	bf18      	it	ne
 800940a:	2300      	movne	r3, #0
 800940c:	680e      	ldr	r6, [r1, #0]
 800940e:	bf08      	it	eq
 8009410:	694b      	ldreq	r3, [r1, #20]
 8009412:	1bf6      	subs	r6, r6, r7
 8009414:	600f      	str	r7, [r1, #0]
 8009416:	608b      	str	r3, [r1, #8]
 8009418:	2e00      	cmp	r6, #0
 800941a:	dd9f      	ble.n	800935c <__sflush_r+0x18>
 800941c:	4633      	mov	r3, r6
 800941e:	463a      	mov	r2, r7
 8009420:	4628      	mov	r0, r5
 8009422:	6a21      	ldr	r1, [r4, #32]
 8009424:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009428:	47e0      	blx	ip
 800942a:	2800      	cmp	r0, #0
 800942c:	dc06      	bgt.n	800943c <__sflush_r+0xf8>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	e790      	b.n	800935e <__sflush_r+0x1a>
 800943c:	4407      	add	r7, r0
 800943e:	1a36      	subs	r6, r6, r0
 8009440:	e7ea      	b.n	8009418 <__sflush_r+0xd4>
 8009442:	bf00      	nop
 8009444:	20400001 	.word	0x20400001

08009448 <_fflush_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	690b      	ldr	r3, [r1, #16]
 800944c:	4605      	mov	r5, r0
 800944e:	460c      	mov	r4, r1
 8009450:	b913      	cbnz	r3, 8009458 <_fflush_r+0x10>
 8009452:	2500      	movs	r5, #0
 8009454:	4628      	mov	r0, r5
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	b118      	cbz	r0, 8009462 <_fflush_r+0x1a>
 800945a:	6983      	ldr	r3, [r0, #24]
 800945c:	b90b      	cbnz	r3, 8009462 <_fflush_r+0x1a>
 800945e:	f000 f887 	bl	8009570 <__sinit>
 8009462:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <_fflush_r+0x6c>)
 8009464:	429c      	cmp	r4, r3
 8009466:	d11b      	bne.n	80094a0 <_fflush_r+0x58>
 8009468:	686c      	ldr	r4, [r5, #4]
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0ef      	beq.n	8009452 <_fflush_r+0xa>
 8009472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009474:	07d0      	lsls	r0, r2, #31
 8009476:	d404      	bmi.n	8009482 <_fflush_r+0x3a>
 8009478:	0599      	lsls	r1, r3, #22
 800947a:	d402      	bmi.n	8009482 <_fflush_r+0x3a>
 800947c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947e:	f000 f91a 	bl	80096b6 <__retarget_lock_acquire_recursive>
 8009482:	4628      	mov	r0, r5
 8009484:	4621      	mov	r1, r4
 8009486:	f7ff ff5d 	bl	8009344 <__sflush_r>
 800948a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800948c:	4605      	mov	r5, r0
 800948e:	07da      	lsls	r2, r3, #31
 8009490:	d4e0      	bmi.n	8009454 <_fflush_r+0xc>
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	059b      	lsls	r3, r3, #22
 8009496:	d4dd      	bmi.n	8009454 <_fflush_r+0xc>
 8009498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800949a:	f000 f90d 	bl	80096b8 <__retarget_lock_release_recursive>
 800949e:	e7d9      	b.n	8009454 <_fflush_r+0xc>
 80094a0:	4b05      	ldr	r3, [pc, #20]	; (80094b8 <_fflush_r+0x70>)
 80094a2:	429c      	cmp	r4, r3
 80094a4:	d101      	bne.n	80094aa <_fflush_r+0x62>
 80094a6:	68ac      	ldr	r4, [r5, #8]
 80094a8:	e7df      	b.n	800946a <_fflush_r+0x22>
 80094aa:	4b04      	ldr	r3, [pc, #16]	; (80094bc <_fflush_r+0x74>)
 80094ac:	429c      	cmp	r4, r3
 80094ae:	bf08      	it	eq
 80094b0:	68ec      	ldreq	r4, [r5, #12]
 80094b2:	e7da      	b.n	800946a <_fflush_r+0x22>
 80094b4:	0800ae2c 	.word	0x0800ae2c
 80094b8:	0800ae4c 	.word	0x0800ae4c
 80094bc:	0800ae0c 	.word	0x0800ae0c

080094c0 <std>:
 80094c0:	2300      	movs	r3, #0
 80094c2:	b510      	push	{r4, lr}
 80094c4:	4604      	mov	r4, r0
 80094c6:	e9c0 3300 	strd	r3, r3, [r0]
 80094ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ce:	6083      	str	r3, [r0, #8]
 80094d0:	8181      	strh	r1, [r0, #12]
 80094d2:	6643      	str	r3, [r0, #100]	; 0x64
 80094d4:	81c2      	strh	r2, [r0, #14]
 80094d6:	6183      	str	r3, [r0, #24]
 80094d8:	4619      	mov	r1, r3
 80094da:	2208      	movs	r2, #8
 80094dc:	305c      	adds	r0, #92	; 0x5c
 80094de:	f7fe fae3 	bl	8007aa8 <memset>
 80094e2:	4b05      	ldr	r3, [pc, #20]	; (80094f8 <std+0x38>)
 80094e4:	6224      	str	r4, [r4, #32]
 80094e6:	6263      	str	r3, [r4, #36]	; 0x24
 80094e8:	4b04      	ldr	r3, [pc, #16]	; (80094fc <std+0x3c>)
 80094ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80094ec:	4b04      	ldr	r3, [pc, #16]	; (8009500 <std+0x40>)
 80094ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094f0:	4b04      	ldr	r3, [pc, #16]	; (8009504 <std+0x44>)
 80094f2:	6323      	str	r3, [r4, #48]	; 0x30
 80094f4:	bd10      	pop	{r4, pc}
 80094f6:	bf00      	nop
 80094f8:	0800a389 	.word	0x0800a389
 80094fc:	0800a3ab 	.word	0x0800a3ab
 8009500:	0800a3e3 	.word	0x0800a3e3
 8009504:	0800a407 	.word	0x0800a407

08009508 <_cleanup_r>:
 8009508:	4901      	ldr	r1, [pc, #4]	; (8009510 <_cleanup_r+0x8>)
 800950a:	f000 b8af 	b.w	800966c <_fwalk_reent>
 800950e:	bf00      	nop
 8009510:	08009449 	.word	0x08009449

08009514 <__sfmoreglue>:
 8009514:	2268      	movs	r2, #104	; 0x68
 8009516:	b570      	push	{r4, r5, r6, lr}
 8009518:	1e4d      	subs	r5, r1, #1
 800951a:	4355      	muls	r5, r2
 800951c:	460e      	mov	r6, r1
 800951e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009522:	f000 fd51 	bl	8009fc8 <_malloc_r>
 8009526:	4604      	mov	r4, r0
 8009528:	b140      	cbz	r0, 800953c <__sfmoreglue+0x28>
 800952a:	2100      	movs	r1, #0
 800952c:	e9c0 1600 	strd	r1, r6, [r0]
 8009530:	300c      	adds	r0, #12
 8009532:	60a0      	str	r0, [r4, #8]
 8009534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009538:	f7fe fab6 	bl	8007aa8 <memset>
 800953c:	4620      	mov	r0, r4
 800953e:	bd70      	pop	{r4, r5, r6, pc}

08009540 <__sfp_lock_acquire>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__sfp_lock_acquire+0x8>)
 8009542:	f000 b8b8 	b.w	80096b6 <__retarget_lock_acquire_recursive>
 8009546:	bf00      	nop
 8009548:	200004e5 	.word	0x200004e5

0800954c <__sfp_lock_release>:
 800954c:	4801      	ldr	r0, [pc, #4]	; (8009554 <__sfp_lock_release+0x8>)
 800954e:	f000 b8b3 	b.w	80096b8 <__retarget_lock_release_recursive>
 8009552:	bf00      	nop
 8009554:	200004e5 	.word	0x200004e5

08009558 <__sinit_lock_acquire>:
 8009558:	4801      	ldr	r0, [pc, #4]	; (8009560 <__sinit_lock_acquire+0x8>)
 800955a:	f000 b8ac 	b.w	80096b6 <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	200004e6 	.word	0x200004e6

08009564 <__sinit_lock_release>:
 8009564:	4801      	ldr	r0, [pc, #4]	; (800956c <__sinit_lock_release+0x8>)
 8009566:	f000 b8a7 	b.w	80096b8 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	200004e6 	.word	0x200004e6

08009570 <__sinit>:
 8009570:	b510      	push	{r4, lr}
 8009572:	4604      	mov	r4, r0
 8009574:	f7ff fff0 	bl	8009558 <__sinit_lock_acquire>
 8009578:	69a3      	ldr	r3, [r4, #24]
 800957a:	b11b      	cbz	r3, 8009584 <__sinit+0x14>
 800957c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009580:	f7ff bff0 	b.w	8009564 <__sinit_lock_release>
 8009584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009588:	6523      	str	r3, [r4, #80]	; 0x50
 800958a:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <__sinit+0x68>)
 800958c:	4a13      	ldr	r2, [pc, #76]	; (80095dc <__sinit+0x6c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	62a2      	str	r2, [r4, #40]	; 0x28
 8009592:	42a3      	cmp	r3, r4
 8009594:	bf08      	it	eq
 8009596:	2301      	moveq	r3, #1
 8009598:	4620      	mov	r0, r4
 800959a:	bf08      	it	eq
 800959c:	61a3      	streq	r3, [r4, #24]
 800959e:	f000 f81f 	bl	80095e0 <__sfp>
 80095a2:	6060      	str	r0, [r4, #4]
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 f81b 	bl	80095e0 <__sfp>
 80095aa:	60a0      	str	r0, [r4, #8]
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 f817 	bl	80095e0 <__sfp>
 80095b2:	2200      	movs	r2, #0
 80095b4:	2104      	movs	r1, #4
 80095b6:	60e0      	str	r0, [r4, #12]
 80095b8:	6860      	ldr	r0, [r4, #4]
 80095ba:	f7ff ff81 	bl	80094c0 <std>
 80095be:	2201      	movs	r2, #1
 80095c0:	2109      	movs	r1, #9
 80095c2:	68a0      	ldr	r0, [r4, #8]
 80095c4:	f7ff ff7c 	bl	80094c0 <std>
 80095c8:	2202      	movs	r2, #2
 80095ca:	2112      	movs	r1, #18
 80095cc:	68e0      	ldr	r0, [r4, #12]
 80095ce:	f7ff ff77 	bl	80094c0 <std>
 80095d2:	2301      	movs	r3, #1
 80095d4:	61a3      	str	r3, [r4, #24]
 80095d6:	e7d1      	b.n	800957c <__sinit+0xc>
 80095d8:	0800ad44 	.word	0x0800ad44
 80095dc:	08009509 	.word	0x08009509

080095e0 <__sfp>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	4607      	mov	r7, r0
 80095e4:	f7ff ffac 	bl	8009540 <__sfp_lock_acquire>
 80095e8:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <__sfp+0x84>)
 80095ea:	681e      	ldr	r6, [r3, #0]
 80095ec:	69b3      	ldr	r3, [r6, #24]
 80095ee:	b913      	cbnz	r3, 80095f6 <__sfp+0x16>
 80095f0:	4630      	mov	r0, r6
 80095f2:	f7ff ffbd 	bl	8009570 <__sinit>
 80095f6:	3648      	adds	r6, #72	; 0x48
 80095f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	d503      	bpl.n	8009608 <__sfp+0x28>
 8009600:	6833      	ldr	r3, [r6, #0]
 8009602:	b30b      	cbz	r3, 8009648 <__sfp+0x68>
 8009604:	6836      	ldr	r6, [r6, #0]
 8009606:	e7f7      	b.n	80095f8 <__sfp+0x18>
 8009608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800960c:	b9d5      	cbnz	r5, 8009644 <__sfp+0x64>
 800960e:	4b16      	ldr	r3, [pc, #88]	; (8009668 <__sfp+0x88>)
 8009610:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009614:	60e3      	str	r3, [r4, #12]
 8009616:	6665      	str	r5, [r4, #100]	; 0x64
 8009618:	f000 f84c 	bl	80096b4 <__retarget_lock_init_recursive>
 800961c:	f7ff ff96 	bl	800954c <__sfp_lock_release>
 8009620:	2208      	movs	r2, #8
 8009622:	4629      	mov	r1, r5
 8009624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800962c:	6025      	str	r5, [r4, #0]
 800962e:	61a5      	str	r5, [r4, #24]
 8009630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009634:	f7fe fa38 	bl	8007aa8 <memset>
 8009638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800963c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009640:	4620      	mov	r0, r4
 8009642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009644:	3468      	adds	r4, #104	; 0x68
 8009646:	e7d9      	b.n	80095fc <__sfp+0x1c>
 8009648:	2104      	movs	r1, #4
 800964a:	4638      	mov	r0, r7
 800964c:	f7ff ff62 	bl	8009514 <__sfmoreglue>
 8009650:	4604      	mov	r4, r0
 8009652:	6030      	str	r0, [r6, #0]
 8009654:	2800      	cmp	r0, #0
 8009656:	d1d5      	bne.n	8009604 <__sfp+0x24>
 8009658:	f7ff ff78 	bl	800954c <__sfp_lock_release>
 800965c:	230c      	movs	r3, #12
 800965e:	603b      	str	r3, [r7, #0]
 8009660:	e7ee      	b.n	8009640 <__sfp+0x60>
 8009662:	bf00      	nop
 8009664:	0800ad44 	.word	0x0800ad44
 8009668:	ffff0001 	.word	0xffff0001

0800966c <_fwalk_reent>:
 800966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009670:	4606      	mov	r6, r0
 8009672:	4688      	mov	r8, r1
 8009674:	2700      	movs	r7, #0
 8009676:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800967a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800967e:	f1b9 0901 	subs.w	r9, r9, #1
 8009682:	d505      	bpl.n	8009690 <_fwalk_reent+0x24>
 8009684:	6824      	ldr	r4, [r4, #0]
 8009686:	2c00      	cmp	r4, #0
 8009688:	d1f7      	bne.n	800967a <_fwalk_reent+0xe>
 800968a:	4638      	mov	r0, r7
 800968c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009690:	89ab      	ldrh	r3, [r5, #12]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d907      	bls.n	80096a6 <_fwalk_reent+0x3a>
 8009696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800969a:	3301      	adds	r3, #1
 800969c:	d003      	beq.n	80096a6 <_fwalk_reent+0x3a>
 800969e:	4629      	mov	r1, r5
 80096a0:	4630      	mov	r0, r6
 80096a2:	47c0      	blx	r8
 80096a4:	4307      	orrs	r7, r0
 80096a6:	3568      	adds	r5, #104	; 0x68
 80096a8:	e7e9      	b.n	800967e <_fwalk_reent+0x12>
	...

080096ac <_localeconv_r>:
 80096ac:	4800      	ldr	r0, [pc, #0]	; (80096b0 <_localeconv_r+0x4>)
 80096ae:	4770      	bx	lr
 80096b0:	20000190 	.word	0x20000190

080096b4 <__retarget_lock_init_recursive>:
 80096b4:	4770      	bx	lr

080096b6 <__retarget_lock_acquire_recursive>:
 80096b6:	4770      	bx	lr

080096b8 <__retarget_lock_release_recursive>:
 80096b8:	4770      	bx	lr

080096ba <__swhatbuf_r>:
 80096ba:	b570      	push	{r4, r5, r6, lr}
 80096bc:	460e      	mov	r6, r1
 80096be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096c2:	4614      	mov	r4, r2
 80096c4:	2900      	cmp	r1, #0
 80096c6:	461d      	mov	r5, r3
 80096c8:	b096      	sub	sp, #88	; 0x58
 80096ca:	da08      	bge.n	80096de <__swhatbuf_r+0x24>
 80096cc:	2200      	movs	r2, #0
 80096ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096d2:	602a      	str	r2, [r5, #0]
 80096d4:	061a      	lsls	r2, r3, #24
 80096d6:	d410      	bmi.n	80096fa <__swhatbuf_r+0x40>
 80096d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096dc:	e00e      	b.n	80096fc <__swhatbuf_r+0x42>
 80096de:	466a      	mov	r2, sp
 80096e0:	f000 fee8 	bl	800a4b4 <_fstat_r>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	dbf1      	blt.n	80096cc <__swhatbuf_r+0x12>
 80096e8:	9a01      	ldr	r2, [sp, #4]
 80096ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096f2:	425a      	negs	r2, r3
 80096f4:	415a      	adcs	r2, r3
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	e7ee      	b.n	80096d8 <__swhatbuf_r+0x1e>
 80096fa:	2340      	movs	r3, #64	; 0x40
 80096fc:	2000      	movs	r0, #0
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	b016      	add	sp, #88	; 0x58
 8009702:	bd70      	pop	{r4, r5, r6, pc}

08009704 <__smakebuf_r>:
 8009704:	898b      	ldrh	r3, [r1, #12]
 8009706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009708:	079d      	lsls	r5, r3, #30
 800970a:	4606      	mov	r6, r0
 800970c:	460c      	mov	r4, r1
 800970e:	d507      	bpl.n	8009720 <__smakebuf_r+0x1c>
 8009710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009714:	6023      	str	r3, [r4, #0]
 8009716:	6123      	str	r3, [r4, #16]
 8009718:	2301      	movs	r3, #1
 800971a:	6163      	str	r3, [r4, #20]
 800971c:	b002      	add	sp, #8
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	466a      	mov	r2, sp
 8009722:	ab01      	add	r3, sp, #4
 8009724:	f7ff ffc9 	bl	80096ba <__swhatbuf_r>
 8009728:	9900      	ldr	r1, [sp, #0]
 800972a:	4605      	mov	r5, r0
 800972c:	4630      	mov	r0, r6
 800972e:	f000 fc4b 	bl	8009fc8 <_malloc_r>
 8009732:	b948      	cbnz	r0, 8009748 <__smakebuf_r+0x44>
 8009734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009738:	059a      	lsls	r2, r3, #22
 800973a:	d4ef      	bmi.n	800971c <__smakebuf_r+0x18>
 800973c:	f023 0303 	bic.w	r3, r3, #3
 8009740:	f043 0302 	orr.w	r3, r3, #2
 8009744:	81a3      	strh	r3, [r4, #12]
 8009746:	e7e3      	b.n	8009710 <__smakebuf_r+0xc>
 8009748:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <__smakebuf_r+0x7c>)
 800974a:	62b3      	str	r3, [r6, #40]	; 0x28
 800974c:	89a3      	ldrh	r3, [r4, #12]
 800974e:	6020      	str	r0, [r4, #0]
 8009750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	6120      	str	r0, [r4, #16]
 800975a:	6163      	str	r3, [r4, #20]
 800975c:	9b01      	ldr	r3, [sp, #4]
 800975e:	b15b      	cbz	r3, 8009778 <__smakebuf_r+0x74>
 8009760:	4630      	mov	r0, r6
 8009762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009766:	f000 feb7 	bl	800a4d8 <_isatty_r>
 800976a:	b128      	cbz	r0, 8009778 <__smakebuf_r+0x74>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	f023 0303 	bic.w	r3, r3, #3
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	81a3      	strh	r3, [r4, #12]
 8009778:	89a0      	ldrh	r0, [r4, #12]
 800977a:	4305      	orrs	r5, r0
 800977c:	81a5      	strh	r5, [r4, #12]
 800977e:	e7cd      	b.n	800971c <__smakebuf_r+0x18>
 8009780:	08009509 	.word	0x08009509

08009784 <malloc>:
 8009784:	4b02      	ldr	r3, [pc, #8]	; (8009790 <malloc+0xc>)
 8009786:	4601      	mov	r1, r0
 8009788:	6818      	ldr	r0, [r3, #0]
 800978a:	f000 bc1d 	b.w	8009fc8 <_malloc_r>
 800978e:	bf00      	nop
 8009790:	2000003c 	.word	0x2000003c

08009794 <memchr>:
 8009794:	4603      	mov	r3, r0
 8009796:	b510      	push	{r4, lr}
 8009798:	b2c9      	uxtb	r1, r1
 800979a:	4402      	add	r2, r0
 800979c:	4293      	cmp	r3, r2
 800979e:	4618      	mov	r0, r3
 80097a0:	d101      	bne.n	80097a6 <memchr+0x12>
 80097a2:	2000      	movs	r0, #0
 80097a4:	e003      	b.n	80097ae <memchr+0x1a>
 80097a6:	7804      	ldrb	r4, [r0, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	428c      	cmp	r4, r1
 80097ac:	d1f6      	bne.n	800979c <memchr+0x8>
 80097ae:	bd10      	pop	{r4, pc}

080097b0 <memcpy>:
 80097b0:	440a      	add	r2, r1
 80097b2:	4291      	cmp	r1, r2
 80097b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097b8:	d100      	bne.n	80097bc <memcpy+0xc>
 80097ba:	4770      	bx	lr
 80097bc:	b510      	push	{r4, lr}
 80097be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097c2:	4291      	cmp	r1, r2
 80097c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097c8:	d1f9      	bne.n	80097be <memcpy+0xe>
 80097ca:	bd10      	pop	{r4, pc}

080097cc <_Balloc>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d0:	4604      	mov	r4, r0
 80097d2:	460d      	mov	r5, r1
 80097d4:	b976      	cbnz	r6, 80097f4 <_Balloc+0x28>
 80097d6:	2010      	movs	r0, #16
 80097d8:	f7ff ffd4 	bl	8009784 <malloc>
 80097dc:	4602      	mov	r2, r0
 80097de:	6260      	str	r0, [r4, #36]	; 0x24
 80097e0:	b920      	cbnz	r0, 80097ec <_Balloc+0x20>
 80097e2:	2166      	movs	r1, #102	; 0x66
 80097e4:	4b17      	ldr	r3, [pc, #92]	; (8009844 <_Balloc+0x78>)
 80097e6:	4818      	ldr	r0, [pc, #96]	; (8009848 <_Balloc+0x7c>)
 80097e8:	f000 fe24 	bl	800a434 <__assert_func>
 80097ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f0:	6006      	str	r6, [r0, #0]
 80097f2:	60c6      	str	r6, [r0, #12]
 80097f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80097f6:	68f3      	ldr	r3, [r6, #12]
 80097f8:	b183      	cbz	r3, 800981c <_Balloc+0x50>
 80097fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009802:	b9b8      	cbnz	r0, 8009834 <_Balloc+0x68>
 8009804:	2101      	movs	r1, #1
 8009806:	fa01 f605 	lsl.w	r6, r1, r5
 800980a:	1d72      	adds	r2, r6, #5
 800980c:	4620      	mov	r0, r4
 800980e:	0092      	lsls	r2, r2, #2
 8009810:	f000 fb5e 	bl	8009ed0 <_calloc_r>
 8009814:	b160      	cbz	r0, 8009830 <_Balloc+0x64>
 8009816:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800981a:	e00e      	b.n	800983a <_Balloc+0x6e>
 800981c:	2221      	movs	r2, #33	; 0x21
 800981e:	2104      	movs	r1, #4
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fb55 	bl	8009ed0 <_calloc_r>
 8009826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009828:	60f0      	str	r0, [r6, #12]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e4      	bne.n	80097fa <_Balloc+0x2e>
 8009830:	2000      	movs	r0, #0
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	6802      	ldr	r2, [r0, #0]
 8009836:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800983a:	2300      	movs	r3, #0
 800983c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009840:	e7f7      	b.n	8009832 <_Balloc+0x66>
 8009842:	bf00      	nop
 8009844:	0800ad89 	.word	0x0800ad89
 8009848:	0800ae6c 	.word	0x0800ae6c

0800984c <_Bfree>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009850:	4605      	mov	r5, r0
 8009852:	460c      	mov	r4, r1
 8009854:	b976      	cbnz	r6, 8009874 <_Bfree+0x28>
 8009856:	2010      	movs	r0, #16
 8009858:	f7ff ff94 	bl	8009784 <malloc>
 800985c:	4602      	mov	r2, r0
 800985e:	6268      	str	r0, [r5, #36]	; 0x24
 8009860:	b920      	cbnz	r0, 800986c <_Bfree+0x20>
 8009862:	218a      	movs	r1, #138	; 0x8a
 8009864:	4b08      	ldr	r3, [pc, #32]	; (8009888 <_Bfree+0x3c>)
 8009866:	4809      	ldr	r0, [pc, #36]	; (800988c <_Bfree+0x40>)
 8009868:	f000 fde4 	bl	800a434 <__assert_func>
 800986c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009870:	6006      	str	r6, [r0, #0]
 8009872:	60c6      	str	r6, [r0, #12]
 8009874:	b13c      	cbz	r4, 8009886 <_Bfree+0x3a>
 8009876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009878:	6862      	ldr	r2, [r4, #4]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009880:	6021      	str	r1, [r4, #0]
 8009882:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	0800ad89 	.word	0x0800ad89
 800988c:	0800ae6c 	.word	0x0800ae6c

08009890 <__multadd>:
 8009890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009894:	4607      	mov	r7, r0
 8009896:	460c      	mov	r4, r1
 8009898:	461e      	mov	r6, r3
 800989a:	2000      	movs	r0, #0
 800989c:	690d      	ldr	r5, [r1, #16]
 800989e:	f101 0c14 	add.w	ip, r1, #20
 80098a2:	f8dc 3000 	ldr.w	r3, [ip]
 80098a6:	3001      	adds	r0, #1
 80098a8:	b299      	uxth	r1, r3
 80098aa:	fb02 6101 	mla	r1, r2, r1, r6
 80098ae:	0c1e      	lsrs	r6, r3, #16
 80098b0:	0c0b      	lsrs	r3, r1, #16
 80098b2:	fb02 3306 	mla	r3, r2, r6, r3
 80098b6:	b289      	uxth	r1, r1
 80098b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80098bc:	4285      	cmp	r5, r0
 80098be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80098c2:	f84c 1b04 	str.w	r1, [ip], #4
 80098c6:	dcec      	bgt.n	80098a2 <__multadd+0x12>
 80098c8:	b30e      	cbz	r6, 800990e <__multadd+0x7e>
 80098ca:	68a3      	ldr	r3, [r4, #8]
 80098cc:	42ab      	cmp	r3, r5
 80098ce:	dc19      	bgt.n	8009904 <__multadd+0x74>
 80098d0:	6861      	ldr	r1, [r4, #4]
 80098d2:	4638      	mov	r0, r7
 80098d4:	3101      	adds	r1, #1
 80098d6:	f7ff ff79 	bl	80097cc <_Balloc>
 80098da:	4680      	mov	r8, r0
 80098dc:	b928      	cbnz	r0, 80098ea <__multadd+0x5a>
 80098de:	4602      	mov	r2, r0
 80098e0:	21b5      	movs	r1, #181	; 0xb5
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <__multadd+0x84>)
 80098e4:	480c      	ldr	r0, [pc, #48]	; (8009918 <__multadd+0x88>)
 80098e6:	f000 fda5 	bl	800a434 <__assert_func>
 80098ea:	6922      	ldr	r2, [r4, #16]
 80098ec:	f104 010c 	add.w	r1, r4, #12
 80098f0:	3202      	adds	r2, #2
 80098f2:	0092      	lsls	r2, r2, #2
 80098f4:	300c      	adds	r0, #12
 80098f6:	f7ff ff5b 	bl	80097b0 <memcpy>
 80098fa:	4621      	mov	r1, r4
 80098fc:	4638      	mov	r0, r7
 80098fe:	f7ff ffa5 	bl	800984c <_Bfree>
 8009902:	4644      	mov	r4, r8
 8009904:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009908:	3501      	adds	r5, #1
 800990a:	615e      	str	r6, [r3, #20]
 800990c:	6125      	str	r5, [r4, #16]
 800990e:	4620      	mov	r0, r4
 8009910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009914:	0800adfb 	.word	0x0800adfb
 8009918:	0800ae6c 	.word	0x0800ae6c

0800991c <__hi0bits>:
 800991c:	0c02      	lsrs	r2, r0, #16
 800991e:	0412      	lsls	r2, r2, #16
 8009920:	4603      	mov	r3, r0
 8009922:	b9ca      	cbnz	r2, 8009958 <__hi0bits+0x3c>
 8009924:	0403      	lsls	r3, r0, #16
 8009926:	2010      	movs	r0, #16
 8009928:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800992c:	bf04      	itt	eq
 800992e:	021b      	lsleq	r3, r3, #8
 8009930:	3008      	addeq	r0, #8
 8009932:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009936:	bf04      	itt	eq
 8009938:	011b      	lsleq	r3, r3, #4
 800993a:	3004      	addeq	r0, #4
 800993c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009940:	bf04      	itt	eq
 8009942:	009b      	lsleq	r3, r3, #2
 8009944:	3002      	addeq	r0, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	db05      	blt.n	8009956 <__hi0bits+0x3a>
 800994a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800994e:	f100 0001 	add.w	r0, r0, #1
 8009952:	bf08      	it	eq
 8009954:	2020      	moveq	r0, #32
 8009956:	4770      	bx	lr
 8009958:	2000      	movs	r0, #0
 800995a:	e7e5      	b.n	8009928 <__hi0bits+0xc>

0800995c <__lo0bits>:
 800995c:	6803      	ldr	r3, [r0, #0]
 800995e:	4602      	mov	r2, r0
 8009960:	f013 0007 	ands.w	r0, r3, #7
 8009964:	d00b      	beq.n	800997e <__lo0bits+0x22>
 8009966:	07d9      	lsls	r1, r3, #31
 8009968:	d421      	bmi.n	80099ae <__lo0bits+0x52>
 800996a:	0798      	lsls	r0, r3, #30
 800996c:	bf49      	itett	mi
 800996e:	085b      	lsrmi	r3, r3, #1
 8009970:	089b      	lsrpl	r3, r3, #2
 8009972:	2001      	movmi	r0, #1
 8009974:	6013      	strmi	r3, [r2, #0]
 8009976:	bf5c      	itt	pl
 8009978:	2002      	movpl	r0, #2
 800997a:	6013      	strpl	r3, [r2, #0]
 800997c:	4770      	bx	lr
 800997e:	b299      	uxth	r1, r3
 8009980:	b909      	cbnz	r1, 8009986 <__lo0bits+0x2a>
 8009982:	2010      	movs	r0, #16
 8009984:	0c1b      	lsrs	r3, r3, #16
 8009986:	b2d9      	uxtb	r1, r3
 8009988:	b909      	cbnz	r1, 800998e <__lo0bits+0x32>
 800998a:	3008      	adds	r0, #8
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	0719      	lsls	r1, r3, #28
 8009990:	bf04      	itt	eq
 8009992:	091b      	lsreq	r3, r3, #4
 8009994:	3004      	addeq	r0, #4
 8009996:	0799      	lsls	r1, r3, #30
 8009998:	bf04      	itt	eq
 800999a:	089b      	lsreq	r3, r3, #2
 800999c:	3002      	addeq	r0, #2
 800999e:	07d9      	lsls	r1, r3, #31
 80099a0:	d403      	bmi.n	80099aa <__lo0bits+0x4e>
 80099a2:	085b      	lsrs	r3, r3, #1
 80099a4:	f100 0001 	add.w	r0, r0, #1
 80099a8:	d003      	beq.n	80099b2 <__lo0bits+0x56>
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	4770      	bx	lr
 80099ae:	2000      	movs	r0, #0
 80099b0:	4770      	bx	lr
 80099b2:	2020      	movs	r0, #32
 80099b4:	4770      	bx	lr
	...

080099b8 <__i2b>:
 80099b8:	b510      	push	{r4, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	2101      	movs	r1, #1
 80099be:	f7ff ff05 	bl	80097cc <_Balloc>
 80099c2:	4602      	mov	r2, r0
 80099c4:	b928      	cbnz	r0, 80099d2 <__i2b+0x1a>
 80099c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099ca:	4b04      	ldr	r3, [pc, #16]	; (80099dc <__i2b+0x24>)
 80099cc:	4804      	ldr	r0, [pc, #16]	; (80099e0 <__i2b+0x28>)
 80099ce:	f000 fd31 	bl	800a434 <__assert_func>
 80099d2:	2301      	movs	r3, #1
 80099d4:	6144      	str	r4, [r0, #20]
 80099d6:	6103      	str	r3, [r0, #16]
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	0800adfb 	.word	0x0800adfb
 80099e0:	0800ae6c 	.word	0x0800ae6c

080099e4 <__multiply>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4691      	mov	r9, r2
 80099ea:	690a      	ldr	r2, [r1, #16]
 80099ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80099f0:	460c      	mov	r4, r1
 80099f2:	429a      	cmp	r2, r3
 80099f4:	bfbe      	ittt	lt
 80099f6:	460b      	movlt	r3, r1
 80099f8:	464c      	movlt	r4, r9
 80099fa:	4699      	movlt	r9, r3
 80099fc:	6927      	ldr	r7, [r4, #16]
 80099fe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	6861      	ldr	r1, [r4, #4]
 8009a06:	eb07 060a 	add.w	r6, r7, sl
 8009a0a:	42b3      	cmp	r3, r6
 8009a0c:	b085      	sub	sp, #20
 8009a0e:	bfb8      	it	lt
 8009a10:	3101      	addlt	r1, #1
 8009a12:	f7ff fedb 	bl	80097cc <_Balloc>
 8009a16:	b930      	cbnz	r0, 8009a26 <__multiply+0x42>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	f240 115d 	movw	r1, #349	; 0x15d
 8009a1e:	4b43      	ldr	r3, [pc, #268]	; (8009b2c <__multiply+0x148>)
 8009a20:	4843      	ldr	r0, [pc, #268]	; (8009b30 <__multiply+0x14c>)
 8009a22:	f000 fd07 	bl	800a434 <__assert_func>
 8009a26:	f100 0514 	add.w	r5, r0, #20
 8009a2a:	462b      	mov	r3, r5
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a32:	4543      	cmp	r3, r8
 8009a34:	d321      	bcc.n	8009a7a <__multiply+0x96>
 8009a36:	f104 0314 	add.w	r3, r4, #20
 8009a3a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009a3e:	f109 0314 	add.w	r3, r9, #20
 8009a42:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009a46:	9202      	str	r2, [sp, #8]
 8009a48:	1b3a      	subs	r2, r7, r4
 8009a4a:	3a15      	subs	r2, #21
 8009a4c:	f022 0203 	bic.w	r2, r2, #3
 8009a50:	3204      	adds	r2, #4
 8009a52:	f104 0115 	add.w	r1, r4, #21
 8009a56:	428f      	cmp	r7, r1
 8009a58:	bf38      	it	cc
 8009a5a:	2204      	movcc	r2, #4
 8009a5c:	9201      	str	r2, [sp, #4]
 8009a5e:	9a02      	ldr	r2, [sp, #8]
 8009a60:	9303      	str	r3, [sp, #12]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d80c      	bhi.n	8009a80 <__multiply+0x9c>
 8009a66:	2e00      	cmp	r6, #0
 8009a68:	dd03      	ble.n	8009a72 <__multiply+0x8e>
 8009a6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d059      	beq.n	8009b26 <__multiply+0x142>
 8009a72:	6106      	str	r6, [r0, #16]
 8009a74:	b005      	add	sp, #20
 8009a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a7a:	f843 2b04 	str.w	r2, [r3], #4
 8009a7e:	e7d8      	b.n	8009a32 <__multiply+0x4e>
 8009a80:	f8b3 a000 	ldrh.w	sl, [r3]
 8009a84:	f1ba 0f00 	cmp.w	sl, #0
 8009a88:	d023      	beq.n	8009ad2 <__multiply+0xee>
 8009a8a:	46a9      	mov	r9, r5
 8009a8c:	f04f 0c00 	mov.w	ip, #0
 8009a90:	f104 0e14 	add.w	lr, r4, #20
 8009a94:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009a98:	f8d9 1000 	ldr.w	r1, [r9]
 8009a9c:	fa1f fb82 	uxth.w	fp, r2
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	fb0a 110b 	mla	r1, sl, fp, r1
 8009aa6:	4461      	add	r1, ip
 8009aa8:	f8d9 c000 	ldr.w	ip, [r9]
 8009aac:	0c12      	lsrs	r2, r2, #16
 8009aae:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009ab2:	fb0a c202 	mla	r2, sl, r2, ip
 8009ab6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009aba:	b289      	uxth	r1, r1
 8009abc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ac0:	4577      	cmp	r7, lr
 8009ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ac6:	f849 1b04 	str.w	r1, [r9], #4
 8009aca:	d8e3      	bhi.n	8009a94 <__multiply+0xb0>
 8009acc:	9a01      	ldr	r2, [sp, #4]
 8009ace:	f845 c002 	str.w	ip, [r5, r2]
 8009ad2:	9a03      	ldr	r2, [sp, #12]
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ada:	f1b9 0f00 	cmp.w	r9, #0
 8009ade:	d020      	beq.n	8009b22 <__multiply+0x13e>
 8009ae0:	46ae      	mov	lr, r5
 8009ae2:	f04f 0a00 	mov.w	sl, #0
 8009ae6:	6829      	ldr	r1, [r5, #0]
 8009ae8:	f104 0c14 	add.w	ip, r4, #20
 8009aec:	f8bc b000 	ldrh.w	fp, [ip]
 8009af0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009af4:	b289      	uxth	r1, r1
 8009af6:	fb09 220b 	mla	r2, r9, fp, r2
 8009afa:	4492      	add	sl, r2
 8009afc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009b00:	f84e 1b04 	str.w	r1, [lr], #4
 8009b04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009b08:	f8be 1000 	ldrh.w	r1, [lr]
 8009b0c:	0c12      	lsrs	r2, r2, #16
 8009b0e:	fb09 1102 	mla	r1, r9, r2, r1
 8009b12:	4567      	cmp	r7, ip
 8009b14:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009b18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009b1c:	d8e6      	bhi.n	8009aec <__multiply+0x108>
 8009b1e:	9a01      	ldr	r2, [sp, #4]
 8009b20:	50a9      	str	r1, [r5, r2]
 8009b22:	3504      	adds	r5, #4
 8009b24:	e79b      	b.n	8009a5e <__multiply+0x7a>
 8009b26:	3e01      	subs	r6, #1
 8009b28:	e79d      	b.n	8009a66 <__multiply+0x82>
 8009b2a:	bf00      	nop
 8009b2c:	0800adfb 	.word	0x0800adfb
 8009b30:	0800ae6c 	.word	0x0800ae6c

08009b34 <__pow5mult>:
 8009b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b38:	4615      	mov	r5, r2
 8009b3a:	f012 0203 	ands.w	r2, r2, #3
 8009b3e:	4606      	mov	r6, r0
 8009b40:	460f      	mov	r7, r1
 8009b42:	d007      	beq.n	8009b54 <__pow5mult+0x20>
 8009b44:	4c25      	ldr	r4, [pc, #148]	; (8009bdc <__pow5mult+0xa8>)
 8009b46:	3a01      	subs	r2, #1
 8009b48:	2300      	movs	r3, #0
 8009b4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b4e:	f7ff fe9f 	bl	8009890 <__multadd>
 8009b52:	4607      	mov	r7, r0
 8009b54:	10ad      	asrs	r5, r5, #2
 8009b56:	d03d      	beq.n	8009bd4 <__pow5mult+0xa0>
 8009b58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b5a:	b97c      	cbnz	r4, 8009b7c <__pow5mult+0x48>
 8009b5c:	2010      	movs	r0, #16
 8009b5e:	f7ff fe11 	bl	8009784 <malloc>
 8009b62:	4602      	mov	r2, r0
 8009b64:	6270      	str	r0, [r6, #36]	; 0x24
 8009b66:	b928      	cbnz	r0, 8009b74 <__pow5mult+0x40>
 8009b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <__pow5mult+0xac>)
 8009b6e:	481d      	ldr	r0, [pc, #116]	; (8009be4 <__pow5mult+0xb0>)
 8009b70:	f000 fc60 	bl	800a434 <__assert_func>
 8009b74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b78:	6004      	str	r4, [r0, #0]
 8009b7a:	60c4      	str	r4, [r0, #12]
 8009b7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b84:	b94c      	cbnz	r4, 8009b9a <__pow5mult+0x66>
 8009b86:	f240 2171 	movw	r1, #625	; 0x271
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f7ff ff14 	bl	80099b8 <__i2b>
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b98:	6003      	str	r3, [r0, #0]
 8009b9a:	f04f 0900 	mov.w	r9, #0
 8009b9e:	07eb      	lsls	r3, r5, #31
 8009ba0:	d50a      	bpl.n	8009bb8 <__pow5mult+0x84>
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff ff1c 	bl	80099e4 <__multiply>
 8009bac:	4680      	mov	r8, r0
 8009bae:	4639      	mov	r1, r7
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	f7ff fe4b 	bl	800984c <_Bfree>
 8009bb6:	4647      	mov	r7, r8
 8009bb8:	106d      	asrs	r5, r5, #1
 8009bba:	d00b      	beq.n	8009bd4 <__pow5mult+0xa0>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	b938      	cbnz	r0, 8009bd0 <__pow5mult+0x9c>
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ff0d 	bl	80099e4 <__multiply>
 8009bca:	6020      	str	r0, [r4, #0]
 8009bcc:	f8c0 9000 	str.w	r9, [r0]
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	e7e4      	b.n	8009b9e <__pow5mult+0x6a>
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bda:	bf00      	nop
 8009bdc:	0800afb8 	.word	0x0800afb8
 8009be0:	0800ad89 	.word	0x0800ad89
 8009be4:	0800ae6c 	.word	0x0800ae6c

08009be8 <__lshift>:
 8009be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	4607      	mov	r7, r0
 8009bf0:	4691      	mov	r9, r2
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	6849      	ldr	r1, [r1, #4]
 8009bf6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009bfa:	68a3      	ldr	r3, [r4, #8]
 8009bfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c00:	f108 0601 	add.w	r6, r8, #1
 8009c04:	42b3      	cmp	r3, r6
 8009c06:	db0b      	blt.n	8009c20 <__lshift+0x38>
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff fddf 	bl	80097cc <_Balloc>
 8009c0e:	4605      	mov	r5, r0
 8009c10:	b948      	cbnz	r0, 8009c26 <__lshift+0x3e>
 8009c12:	4602      	mov	r2, r0
 8009c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c18:	4b29      	ldr	r3, [pc, #164]	; (8009cc0 <__lshift+0xd8>)
 8009c1a:	482a      	ldr	r0, [pc, #168]	; (8009cc4 <__lshift+0xdc>)
 8009c1c:	f000 fc0a 	bl	800a434 <__assert_func>
 8009c20:	3101      	adds	r1, #1
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	e7ee      	b.n	8009c04 <__lshift+0x1c>
 8009c26:	2300      	movs	r3, #0
 8009c28:	f100 0114 	add.w	r1, r0, #20
 8009c2c:	f100 0210 	add.w	r2, r0, #16
 8009c30:	4618      	mov	r0, r3
 8009c32:	4553      	cmp	r3, sl
 8009c34:	db37      	blt.n	8009ca6 <__lshift+0xbe>
 8009c36:	6920      	ldr	r0, [r4, #16]
 8009c38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c3c:	f104 0314 	add.w	r3, r4, #20
 8009c40:	f019 091f 	ands.w	r9, r9, #31
 8009c44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009c4c:	d02f      	beq.n	8009cae <__lshift+0xc6>
 8009c4e:	468a      	mov	sl, r1
 8009c50:	f04f 0c00 	mov.w	ip, #0
 8009c54:	f1c9 0e20 	rsb	lr, r9, #32
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	fa02 f209 	lsl.w	r2, r2, r9
 8009c5e:	ea42 020c 	orr.w	r2, r2, ip
 8009c62:	f84a 2b04 	str.w	r2, [sl], #4
 8009c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c6a:	4298      	cmp	r0, r3
 8009c6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009c70:	d8f2      	bhi.n	8009c58 <__lshift+0x70>
 8009c72:	1b03      	subs	r3, r0, r4
 8009c74:	3b15      	subs	r3, #21
 8009c76:	f023 0303 	bic.w	r3, r3, #3
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	f104 0215 	add.w	r2, r4, #21
 8009c80:	4290      	cmp	r0, r2
 8009c82:	bf38      	it	cc
 8009c84:	2304      	movcc	r3, #4
 8009c86:	f841 c003 	str.w	ip, [r1, r3]
 8009c8a:	f1bc 0f00 	cmp.w	ip, #0
 8009c8e:	d001      	beq.n	8009c94 <__lshift+0xac>
 8009c90:	f108 0602 	add.w	r6, r8, #2
 8009c94:	3e01      	subs	r6, #1
 8009c96:	4638      	mov	r0, r7
 8009c98:	4621      	mov	r1, r4
 8009c9a:	612e      	str	r6, [r5, #16]
 8009c9c:	f7ff fdd6 	bl	800984c <_Bfree>
 8009ca0:	4628      	mov	r0, r5
 8009ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009caa:	3301      	adds	r3, #1
 8009cac:	e7c1      	b.n	8009c32 <__lshift+0x4a>
 8009cae:	3904      	subs	r1, #4
 8009cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cb4:	4298      	cmp	r0, r3
 8009cb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cba:	d8f9      	bhi.n	8009cb0 <__lshift+0xc8>
 8009cbc:	e7ea      	b.n	8009c94 <__lshift+0xac>
 8009cbe:	bf00      	nop
 8009cc0:	0800adfb 	.word	0x0800adfb
 8009cc4:	0800ae6c 	.word	0x0800ae6c

08009cc8 <__mcmp>:
 8009cc8:	4603      	mov	r3, r0
 8009cca:	690a      	ldr	r2, [r1, #16]
 8009ccc:	6900      	ldr	r0, [r0, #16]
 8009cce:	b530      	push	{r4, r5, lr}
 8009cd0:	1a80      	subs	r0, r0, r2
 8009cd2:	d10d      	bne.n	8009cf0 <__mcmp+0x28>
 8009cd4:	3314      	adds	r3, #20
 8009cd6:	3114      	adds	r1, #20
 8009cd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ce0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ce4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ce8:	4295      	cmp	r5, r2
 8009cea:	d002      	beq.n	8009cf2 <__mcmp+0x2a>
 8009cec:	d304      	bcc.n	8009cf8 <__mcmp+0x30>
 8009cee:	2001      	movs	r0, #1
 8009cf0:	bd30      	pop	{r4, r5, pc}
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	d3f4      	bcc.n	8009ce0 <__mcmp+0x18>
 8009cf6:	e7fb      	b.n	8009cf0 <__mcmp+0x28>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	e7f8      	b.n	8009cf0 <__mcmp+0x28>
	...

08009d00 <__mdiff>:
 8009d00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	460d      	mov	r5, r1
 8009d06:	4607      	mov	r7, r0
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	f7ff ffdb 	bl	8009cc8 <__mcmp>
 8009d12:	1e06      	subs	r6, r0, #0
 8009d14:	d111      	bne.n	8009d3a <__mdiff+0x3a>
 8009d16:	4631      	mov	r1, r6
 8009d18:	4638      	mov	r0, r7
 8009d1a:	f7ff fd57 	bl	80097cc <_Balloc>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	b928      	cbnz	r0, 8009d2e <__mdiff+0x2e>
 8009d22:	f240 2132 	movw	r1, #562	; 0x232
 8009d26:	4b3a      	ldr	r3, [pc, #232]	; (8009e10 <__mdiff+0x110>)
 8009d28:	483a      	ldr	r0, [pc, #232]	; (8009e14 <__mdiff+0x114>)
 8009d2a:	f000 fb83 	bl	800a434 <__assert_func>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009d34:	4610      	mov	r0, r2
 8009d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d3a:	bfa4      	itt	ge
 8009d3c:	4623      	movge	r3, r4
 8009d3e:	462c      	movge	r4, r5
 8009d40:	4638      	mov	r0, r7
 8009d42:	6861      	ldr	r1, [r4, #4]
 8009d44:	bfa6      	itte	ge
 8009d46:	461d      	movge	r5, r3
 8009d48:	2600      	movge	r6, #0
 8009d4a:	2601      	movlt	r6, #1
 8009d4c:	f7ff fd3e 	bl	80097cc <_Balloc>
 8009d50:	4602      	mov	r2, r0
 8009d52:	b918      	cbnz	r0, 8009d5c <__mdiff+0x5c>
 8009d54:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d58:	4b2d      	ldr	r3, [pc, #180]	; (8009e10 <__mdiff+0x110>)
 8009d5a:	e7e5      	b.n	8009d28 <__mdiff+0x28>
 8009d5c:	f102 0814 	add.w	r8, r2, #20
 8009d60:	46c2      	mov	sl, r8
 8009d62:	f04f 0c00 	mov.w	ip, #0
 8009d66:	6927      	ldr	r7, [r4, #16]
 8009d68:	60c6      	str	r6, [r0, #12]
 8009d6a:	692e      	ldr	r6, [r5, #16]
 8009d6c:	f104 0014 	add.w	r0, r4, #20
 8009d70:	f105 0914 	add.w	r9, r5, #20
 8009d74:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009d78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d7c:	3410      	adds	r4, #16
 8009d7e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009d82:	f859 3b04 	ldr.w	r3, [r9], #4
 8009d86:	fa1f f18b 	uxth.w	r1, fp
 8009d8a:	448c      	add	ip, r1
 8009d8c:	b299      	uxth	r1, r3
 8009d8e:	0c1b      	lsrs	r3, r3, #16
 8009d90:	ebac 0101 	sub.w	r1, ip, r1
 8009d94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009d98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009d9c:	b289      	uxth	r1, r1
 8009d9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009da2:	454e      	cmp	r6, r9
 8009da4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009da8:	f84a 3b04 	str.w	r3, [sl], #4
 8009dac:	d8e7      	bhi.n	8009d7e <__mdiff+0x7e>
 8009dae:	1b73      	subs	r3, r6, r5
 8009db0:	3b15      	subs	r3, #21
 8009db2:	f023 0303 	bic.w	r3, r3, #3
 8009db6:	3515      	adds	r5, #21
 8009db8:	3304      	adds	r3, #4
 8009dba:	42ae      	cmp	r6, r5
 8009dbc:	bf38      	it	cc
 8009dbe:	2304      	movcc	r3, #4
 8009dc0:	4418      	add	r0, r3
 8009dc2:	4443      	add	r3, r8
 8009dc4:	461e      	mov	r6, r3
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	4575      	cmp	r5, lr
 8009dca:	d30e      	bcc.n	8009dea <__mdiff+0xea>
 8009dcc:	f10e 0103 	add.w	r1, lr, #3
 8009dd0:	1a09      	subs	r1, r1, r0
 8009dd2:	f021 0103 	bic.w	r1, r1, #3
 8009dd6:	3803      	subs	r0, #3
 8009dd8:	4586      	cmp	lr, r0
 8009dda:	bf38      	it	cc
 8009ddc:	2100      	movcc	r1, #0
 8009dde:	4419      	add	r1, r3
 8009de0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009de4:	b18b      	cbz	r3, 8009e0a <__mdiff+0x10a>
 8009de6:	6117      	str	r7, [r2, #16]
 8009de8:	e7a4      	b.n	8009d34 <__mdiff+0x34>
 8009dea:	f855 8b04 	ldr.w	r8, [r5], #4
 8009dee:	fa1f f188 	uxth.w	r1, r8
 8009df2:	4461      	add	r1, ip
 8009df4:	140c      	asrs	r4, r1, #16
 8009df6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009dfa:	b289      	uxth	r1, r1
 8009dfc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009e00:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009e04:	f846 1b04 	str.w	r1, [r6], #4
 8009e08:	e7de      	b.n	8009dc8 <__mdiff+0xc8>
 8009e0a:	3f01      	subs	r7, #1
 8009e0c:	e7e8      	b.n	8009de0 <__mdiff+0xe0>
 8009e0e:	bf00      	nop
 8009e10:	0800adfb 	.word	0x0800adfb
 8009e14:	0800ae6c 	.word	0x0800ae6c

08009e18 <__d2b>:
 8009e18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009e1c:	2101      	movs	r1, #1
 8009e1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009e22:	4690      	mov	r8, r2
 8009e24:	461d      	mov	r5, r3
 8009e26:	f7ff fcd1 	bl	80097cc <_Balloc>
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	b930      	cbnz	r0, 8009e3c <__d2b+0x24>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	f240 310a 	movw	r1, #778	; 0x30a
 8009e34:	4b24      	ldr	r3, [pc, #144]	; (8009ec8 <__d2b+0xb0>)
 8009e36:	4825      	ldr	r0, [pc, #148]	; (8009ecc <__d2b+0xb4>)
 8009e38:	f000 fafc 	bl	800a434 <__assert_func>
 8009e3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009e40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009e44:	bb2d      	cbnz	r5, 8009e92 <__d2b+0x7a>
 8009e46:	9301      	str	r3, [sp, #4]
 8009e48:	f1b8 0300 	subs.w	r3, r8, #0
 8009e4c:	d026      	beq.n	8009e9c <__d2b+0x84>
 8009e4e:	4668      	mov	r0, sp
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	f7ff fd83 	bl	800995c <__lo0bits>
 8009e56:	9900      	ldr	r1, [sp, #0]
 8009e58:	b1f0      	cbz	r0, 8009e98 <__d2b+0x80>
 8009e5a:	9a01      	ldr	r2, [sp, #4]
 8009e5c:	f1c0 0320 	rsb	r3, r0, #32
 8009e60:	fa02 f303 	lsl.w	r3, r2, r3
 8009e64:	430b      	orrs	r3, r1
 8009e66:	40c2      	lsrs	r2, r0
 8009e68:	6163      	str	r3, [r4, #20]
 8009e6a:	9201      	str	r2, [sp, #4]
 8009e6c:	9b01      	ldr	r3, [sp, #4]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bf14      	ite	ne
 8009e72:	2102      	movne	r1, #2
 8009e74:	2101      	moveq	r1, #1
 8009e76:	61a3      	str	r3, [r4, #24]
 8009e78:	6121      	str	r1, [r4, #16]
 8009e7a:	b1c5      	cbz	r5, 8009eae <__d2b+0x96>
 8009e7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e80:	4405      	add	r5, r0
 8009e82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e86:	603d      	str	r5, [r7, #0]
 8009e88:	6030      	str	r0, [r6, #0]
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	b002      	add	sp, #8
 8009e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e96:	e7d6      	b.n	8009e46 <__d2b+0x2e>
 8009e98:	6161      	str	r1, [r4, #20]
 8009e9a:	e7e7      	b.n	8009e6c <__d2b+0x54>
 8009e9c:	a801      	add	r0, sp, #4
 8009e9e:	f7ff fd5d 	bl	800995c <__lo0bits>
 8009ea2:	2101      	movs	r1, #1
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	6121      	str	r1, [r4, #16]
 8009ea8:	6163      	str	r3, [r4, #20]
 8009eaa:	3020      	adds	r0, #32
 8009eac:	e7e5      	b.n	8009e7a <__d2b+0x62>
 8009eae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009eb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009eb6:	6038      	str	r0, [r7, #0]
 8009eb8:	6918      	ldr	r0, [r3, #16]
 8009eba:	f7ff fd2f 	bl	800991c <__hi0bits>
 8009ebe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009ec2:	6031      	str	r1, [r6, #0]
 8009ec4:	e7e1      	b.n	8009e8a <__d2b+0x72>
 8009ec6:	bf00      	nop
 8009ec8:	0800adfb 	.word	0x0800adfb
 8009ecc:	0800ae6c 	.word	0x0800ae6c

08009ed0 <_calloc_r>:
 8009ed0:	b570      	push	{r4, r5, r6, lr}
 8009ed2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ed6:	b934      	cbnz	r4, 8009ee6 <_calloc_r+0x16>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	f000 f875 	bl	8009fc8 <_malloc_r>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	b928      	cbnz	r0, 8009eee <_calloc_r+0x1e>
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	bd70      	pop	{r4, r5, r6, pc}
 8009ee6:	220c      	movs	r2, #12
 8009ee8:	2600      	movs	r6, #0
 8009eea:	6002      	str	r2, [r0, #0]
 8009eec:	e7f9      	b.n	8009ee2 <_calloc_r+0x12>
 8009eee:	462a      	mov	r2, r5
 8009ef0:	4621      	mov	r1, r4
 8009ef2:	f7fd fdd9 	bl	8007aa8 <memset>
 8009ef6:	e7f4      	b.n	8009ee2 <_calloc_r+0x12>

08009ef8 <_free_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4605      	mov	r5, r0
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d040      	beq.n	8009f82 <_free_r+0x8a>
 8009f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f04:	1f0c      	subs	r4, r1, #4
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfb8      	it	lt
 8009f0a:	18e4      	addlt	r4, r4, r3
 8009f0c:	f000 fb32 	bl	800a574 <__malloc_lock>
 8009f10:	4a1c      	ldr	r2, [pc, #112]	; (8009f84 <_free_r+0x8c>)
 8009f12:	6813      	ldr	r3, [r2, #0]
 8009f14:	b933      	cbnz	r3, 8009f24 <_free_r+0x2c>
 8009f16:	6063      	str	r3, [r4, #4]
 8009f18:	6014      	str	r4, [r2, #0]
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f20:	f000 bb2e 	b.w	800a580 <__malloc_unlock>
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d908      	bls.n	8009f3a <_free_r+0x42>
 8009f28:	6820      	ldr	r0, [r4, #0]
 8009f2a:	1821      	adds	r1, r4, r0
 8009f2c:	428b      	cmp	r3, r1
 8009f2e:	bf01      	itttt	eq
 8009f30:	6819      	ldreq	r1, [r3, #0]
 8009f32:	685b      	ldreq	r3, [r3, #4]
 8009f34:	1809      	addeq	r1, r1, r0
 8009f36:	6021      	streq	r1, [r4, #0]
 8009f38:	e7ed      	b.n	8009f16 <_free_r+0x1e>
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	b10b      	cbz	r3, 8009f44 <_free_r+0x4c>
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d9fa      	bls.n	8009f3a <_free_r+0x42>
 8009f44:	6811      	ldr	r1, [r2, #0]
 8009f46:	1850      	adds	r0, r2, r1
 8009f48:	42a0      	cmp	r0, r4
 8009f4a:	d10b      	bne.n	8009f64 <_free_r+0x6c>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	4401      	add	r1, r0
 8009f50:	1850      	adds	r0, r2, r1
 8009f52:	4283      	cmp	r3, r0
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	d1e0      	bne.n	8009f1a <_free_r+0x22>
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	4401      	add	r1, r0
 8009f5e:	6011      	str	r1, [r2, #0]
 8009f60:	6053      	str	r3, [r2, #4]
 8009f62:	e7da      	b.n	8009f1a <_free_r+0x22>
 8009f64:	d902      	bls.n	8009f6c <_free_r+0x74>
 8009f66:	230c      	movs	r3, #12
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	e7d6      	b.n	8009f1a <_free_r+0x22>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	1821      	adds	r1, r4, r0
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf01      	itttt	eq
 8009f74:	6819      	ldreq	r1, [r3, #0]
 8009f76:	685b      	ldreq	r3, [r3, #4]
 8009f78:	1809      	addeq	r1, r1, r0
 8009f7a:	6021      	streq	r1, [r4, #0]
 8009f7c:	6063      	str	r3, [r4, #4]
 8009f7e:	6054      	str	r4, [r2, #4]
 8009f80:	e7cb      	b.n	8009f1a <_free_r+0x22>
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	200004e8 	.word	0x200004e8

08009f88 <sbrk_aligned>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	4e0e      	ldr	r6, [pc, #56]	; (8009fc4 <sbrk_aligned+0x3c>)
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	6831      	ldr	r1, [r6, #0]
 8009f90:	4605      	mov	r5, r0
 8009f92:	b911      	cbnz	r1, 8009f9a <sbrk_aligned+0x12>
 8009f94:	f000 f9e8 	bl	800a368 <_sbrk_r>
 8009f98:	6030      	str	r0, [r6, #0]
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f000 f9e3 	bl	800a368 <_sbrk_r>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d00a      	beq.n	8009fbc <sbrk_aligned+0x34>
 8009fa6:	1cc4      	adds	r4, r0, #3
 8009fa8:	f024 0403 	bic.w	r4, r4, #3
 8009fac:	42a0      	cmp	r0, r4
 8009fae:	d007      	beq.n	8009fc0 <sbrk_aligned+0x38>
 8009fb0:	1a21      	subs	r1, r4, r0
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f000 f9d8 	bl	800a368 <_sbrk_r>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d101      	bne.n	8009fc0 <sbrk_aligned+0x38>
 8009fbc:	f04f 34ff 	mov.w	r4, #4294967295
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	200004ec 	.word	0x200004ec

08009fc8 <_malloc_r>:
 8009fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fcc:	1ccd      	adds	r5, r1, #3
 8009fce:	f025 0503 	bic.w	r5, r5, #3
 8009fd2:	3508      	adds	r5, #8
 8009fd4:	2d0c      	cmp	r5, #12
 8009fd6:	bf38      	it	cc
 8009fd8:	250c      	movcc	r5, #12
 8009fda:	2d00      	cmp	r5, #0
 8009fdc:	4607      	mov	r7, r0
 8009fde:	db01      	blt.n	8009fe4 <_malloc_r+0x1c>
 8009fe0:	42a9      	cmp	r1, r5
 8009fe2:	d905      	bls.n	8009ff0 <_malloc_r+0x28>
 8009fe4:	230c      	movs	r3, #12
 8009fe6:	2600      	movs	r6, #0
 8009fe8:	603b      	str	r3, [r7, #0]
 8009fea:	4630      	mov	r0, r6
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	4e2e      	ldr	r6, [pc, #184]	; (800a0ac <_malloc_r+0xe4>)
 8009ff2:	f000 fabf 	bl	800a574 <__malloc_lock>
 8009ff6:	6833      	ldr	r3, [r6, #0]
 8009ff8:	461c      	mov	r4, r3
 8009ffa:	bb34      	cbnz	r4, 800a04a <_malloc_r+0x82>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4638      	mov	r0, r7
 800a000:	f7ff ffc2 	bl	8009f88 <sbrk_aligned>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	4604      	mov	r4, r0
 800a008:	d14d      	bne.n	800a0a6 <_malloc_r+0xde>
 800a00a:	6834      	ldr	r4, [r6, #0]
 800a00c:	4626      	mov	r6, r4
 800a00e:	2e00      	cmp	r6, #0
 800a010:	d140      	bne.n	800a094 <_malloc_r+0xcc>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	4631      	mov	r1, r6
 800a016:	4638      	mov	r0, r7
 800a018:	eb04 0803 	add.w	r8, r4, r3
 800a01c:	f000 f9a4 	bl	800a368 <_sbrk_r>
 800a020:	4580      	cmp	r8, r0
 800a022:	d13a      	bne.n	800a09a <_malloc_r+0xd2>
 800a024:	6821      	ldr	r1, [r4, #0]
 800a026:	3503      	adds	r5, #3
 800a028:	1a6d      	subs	r5, r5, r1
 800a02a:	f025 0503 	bic.w	r5, r5, #3
 800a02e:	3508      	adds	r5, #8
 800a030:	2d0c      	cmp	r5, #12
 800a032:	bf38      	it	cc
 800a034:	250c      	movcc	r5, #12
 800a036:	4638      	mov	r0, r7
 800a038:	4629      	mov	r1, r5
 800a03a:	f7ff ffa5 	bl	8009f88 <sbrk_aligned>
 800a03e:	3001      	adds	r0, #1
 800a040:	d02b      	beq.n	800a09a <_malloc_r+0xd2>
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	442b      	add	r3, r5
 800a046:	6023      	str	r3, [r4, #0]
 800a048:	e00e      	b.n	800a068 <_malloc_r+0xa0>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	1b52      	subs	r2, r2, r5
 800a04e:	d41e      	bmi.n	800a08e <_malloc_r+0xc6>
 800a050:	2a0b      	cmp	r2, #11
 800a052:	d916      	bls.n	800a082 <_malloc_r+0xba>
 800a054:	1961      	adds	r1, r4, r5
 800a056:	42a3      	cmp	r3, r4
 800a058:	6025      	str	r5, [r4, #0]
 800a05a:	bf18      	it	ne
 800a05c:	6059      	strne	r1, [r3, #4]
 800a05e:	6863      	ldr	r3, [r4, #4]
 800a060:	bf08      	it	eq
 800a062:	6031      	streq	r1, [r6, #0]
 800a064:	5162      	str	r2, [r4, r5]
 800a066:	604b      	str	r3, [r1, #4]
 800a068:	4638      	mov	r0, r7
 800a06a:	f104 060b 	add.w	r6, r4, #11
 800a06e:	f000 fa87 	bl	800a580 <__malloc_unlock>
 800a072:	f026 0607 	bic.w	r6, r6, #7
 800a076:	1d23      	adds	r3, r4, #4
 800a078:	1af2      	subs	r2, r6, r3
 800a07a:	d0b6      	beq.n	8009fea <_malloc_r+0x22>
 800a07c:	1b9b      	subs	r3, r3, r6
 800a07e:	50a3      	str	r3, [r4, r2]
 800a080:	e7b3      	b.n	8009fea <_malloc_r+0x22>
 800a082:	6862      	ldr	r2, [r4, #4]
 800a084:	42a3      	cmp	r3, r4
 800a086:	bf0c      	ite	eq
 800a088:	6032      	streq	r2, [r6, #0]
 800a08a:	605a      	strne	r2, [r3, #4]
 800a08c:	e7ec      	b.n	800a068 <_malloc_r+0xa0>
 800a08e:	4623      	mov	r3, r4
 800a090:	6864      	ldr	r4, [r4, #4]
 800a092:	e7b2      	b.n	8009ffa <_malloc_r+0x32>
 800a094:	4634      	mov	r4, r6
 800a096:	6876      	ldr	r6, [r6, #4]
 800a098:	e7b9      	b.n	800a00e <_malloc_r+0x46>
 800a09a:	230c      	movs	r3, #12
 800a09c:	4638      	mov	r0, r7
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	f000 fa6e 	bl	800a580 <__malloc_unlock>
 800a0a4:	e7a1      	b.n	8009fea <_malloc_r+0x22>
 800a0a6:	6025      	str	r5, [r4, #0]
 800a0a8:	e7de      	b.n	800a068 <_malloc_r+0xa0>
 800a0aa:	bf00      	nop
 800a0ac:	200004e8 	.word	0x200004e8

0800a0b0 <__ssputs_r>:
 800a0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b4:	688e      	ldr	r6, [r1, #8]
 800a0b6:	4682      	mov	sl, r0
 800a0b8:	429e      	cmp	r6, r3
 800a0ba:	460c      	mov	r4, r1
 800a0bc:	4690      	mov	r8, r2
 800a0be:	461f      	mov	r7, r3
 800a0c0:	d838      	bhi.n	800a134 <__ssputs_r+0x84>
 800a0c2:	898a      	ldrh	r2, [r1, #12]
 800a0c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0c8:	d032      	beq.n	800a130 <__ssputs_r+0x80>
 800a0ca:	6825      	ldr	r5, [r4, #0]
 800a0cc:	6909      	ldr	r1, [r1, #16]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	eba5 0901 	sub.w	r9, r5, r1
 800a0d4:	6965      	ldr	r5, [r4, #20]
 800a0d6:	444b      	add	r3, r9
 800a0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0e0:	106d      	asrs	r5, r5, #1
 800a0e2:	429d      	cmp	r5, r3
 800a0e4:	bf38      	it	cc
 800a0e6:	461d      	movcc	r5, r3
 800a0e8:	0553      	lsls	r3, r2, #21
 800a0ea:	d531      	bpl.n	800a150 <__ssputs_r+0xa0>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7ff ff6b 	bl	8009fc8 <_malloc_r>
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	b950      	cbnz	r0, 800a10c <__ssputs_r+0x5c>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0fc:	f8ca 3000 	str.w	r3, [sl]
 800a100:	89a3      	ldrh	r3, [r4, #12]
 800a102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a106:	81a3      	strh	r3, [r4, #12]
 800a108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10c:	464a      	mov	r2, r9
 800a10e:	6921      	ldr	r1, [r4, #16]
 800a110:	f7ff fb4e 	bl	80097b0 <memcpy>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	6126      	str	r6, [r4, #16]
 800a122:	444e      	add	r6, r9
 800a124:	6026      	str	r6, [r4, #0]
 800a126:	463e      	mov	r6, r7
 800a128:	6165      	str	r5, [r4, #20]
 800a12a:	eba5 0509 	sub.w	r5, r5, r9
 800a12e:	60a5      	str	r5, [r4, #8]
 800a130:	42be      	cmp	r6, r7
 800a132:	d900      	bls.n	800a136 <__ssputs_r+0x86>
 800a134:	463e      	mov	r6, r7
 800a136:	4632      	mov	r2, r6
 800a138:	4641      	mov	r1, r8
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	f000 fa00 	bl	800a540 <memmove>
 800a140:	68a3      	ldr	r3, [r4, #8]
 800a142:	2000      	movs	r0, #0
 800a144:	1b9b      	subs	r3, r3, r6
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	4433      	add	r3, r6
 800a14c:	6023      	str	r3, [r4, #0]
 800a14e:	e7db      	b.n	800a108 <__ssputs_r+0x58>
 800a150:	462a      	mov	r2, r5
 800a152:	f000 fa1b 	bl	800a58c <_realloc_r>
 800a156:	4606      	mov	r6, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	d1e1      	bne.n	800a120 <__ssputs_r+0x70>
 800a15c:	4650      	mov	r0, sl
 800a15e:	6921      	ldr	r1, [r4, #16]
 800a160:	f7ff feca 	bl	8009ef8 <_free_r>
 800a164:	e7c7      	b.n	800a0f6 <__ssputs_r+0x46>
	...

0800a168 <_svfiprintf_r>:
 800a168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16c:	4698      	mov	r8, r3
 800a16e:	898b      	ldrh	r3, [r1, #12]
 800a170:	4607      	mov	r7, r0
 800a172:	061b      	lsls	r3, r3, #24
 800a174:	460d      	mov	r5, r1
 800a176:	4614      	mov	r4, r2
 800a178:	b09d      	sub	sp, #116	; 0x74
 800a17a:	d50e      	bpl.n	800a19a <_svfiprintf_r+0x32>
 800a17c:	690b      	ldr	r3, [r1, #16]
 800a17e:	b963      	cbnz	r3, 800a19a <_svfiprintf_r+0x32>
 800a180:	2140      	movs	r1, #64	; 0x40
 800a182:	f7ff ff21 	bl	8009fc8 <_malloc_r>
 800a186:	6028      	str	r0, [r5, #0]
 800a188:	6128      	str	r0, [r5, #16]
 800a18a:	b920      	cbnz	r0, 800a196 <_svfiprintf_r+0x2e>
 800a18c:	230c      	movs	r3, #12
 800a18e:	603b      	str	r3, [r7, #0]
 800a190:	f04f 30ff 	mov.w	r0, #4294967295
 800a194:	e0d1      	b.n	800a33a <_svfiprintf_r+0x1d2>
 800a196:	2340      	movs	r3, #64	; 0x40
 800a198:	616b      	str	r3, [r5, #20]
 800a19a:	2300      	movs	r3, #0
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	2320      	movs	r3, #32
 800a1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1a4:	2330      	movs	r3, #48	; 0x30
 800a1a6:	f04f 0901 	mov.w	r9, #1
 800a1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a354 <_svfiprintf_r+0x1ec>
 800a1b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1b6:	4623      	mov	r3, r4
 800a1b8:	469a      	mov	sl, r3
 800a1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1be:	b10a      	cbz	r2, 800a1c4 <_svfiprintf_r+0x5c>
 800a1c0:	2a25      	cmp	r2, #37	; 0x25
 800a1c2:	d1f9      	bne.n	800a1b8 <_svfiprintf_r+0x50>
 800a1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1c8:	d00b      	beq.n	800a1e2 <_svfiprintf_r+0x7a>
 800a1ca:	465b      	mov	r3, fp
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff ff6d 	bl	800a0b0 <__ssputs_r>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	f000 80aa 	beq.w	800a330 <_svfiprintf_r+0x1c8>
 800a1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1de:	445a      	add	r2, fp
 800a1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	f000 80a2 	beq.w	800a330 <_svfiprintf_r+0x1c8>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f6:	f10a 0a01 	add.w	sl, sl, #1
 800a1fa:	9304      	str	r3, [sp, #16]
 800a1fc:	9307      	str	r3, [sp, #28]
 800a1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a202:	931a      	str	r3, [sp, #104]	; 0x68
 800a204:	4654      	mov	r4, sl
 800a206:	2205      	movs	r2, #5
 800a208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20c:	4851      	ldr	r0, [pc, #324]	; (800a354 <_svfiprintf_r+0x1ec>)
 800a20e:	f7ff fac1 	bl	8009794 <memchr>
 800a212:	9a04      	ldr	r2, [sp, #16]
 800a214:	b9d8      	cbnz	r0, 800a24e <_svfiprintf_r+0xe6>
 800a216:	06d0      	lsls	r0, r2, #27
 800a218:	bf44      	itt	mi
 800a21a:	2320      	movmi	r3, #32
 800a21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a220:	0711      	lsls	r1, r2, #28
 800a222:	bf44      	itt	mi
 800a224:	232b      	movmi	r3, #43	; 0x2b
 800a226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22a:	f89a 3000 	ldrb.w	r3, [sl]
 800a22e:	2b2a      	cmp	r3, #42	; 0x2a
 800a230:	d015      	beq.n	800a25e <_svfiprintf_r+0xf6>
 800a232:	4654      	mov	r4, sl
 800a234:	2000      	movs	r0, #0
 800a236:	f04f 0c0a 	mov.w	ip, #10
 800a23a:	9a07      	ldr	r2, [sp, #28]
 800a23c:	4621      	mov	r1, r4
 800a23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a242:	3b30      	subs	r3, #48	; 0x30
 800a244:	2b09      	cmp	r3, #9
 800a246:	d94e      	bls.n	800a2e6 <_svfiprintf_r+0x17e>
 800a248:	b1b0      	cbz	r0, 800a278 <_svfiprintf_r+0x110>
 800a24a:	9207      	str	r2, [sp, #28]
 800a24c:	e014      	b.n	800a278 <_svfiprintf_r+0x110>
 800a24e:	eba0 0308 	sub.w	r3, r0, r8
 800a252:	fa09 f303 	lsl.w	r3, r9, r3
 800a256:	4313      	orrs	r3, r2
 800a258:	46a2      	mov	sl, r4
 800a25a:	9304      	str	r3, [sp, #16]
 800a25c:	e7d2      	b.n	800a204 <_svfiprintf_r+0x9c>
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	1d19      	adds	r1, r3, #4
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	9103      	str	r1, [sp, #12]
 800a266:	2b00      	cmp	r3, #0
 800a268:	bfbb      	ittet	lt
 800a26a:	425b      	neglt	r3, r3
 800a26c:	f042 0202 	orrlt.w	r2, r2, #2
 800a270:	9307      	strge	r3, [sp, #28]
 800a272:	9307      	strlt	r3, [sp, #28]
 800a274:	bfb8      	it	lt
 800a276:	9204      	strlt	r2, [sp, #16]
 800a278:	7823      	ldrb	r3, [r4, #0]
 800a27a:	2b2e      	cmp	r3, #46	; 0x2e
 800a27c:	d10c      	bne.n	800a298 <_svfiprintf_r+0x130>
 800a27e:	7863      	ldrb	r3, [r4, #1]
 800a280:	2b2a      	cmp	r3, #42	; 0x2a
 800a282:	d135      	bne.n	800a2f0 <_svfiprintf_r+0x188>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	3402      	adds	r4, #2
 800a288:	1d1a      	adds	r2, r3, #4
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	9203      	str	r2, [sp, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	bfb8      	it	lt
 800a292:	f04f 33ff 	movlt.w	r3, #4294967295
 800a296:	9305      	str	r3, [sp, #20]
 800a298:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a358 <_svfiprintf_r+0x1f0>
 800a29c:	2203      	movs	r2, #3
 800a29e:	4650      	mov	r0, sl
 800a2a0:	7821      	ldrb	r1, [r4, #0]
 800a2a2:	f7ff fa77 	bl	8009794 <memchr>
 800a2a6:	b140      	cbz	r0, 800a2ba <_svfiprintf_r+0x152>
 800a2a8:	2340      	movs	r3, #64	; 0x40
 800a2aa:	eba0 000a 	sub.w	r0, r0, sl
 800a2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800a2b2:	9b04      	ldr	r3, [sp, #16]
 800a2b4:	3401      	adds	r4, #1
 800a2b6:	4303      	orrs	r3, r0
 800a2b8:	9304      	str	r3, [sp, #16]
 800a2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2be:	2206      	movs	r2, #6
 800a2c0:	4826      	ldr	r0, [pc, #152]	; (800a35c <_svfiprintf_r+0x1f4>)
 800a2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2c6:	f7ff fa65 	bl	8009794 <memchr>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d038      	beq.n	800a340 <_svfiprintf_r+0x1d8>
 800a2ce:	4b24      	ldr	r3, [pc, #144]	; (800a360 <_svfiprintf_r+0x1f8>)
 800a2d0:	bb1b      	cbnz	r3, 800a31a <_svfiprintf_r+0x1b2>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	3307      	adds	r3, #7
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	3308      	adds	r3, #8
 800a2dc:	9303      	str	r3, [sp, #12]
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e0:	4433      	add	r3, r6
 800a2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2e4:	e767      	b.n	800a1b6 <_svfiprintf_r+0x4e>
 800a2e6:	460c      	mov	r4, r1
 800a2e8:	2001      	movs	r0, #1
 800a2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ee:	e7a5      	b.n	800a23c <_svfiprintf_r+0xd4>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f04f 0c0a 	mov.w	ip, #10
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	3401      	adds	r4, #1
 800a2fa:	9305      	str	r3, [sp, #20]
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a302:	3a30      	subs	r2, #48	; 0x30
 800a304:	2a09      	cmp	r2, #9
 800a306:	d903      	bls.n	800a310 <_svfiprintf_r+0x1a8>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d0c5      	beq.n	800a298 <_svfiprintf_r+0x130>
 800a30c:	9105      	str	r1, [sp, #20]
 800a30e:	e7c3      	b.n	800a298 <_svfiprintf_r+0x130>
 800a310:	4604      	mov	r4, r0
 800a312:	2301      	movs	r3, #1
 800a314:	fb0c 2101 	mla	r1, ip, r1, r2
 800a318:	e7f0      	b.n	800a2fc <_svfiprintf_r+0x194>
 800a31a:	ab03      	add	r3, sp, #12
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	462a      	mov	r2, r5
 800a320:	4638      	mov	r0, r7
 800a322:	4b10      	ldr	r3, [pc, #64]	; (800a364 <_svfiprintf_r+0x1fc>)
 800a324:	a904      	add	r1, sp, #16
 800a326:	f7fd fc65 	bl	8007bf4 <_printf_float>
 800a32a:	1c42      	adds	r2, r0, #1
 800a32c:	4606      	mov	r6, r0
 800a32e:	d1d6      	bne.n	800a2de <_svfiprintf_r+0x176>
 800a330:	89ab      	ldrh	r3, [r5, #12]
 800a332:	065b      	lsls	r3, r3, #25
 800a334:	f53f af2c 	bmi.w	800a190 <_svfiprintf_r+0x28>
 800a338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a33a:	b01d      	add	sp, #116	; 0x74
 800a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a340:	ab03      	add	r3, sp, #12
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	462a      	mov	r2, r5
 800a346:	4638      	mov	r0, r7
 800a348:	4b06      	ldr	r3, [pc, #24]	; (800a364 <_svfiprintf_r+0x1fc>)
 800a34a:	a904      	add	r1, sp, #16
 800a34c:	f7fd feee 	bl	800812c <_printf_i>
 800a350:	e7eb      	b.n	800a32a <_svfiprintf_r+0x1c2>
 800a352:	bf00      	nop
 800a354:	0800afc4 	.word	0x0800afc4
 800a358:	0800afca 	.word	0x0800afca
 800a35c:	0800afce 	.word	0x0800afce
 800a360:	08007bf5 	.word	0x08007bf5
 800a364:	0800a0b1 	.word	0x0800a0b1

0800a368 <_sbrk_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	2300      	movs	r3, #0
 800a36c:	4d05      	ldr	r5, [pc, #20]	; (800a384 <_sbrk_r+0x1c>)
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f8 fa9e 	bl	80028b4 <_sbrk>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_sbrk_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_sbrk_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200004f0 	.word	0x200004f0

0800a388 <__sread>:
 800a388:	b510      	push	{r4, lr}
 800a38a:	460c      	mov	r4, r1
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	f000 fa82 	bl	800a898 <_read_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	bfab      	itete	ge
 800a398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a39a:	89a3      	ldrhlt	r3, [r4, #12]
 800a39c:	181b      	addge	r3, r3, r0
 800a39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3a2:	bfac      	ite	ge
 800a3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3a6:	81a3      	strhlt	r3, [r4, #12]
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <__swrite>:
 800a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	461f      	mov	r7, r3
 800a3b0:	898b      	ldrh	r3, [r1, #12]
 800a3b2:	4605      	mov	r5, r0
 800a3b4:	05db      	lsls	r3, r3, #23
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	4616      	mov	r6, r2
 800a3ba:	d505      	bpl.n	800a3c8 <__swrite+0x1e>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c4:	f000 f898 	bl	800a4f8 <_lseek_r>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	4632      	mov	r2, r6
 800a3cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3de:	f000 b817 	b.w	800a410 <_write_r>

0800a3e2 <__sseek>:
 800a3e2:	b510      	push	{r4, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ea:	f000 f885 	bl	800a4f8 <_lseek_r>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	bf15      	itete	ne
 800a3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3fe:	81a3      	strheq	r3, [r4, #12]
 800a400:	bf18      	it	ne
 800a402:	81a3      	strhne	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__sclose>:
 800a406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40a:	f000 b831 	b.w	800a470 <_close_r>
	...

0800a410 <_write_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	4611      	mov	r1, r2
 800a418:	2200      	movs	r2, #0
 800a41a:	4d05      	ldr	r5, [pc, #20]	; (800a430 <_write_r+0x20>)
 800a41c:	602a      	str	r2, [r5, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	f7f8 f9fc 	bl	800281c <_write>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_write_r+0x1e>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_write_r+0x1e>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	200004f0 	.word	0x200004f0

0800a434 <__assert_func>:
 800a434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a436:	4614      	mov	r4, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <__assert_func+0x2c>)
 800a43c:	4605      	mov	r5, r0
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	b14c      	cbz	r4, 800a458 <__assert_func+0x24>
 800a444:	4b07      	ldr	r3, [pc, #28]	; (800a464 <__assert_func+0x30>)
 800a446:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a44a:	9100      	str	r1, [sp, #0]
 800a44c:	462b      	mov	r3, r5
 800a44e:	4906      	ldr	r1, [pc, #24]	; (800a468 <__assert_func+0x34>)
 800a450:	f000 f81e 	bl	800a490 <fiprintf>
 800a454:	f000 fa3f 	bl	800a8d6 <abort>
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <__assert_func+0x38>)
 800a45a:	461c      	mov	r4, r3
 800a45c:	e7f3      	b.n	800a446 <__assert_func+0x12>
 800a45e:	bf00      	nop
 800a460:	2000003c 	.word	0x2000003c
 800a464:	0800afd5 	.word	0x0800afd5
 800a468:	0800afe2 	.word	0x0800afe2
 800a46c:	0800b010 	.word	0x0800b010

0800a470 <_close_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	2300      	movs	r3, #0
 800a474:	4d05      	ldr	r5, [pc, #20]	; (800a48c <_close_r+0x1c>)
 800a476:	4604      	mov	r4, r0
 800a478:	4608      	mov	r0, r1
 800a47a:	602b      	str	r3, [r5, #0]
 800a47c:	f7f8 f9ea 	bl	8002854 <_close>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_close_r+0x1a>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_close_r+0x1a>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	200004f0 	.word	0x200004f0

0800a490 <fiprintf>:
 800a490:	b40e      	push	{r1, r2, r3}
 800a492:	b503      	push	{r0, r1, lr}
 800a494:	4601      	mov	r1, r0
 800a496:	ab03      	add	r3, sp, #12
 800a498:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <fiprintf+0x20>)
 800a49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a49e:	6800      	ldr	r0, [r0, #0]
 800a4a0:	9301      	str	r3, [sp, #4]
 800a4a2:	f000 f8c9 	bl	800a638 <_vfiprintf_r>
 800a4a6:	b002      	add	sp, #8
 800a4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4ac:	b003      	add	sp, #12
 800a4ae:	4770      	bx	lr
 800a4b0:	2000003c 	.word	0x2000003c

0800a4b4 <_fstat_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_fstat_r+0x20>)
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f7f8 f9d2 	bl	800286a <_fstat>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <_fstat_r+0x1c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b103      	cbz	r3, 800a4d0 <_fstat_r+0x1c>
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	200004f0 	.word	0x200004f0

0800a4d8 <_isatty_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	2300      	movs	r3, #0
 800a4dc:	4d05      	ldr	r5, [pc, #20]	; (800a4f4 <_isatty_r+0x1c>)
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f8 f9d0 	bl	8002888 <_isatty>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_isatty_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_isatty_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	200004f0 	.word	0x200004f0

0800a4f8 <_lseek_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	2200      	movs	r2, #0
 800a502:	4d05      	ldr	r5, [pc, #20]	; (800a518 <_lseek_r+0x20>)
 800a504:	602a      	str	r2, [r5, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	f7f8 f9c8 	bl	800289c <_lseek>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_lseek_r+0x1e>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_lseek_r+0x1e>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	200004f0 	.word	0x200004f0

0800a51c <__ascii_mbtowc>:
 800a51c:	b082      	sub	sp, #8
 800a51e:	b901      	cbnz	r1, 800a522 <__ascii_mbtowc+0x6>
 800a520:	a901      	add	r1, sp, #4
 800a522:	b142      	cbz	r2, 800a536 <__ascii_mbtowc+0x1a>
 800a524:	b14b      	cbz	r3, 800a53a <__ascii_mbtowc+0x1e>
 800a526:	7813      	ldrb	r3, [r2, #0]
 800a528:	600b      	str	r3, [r1, #0]
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	1e10      	subs	r0, r2, #0
 800a52e:	bf18      	it	ne
 800a530:	2001      	movne	r0, #1
 800a532:	b002      	add	sp, #8
 800a534:	4770      	bx	lr
 800a536:	4610      	mov	r0, r2
 800a538:	e7fb      	b.n	800a532 <__ascii_mbtowc+0x16>
 800a53a:	f06f 0001 	mvn.w	r0, #1
 800a53e:	e7f8      	b.n	800a532 <__ascii_mbtowc+0x16>

0800a540 <memmove>:
 800a540:	4288      	cmp	r0, r1
 800a542:	b510      	push	{r4, lr}
 800a544:	eb01 0402 	add.w	r4, r1, r2
 800a548:	d902      	bls.n	800a550 <memmove+0x10>
 800a54a:	4284      	cmp	r4, r0
 800a54c:	4623      	mov	r3, r4
 800a54e:	d807      	bhi.n	800a560 <memmove+0x20>
 800a550:	1e43      	subs	r3, r0, #1
 800a552:	42a1      	cmp	r1, r4
 800a554:	d008      	beq.n	800a568 <memmove+0x28>
 800a556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a55a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a55e:	e7f8      	b.n	800a552 <memmove+0x12>
 800a560:	4601      	mov	r1, r0
 800a562:	4402      	add	r2, r0
 800a564:	428a      	cmp	r2, r1
 800a566:	d100      	bne.n	800a56a <memmove+0x2a>
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a56e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a572:	e7f7      	b.n	800a564 <memmove+0x24>

0800a574 <__malloc_lock>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__malloc_lock+0x8>)
 800a576:	f7ff b89e 	b.w	80096b6 <__retarget_lock_acquire_recursive>
 800a57a:	bf00      	nop
 800a57c:	200004e4 	.word	0x200004e4

0800a580 <__malloc_unlock>:
 800a580:	4801      	ldr	r0, [pc, #4]	; (800a588 <__malloc_unlock+0x8>)
 800a582:	f7ff b899 	b.w	80096b8 <__retarget_lock_release_recursive>
 800a586:	bf00      	nop
 800a588:	200004e4 	.word	0x200004e4

0800a58c <_realloc_r>:
 800a58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a590:	4680      	mov	r8, r0
 800a592:	4614      	mov	r4, r2
 800a594:	460e      	mov	r6, r1
 800a596:	b921      	cbnz	r1, 800a5a2 <_realloc_r+0x16>
 800a598:	4611      	mov	r1, r2
 800a59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a59e:	f7ff bd13 	b.w	8009fc8 <_malloc_r>
 800a5a2:	b92a      	cbnz	r2, 800a5b0 <_realloc_r+0x24>
 800a5a4:	f7ff fca8 	bl	8009ef8 <_free_r>
 800a5a8:	4625      	mov	r5, r4
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b0:	f000 f998 	bl	800a8e4 <_malloc_usable_size_r>
 800a5b4:	4284      	cmp	r4, r0
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	d802      	bhi.n	800a5c0 <_realloc_r+0x34>
 800a5ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5be:	d812      	bhi.n	800a5e6 <_realloc_r+0x5a>
 800a5c0:	4621      	mov	r1, r4
 800a5c2:	4640      	mov	r0, r8
 800a5c4:	f7ff fd00 	bl	8009fc8 <_malloc_r>
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0ed      	beq.n	800a5aa <_realloc_r+0x1e>
 800a5ce:	42bc      	cmp	r4, r7
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	bf28      	it	cs
 800a5d6:	463a      	movcs	r2, r7
 800a5d8:	f7ff f8ea 	bl	80097b0 <memcpy>
 800a5dc:	4631      	mov	r1, r6
 800a5de:	4640      	mov	r0, r8
 800a5e0:	f7ff fc8a 	bl	8009ef8 <_free_r>
 800a5e4:	e7e1      	b.n	800a5aa <_realloc_r+0x1e>
 800a5e6:	4635      	mov	r5, r6
 800a5e8:	e7df      	b.n	800a5aa <_realloc_r+0x1e>

0800a5ea <__sfputc_r>:
 800a5ea:	6893      	ldr	r3, [r2, #8]
 800a5ec:	b410      	push	{r4}
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	6093      	str	r3, [r2, #8]
 800a5f4:	da07      	bge.n	800a606 <__sfputc_r+0x1c>
 800a5f6:	6994      	ldr	r4, [r2, #24]
 800a5f8:	42a3      	cmp	r3, r4
 800a5fa:	db01      	blt.n	800a600 <__sfputc_r+0x16>
 800a5fc:	290a      	cmp	r1, #10
 800a5fe:	d102      	bne.n	800a606 <__sfputc_r+0x1c>
 800a600:	bc10      	pop	{r4}
 800a602:	f7fd bf63 	b.w	80084cc <__swbuf_r>
 800a606:	6813      	ldr	r3, [r2, #0]
 800a608:	1c58      	adds	r0, r3, #1
 800a60a:	6010      	str	r0, [r2, #0]
 800a60c:	7019      	strb	r1, [r3, #0]
 800a60e:	4608      	mov	r0, r1
 800a610:	bc10      	pop	{r4}
 800a612:	4770      	bx	lr

0800a614 <__sfputs_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	4614      	mov	r4, r2
 800a61c:	18d5      	adds	r5, r2, r3
 800a61e:	42ac      	cmp	r4, r5
 800a620:	d101      	bne.n	800a626 <__sfputs_r+0x12>
 800a622:	2000      	movs	r0, #0
 800a624:	e007      	b.n	800a636 <__sfputs_r+0x22>
 800a626:	463a      	mov	r2, r7
 800a628:	4630      	mov	r0, r6
 800a62a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a62e:	f7ff ffdc 	bl	800a5ea <__sfputc_r>
 800a632:	1c43      	adds	r3, r0, #1
 800a634:	d1f3      	bne.n	800a61e <__sfputs_r+0xa>
 800a636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a638 <_vfiprintf_r>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	460d      	mov	r5, r1
 800a63e:	4614      	mov	r4, r2
 800a640:	4698      	mov	r8, r3
 800a642:	4606      	mov	r6, r0
 800a644:	b09d      	sub	sp, #116	; 0x74
 800a646:	b118      	cbz	r0, 800a650 <_vfiprintf_r+0x18>
 800a648:	6983      	ldr	r3, [r0, #24]
 800a64a:	b90b      	cbnz	r3, 800a650 <_vfiprintf_r+0x18>
 800a64c:	f7fe ff90 	bl	8009570 <__sinit>
 800a650:	4b89      	ldr	r3, [pc, #548]	; (800a878 <_vfiprintf_r+0x240>)
 800a652:	429d      	cmp	r5, r3
 800a654:	d11b      	bne.n	800a68e <_vfiprintf_r+0x56>
 800a656:	6875      	ldr	r5, [r6, #4]
 800a658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a65a:	07d9      	lsls	r1, r3, #31
 800a65c:	d405      	bmi.n	800a66a <_vfiprintf_r+0x32>
 800a65e:	89ab      	ldrh	r3, [r5, #12]
 800a660:	059a      	lsls	r2, r3, #22
 800a662:	d402      	bmi.n	800a66a <_vfiprintf_r+0x32>
 800a664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a666:	f7ff f826 	bl	80096b6 <__retarget_lock_acquire_recursive>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	071b      	lsls	r3, r3, #28
 800a66e:	d501      	bpl.n	800a674 <_vfiprintf_r+0x3c>
 800a670:	692b      	ldr	r3, [r5, #16]
 800a672:	b9eb      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x78>
 800a674:	4629      	mov	r1, r5
 800a676:	4630      	mov	r0, r6
 800a678:	f7fd ff7a 	bl	8008570 <__swsetup_r>
 800a67c:	b1c0      	cbz	r0, 800a6b0 <_vfiprintf_r+0x78>
 800a67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a680:	07dc      	lsls	r4, r3, #31
 800a682:	d50e      	bpl.n	800a6a2 <_vfiprintf_r+0x6a>
 800a684:	f04f 30ff 	mov.w	r0, #4294967295
 800a688:	b01d      	add	sp, #116	; 0x74
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	4b7b      	ldr	r3, [pc, #492]	; (800a87c <_vfiprintf_r+0x244>)
 800a690:	429d      	cmp	r5, r3
 800a692:	d101      	bne.n	800a698 <_vfiprintf_r+0x60>
 800a694:	68b5      	ldr	r5, [r6, #8]
 800a696:	e7df      	b.n	800a658 <_vfiprintf_r+0x20>
 800a698:	4b79      	ldr	r3, [pc, #484]	; (800a880 <_vfiprintf_r+0x248>)
 800a69a:	429d      	cmp	r5, r3
 800a69c:	bf08      	it	eq
 800a69e:	68f5      	ldreq	r5, [r6, #12]
 800a6a0:	e7da      	b.n	800a658 <_vfiprintf_r+0x20>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	0598      	lsls	r0, r3, #22
 800a6a6:	d4ed      	bmi.n	800a684 <_vfiprintf_r+0x4c>
 800a6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6aa:	f7ff f805 	bl	80096b8 <__retarget_lock_release_recursive>
 800a6ae:	e7e9      	b.n	800a684 <_vfiprintf_r+0x4c>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6b4:	2320      	movs	r3, #32
 800a6b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ba:	2330      	movs	r3, #48	; 0x30
 800a6bc:	f04f 0901 	mov.w	r9, #1
 800a6c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6c4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a884 <_vfiprintf_r+0x24c>
 800a6c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	469a      	mov	sl, r3
 800a6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d4:	b10a      	cbz	r2, 800a6da <_vfiprintf_r+0xa2>
 800a6d6:	2a25      	cmp	r2, #37	; 0x25
 800a6d8:	d1f9      	bne.n	800a6ce <_vfiprintf_r+0x96>
 800a6da:	ebba 0b04 	subs.w	fp, sl, r4
 800a6de:	d00b      	beq.n	800a6f8 <_vfiprintf_r+0xc0>
 800a6e0:	465b      	mov	r3, fp
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7ff ff94 	bl	800a614 <__sfputs_r>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f000 80aa 	beq.w	800a846 <_vfiprintf_r+0x20e>
 800a6f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f4:	445a      	add	r2, fp
 800a6f6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 80a2 	beq.w	800a846 <_vfiprintf_r+0x20e>
 800a702:	2300      	movs	r3, #0
 800a704:	f04f 32ff 	mov.w	r2, #4294967295
 800a708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70c:	f10a 0a01 	add.w	sl, sl, #1
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	9307      	str	r3, [sp, #28]
 800a714:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a718:	931a      	str	r3, [sp, #104]	; 0x68
 800a71a:	4654      	mov	r4, sl
 800a71c:	2205      	movs	r2, #5
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	4858      	ldr	r0, [pc, #352]	; (800a884 <_vfiprintf_r+0x24c>)
 800a724:	f7ff f836 	bl	8009794 <memchr>
 800a728:	9a04      	ldr	r2, [sp, #16]
 800a72a:	b9d8      	cbnz	r0, 800a764 <_vfiprintf_r+0x12c>
 800a72c:	06d1      	lsls	r1, r2, #27
 800a72e:	bf44      	itt	mi
 800a730:	2320      	movmi	r3, #32
 800a732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a736:	0713      	lsls	r3, r2, #28
 800a738:	bf44      	itt	mi
 800a73a:	232b      	movmi	r3, #43	; 0x2b
 800a73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a740:	f89a 3000 	ldrb.w	r3, [sl]
 800a744:	2b2a      	cmp	r3, #42	; 0x2a
 800a746:	d015      	beq.n	800a774 <_vfiprintf_r+0x13c>
 800a748:	4654      	mov	r4, sl
 800a74a:	2000      	movs	r0, #0
 800a74c:	f04f 0c0a 	mov.w	ip, #10
 800a750:	9a07      	ldr	r2, [sp, #28]
 800a752:	4621      	mov	r1, r4
 800a754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a758:	3b30      	subs	r3, #48	; 0x30
 800a75a:	2b09      	cmp	r3, #9
 800a75c:	d94e      	bls.n	800a7fc <_vfiprintf_r+0x1c4>
 800a75e:	b1b0      	cbz	r0, 800a78e <_vfiprintf_r+0x156>
 800a760:	9207      	str	r2, [sp, #28]
 800a762:	e014      	b.n	800a78e <_vfiprintf_r+0x156>
 800a764:	eba0 0308 	sub.w	r3, r0, r8
 800a768:	fa09 f303 	lsl.w	r3, r9, r3
 800a76c:	4313      	orrs	r3, r2
 800a76e:	46a2      	mov	sl, r4
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	e7d2      	b.n	800a71a <_vfiprintf_r+0xe2>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	1d19      	adds	r1, r3, #4
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	9103      	str	r1, [sp, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bfbb      	ittet	lt
 800a780:	425b      	neglt	r3, r3
 800a782:	f042 0202 	orrlt.w	r2, r2, #2
 800a786:	9307      	strge	r3, [sp, #28]
 800a788:	9307      	strlt	r3, [sp, #28]
 800a78a:	bfb8      	it	lt
 800a78c:	9204      	strlt	r2, [sp, #16]
 800a78e:	7823      	ldrb	r3, [r4, #0]
 800a790:	2b2e      	cmp	r3, #46	; 0x2e
 800a792:	d10c      	bne.n	800a7ae <_vfiprintf_r+0x176>
 800a794:	7863      	ldrb	r3, [r4, #1]
 800a796:	2b2a      	cmp	r3, #42	; 0x2a
 800a798:	d135      	bne.n	800a806 <_vfiprintf_r+0x1ce>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	3402      	adds	r4, #2
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9203      	str	r2, [sp, #12]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	bfb8      	it	lt
 800a7a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a888 <_vfiprintf_r+0x250>
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	7821      	ldrb	r1, [r4, #0]
 800a7b8:	f7fe ffec 	bl	8009794 <memchr>
 800a7bc:	b140      	cbz	r0, 800a7d0 <_vfiprintf_r+0x198>
 800a7be:	2340      	movs	r3, #64	; 0x40
 800a7c0:	eba0 000a 	sub.w	r0, r0, sl
 800a7c4:	fa03 f000 	lsl.w	r0, r3, r0
 800a7c8:	9b04      	ldr	r3, [sp, #16]
 800a7ca:	3401      	adds	r4, #1
 800a7cc:	4303      	orrs	r3, r0
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d4:	2206      	movs	r2, #6
 800a7d6:	482d      	ldr	r0, [pc, #180]	; (800a88c <_vfiprintf_r+0x254>)
 800a7d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7dc:	f7fe ffda 	bl	8009794 <memchr>
 800a7e0:	2800      	cmp	r0, #0
 800a7e2:	d03f      	beq.n	800a864 <_vfiprintf_r+0x22c>
 800a7e4:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <_vfiprintf_r+0x258>)
 800a7e6:	bb1b      	cbnz	r3, 800a830 <_vfiprintf_r+0x1f8>
 800a7e8:	9b03      	ldr	r3, [sp, #12]
 800a7ea:	3307      	adds	r3, #7
 800a7ec:	f023 0307 	bic.w	r3, r3, #7
 800a7f0:	3308      	adds	r3, #8
 800a7f2:	9303      	str	r3, [sp, #12]
 800a7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f6:	443b      	add	r3, r7
 800a7f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fa:	e767      	b.n	800a6cc <_vfiprintf_r+0x94>
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	fb0c 3202 	mla	r2, ip, r2, r3
 800a804:	e7a5      	b.n	800a752 <_vfiprintf_r+0x11a>
 800a806:	2300      	movs	r3, #0
 800a808:	f04f 0c0a 	mov.w	ip, #10
 800a80c:	4619      	mov	r1, r3
 800a80e:	3401      	adds	r4, #1
 800a810:	9305      	str	r3, [sp, #20]
 800a812:	4620      	mov	r0, r4
 800a814:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a818:	3a30      	subs	r2, #48	; 0x30
 800a81a:	2a09      	cmp	r2, #9
 800a81c:	d903      	bls.n	800a826 <_vfiprintf_r+0x1ee>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d0c5      	beq.n	800a7ae <_vfiprintf_r+0x176>
 800a822:	9105      	str	r1, [sp, #20]
 800a824:	e7c3      	b.n	800a7ae <_vfiprintf_r+0x176>
 800a826:	4604      	mov	r4, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a82e:	e7f0      	b.n	800a812 <_vfiprintf_r+0x1da>
 800a830:	ab03      	add	r3, sp, #12
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	462a      	mov	r2, r5
 800a836:	4630      	mov	r0, r6
 800a838:	4b16      	ldr	r3, [pc, #88]	; (800a894 <_vfiprintf_r+0x25c>)
 800a83a:	a904      	add	r1, sp, #16
 800a83c:	f7fd f9da 	bl	8007bf4 <_printf_float>
 800a840:	4607      	mov	r7, r0
 800a842:	1c78      	adds	r0, r7, #1
 800a844:	d1d6      	bne.n	800a7f4 <_vfiprintf_r+0x1bc>
 800a846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a848:	07d9      	lsls	r1, r3, #31
 800a84a:	d405      	bmi.n	800a858 <_vfiprintf_r+0x220>
 800a84c:	89ab      	ldrh	r3, [r5, #12]
 800a84e:	059a      	lsls	r2, r3, #22
 800a850:	d402      	bmi.n	800a858 <_vfiprintf_r+0x220>
 800a852:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a854:	f7fe ff30 	bl	80096b8 <__retarget_lock_release_recursive>
 800a858:	89ab      	ldrh	r3, [r5, #12]
 800a85a:	065b      	lsls	r3, r3, #25
 800a85c:	f53f af12 	bmi.w	800a684 <_vfiprintf_r+0x4c>
 800a860:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a862:	e711      	b.n	800a688 <_vfiprintf_r+0x50>
 800a864:	ab03      	add	r3, sp, #12
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	462a      	mov	r2, r5
 800a86a:	4630      	mov	r0, r6
 800a86c:	4b09      	ldr	r3, [pc, #36]	; (800a894 <_vfiprintf_r+0x25c>)
 800a86e:	a904      	add	r1, sp, #16
 800a870:	f7fd fc5c 	bl	800812c <_printf_i>
 800a874:	e7e4      	b.n	800a840 <_vfiprintf_r+0x208>
 800a876:	bf00      	nop
 800a878:	0800ae2c 	.word	0x0800ae2c
 800a87c:	0800ae4c 	.word	0x0800ae4c
 800a880:	0800ae0c 	.word	0x0800ae0c
 800a884:	0800afc4 	.word	0x0800afc4
 800a888:	0800afca 	.word	0x0800afca
 800a88c:	0800afce 	.word	0x0800afce
 800a890:	08007bf5 	.word	0x08007bf5
 800a894:	0800a615 	.word	0x0800a615

0800a898 <_read_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4604      	mov	r4, r0
 800a89c:	4608      	mov	r0, r1
 800a89e:	4611      	mov	r1, r2
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4d05      	ldr	r5, [pc, #20]	; (800a8b8 <_read_r+0x20>)
 800a8a4:	602a      	str	r2, [r5, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	f7f7 ff9b 	bl	80027e2 <_read>
 800a8ac:	1c43      	adds	r3, r0, #1
 800a8ae:	d102      	bne.n	800a8b6 <_read_r+0x1e>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	b103      	cbz	r3, 800a8b6 <_read_r+0x1e>
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	bd38      	pop	{r3, r4, r5, pc}
 800a8b8:	200004f0 	.word	0x200004f0

0800a8bc <__ascii_wctomb>:
 800a8bc:	4603      	mov	r3, r0
 800a8be:	4608      	mov	r0, r1
 800a8c0:	b141      	cbz	r1, 800a8d4 <__ascii_wctomb+0x18>
 800a8c2:	2aff      	cmp	r2, #255	; 0xff
 800a8c4:	d904      	bls.n	800a8d0 <__ascii_wctomb+0x14>
 800a8c6:	228a      	movs	r2, #138	; 0x8a
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	4770      	bx	lr
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	700a      	strb	r2, [r1, #0]
 800a8d4:	4770      	bx	lr

0800a8d6 <abort>:
 800a8d6:	2006      	movs	r0, #6
 800a8d8:	b508      	push	{r3, lr}
 800a8da:	f000 f833 	bl	800a944 <raise>
 800a8de:	2001      	movs	r0, #1
 800a8e0:	f7f7 ff75 	bl	80027ce <_exit>

0800a8e4 <_malloc_usable_size_r>:
 800a8e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e8:	1f18      	subs	r0, r3, #4
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	bfbc      	itt	lt
 800a8ee:	580b      	ldrlt	r3, [r1, r0]
 800a8f0:	18c0      	addlt	r0, r0, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_raise_r>:
 800a8f4:	291f      	cmp	r1, #31
 800a8f6:	b538      	push	{r3, r4, r5, lr}
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	460d      	mov	r5, r1
 800a8fc:	d904      	bls.n	800a908 <_raise_r+0x14>
 800a8fe:	2316      	movs	r3, #22
 800a900:	6003      	str	r3, [r0, #0]
 800a902:	f04f 30ff 	mov.w	r0, #4294967295
 800a906:	bd38      	pop	{r3, r4, r5, pc}
 800a908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a90a:	b112      	cbz	r2, 800a912 <_raise_r+0x1e>
 800a90c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a910:	b94b      	cbnz	r3, 800a926 <_raise_r+0x32>
 800a912:	4620      	mov	r0, r4
 800a914:	f000 f830 	bl	800a978 <_getpid_r>
 800a918:	462a      	mov	r2, r5
 800a91a:	4601      	mov	r1, r0
 800a91c:	4620      	mov	r0, r4
 800a91e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a922:	f000 b817 	b.w	800a954 <_kill_r>
 800a926:	2b01      	cmp	r3, #1
 800a928:	d00a      	beq.n	800a940 <_raise_r+0x4c>
 800a92a:	1c59      	adds	r1, r3, #1
 800a92c:	d103      	bne.n	800a936 <_raise_r+0x42>
 800a92e:	2316      	movs	r3, #22
 800a930:	6003      	str	r3, [r0, #0]
 800a932:	2001      	movs	r0, #1
 800a934:	e7e7      	b.n	800a906 <_raise_r+0x12>
 800a936:	2400      	movs	r4, #0
 800a938:	4628      	mov	r0, r5
 800a93a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a93e:	4798      	blx	r3
 800a940:	2000      	movs	r0, #0
 800a942:	e7e0      	b.n	800a906 <_raise_r+0x12>

0800a944 <raise>:
 800a944:	4b02      	ldr	r3, [pc, #8]	; (800a950 <raise+0xc>)
 800a946:	4601      	mov	r1, r0
 800a948:	6818      	ldr	r0, [r3, #0]
 800a94a:	f7ff bfd3 	b.w	800a8f4 <_raise_r>
 800a94e:	bf00      	nop
 800a950:	2000003c 	.word	0x2000003c

0800a954 <_kill_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	2300      	movs	r3, #0
 800a958:	4d06      	ldr	r5, [pc, #24]	; (800a974 <_kill_r+0x20>)
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f7f7 ff24 	bl	80027ae <_kill>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <_kill_r+0x1c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	b103      	cbz	r3, 800a970 <_kill_r+0x1c>
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	200004f0 	.word	0x200004f0

0800a978 <_getpid_r>:
 800a978:	f7f7 bf12 	b.w	80027a0 <_getpid>

0800a97c <sqrt>:
 800a97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97e:	4606      	mov	r6, r0
 800a980:	460f      	mov	r7, r1
 800a982:	f000 f81f 	bl	800a9c4 <__ieee754_sqrt>
 800a986:	4632      	mov	r2, r6
 800a988:	4604      	mov	r4, r0
 800a98a:	460d      	mov	r5, r1
 800a98c:	463b      	mov	r3, r7
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f6 f83b 	bl	8000a0c <__aeabi_dcmpun>
 800a996:	b990      	cbnz	r0, 800a9be <sqrt+0x42>
 800a998:	2200      	movs	r2, #0
 800a99a:	2300      	movs	r3, #0
 800a99c:	4630      	mov	r0, r6
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f6 f80c 	bl	80009bc <__aeabi_dcmplt>
 800a9a4:	b158      	cbz	r0, 800a9be <sqrt+0x42>
 800a9a6:	f7fd f855 	bl	8007a54 <__errno>
 800a9aa:	2321      	movs	r3, #33	; 0x21
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	6003      	str	r3, [r0, #0]
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f7f5 feb9 	bl	800072c <__aeabi_ddiv>
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	460d      	mov	r5, r1
 800a9be:	4620      	mov	r0, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9c4 <__ieee754_sqrt>:
 800a9c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ab20 <__ieee754_sqrt+0x15c>
 800a9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9cc:	ea3c 0c01 	bics.w	ip, ip, r1
 800a9d0:	4606      	mov	r6, r0
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	460a      	mov	r2, r1
 800a9d8:	4607      	mov	r7, r0
 800a9da:	4603      	mov	r3, r0
 800a9dc:	d10f      	bne.n	800a9fe <__ieee754_sqrt+0x3a>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	460b      	mov	r3, r1
 800a9e2:	f7f5 fd79 	bl	80004d8 <__aeabi_dmul>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	f7f5 fbbd 	bl	800016c <__adddf3>
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	460d      	mov	r5, r1
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	dc0e      	bgt.n	800aa20 <__ieee754_sqrt+0x5c>
 800aa02:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800aa06:	ea5c 0707 	orrs.w	r7, ip, r7
 800aa0a:	d0f4      	beq.n	800a9f6 <__ieee754_sqrt+0x32>
 800aa0c:	b141      	cbz	r1, 800aa20 <__ieee754_sqrt+0x5c>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	f7f5 fba9 	bl	8000168 <__aeabi_dsub>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	f7f5 fe87 	bl	800072c <__aeabi_ddiv>
 800aa1e:	e7e8      	b.n	800a9f2 <__ieee754_sqrt+0x2e>
 800aa20:	1521      	asrs	r1, r4, #20
 800aa22:	d075      	beq.n	800ab10 <__ieee754_sqrt+0x14c>
 800aa24:	07cc      	lsls	r4, r1, #31
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aa2e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800aa32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa36:	bf5e      	ittt	pl
 800aa38:	0fd9      	lsrpl	r1, r3, #31
 800aa3a:	005b      	lslpl	r3, r3, #1
 800aa3c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800aa40:	0fd9      	lsrs	r1, r3, #31
 800aa42:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800aa46:	2516      	movs	r5, #22
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa4e:	107f      	asrs	r7, r7, #1
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	1846      	adds	r6, r0, r1
 800aa54:	4296      	cmp	r6, r2
 800aa56:	bfde      	ittt	le
 800aa58:	1b92      	suble	r2, r2, r6
 800aa5a:	1870      	addle	r0, r6, r1
 800aa5c:	1864      	addle	r4, r4, r1
 800aa5e:	0052      	lsls	r2, r2, #1
 800aa60:	3d01      	subs	r5, #1
 800aa62:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aa66:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aa6a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa6e:	d1f0      	bne.n	800aa52 <__ieee754_sqrt+0x8e>
 800aa70:	4629      	mov	r1, r5
 800aa72:	f04f 0e20 	mov.w	lr, #32
 800aa76:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa7a:	4282      	cmp	r2, r0
 800aa7c:	eb06 0c05 	add.w	ip, r6, r5
 800aa80:	dc02      	bgt.n	800aa88 <__ieee754_sqrt+0xc4>
 800aa82:	d113      	bne.n	800aaac <__ieee754_sqrt+0xe8>
 800aa84:	459c      	cmp	ip, r3
 800aa86:	d811      	bhi.n	800aaac <__ieee754_sqrt+0xe8>
 800aa88:	f1bc 0f00 	cmp.w	ip, #0
 800aa8c:	eb0c 0506 	add.w	r5, ip, r6
 800aa90:	da43      	bge.n	800ab1a <__ieee754_sqrt+0x156>
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	db41      	blt.n	800ab1a <__ieee754_sqrt+0x156>
 800aa96:	f100 0801 	add.w	r8, r0, #1
 800aa9a:	1a12      	subs	r2, r2, r0
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	459c      	cmp	ip, r3
 800aaa0:	bf88      	it	hi
 800aaa2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aaa6:	eba3 030c 	sub.w	r3, r3, ip
 800aaaa:	4431      	add	r1, r6
 800aaac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aab0:	f1be 0e01 	subs.w	lr, lr, #1
 800aab4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800aab8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aabc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aac0:	d1db      	bne.n	800aa7a <__ieee754_sqrt+0xb6>
 800aac2:	4313      	orrs	r3, r2
 800aac4:	d006      	beq.n	800aad4 <__ieee754_sqrt+0x110>
 800aac6:	1c48      	adds	r0, r1, #1
 800aac8:	bf0b      	itete	eq
 800aaca:	4671      	moveq	r1, lr
 800aacc:	3101      	addne	r1, #1
 800aace:	3401      	addeq	r4, #1
 800aad0:	f021 0101 	bicne.w	r1, r1, #1
 800aad4:	1063      	asrs	r3, r4, #1
 800aad6:	0849      	lsrs	r1, r1, #1
 800aad8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aadc:	07e2      	lsls	r2, r4, #31
 800aade:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aae2:	bf48      	it	mi
 800aae4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800aae8:	460e      	mov	r6, r1
 800aaea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800aaee:	e782      	b.n	800a9f6 <__ieee754_sqrt+0x32>
 800aaf0:	0ada      	lsrs	r2, r3, #11
 800aaf2:	3815      	subs	r0, #21
 800aaf4:	055b      	lsls	r3, r3, #21
 800aaf6:	2a00      	cmp	r2, #0
 800aaf8:	d0fa      	beq.n	800aaf0 <__ieee754_sqrt+0x12c>
 800aafa:	02d5      	lsls	r5, r2, #11
 800aafc:	d50a      	bpl.n	800ab14 <__ieee754_sqrt+0x150>
 800aafe:	f1c1 0420 	rsb	r4, r1, #32
 800ab02:	fa23 f404 	lsr.w	r4, r3, r4
 800ab06:	1e4d      	subs	r5, r1, #1
 800ab08:	408b      	lsls	r3, r1
 800ab0a:	4322      	orrs	r2, r4
 800ab0c:	1b41      	subs	r1, r0, r5
 800ab0e:	e789      	b.n	800aa24 <__ieee754_sqrt+0x60>
 800ab10:	4608      	mov	r0, r1
 800ab12:	e7f0      	b.n	800aaf6 <__ieee754_sqrt+0x132>
 800ab14:	0052      	lsls	r2, r2, #1
 800ab16:	3101      	adds	r1, #1
 800ab18:	e7ef      	b.n	800aafa <__ieee754_sqrt+0x136>
 800ab1a:	4680      	mov	r8, r0
 800ab1c:	e7bd      	b.n	800aa9a <__ieee754_sqrt+0xd6>
 800ab1e:	bf00      	nop
 800ab20:	7ff00000 	.word	0x7ff00000

0800ab24 <_init>:
 800ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab26:	bf00      	nop
 800ab28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab2a:	bc08      	pop	{r3}
 800ab2c:	469e      	mov	lr, r3
 800ab2e:	4770      	bx	lr

0800ab30 <_fini>:
 800ab30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab32:	bf00      	nop
 800ab34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab36:	bc08      	pop	{r3}
 800ab38:	469e      	mov	lr, r3
 800ab3a:	4770      	bx	lr
