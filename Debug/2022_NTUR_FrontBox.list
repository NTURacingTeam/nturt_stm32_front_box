
2022_NTUR_FrontBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c4  0800b1c8  0800b1c8  0001b1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b78c  0800b78c  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800b78c  0800b78c  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b78c  0800b78c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b78c  0800b78c  0001b78c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b790  0800b790  0001b790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800b794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000210  0800b9a4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800b9a4  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016969  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bd  00000000  00000000  00036ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b1b1  00000000  00000000  0003c700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018188  00000000  00000000  000578b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098899  00000000  00000000  0006fa39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001082d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e40  00000000  00000000  00108324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1b0 	.word	0x0800b1b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800b1b0 	.word	0x0800b1b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 8001168:	2300      	movs	r3, #0
 800116a:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 800116c:	e015      	b.n	800119a <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29a      	uxth	r2, r3
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	4053      	eors	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	b2db      	uxtb	r3, r3
 8001180:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <CRC8_Calc+0x58>)
 8001186:	5cd3      	ldrb	r3, [r2, r3]
 8001188:	b21a      	sxth	r2, r3
 800118a:	89fb      	ldrh	r3, [r7, #14]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21b      	sxth	r3, r3
 8001190:	4053      	eors	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29b      	uxth	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	70fa      	strb	r2, [r7, #3]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e4      	bne.n	800116e <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 80011a4:	89fb      	ldrh	r3, [r7, #14]
 80011a6:	b2db      	uxtb	r3, r3
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	0800b29c 	.word	0x0800b29c

080011b8 <MLX90614_ReadReg>:

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
	HAL_Delay(10);
	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af04      	add	r7, sp, #16
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	460b      	mov	r3, r1
 80011c4:	71bb      	strb	r3, [r7, #6]
 80011c6:	4613      	mov	r3, r2
 80011c8:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b299      	uxth	r1, r3
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2303      	movs	r3, #3
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	481e      	ldr	r0, [pc, #120]	; (8001260 <MLX90614_ReadReg+0xa8>)
 80011e8:	f004 f986 	bl	80054f8 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 80011f4:	79bb      	ldrb	r3, [r7, #6]
 80011f6:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	3301      	adds	r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 8001204:	7c3b      	ldrb	r3, [r7, #16]
 8001206:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 8001208:	7c7b      	ldrb	r3, [r7, #17]
 800120a:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2105      	movs	r1, #5
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ffa2 	bl	800115c <CRC8_Calc>
 8001218:	4603      	mov	r3, r0
 800121a:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 800121c:	7c7b      	ldrb	r3, [r7, #17]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21b      	sxth	r3, r3
 800122a:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 800122c:	7cbb      	ldrb	r3, [r7, #18]
 800122e:	7d7a      	ldrb	r2, [r7, #21]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <MLX90614_ReadReg+0x80>
		data = 0x0000;
 8001234:	2300      	movs	r3, #0
 8001236:	82fb      	strh	r3, [r7, #22]
	}
	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10b      	bne.n	8001256 <MLX90614_ReadReg+0x9e>
 800123e:	7cbb      	ldrb	r3, [r7, #18]
 8001240:	8afc      	ldrh	r4, [r7, #22]
 8001242:	79b8      	ldrb	r0, [r7, #6]
 8001244:	79f9      	ldrb	r1, [r7, #7]
 8001246:	7d7a      	ldrb	r2, [r7, #21]
 8001248:	9201      	str	r2, [sp, #4]
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	4623      	mov	r3, r4
 800124e:	4602      	mov	r2, r0
 8001250:	2001      	movs	r0, #1
 8001252:	f000 f807 	bl	8001264 <MLX90614_SendDebugMsg>

	//HAL_Delay(1);
	return data;
 8001256:	8afb      	ldrh	r3, [r7, #22]
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	20000348 	.word	0x20000348

08001264 <MLX90614_SendDebugMsg>:
				  HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
					//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
			  }
		  }
}
void MLX90614_SendDebugMsg(uint8_t op_type, uint8_t devAddr, uint8_t regAddr, uint16_t data, uint8_t crc_in, uint8_t crc_calc) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b087      	sub	sp, #28
 8001268:	af04      	add	r7, sp, #16
 800126a:	4604      	mov	r4, r0
 800126c:	4608      	mov	r0, r1
 800126e:	4611      	mov	r1, r2
 8001270:	461a      	mov	r2, r3
 8001272:	4623      	mov	r3, r4
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	460b      	mov	r3, r1
 800127c:	717b      	strb	r3, [r7, #5]
 800127e:	4613      	mov	r3, r2
 8001280:	807b      	strh	r3, [r7, #2]
	if(op_type == MLX90614_DBG_MSG_W) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d118      	bne.n	80012ba <MLX90614_SendDebugMsg+0x56>
		snprintf(temp_buff, sizeof(temp_buff), "W Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_calc);
 8001288:	79b8      	ldrb	r0, [r7, #6]
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	7f39      	ldrb	r1, [r7, #28]
 8001290:	9102      	str	r1, [sp, #8]
 8001292:	9201      	str	r2, [sp, #4]
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	4603      	mov	r3, r0
 8001298:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MLX90614_SendDebugMsg+0x98>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	4818      	ldr	r0, [pc, #96]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 800129e:	f007 fc27 	bl	8008af0 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
 80012a2:	4817      	ldr	r0, [pc, #92]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 80012a4:	f7fe ff54 	bl	8000150 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b0:	4913      	ldr	r1, [pc, #76]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MLX90614_SendDebugMsg+0xa0>)
 80012b4:	f006 faff 	bl	80078b6 <HAL_UART_Transmit>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
		//CDC_Transmit_FS(temp_buff, strlen((const char *)temp_buff));
	}

}
 80012b8:	e01c      	b.n	80012f4 <MLX90614_SendDebugMsg+0x90>
	else if (op_type == MLX90614_DBG_MSG_R) {
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d119      	bne.n	80012f4 <MLX90614_SendDebugMsg+0x90>
		snprintf(temp_buff, sizeof(temp_buff), "R Dev: 0x%02X, Reg: 0x%02X, Data: 0x%04X, CRC8_in:0x%02X, CRC8_calc:0x%02X\r\n", devAddr, regAddr, data, crc_in, crc_calc);
 80012c0:	79bc      	ldrb	r4, [r7, #6]
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	7e39      	ldrb	r1, [r7, #24]
 80012c8:	7f38      	ldrb	r0, [r7, #28]
 80012ca:	9003      	str	r0, [sp, #12]
 80012cc:	9102      	str	r1, [sp, #8]
 80012ce:	9201      	str	r2, [sp, #4]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4623      	mov	r3, r4
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <MLX90614_SendDebugMsg+0xa4>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 80012da:	f007 fc09 	bl	8008af0 <sniprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)temp_buff, strlen((const char *)temp_buff),0xFFFF);
 80012de:	4808      	ldr	r0, [pc, #32]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 80012e0:	f7fe ff36 	bl	8000150 <strlen>
 80012e4:	4603      	mov	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ec:	4904      	ldr	r1, [pc, #16]	; (8001300 <MLX90614_SendDebugMsg+0x9c>)
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <MLX90614_SendDebugMsg+0xa0>)
 80012f0:	f006 fae1 	bl	80078b6 <HAL_UART_Transmit>
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	0800b1d4 	.word	0x0800b1d4
 8001300:	2000022c 	.word	0x2000022c
 8001304:	2000043c 	.word	0x2000043c
 8001308:	0800b214 	.word	0x0800b214

0800130c <setCSLine>:
#define RES12           12
#define RES14           14


void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 800131c:	787a      	ldrb	r2, [r7, #1]
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f003 ff5b 	bl	80051de <HAL_GPIO_WritePin>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af02      	add	r7, sp, #8
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	461a      	mov	r2, r3
 800133c:	460b      	mov	r3, r1
 800133e:	72fb      	strb	r3, [r7, #11]
 8001340:	4613      	mov	r3, r2
 8001342:	813b      	strh	r3, [r7, #8]
  //to hold received data
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8001344:	893b      	ldrh	r3, [r7, #8]
 8001346:	2200      	movs	r2, #0
 8001348:	4619      	mov	r1, r3
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffde 	bl	800130c <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
  HAL_Delay(1);
 8001350:	2001      	movs	r0, #1
 8001352:	f001 fff7 	bl	8003344 <HAL_Delay>
  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8001356:	f107 0217 	add.w	r2, r7, #23
 800135a:	f107 010b 	add.w	r1, r7, #11
 800135e:	230a      	movs	r3, #10
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f005 fb13 	bl	8006990 <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 ffea 	bl	8003344 <HAL_Delay>
  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8001370:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001374:	893b      	ldrh	r3, [r7, #8]
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffc7 	bl	800130c <setCSLine>

  return data;
 800137e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af02      	add	r7, sp, #8
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	4611      	mov	r1, r2
 8001394:	461a      	mov	r2, r3
 8001396:	460b      	mov	r3, r1
 8001398:	80fb      	strh	r3, [r7, #6]
 800139a:	4613      	mov	r3, r2
 800139c:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2200      	movs	r2, #0
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	2100      	movs	r1, #0
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ffc1 	bl	8001330 <spiWriteRead>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
  HAL_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f001 ffc4 	bl	8003344 <HAL_Delay>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1 );
 80013bc:	88fb      	ldrh	r3, [r7, #6]
 80013be:	2201      	movs	r2, #1
 80013c0:	9200      	str	r2, [sp, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	2100      	movs	r1, #0
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f7ff ffb2 	bl	8001330 <spiWriteRead>
 80013cc:	4603      	mov	r3, r0
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013d2:	4313      	orrs	r3, r2
 80013d4:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
 80013da:	e010      	b.n	80013fe <getPositionSPI+0x76>
 80013dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	fa42 f303 	asr.w	r3, r2, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	b2d9      	uxtb	r1, r3
 80013ec:	f107 0210 	add.w	r2, r7, #16
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	4413      	add	r3, r2
 80013f4:	460a      	mov	r2, r1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	3301      	adds	r3, #1
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	ddeb      	ble.n	80013dc <getPositionSPI+0x54>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
  if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8001404:	7ffb      	ldrb	r3, [r7, #31]
 8001406:	4619      	mov	r1, r3
 8001408:	7f7a      	ldrb	r2, [r7, #29]
 800140a:	7efb      	ldrb	r3, [r7, #27]
 800140c:	4053      	eors	r3, r2
 800140e:	b2da      	uxtb	r2, r3
 8001410:	7e7b      	ldrb	r3, [r7, #25]
 8001412:	4053      	eors	r3, r2
 8001414:	b2da      	uxtb	r2, r3
 8001416:	7dfb      	ldrb	r3, [r7, #23]
 8001418:	4053      	eors	r3, r2
 800141a:	b2da      	uxtb	r2, r3
 800141c:	7d7b      	ldrb	r3, [r7, #21]
 800141e:	4053      	eors	r3, r2
 8001420:	b2da      	uxtb	r2, r3
 8001422:	7cfb      	ldrb	r3, [r7, #19]
 8001424:	4053      	eors	r3, r2
 8001426:	b2da      	uxtb	r2, r3
 8001428:	7c7b      	ldrb	r3, [r7, #17]
 800142a:	429a      	cmp	r2, r3
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4299      	cmp	r1, r3
 8001436:	d11e      	bne.n	8001476 <getPositionSPI+0xee>
          && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	4619      	mov	r1, r3
 800143c:	7f3a      	ldrb	r2, [r7, #28]
 800143e:	7ebb      	ldrb	r3, [r7, #26]
 8001440:	4053      	eors	r3, r2
 8001442:	b2da      	uxtb	r2, r3
 8001444:	7e3b      	ldrb	r3, [r7, #24]
 8001446:	4053      	eors	r3, r2
 8001448:	b2da      	uxtb	r2, r3
 800144a:	7dbb      	ldrb	r3, [r7, #22]
 800144c:	4053      	eors	r3, r2
 800144e:	b2da      	uxtb	r2, r3
 8001450:	7d3b      	ldrb	r3, [r7, #20]
 8001452:	4053      	eors	r3, r2
 8001454:	b2da      	uxtb	r2, r3
 8001456:	7cbb      	ldrb	r3, [r7, #18]
 8001458:	4053      	eors	r3, r2
 800145a:	b2da      	uxtb	r2, r3
 800145c:	7c3b      	ldrb	r3, [r7, #16]
 800145e:	429a      	cmp	r2, r3
 8001460:	bf0c      	ite	eq
 8001462:	2301      	moveq	r3, #1
 8001464:	2300      	movne	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4299      	cmp	r1, r3
 800146a:	d104      	bne.n	8001476 <getPositionSPI+0xee>
    {
      //we got back a good position, so just mask away the checkbits
      currentPosition &= 0x3FFF;
 800146c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800146e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001472:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001474:	e002      	b.n	800147c <getPositionSPI+0xf4>
    }
  else
  {
    currentPosition = 0xFFFF; //bad position
 8001476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147a:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 800147c:	797b      	ldrb	r3, [r7, #5]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d107      	bne.n	8001492 <getPositionSPI+0x10a>
 8001482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001488:	4293      	cmp	r3, r2
 800148a:	d002      	beq.n	8001492 <getPositionSPI+0x10a>
 800148c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8001492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8001494:	4618      	mov	r0, r3
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <throttle_sensors_calibration>:
/**
  * @brief  calibration function for APPS transfer functions by setting the read value to 0 linearly
  * @param  reading: the raw ADC 12bit number read when the pedal is at rest
  * @retval none
  */
void throttle_sensors_calibration(uint32_t reading, uint8_t sensor_number){
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	70fb      	strb	r3, [r7, #3]
	float value;
	if(sensor_number==1){
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d112      	bne.n	80014d4 <throttle_sensors_calibration+0x38>
		value = APPS1_conversion(reading);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f84a 	bl	8001548 <APPS1_conversion>
 80014b4:	60f8      	str	r0, [r7, #12]
		APPS_calibration_value_1 += (int8_t)value;
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff fe0a 	bl	80010d0 <__aeabi_f2iz>
 80014bc:	4603      	mov	r3, r0
 80014be:	b25b      	sxtb	r3, r3
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <throttle_sensors_calibration+0x9c>)
 80014c4:	f993 3000 	ldrsb.w	r3, [r3]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <throttle_sensors_calibration+0x9c>)
 80014d2:	701a      	strb	r2, [r3, #0]
	}
	if(sensor_number==2){
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d112      	bne.n	8001500 <throttle_sensors_calibration+0x64>
		value = APPS2_conversion(reading);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f904 	bl	80016e8 <APPS2_conversion>
 80014e0:	60f8      	str	r0, [r7, #12]
		APPS_calibration_value_2 += (int8_t)value;
 80014e2:	68f8      	ldr	r0, [r7, #12]
 80014e4:	f7ff fdf4 	bl	80010d0 <__aeabi_f2iz>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b25b      	sxtb	r3, r3
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <throttle_sensors_calibration+0xa0>)
 80014f0:	f993 3000 	ldrsb.w	r3, [r3]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <throttle_sensors_calibration+0xa0>)
 80014fe:	701a      	strb	r2, [r3, #0]
	}
	if(sensor_number==0){
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d113      	bne.n	800152e <throttle_sensors_calibration+0x92>
		value = BSE_conversion(reading);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa92 	bl	8001a30 <BSE_conversion>
 800150c:	60f8      	str	r0, [r7, #12]
		BSE_calibration_value += (int8_t)value;
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f7ff fdde 	bl	80010d0 <__aeabi_f2iz>
 8001514:	4603      	mov	r3, r0
 8001516:	b25b      	sxtb	r3, r3
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <throttle_sensors_calibration+0xa4>)
 800151c:	f993 3000 	ldrsb.w	r3, [r3]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b25a      	sxtb	r2, r3
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <throttle_sensors_calibration+0xa4>)
 800152a:	701a      	strb	r2, [r3, #0]
	}

	return;
 800152c:	bf00      	nop
 800152e:	bf00      	nop
}
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000000 	.word	0x20000000
 800153c:	20000001 	.word	0x20000001
 8001540:	20000002 	.word	0x20000002
 8001544:	00000000 	.word	0x00000000

08001548 <APPS1_conversion>:
/**
 *  @brief	mathematical transfer function for the APPS1 potentiometer
 *  @param	reading the raw 12 bit ADC reading
 *  @retval	the relative ratio for how much of the accel pedal has been stepped, times 254
 */
float APPS1_conversion(uint32_t reading){
 8001548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800154c:	b087      	sub	sp, #28
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
		 *
		 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
		 * */

		float value;
		float x = (float)reading;
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fb9e 	bl	8000c94 <__aeabi_ui2f>
 8001558:	4603      	mov	r3, r0
 800155a:	617b      	str	r3, [r7, #20]
		float a = max_adc_value;
 800155c:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001560:	613b      	str	r3, [r7, #16]
		value = (10109*a - 6199*x)/(10400*(a - x)) - sqrt(102191881*a*a - 222283742*a*x + 135379961*x*x)/(10400*(a - x));
 8001562:	4957      	ldr	r1, [pc, #348]	; (80016c0 <APPS1_conversion+0x178>)
 8001564:	6938      	ldr	r0, [r7, #16]
 8001566:	f7ff fbed 	bl	8000d44 <__aeabi_fmul>
 800156a:	4603      	mov	r3, r0
 800156c:	461c      	mov	r4, r3
 800156e:	4955      	ldr	r1, [pc, #340]	; (80016c4 <APPS1_conversion+0x17c>)
 8001570:	6978      	ldr	r0, [r7, #20]
 8001572:	f7ff fbe7 	bl	8000d44 <__aeabi_fmul>
 8001576:	4603      	mov	r3, r0
 8001578:	4619      	mov	r1, r3
 800157a:	4620      	mov	r0, r4
 800157c:	f7ff fad8 	bl	8000b30 <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
 8001582:	461c      	mov	r4, r3
 8001584:	6979      	ldr	r1, [r7, #20]
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f7ff fad2 	bl	8000b30 <__aeabi_fsub>
 800158c:	4603      	mov	r3, r0
 800158e:	494e      	ldr	r1, [pc, #312]	; (80016c8 <APPS1_conversion+0x180>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fbd7 	bl	8000d44 <__aeabi_fmul>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4620      	mov	r0, r4
 800159c:	f7ff fc86 	bl	8000eac <__aeabi_fdiv>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff40 	bl	8000428 <__aeabi_f2d>
 80015a8:	4604      	mov	r4, r0
 80015aa:	460d      	mov	r5, r1
 80015ac:	4947      	ldr	r1, [pc, #284]	; (80016cc <APPS1_conversion+0x184>)
 80015ae:	6938      	ldr	r0, [r7, #16]
 80015b0:	f7ff fbc8 	bl	8000d44 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fbc3 	bl	8000d44 <__aeabi_fmul>
 80015be:	4603      	mov	r3, r0
 80015c0:	461e      	mov	r6, r3
 80015c2:	4943      	ldr	r1, [pc, #268]	; (80016d0 <APPS1_conversion+0x188>)
 80015c4:	6938      	ldr	r0, [r7, #16]
 80015c6:	f7ff fbbd 	bl	8000d44 <__aeabi_fmul>
 80015ca:	4603      	mov	r3, r0
 80015cc:	6979      	ldr	r1, [r7, #20]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbb8 	bl	8000d44 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4630      	mov	r0, r6
 80015da:	f7ff faa9 	bl	8000b30 <__aeabi_fsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	461e      	mov	r6, r3
 80015e2:	493c      	ldr	r1, [pc, #240]	; (80016d4 <APPS1_conversion+0x18c>)
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f7ff fbad 	bl	8000d44 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
 80015ec:	6979      	ldr	r1, [r7, #20]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fba8 	bl	8000d44 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4630      	mov	r0, r6
 80015fa:	f7ff fa9b 	bl	8000b34 <__addsf3>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff11 	bl	8000428 <__aeabi_f2d>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f009 fcfb 	bl	800b008 <sqrt>
 8001612:	4680      	mov	r8, r0
 8001614:	4689      	mov	r9, r1
 8001616:	6979      	ldr	r1, [r7, #20]
 8001618:	6938      	ldr	r0, [r7, #16]
 800161a:	f7ff fa89 	bl	8000b30 <__aeabi_fsub>
 800161e:	4603      	mov	r3, r0
 8001620:	4929      	ldr	r1, [pc, #164]	; (80016c8 <APPS1_conversion+0x180>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb8e 	bl	8000d44 <__aeabi_fmul>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe fefc 	bl	8000428 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4640      	mov	r0, r8
 8001636:	4649      	mov	r1, r9
 8001638:	f7ff f878 	bl	800072c <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe fd90 	bl	8000168 <__aeabi_dsub>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa1a 	bl	8000a88 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	60fb      	str	r3, [r7, #12]
		value = (value-(50-39.5)/50) * (50)/(37);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7fe fee5 	bl	8000428 <__aeabi_f2d>
 800165e:	a316      	add	r3, pc, #88	; (adr r3, 80016b8 <APPS1_conversion+0x170>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fd80 	bl	8000168 <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <APPS1_conversion+0x190>)
 8001676:	f7fe ff2f 	bl	80004d8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <APPS1_conversion+0x194>)
 8001688:	f7ff f850 	bl	800072c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff f9f8 	bl	8000a88 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]
		value = value*254;
 800169c:	4910      	ldr	r1, [pc, #64]	; (80016e0 <APPS1_conversion+0x198>)
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff fb50 	bl	8000d44 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	60fb      	str	r3, [r7, #12]
		return value;
 80016a8:	68fb      	ldr	r3, [r7, #12]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016b4:	f3af 8000 	nop.w
 80016b8:	ae147ae1 	.word	0xae147ae1
 80016bc:	3fcae147 	.word	0x3fcae147
 80016c0:	461df400 	.word	0x461df400
 80016c4:	45c1b800 	.word	0x45c1b800
 80016c8:	46228000 	.word	0x46228000
 80016cc:	4cc2ea61 	.word	0x4cc2ea61
 80016d0:	4d53fc7e 	.word	0x4d53fc7e
 80016d4:	4d011bc0 	.word	0x4d011bc0
 80016d8:	40490000 	.word	0x40490000
 80016dc:	40428000 	.word	0x40428000
 80016e0:	437e0000 	.word	0x437e0000
 80016e4:	00000000 	.word	0x00000000

080016e8 <APPS2_conversion>:
/**
 *  @brief	mathematical transfer function for the APPS2 potentiometer
 *  @param	reading the raw 12 bit ADC reading
 *  @retval	the relative ratio for how much of the accel pedal has been stepped, times 254
 */
float APPS2_conversion(uint32_t reading){
 80016e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016ec:	b087      	sub	sp, #28
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x = (float)reading;
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff face 	bl	8000c94 <__aeabi_ui2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 80016fc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001700:	613b      	str	r3, [r7, #16]
	value = (4354*a - 2379*x)/(4560*(a - x)) - sqrt(18957316*a*a - 39510432*a*x + 24453741*x*x)/(4560*(a - x));
 8001702:	4957      	ldr	r1, [pc, #348]	; (8001860 <APPS2_conversion+0x178>)
 8001704:	6938      	ldr	r0, [r7, #16]
 8001706:	f7ff fb1d 	bl	8000d44 <__aeabi_fmul>
 800170a:	4603      	mov	r3, r0
 800170c:	461c      	mov	r4, r3
 800170e:	4955      	ldr	r1, [pc, #340]	; (8001864 <APPS2_conversion+0x17c>)
 8001710:	6978      	ldr	r0, [r7, #20]
 8001712:	f7ff fb17 	bl	8000d44 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff fa08 	bl	8000b30 <__aeabi_fsub>
 8001720:	4603      	mov	r3, r0
 8001722:	461c      	mov	r4, r3
 8001724:	6979      	ldr	r1, [r7, #20]
 8001726:	6938      	ldr	r0, [r7, #16]
 8001728:	f7ff fa02 	bl	8000b30 <__aeabi_fsub>
 800172c:	4603      	mov	r3, r0
 800172e:	494e      	ldr	r1, [pc, #312]	; (8001868 <APPS2_conversion+0x180>)
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fb07 	bl	8000d44 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	4619      	mov	r1, r3
 800173a:	4620      	mov	r0, r4
 800173c:	f7ff fbb6 	bl	8000eac <__aeabi_fdiv>
 8001740:	4603      	mov	r3, r0
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fe70 	bl	8000428 <__aeabi_f2d>
 8001748:	4604      	mov	r4, r0
 800174a:	460d      	mov	r5, r1
 800174c:	4947      	ldr	r1, [pc, #284]	; (800186c <APPS2_conversion+0x184>)
 800174e:	6938      	ldr	r0, [r7, #16]
 8001750:	f7ff faf8 	bl	8000d44 <__aeabi_fmul>
 8001754:	4603      	mov	r3, r0
 8001756:	6939      	ldr	r1, [r7, #16]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff faf3 	bl	8000d44 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	461e      	mov	r6, r3
 8001762:	4943      	ldr	r1, [pc, #268]	; (8001870 <APPS2_conversion+0x188>)
 8001764:	6938      	ldr	r0, [r7, #16]
 8001766:	f7ff faed 	bl	8000d44 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	6979      	ldr	r1, [r7, #20]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fae8 	bl	8000d44 <__aeabi_fmul>
 8001774:	4603      	mov	r3, r0
 8001776:	4619      	mov	r1, r3
 8001778:	4630      	mov	r0, r6
 800177a:	f7ff f9d9 	bl	8000b30 <__aeabi_fsub>
 800177e:	4603      	mov	r3, r0
 8001780:	461e      	mov	r6, r3
 8001782:	493c      	ldr	r1, [pc, #240]	; (8001874 <APPS2_conversion+0x18c>)
 8001784:	6978      	ldr	r0, [r7, #20]
 8001786:	f7ff fadd 	bl	8000d44 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	6979      	ldr	r1, [r7, #20]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fad8 	bl	8000d44 <__aeabi_fmul>
 8001794:	4603      	mov	r3, r0
 8001796:	4619      	mov	r1, r3
 8001798:	4630      	mov	r0, r6
 800179a:	f7ff f9cb 	bl	8000b34 <__addsf3>
 800179e:	4603      	mov	r3, r0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fe41 	bl	8000428 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f009 fc2b 	bl	800b008 <sqrt>
 80017b2:	4680      	mov	r8, r0
 80017b4:	4689      	mov	r9, r1
 80017b6:	6979      	ldr	r1, [r7, #20]
 80017b8:	6938      	ldr	r0, [r7, #16]
 80017ba:	f7ff f9b9 	bl	8000b30 <__aeabi_fsub>
 80017be:	4603      	mov	r3, r0
 80017c0:	4929      	ldr	r1, [pc, #164]	; (8001868 <APPS2_conversion+0x180>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fabe 	bl	8000d44 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fe2c 	bl	8000428 <__aeabi_f2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4640      	mov	r0, r8
 80017d6:	4649      	mov	r1, r9
 80017d8:	f7fe ffa8 	bl	800072c <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fcc0 	bl	8000168 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f94a 	bl	8000a88 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
	value = (value-(50-39.5)/50) * (50)/(37);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7fe fe15 	bl	8000428 <__aeabi_f2d>
 80017fe:	a316      	add	r3, pc, #88	; (adr r3, 8001858 <APPS2_conversion+0x170>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fcb0 	bl	8000168 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <APPS2_conversion+0x190>)
 8001816:	f7fe fe5f 	bl	80004d8 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <APPS2_conversion+0x194>)
 8001828:	f7fe ff80 	bl	800072c <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f928 	bl	8000a88 <__aeabi_d2f>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
	value = value*254;
 800183c:	4910      	ldr	r1, [pc, #64]	; (8001880 <APPS2_conversion+0x198>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fa80 	bl	8000d44 <__aeabi_fmul>
 8001844:	4603      	mov	r3, r0
 8001846:	60fb      	str	r3, [r7, #12]
	return value;
 8001848:	68fb      	ldr	r3, [r7, #12]
}
 800184a:	4618      	mov	r0, r3
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	ae147ae1 	.word	0xae147ae1
 800185c:	3fcae147 	.word	0x3fcae147
 8001860:	45881000 	.word	0x45881000
 8001864:	4514b000 	.word	0x4514b000
 8001868:	458e8000 	.word	0x458e8000
 800186c:	4b90a202 	.word	0x4b90a202
 8001870:	4c16b868 	.word	0x4c16b868
 8001874:	4bba9136 	.word	0x4bba9136
 8001878:	40490000 	.word	0x40490000
 800187c:	40428000 	.word	0x40428000
 8001880:	437e0000 	.word	0x437e0000
 8001884:	00000000 	.word	0x00000000

08001888 <throttle_sensors_transfer_function>:
  * @param  reading: the raw ADC 12bit number
  * @param	sensor_number: the index for the sensor, 1 for APPS1 and so on
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down.
  */
uint8_t throttle_sensors_transfer_function(uint32_t reading, uint8_t sensor_number){
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
	const float out_of_bounds_tolerance = 10.0;
 8001894:	4b60      	ldr	r3, [pc, #384]	; (8001a18 <throttle_sensors_transfer_function+0x190>)
 8001896:	613b      	str	r3, [r7, #16]
	const float in_bounds_tolerance = 8.0;
 8001898:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800189c:	60fb      	str	r3, [r7, #12]
	float value;
	if(sensor_number!=1&&sensor_number!=2&&sensor_number!=0) {return 0;}
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d007      	beq.n	80018b4 <throttle_sensors_transfer_function+0x2c>
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d004      	beq.n	80018b4 <throttle_sensors_transfer_function+0x2c>
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <throttle_sensors_transfer_function+0x2c>
 80018b0:	2300      	movs	r3, #0
 80018b2:	e0a8      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
	if(sensor_number==1){
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d111      	bne.n	80018de <throttle_sensors_transfer_function+0x56>
		/*compensating the values read from the sensors after testing*/
		value = APPS1_conversion(reading);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fe44 	bl	8001548 <APPS1_conversion>
 80018c0:	6178      	str	r0, [r7, #20]
		value -= APPS_calibration_value_1;
 80018c2:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <throttle_sensors_transfer_function+0x194>)
 80018c4:	f993 3000 	ldrsb.w	r3, [r3]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff f9e7 	bl	8000c9c <__aeabi_i2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4619      	mov	r1, r3
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff f92c 	bl	8000b30 <__aeabi_fsub>
 80018d8:	4603      	mov	r3, r0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e030      	b.n	8001940 <throttle_sensors_transfer_function+0xb8>
	}
	else if(sensor_number == 2){
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d111      	bne.n	8001908 <throttle_sensors_transfer_function+0x80>
		/*compensating the values read from the sensors after testing*/
		value = APPS2_conversion(reading);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff feff 	bl	80016e8 <APPS2_conversion>
 80018ea:	6178      	str	r0, [r7, #20]
		value -= APPS_calibration_value_2;
 80018ec:	4b4c      	ldr	r3, [pc, #304]	; (8001a20 <throttle_sensors_transfer_function+0x198>)
 80018ee:	f993 3000 	ldrsb.w	r3, [r3]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f9d2 	bl	8000c9c <__aeabi_i2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	6978      	ldr	r0, [r7, #20]
 80018fe:	f7ff f917 	bl	8000b30 <__aeabi_fsub>
 8001902:	4603      	mov	r3, r0
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e01b      	b.n	8001940 <throttle_sensors_transfer_function+0xb8>
//		value += 10; //compnsating
	}
	else{
		value = BSE_conversion(reading);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f891 	bl	8001a30 <BSE_conversion>
 800190e:	6178      	str	r0, [r7, #20]
		value -= BSE_calibration_value;
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <throttle_sensors_transfer_function+0x19c>)
 8001912:	f993 3000 	ldrsb.w	r3, [r3]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f9c0 	bl	8000c9c <__aeabi_i2f>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff f905 	bl	8000b30 <__aeabi_fsub>
 8001926:	4603      	mov	r3, r0
 8001928:	617b      	str	r3, [r7, #20]
		value = value*254/185; //compensating
 800192a:	493f      	ldr	r1, [pc, #252]	; (8001a28 <throttle_sensors_transfer_function+0x1a0>)
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff fa09 	bl	8000d44 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	493d      	ldr	r1, [pc, #244]	; (8001a2c <throttle_sensors_transfer_function+0x1a4>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fab8 	bl	8000eac <__aeabi_fdiv>
 800193c:	4603      	mov	r3, r0
 800193e:	617b      	str	r3, [r7, #20]
	}

	/*snapping everything out of bounds to designated values*/
	/*and snapping anything around 0 to 0*/
	if(value>in_bounds_tolerance && value<254)	{return (uint8_t)value+1-in_bounds_tolerance;}
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff fbba 	bl	80010bc <__aeabi_fcmpgt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01b      	beq.n	8001986 <throttle_sensors_transfer_function+0xfe>
 800194e:	4936      	ldr	r1, [pc, #216]	; (8001a28 <throttle_sensors_transfer_function+0x1a0>)
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff fb95 	bl	8001080 <__aeabi_fcmplt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d014      	beq.n	8001986 <throttle_sensors_transfer_function+0xfe>
 800195c:	6978      	ldr	r0, [r7, #20]
 800195e:	f7ff fbdd 	bl	800111c <__aeabi_f2uiz>
 8001962:	4603      	mov	r3, r0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	3301      	adds	r3, #1
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f997 	bl	8000c9c <__aeabi_i2f>
 800196e:	4603      	mov	r3, r0
 8001970:	68f9      	ldr	r1, [r7, #12]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff f8dc 	bl	8000b30 <__aeabi_fsub>
 8001978:	4603      	mov	r3, r0
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbce 	bl	800111c <__aeabi_f2uiz>
 8001980:	4603      	mov	r3, r0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	e03f      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
	if(value>=0 && value <=in_bounds_tolerance){
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff fb8c 	bl	80010a8 <__aeabi_fcmpge>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <throttle_sensors_transfer_function+0x120>
 8001996:	68f9      	ldr	r1, [r7, #12]
 8001998:	6978      	ldr	r0, [r7, #20]
 800199a:	f7ff fb7b 	bl	8001094 <__aeabi_fcmple>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <throttle_sensors_transfer_function+0x120>
		return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e02e      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
	}
	else if(value<0){
 80019a8:	f04f 0100 	mov.w	r1, #0
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7ff fb67 	bl	8001080 <__aeabi_fcmplt>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <throttle_sensors_transfer_function+0x14c>
		if(value < -out_of_bounds_tolerance)	{return 0;}
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019be:	4619      	mov	r1, r3
 80019c0:	6978      	ldr	r0, [r7, #20]
 80019c2:	f7ff fb5d 	bl	8001080 <__aeabi_fcmplt>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <throttle_sensors_transfer_function+0x148>
 80019cc:	2300      	movs	r3, #0
 80019ce:	e01a      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
		else 									{return 1;}
 80019d0:	2301      	movs	r3, #1
 80019d2:	e018      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
	}
	else{
		if(value >= 254.0+out_of_bounds_tolerance) 	{return 255;}
 80019d4:	6978      	ldr	r0, [r7, #20]
 80019d6:	f7fe fd27 	bl	8000428 <__aeabi_f2d>
 80019da:	4604      	mov	r4, r0
 80019dc:	460d      	mov	r5, r1
 80019de:	6938      	ldr	r0, [r7, #16]
 80019e0:	f7fe fd22 	bl	8000428 <__aeabi_f2d>
 80019e4:	a30a      	add	r3, pc, #40	; (adr r3, 8001a10 <throttle_sensors_transfer_function+0x188>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fbbf 	bl	800016c <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4620      	mov	r0, r4
 80019f4:	4629      	mov	r1, r5
 80019f6:	f7fe fff5 	bl	80009e4 <__aeabi_dcmpge>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <throttle_sensors_transfer_function+0x17c>
 8001a00:	23ff      	movs	r3, #255	; 0xff
 8001a02:	e000      	b.n	8001a06 <throttle_sensors_transfer_function+0x17e>
		else										{return 254;}
 8001a04:	23fe      	movs	r3, #254	; 0xfe
	}
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00000000 	.word	0x00000000
 8001a14:	406fc000 	.word	0x406fc000
 8001a18:	41200000 	.word	0x41200000
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000001 	.word	0x20000001
 8001a24:	20000002 	.word	0x20000002
 8001a28:	437e0000 	.word	0x437e0000
 8001a2c:	43390000 	.word	0x43390000

08001a30 <BSE_conversion>:

float BSE_conversion(uint32_t reading){
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
	 *
	 * Note: 24.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */

	float value;
	float x=(float)reading;
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff f92b 	bl	8000c94 <__aeabi_ui2f>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 8001a42:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001a46:	613b      	str	r3, [r7, #16]
	value = (sqrt(473344*a*a - 673148*a*x + 435029*x*x) - 688*a + 203*x)/(2*(203*x - 203*a));
 8001a48:	4957      	ldr	r1, [pc, #348]	; (8001ba8 <BSE_conversion+0x178>)
 8001a4a:	6938      	ldr	r0, [r7, #16]
 8001a4c:	f7ff f97a 	bl	8000d44 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	6939      	ldr	r1, [r7, #16]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f975 	bl	8000d44 <__aeabi_fmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	4953      	ldr	r1, [pc, #332]	; (8001bac <BSE_conversion+0x17c>)
 8001a60:	6938      	ldr	r0, [r7, #16]
 8001a62:	f7ff f96f 	bl	8000d44 <__aeabi_fmul>
 8001a66:	4603      	mov	r3, r0
 8001a68:	6979      	ldr	r1, [r7, #20]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f96a 	bl	8000d44 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4620      	mov	r0, r4
 8001a76:	f7ff f85b 	bl	8000b30 <__aeabi_fsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	461c      	mov	r4, r3
 8001a7e:	494c      	ldr	r1, [pc, #304]	; (8001bb0 <BSE_conversion+0x180>)
 8001a80:	6978      	ldr	r0, [r7, #20]
 8001a82:	f7ff f95f 	bl	8000d44 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f95a 	bl	8000d44 <__aeabi_fmul>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff f84d 	bl	8000b34 <__addsf3>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fcc3 	bl	8000428 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f009 faad 	bl	800b008 <sqrt>
 8001aae:	4604      	mov	r4, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	4940      	ldr	r1, [pc, #256]	; (8001bb4 <BSE_conversion+0x184>)
 8001ab4:	6938      	ldr	r0, [r7, #16]
 8001ab6:	f7ff f945 	bl	8000d44 <__aeabi_fmul>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcb3 	bl	8000428 <__aeabi_f2d>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fb4d 	bl	8000168 <__aeabi_dsub>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4614      	mov	r4, r2
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4938      	ldr	r1, [pc, #224]	; (8001bb8 <BSE_conversion+0x188>)
 8001ad8:	6978      	ldr	r0, [r7, #20]
 8001ada:	f7ff f933 	bl	8000d44 <__aeabi_fmul>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fca1 	bl	8000428 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4620      	mov	r0, r4
 8001aec:	4629      	mov	r1, r5
 8001aee:	f7fe fb3d 	bl	800016c <__adddf3>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	492f      	ldr	r1, [pc, #188]	; (8001bb8 <BSE_conversion+0x188>)
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f7ff f921 	bl	8000d44 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461e      	mov	r6, r3
 8001b06:	492c      	ldr	r1, [pc, #176]	; (8001bb8 <BSE_conversion+0x188>)
 8001b08:	6938      	ldr	r0, [r7, #16]
 8001b0a:	f7ff f91b 	bl	8000d44 <__aeabi_fmul>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4630      	mov	r0, r6
 8001b14:	f7ff f80c 	bl	8000b30 <__aeabi_fsub>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff f809 	bl	8000b34 <__addsf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fc7f 	bl	8000428 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fdfb 	bl	800072c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ffa3 	bl	8000a88 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	60fb      	str	r3, [r7, #12]
	value = (value-(25-24.5)/25) * (25)/(24.5-2.5);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7fe fc6e 	bl	8000428 <__aeabi_f2d>
 8001b4c:	a314      	add	r3, pc, #80	; (adr r3, 8001ba0 <BSE_conversion+0x170>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f7fe fb09 	bl	8000168 <__aeabi_dsub>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <BSE_conversion+0x18c>)
 8001b64:	f7fe fcb8 	bl	80004d8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <BSE_conversion+0x190>)
 8001b76:	f7fe fdd9 	bl	800072c <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4610      	mov	r0, r2
 8001b80:	4619      	mov	r1, r3
 8001b82:	f7fe ff81 	bl	8000a88 <__aeabi_d2f>
 8001b86:	4603      	mov	r3, r0
 8001b88:	60fb      	str	r3, [r7, #12]
	value *= 254;
 8001b8a:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <BSE_conversion+0x194>)
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7ff f8d9 	bl	8000d44 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	60fb      	str	r3, [r7, #12]
	return value;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	371c      	adds	r7, #28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba0:	47ae147b 	.word	0x47ae147b
 8001ba4:	3f947ae1 	.word	0x3f947ae1
 8001ba8:	48e72000 	.word	0x48e72000
 8001bac:	492457c0 	.word	0x492457c0
 8001bb0:	48d46aa0 	.word	0x48d46aa0
 8001bb4:	442c0000 	.word	0x442c0000
 8001bb8:	434b0000 	.word	0x434b0000
 8001bbc:	40390000 	.word	0x40390000
 8001bc0:	40360000 	.word	0x40360000
 8001bc4:	437e0000 	.word	0x437e0000

08001bc8 <oil_pressure_transfer_function>:
/**
  * @brief  transfer function for the brake oil pressure sensor on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the 8 bit number reperesenting the suspension travel that matches the format on the CAN protocol.
  */
uint8_t oil_pressure_transfer_function(uint32_t reading){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	 * the output voltage is dropped down by a 2.35k & 3.53k voltage divider
	 * the input voltage 0~3V3 into STM32 is mapped to 0~4096 by the internal ADC
	 * 0~5kPar should mapped linearly to 0~255 in the CAN protocol, but the resolution would be too low
	 * so we have it times 7, so that 0~35bar should be mapped to 0~255
	 * */
	float value=0;
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
	float input = reading;
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff f85c 	bl	8000c94 <__aeabi_ui2f>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	60bb      	str	r3, [r7, #8]
	value = ( input * (3.3/4096)*((2.35+3.53)/3.53) - 1 ) * (256/4) * 7;
 8001be0:	68b8      	ldr	r0, [r7, #8]
 8001be2:	f7fe fc21 	bl	8000428 <__aeabi_f2d>
 8001be6:	a328      	add	r3, pc, #160	; (adr r3, 8001c88 <oil_pressure_transfer_function+0xc0>)
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	f7fe fc74 	bl	80004d8 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	a325      	add	r3, pc, #148	; (adr r3, 8001c90 <oil_pressure_transfer_function+0xc8>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fc6b 	bl	80004d8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <oil_pressure_transfer_function+0xd0>)
 8001c10:	f7fe faaa 	bl	8000168 <__aeabi_dsub>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <oil_pressure_transfer_function+0xd4>)
 8001c22:	f7fe fc59 	bl	80004d8 <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <oil_pressure_transfer_function+0xd8>)
 8001c34:	f7fe fc50 	bl	80004d8 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ff22 	bl	8000a88 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
//	value = (input - 4096.0/5)*(255 /(4096 *(4.0/5.0) ) );

	if(value>=256)		{return 255;}
 8001c48:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fa2b 	bl	80010a8 <__aeabi_fcmpge>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <oil_pressure_transfer_function+0x94>
 8001c58:	23ff      	movs	r3, #255	; 0xff
 8001c5a:	e00e      	b.n	8001c7a <oil_pressure_transfer_function+0xb2>
	else if(value<=0)	{return 0;}
 8001c5c:	f04f 0100 	mov.w	r1, #0
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fa17 	bl	8001094 <__aeabi_fcmple>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <oil_pressure_transfer_function+0xa8>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e004      	b.n	8001c7a <oil_pressure_transfer_function+0xb2>
	else				{return (uint8_t)value;}
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff fa53 	bl	800111c <__aeabi_f2uiz>
 8001c76:	4603      	mov	r3, r0
 8001c78:	b2db      	uxtb	r3, r3
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	f3af 8000 	nop.w
 8001c88:	66666666 	.word	0x66666666
 8001c8c:	3f4a6666 	.word	0x3f4a6666
 8001c90:	8289ca56 	.word	0x8289ca56
 8001c94:	3ffaa6cc 	.word	0x3ffaa6cc
 8001c98:	3ff00000 	.word	0x3ff00000
 8001c9c:	40500000 	.word	0x40500000
 8001ca0:	401c0000 	.word	0x401c0000
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <suspension_travel_transfer_function>:
/**
  * @brief  transfer function for the analog suspension travel on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the 8 bit number reperesenting the suspension travel that matches the format on the CAN protocol.
  */
uint8_t suspension_travel_transfer_function(uint32_t reading){
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	/*The length of the suspension measuring sensor goes from 200~245mm, which corresponds to 5.5~50.5mm extension
	 * The length of the allowable extension is mapped linearly to 0~255
	 * that is, the function should be a straight line passing through( 5.5*(4096/75) , 0 ) and (50.5*(4096/75),256)
	 */

	float value = 0.0;
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
	float input = (float)reading;
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe ffec 	bl	8000c94 <__aeabi_ui2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60bb      	str	r3, [r7, #8]
	value = (input-5.5*(max_adc_value/75))*(256/(max_adc_value*(50.5-5.5)/75));
 8001cc0:	68b8      	ldr	r0, [r7, #8]
 8001cc2:	f7fe fbb1 	bl	8000428 <__aeabi_f2d>
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	460d      	mov	r5, r1
 8001cca:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001cce:	4930      	ldr	r1, [pc, #192]	; (8001d90 <suspension_travel_transfer_function+0xe8>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f8eb 	bl	8000eac <__aeabi_fdiv>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fba5 	bl	8000428 <__aeabi_f2d>
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <suspension_travel_transfer_function+0xec>)
 8001ce4:	f7fe fbf8 	bl	80004d8 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4620      	mov	r0, r4
 8001cee:	4629      	mov	r1, r5
 8001cf0:	f7fe fa3a 	bl	8000168 <__aeabi_dsub>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	461d      	mov	r5, r3
 8001cfc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fb91 	bl	8000428 <__aeabi_f2d>
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <suspension_travel_transfer_function+0xf0>)
 8001d0c:	f7fe fbe4 	bl	80004d8 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	a31b      	add	r3, pc, #108	; (adr r3, 8001d88 <suspension_travel_transfer_function+0xe0>)
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	f7fe fd05 	bl	800072c <__aeabi_ddiv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	491c      	ldr	r1, [pc, #112]	; (8001d9c <suspension_travel_transfer_function+0xf4>)
 8001d2c:	f7fe fcfe 	bl	800072c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4620      	mov	r0, r4
 8001d36:	4629      	mov	r1, r5
 8001d38:	f7fe fbce 	bl	80004d8 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe fea0 	bl	8000a88 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]

	if(value>=256)		{return 255;}
 8001d4c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff f9a9 	bl	80010a8 <__aeabi_fcmpge>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <suspension_travel_transfer_function+0xb8>
 8001d5c:	23ff      	movs	r3, #255	; 0xff
 8001d5e:	e00e      	b.n	8001d7e <suspension_travel_transfer_function+0xd6>
	else if(value<=0)	{return 0;}
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff f995 	bl	8001094 <__aeabi_fcmple>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <suspension_travel_transfer_function+0xcc>
 8001d70:	2300      	movs	r3, #0
 8001d72:	e004      	b.n	8001d7e <suspension_travel_transfer_function+0xd6>
	else				{return (uint8_t)value;}
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff f9d1 	bl	800111c <__aeabi_f2uiz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b2db      	uxtb	r3, r3
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bdb0      	pop	{r4, r5, r7, pc}
 8001d86:	bf00      	nop
 8001d88:	00000000 	.word	0x00000000
 8001d8c:	4052c000 	.word	0x4052c000
 8001d90:	42960000 	.word	0x42960000
 8001d94:	40160000 	.word	0x40160000
 8001d98:	40468000 	.word	0x40468000
 8001d9c:	40700000 	.word	0x40700000

08001da0 <wheel_speed_transfer_function>:
  * @brief  transfer function for the hall tachometer on ep4
  * @param  reading: the number of hall trigger per 10ms
  * @retval the wheel speed in rad/s, times 256
  * @note the result is multiplied by 256 so that the MSB represents the integer part of the number while LSB represents the part less than 1
  */
uint16_t wheel_speed_transfer_function(uint32_t reading){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	/**/
	float input = reading;
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7fe ff73 	bl	8000c94 <__aeabi_ui2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	617b      	str	r3, [r7, #20]
	const float tooth_per_rev = 14.0;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <wheel_speed_transfer_function+0x60>)
 8001db4:	613b      	str	r3, [r7, #16]
	float value = 0.0;
 8001db6:	f04f 0300 	mov.w	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
	value = input *100 /tooth_per_rev *pi *256; //TODO replace the 100 with constants of timers
 8001dbc:	4911      	ldr	r1, [pc, #68]	; (8001e04 <wheel_speed_transfer_function+0x64>)
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7fe ffc0 	bl	8000d44 <__aeabi_fmul>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	6939      	ldr	r1, [r7, #16]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f86f 	bl	8000eac <__aeabi_fdiv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <wheel_speed_transfer_function+0x68>)
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7fe ffb4 	bl	8000d44 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ffae 	bl	8000d44 <__aeabi_fmul>
 8001de8:	4603      	mov	r3, r0
 8001dea:	60fb      	str	r3, [r7, #12]
	return (uint16_t)value;
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f7ff f995 	bl	800111c <__aeabi_f2uiz>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b29b      	uxth	r3, r3

}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	41600000 	.word	0x41600000
 8001e04:	42c80000 	.word	0x42c80000
 8001e08:	40490fdb 	.word	0x40490fdb
 8001e0c:	00000000 	.word	0x00000000

08001e10 <tire_temp_transfer_function>:
/**
  * @brief  transfer function for the IR tire temperature sensor on ep4
  * @param  the absolute measured temperature, times 50(the direct output of the MLX90614 sensors)
  * @retval the tire temperature in degree C, times 2
  */
uint8_t tire_temp_transfer_function(uint16_t reading){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	80fb      	strh	r3, [r7, #6]
	float value;
	float input = reading;
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff39 	bl	8000c94 <__aeabi_ui2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	60fb      	str	r3, [r7, #12]
	value = (input/50-273.15)*2;
 8001e26:	4920      	ldr	r1, [pc, #128]	; (8001ea8 <tire_temp_transfer_function+0x98>)
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff f83f 	bl	8000eac <__aeabi_fdiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe faf9 	bl	8000428 <__aeabi_f2d>
 8001e36:	a31a      	add	r3, pc, #104	; (adr r3, 8001ea0 <tire_temp_transfer_function+0x90>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe f994 	bl	8000168 <__aeabi_dsub>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	f7fe f98e 	bl	800016c <__adddf3>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe fe16 	bl	8000a88 <__aeabi_d2f>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60bb      	str	r3, [r7, #8]

	if(value>=256)		{return 255;}
 8001e60:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001e64:	68b8      	ldr	r0, [r7, #8]
 8001e66:	f7ff f91f 	bl	80010a8 <__aeabi_fcmpge>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <tire_temp_transfer_function+0x64>
 8001e70:	23ff      	movs	r3, #255	; 0xff
 8001e72:	e00e      	b.n	8001e92 <tire_temp_transfer_function+0x82>
	else if(value<=0)	{return 0;}
 8001e74:	f04f 0100 	mov.w	r1, #0
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f7ff f90b 	bl	8001094 <__aeabi_fcmple>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <tire_temp_transfer_function+0x78>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e004      	b.n	8001e92 <tire_temp_transfer_function+0x82>
	else				{return (uint8_t)value;}
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f7ff f947 	bl	800111c <__aeabi_f2uiz>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	b2db      	uxtb	r3, r3
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	66666666 	.word	0x66666666
 8001ea4:	40711266 	.word	0x40711266
 8001ea8:	42480000 	.word	0x42480000

08001eac <steering_transfer_function>:
/**
  * @brief  transfer function for the amt22 steering encoder on ep4
  * @param  the 14 bit number returned by amt22
  * @retval the same 14bit number, adjusted by deducting 636 to make the center position appear as 0
  */
uint16_t steering_transfer_function(uint16_t reading){
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
	if(reading == 0xFFFF){
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d102      	bne.n	8001ec6 <steering_transfer_function+0x1a>
		return 0xFFFF;
 8001ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec4:	e00c      	b.n	8001ee0 <steering_transfer_function+0x34>
	}
	int value = reading-636;
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	f5a3 731f 	sub.w	r3, r3, #636	; 0x27c
 8001ecc:	60fb      	str	r3, [r7, #12]
	if(value<0){
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da03      	bge.n	8001edc <steering_transfer_function+0x30>
		value+=4096;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eda:	60fb      	str	r3, [r7, #12]
	}
	return value;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	b29b      	uxth	r3, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eee:	f001 f9c7 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef2:	f000 f813 	bl	8001f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef6:	f000 fa1f 	bl	8002338 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efa:	f000 fa07 	bl	800230c <MX_DMA_Init>
  MX_ADC1_Init();
 8001efe:	f000 f869 	bl	8001fd4 <MX_ADC1_Init>
  MX_CAN_Init();
 8001f02:	f000 f8ef 	bl	80020e4 <MX_CAN_Init>
  MX_I2C1_Init();
 8001f06:	f000 f925 	bl	8002154 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001f0a:	f000 f9d5 	bl	80022b8 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001f0e:	f000 f985 	bl	800221c <MX_TIM3_Init>
  MX_SPI2_Init();
 8001f12:	f000 f94d 	bl	80021b0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  user_main();
 8001f16:	f000 fe67 	bl	8002be8 <user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <main+0x30>

08001f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	2228      	movs	r2, #40	; 0x28
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f006 f978 	bl	8008220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 ffb8 	bl	8005ee8 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001f7e:	f000 fa93 	bl	80024a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2302      	movs	r3, #2
 8001f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f92:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f004 fa23 	bl	80063ec <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001fac:	f000 fa7c 	bl	80024a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f004 fbad 	bl	800671c <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001fc8:	f000 fa6e 	bl	80024a8 <Error_Handler>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3750      	adds	r7, #80	; 0x50
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001fe4:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <MX_ADC1_Init+0x108>)
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	; (80020e0 <MX_ADC1_Init+0x10c>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fea:	4b3c      	ldr	r3, [pc, #240]	; (80020dc <MX_ADC1_Init+0x108>)
 8001fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <MX_ADC1_Init+0x108>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ff8:	4b38      	ldr	r3, [pc, #224]	; (80020dc <MX_ADC1_Init+0x108>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ffe:	4b37      	ldr	r3, [pc, #220]	; (80020dc <MX_ADC1_Init+0x108>)
 8002000:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002006:	4b35      	ldr	r3, [pc, #212]	; (80020dc <MX_ADC1_Init+0x108>)
 8002008:	2200      	movs	r2, #0
 800200a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 800200c:	4b33      	ldr	r3, [pc, #204]	; (80020dc <MX_ADC1_Init+0x108>)
 800200e:	2206      	movs	r2, #6
 8002010:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002012:	4832      	ldr	r0, [pc, #200]	; (80020dc <MX_ADC1_Init+0x108>)
 8002014:	f001 f9ba 	bl	800338c <HAL_ADC_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800201e:	f000 fa43 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002022:	2306      	movs	r3, #6
 8002024:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002026:	2301      	movs	r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800202a:	2304      	movs	r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4619      	mov	r1, r3
 8002032:	482a      	ldr	r0, [pc, #168]	; (80020dc <MX_ADC1_Init+0x108>)
 8002034:	f001 fb7c 	bl	8003730 <HAL_ADC_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800203e:	f000 fa33 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002042:	2309      	movs	r3, #9
 8002044:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002046:	2302      	movs	r3, #2
 8002048:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800204a:	2306      	movs	r3, #6
 800204c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4822      	ldr	r0, [pc, #136]	; (80020dc <MX_ADC1_Init+0x108>)
 8002054:	f001 fb6c 	bl	8003730 <HAL_ADC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800205e:	f000 fa23 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002062:	2308      	movs	r3, #8
 8002064:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002066:	2303      	movs	r3, #3
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4619      	mov	r1, r3
 800206e:	481b      	ldr	r0, [pc, #108]	; (80020dc <MX_ADC1_Init+0x108>)
 8002070:	f001 fb5e 	bl	8003730 <HAL_ADC_ConfigChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800207a:	f000 fa15 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800207e:	2302      	movs	r3, #2
 8002080:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002082:	2304      	movs	r3, #4
 8002084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	4814      	ldr	r0, [pc, #80]	; (80020dc <MX_ADC1_Init+0x108>)
 800208c:	f001 fb50 	bl	8003730 <HAL_ADC_ConfigChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002096:	f000 fa07 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800209a:	2303      	movs	r3, #3
 800209c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800209e:	2305      	movs	r3, #5
 80020a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	480d      	ldr	r0, [pc, #52]	; (80020dc <MX_ADC1_Init+0x108>)
 80020a8:	f001 fb42 	bl	8003730 <HAL_ADC_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80020b2:	f000 f9f9 	bl	80024a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020b6:	2304      	movs	r3, #4
 80020b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80020ba:	2306      	movs	r3, #6
 80020bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4806      	ldr	r0, [pc, #24]	; (80020dc <MX_ADC1_Init+0x108>)
 80020c4:	f001 fb34 	bl	8003730 <HAL_ADC_ConfigChannel>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80020ce:	f000 f9eb 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200002ac 	.word	0x200002ac
 80020e0:	40012400 	.word	0x40012400

080020e4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <MX_CAN_Init+0x68>)
 80020ea:	4a19      	ldr	r2, [pc, #100]	; (8002150 <MX_CAN_Init+0x6c>)
 80020ec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80020ee:	4b17      	ldr	r3, [pc, #92]	; (800214c <MX_CAN_Init+0x68>)
 80020f0:	2208      	movs	r2, #8
 80020f2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <MX_CAN_Init+0x68>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <MX_CAN_Init+0x68>)
 80020fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002100:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <MX_CAN_Init+0x68>)
 8002104:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002108:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <MX_CAN_Init+0x68>)
 800210c:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8002110:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <MX_CAN_Init+0x68>)
 8002114:	2200      	movs	r2, #0
 8002116:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <MX_CAN_Init+0x68>)
 800211a:	2200      	movs	r2, #0
 800211c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <MX_CAN_Init+0x68>)
 8002120:	2200      	movs	r2, #0
 8002122:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <MX_CAN_Init+0x68>)
 8002126:	2200      	movs	r2, #0
 8002128:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <MX_CAN_Init+0x68>)
 800212c:	2200      	movs	r2, #0
 800212e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <MX_CAN_Init+0x68>)
 8002132:	2200      	movs	r2, #0
 8002134:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002136:	4805      	ldr	r0, [pc, #20]	; (800214c <MX_CAN_Init+0x68>)
 8002138:	f001 fcf3 	bl	8003b22 <HAL_CAN_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8002142:	f000 f9b1 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000320 	.word	0x20000320
 8002150:	40006400 	.word	0x40006400

08002154 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_I2C1_Init+0x50>)
 800215a:	4a13      	ldr	r2, [pc, #76]	; (80021a8 <MX_I2C1_Init+0x54>)
 800215c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002160:	4a12      	ldr	r2, [pc, #72]	; (80021ac <MX_I2C1_Init+0x58>)
 8002162:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_I2C1_Init+0x50>)
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002176:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_I2C1_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002186:	2200      	movs	r2, #0
 8002188:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_I2C1_Init+0x50>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MX_I2C1_Init+0x50>)
 8002192:	f003 f86d 	bl	8005270 <HAL_I2C_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800219c:	f000 f984 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000348 	.word	0x20000348
 80021a8:	40005400 	.word	0x40005400
 80021ac:	000186a0 	.word	0x000186a0

080021b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021b4:	4b17      	ldr	r3, [pc, #92]	; (8002214 <MX_SPI2_Init+0x64>)
 80021b6:	4a18      	ldr	r2, [pc, #96]	; (8002218 <MX_SPI2_Init+0x68>)
 80021b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <MX_SPI2_Init+0x64>)
 80021bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <MX_SPI2_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c8:	4b12      	ldr	r3, [pc, #72]	; (8002214 <MX_SPI2_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_SPI2_Init+0x64>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <MX_SPI2_Init+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_SPI2_Init+0x64>)
 80021dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_SPI2_Init+0x64>)
 80021e4:	2228      	movs	r2, #40	; 0x28
 80021e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <MX_SPI2_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_SPI2_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <MX_SPI2_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_SPI2_Init+0x64>)
 80021fc:	220a      	movs	r2, #10
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <MX_SPI2_Init+0x64>)
 8002202:	f004 fb41 	bl	8006888 <HAL_SPI_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800220c:	f000 f94c 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000039c 	.word	0x2000039c
 8002218:	40003800 	.word	0x40003800

0800221c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <MX_TIM3_Init+0x94>)
 800223a:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <MX_TIM3_Init+0x98>)
 800223c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <MX_TIM3_Init+0x94>)
 8002240:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <MX_TIM3_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <MX_TIM3_Init+0x94>)
 800224e:	2263      	movs	r2, #99	; 0x63
 8002250:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002252:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <MX_TIM3_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <MX_TIM3_Init+0x94>)
 800225a:	2280      	movs	r2, #128	; 0x80
 800225c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800225e:	4814      	ldr	r0, [pc, #80]	; (80022b0 <MX_TIM3_Init+0x94>)
 8002260:	f004 fee2 	bl	8007028 <HAL_TIM_Base_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800226a:	f000 f91d 	bl	80024a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800226e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	4619      	mov	r1, r3
 800227a:	480d      	ldr	r0, [pc, #52]	; (80022b0 <MX_TIM3_Init+0x94>)
 800227c:	f005 f87e 	bl	800737c <HAL_TIM_ConfigClockSource>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002286:	f000 f90f 	bl	80024a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002292:	463b      	mov	r3, r7
 8002294:	4619      	mov	r1, r3
 8002296:	4806      	ldr	r0, [pc, #24]	; (80022b0 <MX_TIM3_Init+0x94>)
 8002298:	f005 fa50 	bl	800773c <HAL_TIMEx_MasterConfigSynchronization>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80022a2:	f000 f901 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200003f4 	.word	0x200003f4
 80022b4:	40000400 	.word	0x40000400

080022b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <MX_USART1_UART_Init+0x50>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b09      	ldr	r3, [pc, #36]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <MX_USART1_UART_Init+0x4c>)
 80022f0:	f005 fa94 	bl	800781c <HAL_UART_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022fa:	f000 f8d5 	bl	80024a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000043c 	.word	0x2000043c
 8002308:	40013800 	.word	0x40013800

0800230c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <MX_DMA_Init+0x28>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4a07      	ldr	r2, [pc, #28]	; (8002334 <MX_DMA_Init+0x28>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6153      	str	r3, [r2, #20]
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <MX_DMA_Init+0x28>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]

}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40021000 	.word	0x40021000

08002338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800234c:	4b51      	ldr	r3, [pc, #324]	; (8002494 <MX_GPIO_Init+0x15c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a50      	ldr	r2, [pc, #320]	; (8002494 <MX_GPIO_Init+0x15c>)
 8002352:	f043 0310 	orr.w	r3, r3, #16
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b4e      	ldr	r3, [pc, #312]	; (8002494 <MX_GPIO_Init+0x15c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <MX_GPIO_Init+0x15c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <MX_GPIO_Init+0x15c>)
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b48      	ldr	r3, [pc, #288]	; (8002494 <MX_GPIO_Init+0x15c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0320 	and.w	r3, r3, #32
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237c:	4b45      	ldr	r3, [pc, #276]	; (8002494 <MX_GPIO_Init+0x15c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a44      	ldr	r2, [pc, #272]	; (8002494 <MX_GPIO_Init+0x15c>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <MX_GPIO_Init+0x15c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <MX_GPIO_Init+0x15c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a3e      	ldr	r2, [pc, #248]	; (8002494 <MX_GPIO_Init+0x15c>)
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <MX_GPIO_Init+0x15c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b2:	4839      	ldr	r0, [pc, #228]	; (8002498 <MX_GPIO_Init+0x160>)
 80023b4:	f002 ff13 	bl	80051de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEER_SENS_CS_GPIO_Port, STEER_SENS_CS_Pin, GPIO_PIN_SET);
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023be:	4836      	ldr	r0, [pc, #216]	; (8002498 <MX_GPIO_Init+0x160>)
 80023c0:	f002 ff0d 	bl	80051de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_LED_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 80023c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ca:	2301      	movs	r3, #1
 80023cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d2:	2302      	movs	r3, #2
 80023d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 80023d6:	f107 0310 	add.w	r3, r7, #16
 80023da:	4619      	mov	r1, r3
 80023dc:	482e      	ldr	r0, [pc, #184]	; (8002498 <MX_GPIO_Init+0x160>)
 80023de:	f002 fca7 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : STEER_SENS_CS_Pin */
  GPIO_InitStruct.Pin = STEER_SENS_CS_Pin;
 80023e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023f0:	2301      	movs	r3, #1
 80023f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STEER_SENS_CS_GPIO_Port, &GPIO_InitStruct);
 80023f4:	f107 0310 	add.w	r3, r7, #16
 80023f8:	4619      	mov	r1, r3
 80023fa:	4827      	ldr	r0, [pc, #156]	; (8002498 <MX_GPIO_Init+0x160>)
 80023fc:	f002 fc98 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002406:	4b25      	ldr	r3, [pc, #148]	; (800249c <MX_GPIO_Init+0x164>)
 8002408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240e:	f107 0310 	add.w	r3, r7, #16
 8002412:	4619      	mov	r1, r3
 8002414:	4820      	ldr	r0, [pc, #128]	; (8002498 <MX_GPIO_Init+0x160>)
 8002416:	f002 fc8b 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : BSE_MICRO_Pin APPS_MICRO_Pin LEFT_HALL_SENS_Pin */
  GPIO_InitStruct.Pin = BSE_MICRO_Pin|APPS_MICRO_Pin|LEFT_HALL_SENS_Pin;
 800241a:	2383      	movs	r3, #131	; 0x83
 800241c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_GPIO_Init+0x164>)
 8002420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002422:	2301      	movs	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0310 	add.w	r3, r7, #16
 800242a:	4619      	mov	r1, r3
 800242c:	481c      	ldr	r0, [pc, #112]	; (80024a0 <MX_GPIO_Init+0x168>)
 800242e:	f002 fc7f 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RIGHT_HALL_SENS_Pin */
  GPIO_InitStruct.Pin = RIGHT_HALL_SENS_Pin;
 8002432:	2320      	movs	r3, #32
 8002434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_GPIO_Init+0x164>)
 8002438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243a:	2301      	movs	r3, #1
 800243c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RIGHT_HALL_SENS_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4619      	mov	r1, r3
 8002444:	4817      	ldr	r0, [pc, #92]	; (80024a4 <MX_GPIO_Init+0x16c>)
 8002446:	f002 fc73 	bl	8004d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2006      	movs	r0, #6
 8002450:	f002 fa9b 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002454:	2006      	movs	r0, #6
 8002456:	f002 fab4 	bl	80049c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2007      	movs	r0, #7
 8002460:	f002 fa93 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002464:	2007      	movs	r0, #7
 8002466:	f002 faac 	bl	80049c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2017      	movs	r0, #23
 8002470:	f002 fa8b 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002474:	2017      	movs	r0, #23
 8002476:	f002 faa4 	bl	80049c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2028      	movs	r0, #40	; 0x28
 8002480:	f002 fa83 	bl	800498a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002484:	2028      	movs	r0, #40	; 0x28
 8002486:	f002 fa9c 	bl	80049c2 <HAL_NVIC_EnableIRQ>

}
 800248a:	bf00      	nop
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	40011000 	.word	0x40011000
 800249c:	10210000 	.word	0x10210000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00

080024a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ac:	b672      	cpsid	i
}
 80024ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 80024b0:	20c8      	movs	r0, #200	; 0xc8
 80024b2:	f000 ff47 	bl	8003344 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80024b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <Error_Handler+0x1c>)
 80024bc:	f002 fea7 	bl	800520e <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 80024c0:	e7f6      	b.n	80024b0 <Error_Handler+0x8>
 80024c2:	bf00      	nop
 80024c4:	40011000 	.word	0x40011000

080024c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80024e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80024e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80024f0:	e000      	b.n	80024f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80024f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80024f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f9      	beq.n	80024f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80024fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002508:	687b      	ldr	r3, [r7, #4]
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
//	return ch;

	//print to SWV
	// Write character to ITM ch.0
	 ITM_SendChar(ch);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ffd2 	bl	80024c8 <ITM_SendChar>
	 return(ch);
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <HAL_MspInit+0x5c>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_MspInit+0x5c>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6193      	str	r3, [r2, #24]
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_MspInit+0x5c>)
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	4b0f      	ldr	r3, [pc, #60]	; (800258c <HAL_MspInit+0x5c>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_MspInit+0x5c>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	61d3      	str	r3, [r2, #28]
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <HAL_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_MspInit+0x60>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_MspInit+0x60>)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	40010000 	.word	0x40010000

08002594 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0318 	add.w	r3, r7, #24
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a33      	ldr	r2, [pc, #204]	; (800267c <HAL_ADC_MspInit+0xe8>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d15f      	bne.n	8002674 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025b4:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a31      	ldr	r2, [pc, #196]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_ADC_MspInit+0xec>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 80025fc:	235c      	movs	r3, #92	; 0x5c
 80025fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002600:	2303      	movs	r3, #3
 8002602:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0318 	add.w	r3, r7, #24
 8002608:	4619      	mov	r1, r3
 800260a:	481e      	ldr	r0, [pc, #120]	; (8002684 <HAL_ADC_MspInit+0xf0>)
 800260c:	f002 fb90 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002610:	2303      	movs	r3, #3
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002614:	2303      	movs	r3, #3
 8002616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	4619      	mov	r1, r3
 800261e:	481a      	ldr	r0, [pc, #104]	; (8002688 <HAL_ADC_MspInit+0xf4>)
 8002620:	f002 fb86 	bl	8004d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002626:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <HAL_ADC_MspInit+0xfc>)
 8002628:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_ADC_MspInit+0xf8>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <HAL_ADC_MspInit+0xf8>)
 800263e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002642:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002646:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800264a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_ADC_MspInit+0xf8>)
 800264e:	2220      	movs	r2, #32
 8002650:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002654:	2200      	movs	r2, #0
 8002656:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002658:	480c      	ldr	r0, [pc, #48]	; (800268c <HAL_ADC_MspInit+0xf8>)
 800265a:	f002 f9d1 	bl	8004a00 <HAL_DMA_Init>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8002664:	f7ff ff20 	bl	80024a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a08      	ldr	r2, [pc, #32]	; (800268c <HAL_ADC_MspInit+0xf8>)
 800266c:	621a      	str	r2, [r3, #32]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_ADC_MspInit+0xf8>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002674:	bf00      	nop
 8002676:	3728      	adds	r7, #40	; 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012400 	.word	0x40012400
 8002680:	40021000 	.word	0x40021000
 8002684:	40010800 	.word	0x40010800
 8002688:	40010c00 	.word	0x40010c00
 800268c:	200002dc 	.word	0x200002dc
 8002690:	40020008 	.word	0x40020008

08002694 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a29      	ldr	r2, [pc, #164]	; (8002754 <HAL_CAN_MspInit+0xc0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d14b      	bne.n	800274c <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80026b4:	4b28      	ldr	r3, [pc, #160]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026be:	61d3      	str	r3, [r2, #28]
 80026c0:	4b25      	ldr	r3, [pc, #148]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4a21      	ldr	r2, [pc, #132]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6193      	str	r3, [r2, #24]
 80026d8:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <HAL_CAN_MspInit+0xc4>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	4818      	ldr	r0, [pc, #96]	; (800275c <HAL_CAN_MspInit+0xc8>)
 80026fa:	f002 fb19 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002708:	2303      	movs	r3, #3
 800270a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4812      	ldr	r0, [pc, #72]	; (800275c <HAL_CAN_MspInit+0xc8>)
 8002714:	f002 fb0c 	bl	8004d30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_CAN_MspInit+0xcc>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_CAN_MspInit+0xcc>)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	2014      	movs	r0, #20
 8002742:	f002 f922 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002746:	2014      	movs	r0, #20
 8002748:	f002 f93b 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800274c:	bf00      	nop
 800274e:	3728      	adds	r7, #40	; 0x28
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40006400 	.word	0x40006400
 8002758:	40021000 	.word	0x40021000
 800275c:	40010c00 	.word	0x40010c00
 8002760:	40010000 	.word	0x40010000

08002764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0310 	add.w	r3, r7, #16
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a15      	ldr	r2, [pc, #84]	; (80027d4 <HAL_I2C_MspInit+0x70>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d123      	bne.n	80027cc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a13      	ldr	r2, [pc, #76]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6193      	str	r3, [r2, #24]
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800279c:	23c0      	movs	r3, #192	; 0xc0
 800279e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a0:	2312      	movs	r3, #18
 80027a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a4:	2303      	movs	r3, #3
 80027a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4619      	mov	r1, r3
 80027ae:	480b      	ldr	r0, [pc, #44]	; (80027dc <HAL_I2C_MspInit+0x78>)
 80027b0:	f002 fabe 	bl	8004d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 80027ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027be:	61d3      	str	r3, [r2, #28]
 80027c0:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_I2C_MspInit+0x74>)
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40005400 	.word	0x40005400
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40010c00 	.word	0x40010c00

080027e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0310 	add.w	r3, r7, #16
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a20      	ldr	r2, [pc, #128]	; (800287c <HAL_SPI_MspInit+0x9c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d139      	bne.n	8002874 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002800:	4b1f      	ldr	r3, [pc, #124]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 8002806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800280a:	61d3      	str	r3, [r2, #28]
 800280c:	4b1c      	ldr	r3, [pc, #112]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	4a18      	ldr	r2, [pc, #96]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6193      	str	r3, [r2, #24]
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_SPI_MspInit+0xa0>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002830:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800283a:	2303      	movs	r3, #3
 800283c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4619      	mov	r1, r3
 8002844:	480f      	ldr	r0, [pc, #60]	; (8002884 <HAL_SPI_MspInit+0xa4>)
 8002846:	f002 fa73 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800284a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800284e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	4619      	mov	r1, r3
 800285e:	4809      	ldr	r0, [pc, #36]	; (8002884 <HAL_SPI_MspInit+0xa4>)
 8002860:	f002 fa66 	bl	8004d30 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	2024      	movs	r0, #36	; 0x24
 800286a:	f002 f88e 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800286e:	2024      	movs	r0, #36	; 0x24
 8002870:	f002 f8a7 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40003800 	.word	0x40003800
 8002880:	40021000 	.word	0x40021000
 8002884:	40010c00 	.word	0x40010c00

08002888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_TIM_Base_MspInit+0x44>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d113      	bne.n	80028c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <HAL_TIM_Base_MspInit+0x48>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <HAL_TIM_Base_MspInit+0x48>)
 80028a0:	f043 0302 	orr.w	r3, r3, #2
 80028a4:	61d3      	str	r3, [r2, #28]
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_TIM_Base_MspInit+0x48>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	201d      	movs	r0, #29
 80028b8:	f002 f867 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028bc:	201d      	movs	r0, #29
 80028be:	f002 f880 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40000400 	.word	0x40000400
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0310 	add.w	r3, r7, #16
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_UART_MspInit+0x9c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d139      	bne.n	8002968 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028f4:	4b1f      	ldr	r3, [pc, #124]	; (8002974 <HAL_UART_MspInit+0xa0>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a1e      	ldr	r2, [pc, #120]	; (8002974 <HAL_UART_MspInit+0xa0>)
 80028fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_UART_MspInit+0xa0>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_UART_MspInit+0xa0>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a18      	ldr	r2, [pc, #96]	; (8002974 <HAL_UART_MspInit+0xa0>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6193      	str	r3, [r2, #24]
 8002918:	4b16      	ldr	r3, [pc, #88]	; (8002974 <HAL_UART_MspInit+0xa0>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	4619      	mov	r1, r3
 8002938:	480f      	ldr	r0, [pc, #60]	; (8002978 <HAL_UART_MspInit+0xa4>)
 800293a:	f002 f9f9 	bl	8004d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002942:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294c:	f107 0310 	add.w	r3, r7, #16
 8002950:	4619      	mov	r1, r3
 8002952:	4809      	ldr	r0, [pc, #36]	; (8002978 <HAL_UART_MspInit+0xa4>)
 8002954:	f002 f9ec 	bl	8004d30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	2025      	movs	r0, #37	; 0x25
 800295e:	f002 f814 	bl	800498a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002962:	2025      	movs	r0, #37	; 0x25
 8002964:	f002 f82d 	bl	80049c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002968:	bf00      	nop
 800296a:	3720      	adds	r7, #32
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40013800 	.word	0x40013800
 8002974:	40021000 	.word	0x40021000
 8002978:	40010800 	.word	0x40010800

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002980:	e7fe      	b.n	8002980 <NMI_Handler+0x4>

08002982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002986:	e7fe      	b.n	8002986 <HardFault_Handler+0x4>

08002988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800298c:	e7fe      	b.n	800298c <MemManage_Handler+0x4>

0800298e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <BusFault_Handler+0x4>

08002994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler+0x4>

0800299a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c2:	f000 fca3 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}

080029ca <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BSE_MICRO_Pin);
 80029ce:	2001      	movs	r0, #1
 80029d0:	f002 fc36 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029d4:	bf00      	nop
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(APPS_MICRO_Pin);
 80029dc:	2002      	movs	r0, #2
 80029de:	f002 fc2f 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80029ee:	f001 fcb0 	bl	8004352 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000320 	.word	0x20000320

080029fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_HALL_SENS_Pin);
 8002a00:	2020      	movs	r0, #32
 8002a02:	f002 fc1d 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_HALL_SENS_Pin);
 8002a06:	2080      	movs	r0, #128	; 0x80
 8002a08:	f002 fc1a 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <TIM3_IRQHandler+0x10>)
 8002a16:	f004 fba9 	bl	800716c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200003f4 	.word	0x200003f4

08002a24 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <SPI2_IRQHandler+0x10>)
 8002a2a:	f004 f953 	bl	8006cd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000039c 	.word	0x2000039c

08002a38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a3c:	4802      	ldr	r0, [pc, #8]	; (8002a48 <USART1_IRQHandler+0x10>)
 8002a3e:	f004 ffcd 	bl	80079dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	2000043c 	.word	0x2000043c

08002a4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002a50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002a54:	f002 fbf4 	bl	8005240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
	return 1;
 8002a60:	2301      	movs	r3, #1
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr

08002a6a <_kill>:

int _kill(int pid, int sig)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a74:	f005 fbaa 	bl	80081cc <__errno>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2216      	movs	r2, #22
 8002a7c:	601a      	str	r2, [r3, #0]
	return -1;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_exit>:

void _exit (int status)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a92:	f04f 31ff 	mov.w	r1, #4294967295
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ffe7 	bl	8002a6a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a9c:	e7fe      	b.n	8002a9c <_exit+0x12>

08002a9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00a      	b.n	8002ac6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ab0:	f3af 8000 	nop.w
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	60ba      	str	r2, [r7, #8]
 8002abc:	b2ca      	uxtb	r2, r1
 8002abe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	dbf0      	blt.n	8002ab0 <_read+0x12>
	}

return len;
 8002ace:	687b      	ldr	r3, [r7, #4]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e009      	b.n	8002afe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	60ba      	str	r2, [r7, #8]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd0e 	bl	8002514 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	3301      	adds	r3, #1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	dbf1      	blt.n	8002aea <_write+0x12>
	}
	return len;
 8002b06:	687b      	ldr	r3, [r7, #4]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_close>:

int _close(int file)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
	return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b36:	605a      	str	r2, [r3, #4]
	return 0;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <_isatty>:

int _isatty(int file)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
	return 0;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <_sbrk+0x5c>)
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <_sbrk+0x60>)
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <_sbrk+0x64>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d102      	bne.n	8002b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_sbrk+0x64>)
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <_sbrk+0x68>)
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b92:	4b10      	ldr	r3, [pc, #64]	; (8002bd4 <_sbrk+0x64>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d207      	bcs.n	8002bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ba0:	f005 fb14 	bl	80081cc <__errno>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002baa:	f04f 33ff 	mov.w	r3, #4294967295
 8002bae:	e009      	b.n	8002bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bb0:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_sbrk+0x64>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_sbrk+0x64>)
 8002bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20005000 	.word	0x20005000
 8002bd0:	00000400 	.word	0x00000400
 8002bd4:	20000480 	.word	0x20000480
 8002bd8:	200004f8 	.word	0x200004f8

08002bdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <user_main>:
  * 		including the super loop.
  * 		Should be called once after all auto-gererated init functions in main()
  * @param  None
  * @retval None
  */
void user_main(){
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b094      	sub	sp, #80	; 0x50
 8002bec:	af00      	add	r7, sp, #0
	 /*ADC1 DMA mode Start*/
	 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_value,6);
 8002bee:	2206      	movs	r2, #6
 8002bf0:	49bd      	ldr	r1, [pc, #756]	; (8002ee8 <user_main+0x300>)
 8002bf2:	48be      	ldr	r0, [pc, #760]	; (8002eec <user_main+0x304>)
 8002bf4:	f000 fca2 	bl	800353c <HAL_ADC_Start_DMA>

	 /*timer3 interrupt mode start, used in hall sensors calculations*/
	 HAL_TIM_Base_Start_IT(&htim3);
 8002bf8:	48bd      	ldr	r0, [pc, #756]	; (8002ef0 <user_main+0x308>)
 8002bfa:	f004 fa65 	bl	80070c8 <HAL_TIM_Base_Start_IT>

	/*CAN receive filter configuration "for testing purposes"*/
	  CAN_FilterTypeDef canfilterconfig = {
 8002bfe:	4bbd      	ldr	r3, [pc, #756]	; (8002ef4 <user_main+0x30c>)
 8002c00:	1d3c      	adds	r4, r7, #4
 8002c02:	461d      	mov	r5, r3
 8002c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c10:	e884 0003 	stmia.w	r4, {r0, r1}
		  .FilterIdHigh = 0x080AD092>>13,
		  .FilterIdLow = 0x080AD092>>13,
		  .FilterMaskIdHigh = 0x0000,
		  .FilterMaskIdLow = 0x0000
	  };
	  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!=HAL_OK){
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	48b7      	ldr	r0, [pc, #732]	; (8002ef8 <user_main+0x310>)
 8002c1a:	f001 f87d 	bl	8003d18 <HAL_CAN_ConfigFilter>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <user_main+0x40>
		  Error_Handler();
 8002c24:	f7ff fc40 	bl	80024a8 <Error_Handler>
	  }
	 /*turn on receiving interrupt, then starts the CAN module*/
	  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8002c28:	2102      	movs	r1, #2
 8002c2a:	48b3      	ldr	r0, [pc, #716]	; (8002ef8 <user_main+0x310>)
 8002c2c:	f001 fb6c 	bl	8004308 <HAL_CAN_ActivateNotification>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <user_main+0x52>
		  Error_Handler();
 8002c36:	f7ff fc37 	bl	80024a8 <Error_Handler>
	  }
	  HAL_CAN_Start(&hcan);
 8002c3a:	48af      	ldr	r0, [pc, #700]	; (8002ef8 <user_main+0x310>)
 8002c3c:	f001 f935 	bl	8003eaa <HAL_CAN_Start>
	  /*wait until the accel pedal is released, then zero the APPS*/
	  while(HAL_GPIO_ReadPin(APPS_MICRO_GPIO_Port,APPS_MICRO_Pin));
 8002c40:	bf00      	nop
 8002c42:	2102      	movs	r1, #2
 8002c44:	48ad      	ldr	r0, [pc, #692]	; (8002efc <user_main+0x314>)
 8002c46:	f002 fab3 	bl	80051b0 <HAL_GPIO_ReadPin>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f8      	bne.n	8002c42 <user_main+0x5a>
	  throttle_sensors_calibration(ADC_value[ADC_DMA_ARRAY_RANK_APPS1],1);
 8002c50:	4ba5      	ldr	r3, [pc, #660]	; (8002ee8 <user_main+0x300>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fc20 	bl	800149c <throttle_sensors_calibration>
	  throttle_sensors_calibration(ADC_value[ADC_DMA_ARRAY_RANK_APPS2],2);
 8002c5c:	4ba2      	ldr	r3, [pc, #648]	; (8002ee8 <user_main+0x300>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	2102      	movs	r1, #2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fc1a 	bl	800149c <throttle_sensors_calibration>
	  throttle_sensors_calibration(ADC_value[ADC_DMA_ARRAY_RANK_BSE],0);
 8002c68:	4b9f      	ldr	r3, [pc, #636]	; (8002ee8 <user_main+0x300>)
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fc14 	bl	800149c <throttle_sensors_calibration>

#ifdef USE_LIVE_EXPRESSIONS
			  t_start_cycle = HAL_GetTick();
#endif
		  /*APPS and BSE raw value obtaining and test output */
		  uint32_t APPS1test = ADC_value[ADC_DMA_ARRAY_RANK_APPS1];
 8002c74:	4b9c      	ldr	r3, [pc, #624]	; (8002ee8 <user_main+0x300>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
		  uint32_t APPS2test = ADC_value[ADC_DMA_ARRAY_RANK_APPS2];
 8002c7a:	4b9b      	ldr	r3, [pc, #620]	; (8002ee8 <user_main+0x300>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
		  uint32_t BSEtest = ADC_value[ADC_DMA_ARRAY_RANK_BSE];
 8002c80:	4b99      	ldr	r3, [pc, #612]	; (8002ee8 <user_main+0x300>)
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	647b      	str	r3, [r7, #68]	; 0x44
		  /*the pinsare connected to NO pin on the switch, which is connected to Gnd, and the switch is pressed when
		   *the pedals are at the fully extended state. So, The boolean state of the pin matches whether the pedal
		   *is pressed or not.*/
		  uint8_t APPSmicro = HAL_GPIO_ReadPin(APPS_MICRO_GPIO_Port,APPS_MICRO_Pin);
 8002c86:	2102      	movs	r1, #2
 8002c88:	489c      	ldr	r0, [pc, #624]	; (8002efc <user_main+0x314>)
 8002c8a:	f002 fa91 	bl	80051b0 <HAL_GPIO_ReadPin>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  uint8_t BSEmicro = HAL_GPIO_ReadPin(BSE_MICRO_GPIO_Port,BSE_MICRO_Pin);
 8002c94:	2101      	movs	r1, #1
 8002c96:	4899      	ldr	r0, [pc, #612]	; (8002efc <user_main+0x314>)
 8002c98:	f002 fa8a 	bl	80051b0 <HAL_GPIO_ReadPin>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		  /*APPS&BSE value preprocessing*/
		  uint8_t APPS1Value = throttle_sensors_transfer_function(APPS1test,1);
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002ca6:	f7fe fdef 	bl	8001888 <throttle_sensors_transfer_function>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
		  uint8_t APPS2Value = throttle_sensors_transfer_function(APPS2test,2);
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002cb4:	f7fe fde8 	bl	8001888 <throttle_sensors_transfer_function>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
		  uint8_t BSEValue = throttle_sensors_transfer_function(BSEtest,0);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002cc2:	f7fe fde1 	bl	8001888 <throttle_sensors_transfer_function>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#ifdef USE_LIVE_EXPRESSIONS
		  t_after_pedal = HAL_GetTick();
#endif

		  /*wheel speed output*/
		  uint16_t wheel_speedL = wheel_speed_transfer_function(L_hall_counter_result);
 8002ccc:	4b8c      	ldr	r3, [pc, #560]	; (8002f00 <user_main+0x318>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f865 	bl	8001da0 <wheel_speed_transfer_function>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	87bb      	strh	r3, [r7, #60]	; 0x3c
		  uint16_t wheel_speedR = wheel_speed_transfer_function(R_hall_counter_result);
 8002cda:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <user_main+0x31c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f85e 	bl	8001da0 <wheel_speed_transfer_function>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	877b      	strh	r3, [r7, #58]	; 0x3a

		  /*temp sensor MLX90614 read API */
		  //HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1,0x5A<<1,2,2);
		  uint8_t temp_L1 = tire_temp_transfer_function( MLX90614_ReadReg(I2C_TEMP_L1_ID,I2C_TEMP_ADDR,0) );
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2107      	movs	r1, #7
 8002cec:	205a      	movs	r0, #90	; 0x5a
 8002cee:	f7fe fa63 	bl	80011b8 <MLX90614_ReadReg>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f88b 	bl	8001e10 <tire_temp_transfer_function>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		  uint8_t temp_L2 = tire_temp_transfer_function( MLX90614_ReadReg(I2C_TEMP_L2_ID,I2C_TEMP_ADDR,0) );
 8002d00:	2200      	movs	r2, #0
 8002d02:	2107      	movs	r1, #7
 8002d04:	205b      	movs	r0, #91	; 0x5b
 8002d06:	f7fe fa57 	bl	80011b8 <MLX90614_ReadReg>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff f87f 	bl	8001e10 <tire_temp_transfer_function>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		  uint8_t temp_R1 = tire_temp_transfer_function( MLX90614_ReadReg(I2C_TEMP_R1_ID,I2C_TEMP_ADDR,0) );
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2107      	movs	r1, #7
 8002d1c:	205c      	movs	r0, #92	; 0x5c
 8002d1e:	f7fe fa4b 	bl	80011b8 <MLX90614_ReadReg>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff f873 	bl	8001e10 <tire_temp_transfer_function>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  uint8_t temp_R2 = tire_temp_transfer_function( MLX90614_ReadReg(I2C_TEMP_R2_ID,I2C_TEMP_ADDR,0) );
 8002d30:	2200      	movs	r2, #0
 8002d32:	2107      	movs	r1, #7
 8002d34:	205d      	movs	r0, #93	; 0x5d
 8002d36:	f7fe fa3f 	bl	80011b8 <MLX90614_ReadReg>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f867 	bl	8001e10 <tire_temp_transfer_function>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		  if(HAL_I2C_GetError(&hi2c1) == 0x202){
 8002d48:	486f      	ldr	r0, [pc, #444]	; (8002f08 <user_main+0x320>)
 8002d4a:	f002 fe3d 	bl	80059c8 <HAL_I2C_GetError>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f240 2202 	movw	r2, #514	; 0x202
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d106      	bne.n	8002d66 <user_main+0x17e>
			  if( I2C_start_error_handler() != HAL_OK){
 8002d58:	f000 f9ac 	bl	80030b4 <I2C_start_error_handler>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <user_main+0x17e>
				  HAL_NVIC_SystemReset();
 8002d62:	f001 fe3c 	bl	80049de <HAL_NVIC_SystemReset>
			  }
		  }
		  //uint8_t temp_L1 = 7;

		  /*grabbing the suspension travel data*/
		  uint8_t travel_L = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_LTRAVEL]);
 8002d66:	4b60      	ldr	r3, [pc, #384]	; (8002ee8 <user_main+0x300>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe ff9c 	bl	8001ca8 <suspension_travel_transfer_function>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		  uint8_t travel_R = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_RTRAVEL]);
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <user_main+0x300>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff94 	bl	8001ca8 <suspension_travel_transfer_function>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

		  /*grabbing the oil pressure sensor data*/
		  uint8_t oil_pressure = oil_pressure_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_OILPRESSURE]);
 8002d86:	4b58      	ldr	r3, [pc, #352]	; (8002ee8 <user_main+0x300>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe ff1c 	bl	8001bc8 <oil_pressure_transfer_function>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		  /*grab the absolute encoder data
		   * TODO: delays too long. AMT22 only requires 3 microseconds between transfer*/
		  uint16_t amt22_pos = steering_transfer_function( getPositionSPI(&hspi2, STEER_SENS_CS_GPIO_Port, STEER_SENS_CS_Pin, 12) );
 8002d96:	230c      	movs	r3, #12
 8002d98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9c:	495b      	ldr	r1, [pc, #364]	; (8002f0c <user_main+0x324>)
 8002d9e:	485c      	ldr	r0, [pc, #368]	; (8002f10 <user_main+0x328>)
 8002da0:	f7fe faf2 	bl	8001388 <getPositionSPI>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f880 	bl	8001eac <steering_transfer_function>
 8002dac:	4603      	mov	r3, r0
 8002dae:	863b      	strh	r3, [r7, #48]	; 0x30
		  live_wheel = wheel_speedL;
		  t_before_can = HAL_GetTick();
#endif

		  /*loading data into message array*/
		  CAN_TxData_1[0] = (uint8_t)(wheel_speedL>>8);
 8002db0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <user_main+0x32c>)
 8002dba:	701a      	strb	r2, [r3, #0]
		  CAN_TxData_1[1] = (uint8_t)(wheel_speedL & 0x00FF);
 8002dbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <user_main+0x32c>)
 8002dc2:	705a      	strb	r2, [r3, #1]
		  CAN_TxData_1[2] = (uint8_t)(wheel_speedR>>8);
 8002dc4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <user_main+0x32c>)
 8002dce:	709a      	strb	r2, [r3, #2]
		  CAN_TxData_1[3] = (uint8_t)(wheel_speedR & 0x00FF);
 8002dd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <user_main+0x32c>)
 8002dd6:	70da      	strb	r2, [r3, #3]
		  CAN_TxData_1[4] = temp_L1;
 8002dd8:	4a4e      	ldr	r2, [pc, #312]	; (8002f14 <user_main+0x32c>)
 8002dda:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002dde:	7113      	strb	r3, [r2, #4]
		  CAN_TxData_1[5] = temp_L2;
 8002de0:	4a4c      	ldr	r2, [pc, #304]	; (8002f14 <user_main+0x32c>)
 8002de2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002de6:	7153      	strb	r3, [r2, #5]
		  CAN_TxData_1[6] = temp_R1;
 8002de8:	4a4a      	ldr	r2, [pc, #296]	; (8002f14 <user_main+0x32c>)
 8002dea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dee:	7193      	strb	r3, [r2, #6]
		  CAN_TxData_1[7] = temp_R2;
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <user_main+0x32c>)
 8002df2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002df6:	71d3      	strb	r3, [r2, #7]

		  CAN_TxData_2[0] = BSEValue;
 8002df8:	4a47      	ldr	r2, [pc, #284]	; (8002f18 <user_main+0x330>)
 8002dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002dfe:	7013      	strb	r3, [r2, #0]

		  /*check whether the 2 APPS read different values*/
		  /*if they are out of bounds, throw out of bounds simply*/
		  if(APPS1Value==255 || APPS2Value==255 || APPS1Value==0 || APPS2Value==0){
 8002e00:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d00b      	beq.n	8002e20 <user_main+0x238>
 8002e08:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002e0c:	2bff      	cmp	r3, #255	; 0xff
 8002e0e:	d007      	beq.n	8002e20 <user_main+0x238>
 8002e10:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <user_main+0x238>
 8002e18:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d108      	bne.n	8002e32 <user_main+0x24a>
			  CAN_TxData_2[1] = APPS1Value;
 8002e20:	4a3d      	ldr	r2, [pc, #244]	; (8002f18 <user_main+0x330>)
 8002e22:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002e26:	7053      	strb	r3, [r2, #1]
			  CAN_TxData_2[2] = APPS2Value;
 8002e28:	4a3b      	ldr	r2, [pc, #236]	; (8002f18 <user_main+0x330>)
 8002e2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002e2e:	7093      	strb	r3, [r2, #2]
 8002e30:	e01b      	b.n	8002e6a <user_main+0x282>
		  }
		  else{
			  int deviation = (int)APPS1Value-(int)APPS2Value;
 8002e32:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002e36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
			  if(deviation <= 25 && deviation >= -25){
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	2b19      	cmp	r3, #25
 8002e42:	dc0c      	bgt.n	8002e5e <user_main+0x276>
 8002e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e46:	f113 0f19 	cmn.w	r3, #25
 8002e4a:	db08      	blt.n	8002e5e <user_main+0x276>
				  CAN_TxData_2[1] = APPS1Value;
 8002e4c:	4a32      	ldr	r2, [pc, #200]	; (8002f18 <user_main+0x330>)
 8002e4e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002e52:	7053      	strb	r3, [r2, #1]
				  CAN_TxData_2[2] = APPS2Value;
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <user_main+0x330>)
 8002e56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002e5a:	7093      	strb	r3, [r2, #2]
 8002e5c:	e005      	b.n	8002e6a <user_main+0x282>
			  }
			  else{ /*throw deviate error by setting both to 0*/
				  CAN_TxData_2[1] = 0;
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <user_main+0x330>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	705a      	strb	r2, [r3, #1]
				  CAN_TxData_2[2] = 0;
 8002e64:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <user_main+0x330>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	709a      	strb	r2, [r3, #2]
			  }
		  }

		  CAN_TxData_2[3] = (uint8_t)(amt22_pos>>4);
 8002e6a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <user_main+0x330>)
 8002e74:	70da      	strb	r2, [r3, #3]
		  CAN_TxData_2[4] = travel_L;
 8002e76:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <user_main+0x330>)
 8002e78:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e7c:	7113      	strb	r3, [r2, #4]
		  CAN_TxData_2[5] = travel_R;
 8002e7e:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <user_main+0x330>)
 8002e80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002e84:	7153      	strb	r3, [r2, #5]
		  CAN_TxData_2[6] = oil_pressure;
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <user_main+0x330>)
 8002e88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e8c:	7193      	strb	r3, [r2, #6]
		  CAN_TxData_2[7] = (APPSmicro|(BSEmicro<<1)); //bit0 contains APPS switch data, bit1 contains BSE switch data
 8002e8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	b25a      	sxtb	r2, r3
 8002e96:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	b25b      	sxtb	r3, r3
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <user_main+0x330>)
 8002ea2:	71da      	strb	r2, [r3, #7]
		  /*the CAN transmit HAL API*/

		  if(HAL_CAN_AddTxMessage(&hcan,&TxHeader1,CAN_TxData_1,&TxMailbox1) != HAL_OK){
 8002ea4:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <user_main+0x334>)
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <user_main+0x32c>)
 8002ea8:	491d      	ldr	r1, [pc, #116]	; (8002f20 <user_main+0x338>)
 8002eaa:	4813      	ldr	r0, [pc, #76]	; (8002ef8 <user_main+0x310>)
 8002eac:	f001 f841 	bl	8003f32 <HAL_CAN_AddTxMessage>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <user_main+0x2d2>
			  CAN_error_handler();
 8002eb6:	f000 f8bb 	bl	8003030 <CAN_error_handler>
		  }
		  if(HAL_CAN_AddTxMessage(&hcan,&TxHeader2,CAN_TxData_2,&TxMailbox2) != HAL_OK){
 8002eba:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <user_main+0x33c>)
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <user_main+0x330>)
 8002ebe:	491a      	ldr	r1, [pc, #104]	; (8002f28 <user_main+0x340>)
 8002ec0:	480d      	ldr	r0, [pc, #52]	; (8002ef8 <user_main+0x310>)
 8002ec2:	f001 f836 	bl	8003f32 <HAL_CAN_AddTxMessage>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <user_main+0x2e8>
			  CAN_error_handler();
 8002ecc:	f000 f8b0 	bl	8003030 <CAN_error_handler>
		  }
		  if(HAL_CAN_GetError(&hcan) != HAL_CAN_ERROR_NONE){
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <user_main+0x310>)
 8002ed2:	f001 fc61 	bl	8004798 <HAL_CAN_GetError>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <user_main+0x2f8>
			  CAN_error_handler();
 8002edc:	f000 f8a8 	bl	8003030 <CAN_error_handler>
		  printf("left wheel speed is %d rpm\n",wheel_speedL);
		  printf("right wheel speed is %d rpm\n",wheel_speedR);
#endif

		  /*superloop execution interval*/
		  HAL_Delay(1);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f000 fa2f 	bl	8003344 <HAL_Delay>
	  while(1){
 8002ee6:	e6c5      	b.n	8002c74 <user_main+0x8c>
 8002ee8:	20000484 	.word	0x20000484
 8002eec:	200002ac 	.word	0x200002ac
 8002ef0:	200003f4 	.word	0x200003f4
 8002ef4:	0800b264 	.word	0x0800b264
 8002ef8:	20000320 	.word	0x20000320
 8002efc:	40010800 	.word	0x40010800
 8002f00:	200004a4 	.word	0x200004a4
 8002f04:	200004a8 	.word	0x200004a8
 8002f08:	20000348 	.word	0x20000348
 8002f0c:	40011000 	.word	0x40011000
 8002f10:	2000039c 	.word	0x2000039c
 8002f14:	200004ac 	.word	0x200004ac
 8002f18:	200004b4 	.word	0x200004b4
 8002f1c:	200004c0 	.word	0x200004c0
 8002f20:	20000008 	.word	0x20000008
 8002f24:	200004bc 	.word	0x200004bc
 8002f28:	20000020 	.word	0x20000020

08002f2c <HAL_GPIO_EXTI_Callback>:
  * @brief  User defined EXTI interrupt callback function, namely EXTI ISR.
  * 		Shall only be called by HAL interrupt handlers
  * @param  GPIO_PIN: the GPIO pin that generated the interrupt.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_PIN){
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f3c:	d01a      	beq.n	8002f74 <HAL_GPIO_EXTI_Callback+0x48>
 8002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f42:	dc1a      	bgt.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d00f      	beq.n	8002f68 <HAL_GPIO_EXTI_Callback+0x3c>
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	dc16      	bgt.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d005      	beq.n	8002f5c <HAL_GPIO_EXTI_Callback+0x30>
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	dc12      	bgt.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d00f      	beq.n	8002f78 <HAL_GPIO_EXTI_Callback+0x4c>
 8002f58:	2b02      	cmp	r3, #2
		case BSE_MICRO_Pin:
			//printf("EXTI0\n");
			break;
		case APPS_MICRO_Pin:
			//printf("EXTI1\n");
			break;
 8002f5a:	e00e      	b.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
			R_hall_counter++;
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_GPIO_EXTI_Callback+0x60>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_GPIO_EXTI_Callback+0x60>)
 8002f64:	6013      	str	r3, [r2, #0]
			break;
 8002f66:	e008      	b.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
			L_hall_counter++;
 8002f68:	4b09      	ldr	r3, [pc, #36]	; (8002f90 <HAL_GPIO_EXTI_Callback+0x64>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <HAL_GPIO_EXTI_Callback+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]
			break;
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
		case GPIO_PIN_15:
			//printf("EXTI15\n");
			break;
 8002f74:	bf00      	nop
 8002f76:	e000      	b.n	8002f7a <HAL_GPIO_EXTI_Callback+0x4e>
			break;
 8002f78:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002f7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <HAL_GPIO_EXTI_Callback+0x68>)
 8002f80:	f002 f945 	bl	800520e <HAL_GPIO_TogglePin>
	return;
 8002f84:	bf00      	nop
}
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200004a0 	.word	0x200004a0
 8002f90:	2000049c 	.word	0x2000049c
 8002f94:	40011000 	.word	0x40011000

08002f98 <HAL_TIM_PeriodElapsedCallback>:
  * @note 	For timer3, which should update in a fixed interval defined in CubeMX, we grab
  * 		the current hall sensor counts, then reset it.
  * @param  htim: the timer that generated the interrupt.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10e      	bne.n	8002fc6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		L_hall_counter_result = L_hall_counter;
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002fae:	6013      	str	r3, [r2, #0]
		R_hall_counter_result = R_hall_counter;
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002fb6:	6013      	str	r3, [r2, #0]
		L_hall_counter = 0;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
		R_hall_counter = 0;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
	}
	return;
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
}
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr
 8002fd0:	200003f4 	.word	0x200003f4
 8002fd4:	2000049c 	.word	0x2000049c
 8002fd8:	200004a4 	.word	0x200004a4
 8002fdc:	200004a0 	.word	0x200004a0
 8002fe0:	200004a8 	.word	0x200004a8

08002fe4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * 		Shall only be called by HAL interrupt handlers
  * @param  hcan: the can handle structure that received the message.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK){
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002fee:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f001 f877 	bl	80040e6 <HAL_CAN_GetRxMessage>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    CAN_error_handler();
 8002ffe:	f000 f817 	bl	8003030 <CAN_error_handler>
  }
  if(RxHeader.ExtId == 0x080AD092){
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d105      	bne.n	8003018 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 800300c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8003012:	f002 f8fc 	bl	800520e <HAL_GPIO_TogglePin>
  }


   return;
 8003016:	bf00      	nop
 8003018:	bf00      	nop
}
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	200004e0 	.word	0x200004e0
 8003024:	200004c4 	.word	0x200004c4
 8003028:	080ad092 	.word	0x080ad092
 800302c:	40011000 	.word	0x40011000

08003030 <CAN_error_handler>:
 * @param none
 * @retval none
 *
 * This erro handler handles CAN when it returns HAL_error or its status is not error_none
 * */
void CAN_error_handler(void){
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	//just fucking resets the system
	HAL_NVIC_SystemReset();
 8003034:	f001 fcd3 	bl	80049de <HAL_NVIC_SystemReset>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <User_I2C2_GeneralPurposeOutput_Init>:

static void User_I2C2_GeneralPurposeOutput_Init(I2C_HandleTypeDef* i2cHandle) {
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if(i2cHandle->Instance==I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a09      	ldr	r2, [pc, #36]	; (8003070 <User_I2C2_GeneralPurposeOutput_Init+0x34>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10b      	bne.n	8003066 <User_I2C2_GeneralPurposeOutput_Init+0x2a>
	{
		/*   PB10     ------> I2C2_SCL; PB11     ------> I2C2_SDA */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003052:	2311      	movs	r3, #17
 8003054:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003056:	2303      	movs	r3, #3
 8003058:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305a:	f107 0308 	add.w	r3, r7, #8
 800305e:	4619      	mov	r1, r3
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <User_I2C2_GeneralPurposeOutput_Init+0x38>)
 8003062:	f001 fe65 	bl	8004d30 <HAL_GPIO_Init>
	}
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40005400 	.word	0x40005400
 8003074:	40010c00 	.word	0x40010c00

08003078 <User_I2C2_AlternateFunction_Init>:


static void User_I2C2_AlternateFunction_Init(I2C_HandleTypeDef* i2cHandle) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	if(i2cHandle->Instance==I2C1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a09      	ldr	r2, [pc, #36]	; (80030ac <User_I2C2_AlternateFunction_Init+0x34>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10b      	bne.n	80030a2 <User_I2C2_AlternateFunction_Init+0x2a>
	{
		/*   PB10     ------> I2C2_SCL; PB11     ------> I2C2_SDA */
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800308a:	23c0      	movs	r3, #192	; 0xc0
 800308c:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308e:	2312      	movs	r3, #18
 8003090:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003092:	2303      	movs	r3, #3
 8003094:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	4619      	mov	r1, r3
 800309c:	4804      	ldr	r0, [pc, #16]	; (80030b0 <User_I2C2_AlternateFunction_Init+0x38>)
 800309e:	f001 fe47 	bl	8004d30 <HAL_GPIO_Init>
	}
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40005400 	.word	0x40005400
 80030b0:	40010c00 	.word	0x40010c00

080030b4 <I2C_start_error_handler>:


HAL_StatusTypeDef I2C_start_error_handler(){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	hi2c1.ErrorCode = HAL_I2C_ERROR_AF;
 80030b8:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <I2C_start_error_handler+0x174>)
 80030ba:	2204      	movs	r2, #4
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
	/* 1. Disable the I2C peripheral by clearing the PE bit in I2Cx_CR1 register */
	__HAL_I2C_DISABLE(&hi2c1);
 80030be:	4b5a      	ldr	r3, [pc, #360]	; (8003228 <I2C_start_error_handler+0x174>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b58      	ldr	r3, [pc, #352]	; (8003228 <I2C_start_error_handler+0x174>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0201 	bic.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80030ce:	21c0      	movs	r1, #192	; 0xc0
 80030d0:	4856      	ldr	r0, [pc, #344]	; (800322c <I2C_start_error_handler+0x178>)
 80030d2:	f001 ffb1 	bl	8005038 <HAL_GPIO_DeInit>

	/* 2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR) */
	User_I2C2_GeneralPurposeOutput_Init(&hi2c1);
 80030d6:	4854      	ldr	r0, [pc, #336]	; (8003228 <I2C_start_error_handler+0x174>)
 80030d8:	f7ff ffb0 	bl	800303c <User_I2C2_GeneralPurposeOutput_Init>
	HAL_Delay(1);
 80030dc:	2001      	movs	r0, #1
 80030de:	f000 f931 	bl	8003344 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_SET);
 80030e2:	2201      	movs	r2, #1
 80030e4:	21c0      	movs	r1, #192	; 0xc0
 80030e6:	4851      	ldr	r0, [pc, #324]	; (800322c <I2C_start_error_handler+0x178>)
 80030e8:	f002 f879 	bl	80051de <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80030ec:	2001      	movs	r0, #1
 80030ee:	f000 f929 	bl	8003344 <HAL_Delay>

	/* 3. Check SCL and SDA High level in GPIOx_IDR */
	if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 80030f2:	2140      	movs	r1, #64	; 0x40
 80030f4:	484d      	ldr	r0, [pc, #308]	; (800322c <I2C_start_error_handler+0x178>)
 80030f6:	f002 f85b 	bl	80051b0 <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <I2C_start_error_handler+0x5a>
 8003100:	2180      	movs	r1, #128	; 0x80
 8003102:	484a      	ldr	r0, [pc, #296]	; (800322c <I2C_start_error_handler+0x178>)
 8003104:	f002 f854 	bl	80051b0 <HAL_GPIO_ReadPin>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <I2C_start_error_handler+0x5e>
	{
#ifdef I2C_TEST
		printf("3.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
		return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e088      	b.n	8003224 <I2C_start_error_handler+0x170>
	/* 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
	 * 5. Check SDA Low level in GPIOx_IDR.
	 * 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR)
	 * 7. Check SCL Low level in GPIOx_IDR.
	 * */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003112:	2200      	movs	r2, #0
 8003114:	21c0      	movs	r1, #192	; 0xc0
 8003116:	4845      	ldr	r0, [pc, #276]	; (800322c <I2C_start_error_handler+0x178>)
 8003118:	f002 f861 	bl	80051de <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800311c:	2001      	movs	r0, #1
 800311e:	f000 f911 	bl	8003344 <HAL_Delay>
	if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_RESET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_RESET))
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	4841      	ldr	r0, [pc, #260]	; (800322c <I2C_start_error_handler+0x178>)
 8003126:	f002 f843 	bl	80051b0 <HAL_GPIO_ReadPin>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <I2C_start_error_handler+0x8a>
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	483e      	ldr	r0, [pc, #248]	; (800322c <I2C_start_error_handler+0x178>)
 8003134:	f002 f83c 	bl	80051b0 <HAL_GPIO_ReadPin>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_start_error_handler+0x8e>
	{
#ifdef I2C_TEST
		printf("4-7.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
		return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e070      	b.n	8003224 <I2C_start_error_handler+0x170>
	 * 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
	 * 9. Check SCL High level in GPIOx_IDR.
	 * 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
	 * 11. Check SDA High level in GPIOx_IDR.
	 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8003142:	2201      	movs	r2, #1
 8003144:	21c0      	movs	r1, #192	; 0xc0
 8003146:	4839      	ldr	r0, [pc, #228]	; (800322c <I2C_start_error_handler+0x178>)
 8003148:	f002 f849 	bl	80051de <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800314c:	2001      	movs	r0, #1
 800314e:	f000 f8f9 	bl	8003344 <HAL_Delay>
	if ((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET)||(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET))
 8003152:	2140      	movs	r1, #64	; 0x40
 8003154:	4835      	ldr	r0, [pc, #212]	; (800322c <I2C_start_error_handler+0x178>)
 8003156:	f002 f82b 	bl	80051b0 <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <I2C_start_error_handler+0xba>
 8003160:	2180      	movs	r1, #128	; 0x80
 8003162:	4832      	ldr	r0, [pc, #200]	; (800322c <I2C_start_error_handler+0x178>)
 8003164:	f002 f824 	bl	80051b0 <HAL_GPIO_ReadPin>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d001      	beq.n	8003172 <I2C_start_error_handler+0xbe>
	{
#ifdef I2C_TEST
		printf("8-11.PB10=%d, PB11=%d\r\n", HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6), HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7));
#endif
		return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e058      	b.n	8003224 <I2C_start_error_handler+0x170>
	}

	/* 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain. */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 8003172:	21c0      	movs	r1, #192	; 0xc0
 8003174:	482d      	ldr	r0, [pc, #180]	; (800322c <I2C_start_error_handler+0x178>)
 8003176:	f001 ff5f 	bl	8005038 <HAL_GPIO_DeInit>
	User_I2C2_AlternateFunction_Init(&hi2c1);
 800317a:	482b      	ldr	r0, [pc, #172]	; (8003228 <I2C_start_error_handler+0x174>)
 800317c:	f7ff ff7c 	bl	8003078 <User_I2C2_AlternateFunction_Init>

	/* 13. Set SWRST bit in I2Cx_CR1 register. */
	hi2c1.Instance->CR1 |=  I2C_CR1_SWRST;
 8003180:	4b29      	ldr	r3, [pc, #164]	; (8003228 <I2C_start_error_handler+0x174>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b28      	ldr	r3, [pc, #160]	; (8003228 <I2C_start_error_handler+0x174>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800318e:	601a      	str	r2, [r3, #0]
	HAL_Delay(2);
 8003190:	2002      	movs	r0, #2
 8003192:	f000 f8d7 	bl	8003344 <HAL_Delay>
	/* 14. Clear SWRST bit in I2Cx_CR1 register. */
	hi2c1.Instance->CR1 &=  ~I2C_CR1_SWRST;
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <I2C_start_error_handler+0x174>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4b22      	ldr	r3, [pc, #136]	; (8003228 <I2C_start_error_handler+0x174>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a4:	601a      	str	r2, [r3, #0]
	HAL_Delay(2);
 80031a6:	2002      	movs	r0, #2
 80031a8:	f000 f8cc 	bl	8003344 <HAL_Delay>
	/* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
	hi2c1.Instance = I2C1;
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <I2C_start_error_handler+0x174>)
 80031ae:	4a20      	ldr	r2, [pc, #128]	; (8003230 <I2C_start_error_handler+0x17c>)
 80031b0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 50000;
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <I2C_start_error_handler+0x174>)
 80031b4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80031b8:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031ba:	4b1b      	ldr	r3, [pc, #108]	; (8003228 <I2C_start_error_handler+0x174>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <I2C_start_error_handler+0x174>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <I2C_start_error_handler+0x174>)
 80031c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031cc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <I2C_start_error_handler+0x174>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <I2C_start_error_handler+0x174>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <I2C_start_error_handler+0x174>)
 80031dc:	2200      	movs	r2, #0
 80031de:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <I2C_start_error_handler+0x174>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031e6:	4810      	ldr	r0, [pc, #64]	; (8003228 <I2C_start_error_handler+0x174>)
 80031e8:	f002 f842 	bl	8005270 <HAL_I2C_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_start_error_handler+0x142>
	{
	Error_Handler();
 80031f2:	f7ff f959 	bl	80024a8 <Error_Handler>
	}
	__HAL_I2C_ENABLE(&hi2c1);
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <I2C_start_error_handler+0x174>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <I2C_start_error_handler+0x174>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	601a      	str	r2, [r3, #0]
	HAL_Delay(2);
 8003206:	2002      	movs	r0, #2
 8003208:	f000 f89c 	bl	8003344 <HAL_Delay>
#ifdef I2C_TEST
	printf("I2CResetBus\r\n");
#endif
	hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <I2C_start_error_handler+0x174>)
 800320e:	2200      	movs	r2, #0
 8003210:	641a      	str	r2, [r3, #64]	; 0x40
	hi2c1.State = HAL_I2C_STATE_READY;
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <I2C_start_error_handler+0x174>)
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
//	hi2c1.PreviousState = I2C_STATE_NONE;
	hi2c1.Mode = HAL_I2C_MODE_NONE;
 800321a:	4b03      	ldr	r3, [pc, #12]	; (8003228 <I2C_start_error_handler+0x174>)
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000348 	.word	0x20000348
 800322c:	40010c00 	.word	0x40010c00
 8003230:	40005400 	.word	0x40005400

08003234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003234:	480c      	ldr	r0, [pc, #48]	; (8003268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800323a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800323c:	e002      	b.n	8003244 <LoopCopyDataInit>

0800323e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003242:	3304      	adds	r3, #4

08003244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003248:	d3f9      	bcc.n	800323e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800324c:	4c0a      	ldr	r4, [pc, #40]	; (8003278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003250:	e001      	b.n	8003256 <LoopFillZerobss>

08003252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003254:	3204      	adds	r2, #4

08003256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003258:	d3fb      	bcc.n	8003252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800325a:	f7ff fcbf 	bl	8002bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325e:	f004 ffbb 	bl	80081d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003262:	f7fe fe42 	bl	8001eea <main>
  bx lr
 8003266:	4770      	bx	lr
  ldr r0, =_sdata
 8003268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800326c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003270:	0800b794 	.word	0x0800b794
  ldr r2, =_sbss
 8003274:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003278:	200004f8 	.word	0x200004f8

0800327c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC1_2_IRQHandler>
	...

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_Init+0x28>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_Init+0x28>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f001 fb6f 	bl	8004974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	200f      	movs	r0, #15
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7ff f948 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f001 fb8b 	bl	80049e6 <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f001 fb4f 	bl	800498a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000004 	.word	0x20000004
 8003304:	2000003c 	.word	0x2000003c
 8003308:	20000038 	.word	0x20000038

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_IncTick+0x1c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_IncTick+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_IncTick+0x20>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000003c 	.word	0x2000003c
 800332c:	200004e4 	.word	0x200004e4

08003330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_GetTick+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	200004e4 	.word	0x200004e4

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff fff0 	bl	8003330 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffe0 	bl	8003330 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2000003c 	.word	0x2000003c

0800338c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0be      	b.n	800352c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff f8e2 	bl	8002594 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 faff 	bl	80039d4 <ADC_ConversionStop_Disable>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 8099 	bne.w	800351a <HAL_ADC_Init+0x18e>
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f040 8095 	bne.w	800351a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033f8:	f023 0302 	bic.w	r3, r3, #2
 80033fc:	f043 0202 	orr.w	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800340c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7b1b      	ldrb	r3, [r3, #12]
 8003412:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003414:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	4313      	orrs	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003424:	d003      	beq.n	800342e <HAL_ADC_Init+0xa2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d102      	bne.n	8003434 <HAL_ADC_Init+0xa8>
 800342e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003432:	e000      	b.n	8003436 <HAL_ADC_Init+0xaa>
 8003434:	2300      	movs	r3, #0
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7d1b      	ldrb	r3, [r3, #20]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d119      	bne.n	8003478 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7b1b      	ldrb	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d109      	bne.n	8003460 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	3b01      	subs	r3, #1
 8003452:	035a      	lsls	r2, r3, #13
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	e00b      	b.n	8003478 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <HAL_ADC_Init+0x1a8>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6812      	ldr	r2, [r2, #0]
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	430b      	orrs	r3, r1
 800349e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a8:	d003      	beq.n	80034b2 <HAL_ADC_Init+0x126>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d104      	bne.n	80034bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	051b      	lsls	r3, r3, #20
 80034ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_ADC_Init+0x1ac>)
 80034d8:	4013      	ands	r3, r2
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d10b      	bne.n	80034f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	f043 0201 	orr.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80034f6:	e018      	b.n	800352a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	f023 0312 	bic.w	r3, r3, #18
 8003500:	f043 0210 	orr.w	r2, r3, #16
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f043 0201 	orr.w	r2, r3, #1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003518:	e007      	b.n	800352a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	f043 0210 	orr.w	r2, r3, #16
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	ffe1f7fd 	.word	0xffe1f7fd
 8003538:	ff1f0efe 	.word	0xff1f0efe

0800353c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a64      	ldr	r2, [pc, #400]	; (80036e4 <HAL_ADC_Start_DMA+0x1a8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d004      	beq.n	8003560 <HAL_ADC_Start_DMA+0x24>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_ADC_Start_DMA+0x1ac>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d106      	bne.n	800356e <HAL_ADC_Start_DMA+0x32>
 8003560:	4b60      	ldr	r3, [pc, #384]	; (80036e4 <HAL_ADC_Start_DMA+0x1a8>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 80b3 	bne.w	80036d4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_ADC_Start_DMA+0x40>
 8003578:	2302      	movs	r3, #2
 800357a:	e0ae      	b.n	80036da <HAL_ADC_Start_DMA+0x19e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f9cb 	bl	8003920 <ADC_Enable>
 800358a:	4603      	mov	r3, r0
 800358c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800358e:	7dfb      	ldrb	r3, [r7, #23]
 8003590:	2b00      	cmp	r3, #0
 8003592:	f040 809a 	bne.w	80036ca <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800359e:	f023 0301 	bic.w	r3, r3, #1
 80035a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4e      	ldr	r2, [pc, #312]	; (80036e8 <HAL_ADC_Start_DMA+0x1ac>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_Start_DMA+0x84>
 80035b4:	4b4b      	ldr	r3, [pc, #300]	; (80036e4 <HAL_ADC_Start_DMA+0x1a8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d115      	bne.n	80035ec <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d026      	beq.n	8003628 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ea:	e01d      	b.n	8003628 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a39      	ldr	r2, [pc, #228]	; (80036e4 <HAL_ADC_Start_DMA+0x1a8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_ADC_Start_DMA+0xd0>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a38      	ldr	r2, [pc, #224]	; (80036e8 <HAL_ADC_Start_DMA+0x1ac>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d10d      	bne.n	8003628 <HAL_ADC_Start_DMA+0xec>
 800360c:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_ADC_Start_DMA+0x1a8>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003620:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d006      	beq.n	8003642 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	f023 0206 	bic.w	r2, r3, #6
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003640:	e002      	b.n	8003648 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	4a25      	ldr	r2, [pc, #148]	; (80036ec <HAL_ADC_Start_DMA+0x1b0>)
 8003656:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <HAL_ADC_Start_DMA+0x1b4>)
 800365e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_ADC_Start_DMA+0x1b8>)
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0202 	mvn.w	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003680:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a18      	ldr	r0, [r3, #32]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	334c      	adds	r3, #76	; 0x4c
 800368c:	4619      	mov	r1, r3
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f001 fa0f 	bl	8004ab4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80036a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80036a4:	d108      	bne.n	80036b8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80036b4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036b6:	e00f      	b.n	80036d8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036c6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80036c8:	e006      	b.n	80036d8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80036d2:	e001      	b.n	80036d8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40012400 	.word	0x40012400
 80036e8:	40012800 	.word	0x40012800
 80036ec:	08003a57 	.word	0x08003a57
 80036f0:	08003ad3 	.word	0x08003ad3
 80036f4:	08003aef 	.word	0x08003aef

080036f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr

0800371c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
	...

08003730 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x20>
 800374c:	2302      	movs	r3, #2
 800374e:	e0dc      	b.n	800390a <HAL_ADC_ConfigChannel+0x1da>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b06      	cmp	r3, #6
 800375e:	d81c      	bhi.n	800379a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b05      	subs	r3, #5
 8003772:	221f      	movs	r2, #31
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	4019      	ands	r1, r3
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b05      	subs	r3, #5
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	635a      	str	r2, [r3, #52]	; 0x34
 8003798:	e03c      	b.n	8003814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d81c      	bhi.n	80037dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	3b23      	subs	r3, #35	; 0x23
 80037b4:	221f      	movs	r2, #31
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	4019      	ands	r1, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b23      	subs	r3, #35	; 0x23
 80037ce:	fa00 f203 	lsl.w	r2, r0, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
 80037da:	e01b      	b.n	8003814 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	3b41      	subs	r3, #65	; 0x41
 80037ee:	221f      	movs	r2, #31
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	4019      	ands	r1, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	3b41      	subs	r3, #65	; 0x41
 8003808:	fa00 f203 	lsl.w	r2, r0, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d91c      	bls.n	8003856 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68d9      	ldr	r1, [r3, #12]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	4413      	add	r3, r2
 800382c:	3b1e      	subs	r3, #30
 800382e:	2207      	movs	r2, #7
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	4019      	ands	r1, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6898      	ldr	r0, [r3, #8]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	3b1e      	subs	r3, #30
 8003848:	fa00 f203 	lsl.w	r2, r0, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e019      	b.n	800388a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6919      	ldr	r1, [r3, #16]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	4413      	add	r3, r2
 8003866:	2207      	movs	r2, #7
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	4019      	ands	r1, r3
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	6898      	ldr	r0, [r3, #8]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	fa00 f203 	lsl.w	r2, r0, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b10      	cmp	r3, #16
 8003890:	d003      	beq.n	800389a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003896:	2b11      	cmp	r3, #17
 8003898:	d132      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <HAL_ADC_ConfigChannel+0x1e4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d125      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d126      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d11a      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_ADC_ConfigChannel+0x1e8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_ADC_ConfigChannel+0x1ec>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	0c9a      	lsrs	r2, r3, #18
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038e0:	e002      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f9      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x1b2>
 80038ee:	e007      	b.n	8003900 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f043 0220 	orr.w	r2, r3, #32
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003908:	7bfb      	ldrb	r3, [r7, #15]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	40012400 	.word	0x40012400
 8003918:	20000004 	.word	0x20000004
 800391c:	431bde83 	.word	0x431bde83

08003920 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d040      	beq.n	80039c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f042 0201 	orr.w	r2, r2, #1
 800394c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800394e:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <ADC_Enable+0xac>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <ADC_Enable+0xb0>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	0c9b      	lsrs	r3, r3, #18
 800395a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800395c:	e002      	b.n	8003964 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	3b01      	subs	r3, #1
 8003962:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f9      	bne.n	800395e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800396a:	f7ff fce1 	bl	8003330 <HAL_GetTick>
 800396e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003970:	e01f      	b.n	80039b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003972:	f7ff fcdd 	bl	8003330 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d918      	bls.n	80039b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d011      	beq.n	80039b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f043 0201 	orr.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e007      	b.n	80039c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d1d8      	bne.n	8003972 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000004 	.word	0x20000004
 80039d0:	431bde83 	.word	0x431bde83

080039d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d12e      	bne.n	8003a4c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039fe:	f7ff fc97 	bl	8003330 <HAL_GetTick>
 8003a02:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a04:	e01b      	b.n	8003a3e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a06:	f7ff fc93 	bl	8003330 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d914      	bls.n	8003a3e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10d      	bne.n	8003a3e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d0dc      	beq.n	8003a06 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d127      	bne.n	8003ac0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003a86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a8a:	d115      	bne.n	8003ab8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d105      	bne.n	8003ab8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	f043 0201 	orr.w	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff fe1d 	bl	80036f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003abe:	e004      	b.n	8003aca <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	4798      	blx	r3
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f7ff fe12 	bl	800370a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f7ff fe01 	bl	800371c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b084      	sub	sp, #16
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0ed      	b.n	8003d10 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d102      	bne.n	8003b46 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7fe fda7 	bl	8002694 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b56:	f7ff fbeb 	bl	8003330 <HAL_GetTick>
 8003b5a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b5c:	e012      	b.n	8003b84 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b5e:	f7ff fbe7 	bl	8003330 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b0a      	cmp	r3, #10
 8003b6a:	d90b      	bls.n	8003b84 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2205      	movs	r2, #5
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0c5      	b.n	8003d10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0e5      	beq.n	8003b5e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ba2:	f7ff fbc5 	bl	8003330 <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ba8:	e012      	b.n	8003bd0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003baa:	f7ff fbc1 	bl	8003330 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b0a      	cmp	r3, #10
 8003bb6:	d90b      	bls.n	8003bd0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e09f      	b.n	8003d10 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e5      	bne.n	8003baa <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7e1b      	ldrb	r3, [r3, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e007      	b.n	8003c08 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	7e5b      	ldrb	r3, [r3, #25]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d108      	bne.n	8003c22 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e007      	b.n	8003c32 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7e9b      	ldrb	r3, [r3, #26]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d108      	bne.n	8003c4c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e007      	b.n	8003c5c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0220 	bic.w	r2, r2, #32
 8003c5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	7edb      	ldrb	r3, [r3, #27]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d108      	bne.n	8003c76 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0210 	bic.w	r2, r2, #16
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	e007      	b.n	8003c86 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0210 	orr.w	r2, r2, #16
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7f1b      	ldrb	r3, [r3, #28]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d108      	bne.n	8003ca0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e007      	b.n	8003cb0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0208 	bic.w	r2, r2, #8
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7f5b      	ldrb	r3, [r3, #29]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d108      	bne.n	8003cca <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0204 	orr.w	r2, r2, #4
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e007      	b.n	8003cda <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	ea42 0103 	orr.w	r1, r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003d30:	7cfb      	ldrb	r3, [r7, #19]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d003      	beq.n	8003d3e <HAL_CAN_ConfigFilter+0x26>
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	f040 80aa 	bne.w	8003e92 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2201      	movs	r2, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	401a      	ands	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d123      	bne.n	8003dc0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3248      	adds	r2, #72	; 0x48
 8003da0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003db4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003db6:	6979      	ldr	r1, [r7, #20]
 8003db8:	3348      	adds	r3, #72	; 0x48
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	440b      	add	r3, r1
 8003dbe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d122      	bne.n	8003e0e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003de8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3248      	adds	r2, #72	; 0x48
 8003dee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e02:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	3348      	adds	r3, #72	; 0x48
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	401a      	ands	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e28:	e007      	b.n	8003e3a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003e54:	e007      	b.n	8003e66 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d107      	bne.n	8003e7e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	431a      	orrs	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e84:	f023 0201 	bic.w	r2, r3, #1
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e006      	b.n	8003ea0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
  }
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d12e      	bne.n	8003f1c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed6:	f7ff fa2b 	bl	8003330 <HAL_GetTick>
 8003eda:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003edc:	e012      	b.n	8003f04 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ede:	f7ff fa27 	bl	8003330 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b0a      	cmp	r3, #10
 8003eea:	d90b      	bls.n	8003f04 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2205      	movs	r2, #5
 8003efc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e012      	b.n	8003f2a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e006      	b.n	8003f2a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
  }
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b089      	sub	sp, #36	; 0x24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f46:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f50:	7ffb      	ldrb	r3, [r7, #31]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d003      	beq.n	8003f5e <HAL_CAN_AddTxMessage+0x2c>
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	f040 80b8 	bne.w	80040ce <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80a0 	beq.w	80040be <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	0e1b      	lsrs	r3, r3, #24
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d907      	bls.n	8003f9e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f92:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e09e      	b.n	80040dc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10d      	bne.n	8003fcc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	6809      	ldr	r1, [r1, #0]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	440b      	add	r3, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e00f      	b.n	8003fec <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fd6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003fe0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	440b      	add	r3, r1
 8003fea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3318      	adds	r3, #24
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	440b      	add	r3, r1
 8003ffc:	3304      	adds	r3, #4
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	7d1b      	ldrb	r3, [r3, #20]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d111      	bne.n	800402c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3318      	adds	r3, #24
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6811      	ldr	r1, [r2, #0]
 800401c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	3318      	adds	r3, #24
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	440b      	add	r3, r1
 8004028:	3304      	adds	r3, #4
 800402a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3307      	adds	r3, #7
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	061a      	lsls	r2, r3, #24
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3306      	adds	r3, #6
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3305      	adds	r3, #5
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	4313      	orrs	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	3204      	adds	r2, #4
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	4610      	mov	r0, r2
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6811      	ldr	r1, [r2, #0]
 8004054:	ea43 0200 	orr.w	r2, r3, r0
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	440b      	add	r3, r1
 800405e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004062:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3303      	adds	r3, #3
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	061a      	lsls	r2, r3, #24
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3302      	adds	r3, #2
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	041b      	lsls	r3, r3, #16
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3301      	adds	r3, #1
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	4313      	orrs	r3, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	4610      	mov	r0, r2
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	6811      	ldr	r1, [r2, #0]
 800408a:	ea43 0200 	orr.w	r2, r3, r0
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	440b      	add	r3, r1
 8004094:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004098:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	3318      	adds	r3, #24
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	4413      	add	r3, r2
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	6811      	ldr	r1, [r2, #0]
 80040ac:	f043 0201 	orr.w	r2, r3, #1
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	3318      	adds	r3, #24
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	440b      	add	r3, r1
 80040b8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e00e      	b.n	80040dc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e006      	b.n	80040dc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
  }
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3724      	adds	r7, #36	; 0x24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040fa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80040fc:	7dfb      	ldrb	r3, [r7, #23]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d003      	beq.n	800410a <HAL_CAN_GetRxMessage+0x24>
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b02      	cmp	r3, #2
 8004106:	f040 80f3 	bne.w	80042f0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10e      	bne.n	800412e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e0e7      	b.n	80042fe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0d8      	b.n	80042fe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	331b      	adds	r3, #27
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	4413      	add	r3, r2
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0204 	and.w	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10c      	bne.n	8004184 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	331b      	adds	r3, #27
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0d5b      	lsrs	r3, r3, #21
 800417a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e00b      	b.n	800419c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	331b      	adds	r3, #27
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	4413      	add	r3, r2
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	08db      	lsrs	r3, r3, #3
 8004194:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	331b      	adds	r3, #27
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0202 	and.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	331b      	adds	r3, #27
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 020f 	and.w	r2, r3, #15
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	331b      	adds	r3, #27
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	4413      	add	r3, r2
 80041d6:	3304      	adds	r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0a1b      	lsrs	r3, r3, #8
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	331b      	adds	r3, #27
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4413      	add	r3, r2
 80041ee:	3304      	adds	r3, #4
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	0a1a      	lsrs	r2, r3, #8
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	4413      	add	r3, r2
 8004234:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	0c1a      	lsrs	r2, r3, #16
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	3302      	adds	r3, #2
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0e1a      	lsrs	r2, r3, #24
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	3303      	adds	r3, #3
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	011b      	lsls	r3, r3, #4
 8004266:	4413      	add	r3, r2
 8004268:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	3304      	adds	r3, #4
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	0a1a      	lsrs	r2, r3, #8
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	3305      	adds	r3, #5
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	0c1a      	lsrs	r2, r3, #16
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3306      	adds	r3, #6
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	0e1a      	lsrs	r2, r3, #24
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3307      	adds	r3, #7
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 0220 	orr.w	r2, r2, #32
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	e007      	b.n	80042ec <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	e006      	b.n	80042fe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	bc80      	pop	{r7}
 8004306:	4770      	bx	lr

08004308 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d002      	beq.n	8004326 <HAL_CAN_ActivateNotification+0x1e>
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d109      	bne.n	800433a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6959      	ldr	r1, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004336:	2300      	movs	r3, #0
 8004338:	e006      	b.n	8004348 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
  }
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b08a      	sub	sp, #40	; 0x28
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	f003 0301 	and.w	r3, r3, #1
 8004394:	2b00      	cmp	r3, #0
 8004396:	d07c      	beq.n	8004492 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d023      	beq.n	80043ea <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2201      	movs	r2, #1
 80043a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f983 	bl	80046c0 <HAL_CAN_TxMailbox0CompleteCallback>
 80043ba:	e016      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	f003 0304 	and.w	r3, r3, #4
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
 80043ce:	e00c      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043e0:	627b      	str	r3, [r7, #36]	; 0x24
 80043e2:	e002      	b.n	80043ea <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f986 	bl	80046f6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d024      	beq.n	800443e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f962 	bl	80046d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800440e:	e016      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
 8004422:	e00c      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e002      	b.n	800443e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f965 	bl	8004708 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d024      	beq.n	8004492 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004450:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f941 	bl	80046e4 <HAL_CAN_TxMailbox2CompleteCallback>
 8004462:	e016      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
 8004476:	e00c      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e002      	b.n	8004492 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f944 	bl	800471a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00c      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0310 	and.w	r3, r3, #16
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2210      	movs	r2, #16
 80044b4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2208      	movs	r2, #8
 80044d0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f92a 	bl	800472c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f7fe fd77 	bl	8002fe4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00c      	beq.n	800451a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d007      	beq.n	800451a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004510:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d006      	beq.n	800453c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2208      	movs	r2, #8
 8004534:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f90a 	bl	8004750 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f003 0310 	and.w	r3, r3, #16
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 f8f2 	bl	800473e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00b      	beq.n	800457c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0310 	and.w	r3, r3, #16
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2210      	movs	r2, #16
 8004574:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8f3 	bl	8004762 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2208      	movs	r2, #8
 8004596:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8eb 	bl	8004774 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d07b      	beq.n	80046a0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d072      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	f043 0301 	orr.w	r3, r3, #1
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460c:	2b00      	cmp	r3, #0
 800460e:	d043      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d03e      	beq.n	8004698 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d02b      	beq.n	800467c <HAL_CAN_IRQHandler+0x32a>
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	d82e      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004628:	2b50      	cmp	r3, #80	; 0x50
 800462a:	d022      	beq.n	8004672 <HAL_CAN_IRQHandler+0x320>
 800462c:	2b50      	cmp	r3, #80	; 0x50
 800462e:	d82a      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004630:	2b40      	cmp	r3, #64	; 0x40
 8004632:	d019      	beq.n	8004668 <HAL_CAN_IRQHandler+0x316>
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d826      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004638:	2b30      	cmp	r3, #48	; 0x30
 800463a:	d010      	beq.n	800465e <HAL_CAN_IRQHandler+0x30c>
 800463c:	2b30      	cmp	r3, #48	; 0x30
 800463e:	d822      	bhi.n	8004686 <HAL_CAN_IRQHandler+0x334>
 8004640:	2b10      	cmp	r3, #16
 8004642:	d002      	beq.n	800464a <HAL_CAN_IRQHandler+0x2f8>
 8004644:	2b20      	cmp	r3, #32
 8004646:	d005      	beq.n	8004654 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004648:	e01d      	b.n	8004686 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004652:	e019      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f043 0310 	orr.w	r3, r3, #16
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800465c:	e014      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	f043 0320 	orr.w	r3, r3, #32
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004666:	e00f      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004670:	e00a      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800467a:	e005      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004684:	e000      	b.n	8004688 <HAL_CAN_IRQHandler+0x336>
            break;
 8004686:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004696:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2204      	movs	r2, #4
 800469e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d008      	beq.n	80046b8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f867 	bl	8004786 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	; 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr

080046d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr

080046e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr

080046f6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr

08004708 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr

0800473e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr

08004798 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
	...

080047b0 <__NVIC_SetPriorityGrouping>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047cc:	4013      	ands	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047e2:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <__NVIC_SetPriorityGrouping+0x44>)
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	60d3      	str	r3, [r2, #12]
}
 80047e8:	bf00      	nop
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <__NVIC_GetPriorityGrouping>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047fc:	4b04      	ldr	r3, [pc, #16]	; (8004810 <__NVIC_GetPriorityGrouping+0x18>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 0307 	and.w	r3, r3, #7
}
 8004806:	4618      	mov	r0, r3
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000ed00 	.word	0xe000ed00

08004814 <__NVIC_EnableIRQ>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004822:	2b00      	cmp	r3, #0
 8004824:	db0b      	blt.n	800483e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4906      	ldr	r1, [pc, #24]	; (8004848 <__NVIC_EnableIRQ+0x34>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	095b      	lsrs	r3, r3, #5
 8004834:	2001      	movs	r0, #1
 8004836:	fa00 f202 	lsl.w	r2, r0, r2
 800483a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	e000e100 	.word	0xe000e100

0800484c <__NVIC_SetPriority>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db0a      	blt.n	8004876 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	b2da      	uxtb	r2, r3
 8004864:	490c      	ldr	r1, [pc, #48]	; (8004898 <__NVIC_SetPriority+0x4c>)
 8004866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486a:	0112      	lsls	r2, r2, #4
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	440b      	add	r3, r1
 8004870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004874:	e00a      	b.n	800488c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4908      	ldr	r1, [pc, #32]	; (800489c <__NVIC_SetPriority+0x50>)
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3b04      	subs	r3, #4
 8004884:	0112      	lsls	r2, r2, #4
 8004886:	b2d2      	uxtb	r2, r2
 8004888:	440b      	add	r3, r1
 800488a:	761a      	strb	r2, [r3, #24]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000e100 	.word	0xe000e100
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <NVIC_EncodePriority>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b089      	sub	sp, #36	; 0x24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f1c3 0307 	rsb	r3, r3, #7
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	bf28      	it	cs
 80048be:	2304      	movcs	r3, #4
 80048c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	3304      	adds	r3, #4
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d902      	bls.n	80048d0 <NVIC_EncodePriority+0x30>
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	3b03      	subs	r3, #3
 80048ce:	e000      	b.n	80048d2 <NVIC_EncodePriority+0x32>
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d4:	f04f 32ff 	mov.w	r2, #4294967295
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	401a      	ands	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048e8:	f04f 31ff 	mov.w	r1, #4294967295
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	43d9      	mvns	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048f8:	4313      	orrs	r3, r2
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3724      	adds	r7, #36	; 0x24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <__NVIC_SystemReset>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004908:	f3bf 8f4f 	dsb	sy
}
 800490c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <__NVIC_SystemReset+0x24>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004916:	4904      	ldr	r1, [pc, #16]	; (8004928 <__NVIC_SystemReset+0x24>)
 8004918:	4b04      	ldr	r3, [pc, #16]	; (800492c <__NVIC_SystemReset+0x28>)
 800491a:	4313      	orrs	r3, r2
 800491c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800491e:	f3bf 8f4f 	dsb	sy
}
 8004922:	bf00      	nop
    __NOP();
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <__NVIC_SystemReset+0x20>
 8004928:	e000ed00 	.word	0xe000ed00
 800492c:	05fa0004 	.word	0x05fa0004

08004930 <SysTick_Config>:
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004940:	d301      	bcc.n	8004946 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004942:	2301      	movs	r3, #1
 8004944:	e00f      	b.n	8004966 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <SysTick_Config+0x40>)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3b01      	subs	r3, #1
 800494c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800494e:	210f      	movs	r1, #15
 8004950:	f04f 30ff 	mov.w	r0, #4294967295
 8004954:	f7ff ff7a 	bl	800484c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <SysTick_Config+0x40>)
 800495a:	2200      	movs	r2, #0
 800495c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <SysTick_Config+0x40>)
 8004960:	2207      	movs	r2, #7
 8004962:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	e000e010 	.word	0xe000e010

08004974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff17 	bl	80047b0 <__NVIC_SetPriorityGrouping>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	4603      	mov	r3, r0
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800499c:	f7ff ff2c 	bl	80047f8 <__NVIC_GetPriorityGrouping>
 80049a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff7a 	bl	80048a0 <NVIC_EncodePriority>
 80049ac:	4602      	mov	r2, r0
 80049ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff ff49 	bl	800484c <__NVIC_SetPriority>
}
 80049ba:	bf00      	nop
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	4603      	mov	r3, r0
 80049ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff1f 	bl	8004814 <__NVIC_EnableIRQ>
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80049e2:	f7ff ff8f 	bl	8004904 <__NVIC_SystemReset>

080049e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b082      	sub	sp, #8
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff ff9e 	bl	8004930 <SysTick_Config>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
	...

08004a00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e043      	b.n	8004a9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <HAL_DMA_Init+0xa8>)
 8004a1e:	4413      	add	r3, r2
 8004a20:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_DMA_Init+0xac>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	009a      	lsls	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a1f      	ldr	r2, [pc, #124]	; (8004ab0 <HAL_DMA_Init+0xb0>)
 8004a32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr
 8004aa8:	bffdfff8 	.word	0xbffdfff8
 8004aac:	cccccccd 	.word	0xcccccccd
 8004ab0:	40020000 	.word	0x40020000

08004ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b086      	sub	sp, #24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_DMA_Start_IT+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e04a      	b.n	8004b6a <HAL_DMA_Start_IT+0xb6>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d13a      	bne.n	8004b5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0201 	bic.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f8e2 	bl	8004cd4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 020e 	orr.w	r2, r2, #14
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e00f      	b.n	8004b4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 0204 	bic.w	r2, r2, #4
 8004b38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 020a 	orr.w	r2, r2, #10
 8004b48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e005      	b.n	8004b68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
 8004b66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d008      	beq.n	8004b9a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e020      	b.n	8004bdc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 020e 	bic.w	r2, r2, #14
 8004ba8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 0201 	bic.w	r2, r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d005      	beq.n	8004c0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2204      	movs	r2, #4
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e051      	b.n	8004cae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 020e 	bic.w	r2, r2, #14
 8004c18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <HAL_DMA_Abort_IT+0xd0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d029      	beq.n	8004c88 <HAL_DMA_Abort_IT+0xa0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a20      	ldr	r2, [pc, #128]	; (8004cbc <HAL_DMA_Abort_IT+0xd4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_DMA_Abort_IT+0x9c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_DMA_Abort_IT+0xd8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01a      	beq.n	8004c7e <HAL_DMA_Abort_IT+0x96>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <HAL_DMA_Abort_IT+0xdc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d012      	beq.n	8004c78 <HAL_DMA_Abort_IT+0x90>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_DMA_Abort_IT+0xe0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00a      	beq.n	8004c72 <HAL_DMA_Abort_IT+0x8a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	; (8004ccc <HAL_DMA_Abort_IT+0xe4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d102      	bne.n	8004c6c <HAL_DMA_Abort_IT+0x84>
 8004c66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c6a:	e00e      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c70:	e00b      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c76:	e008      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c7c:	e005      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c82:	e002      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c84:	2310      	movs	r3, #16
 8004c86:	e000      	b.n	8004c8a <HAL_DMA_Abort_IT+0xa2>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4a11      	ldr	r2, [pc, #68]	; (8004cd0 <HAL_DMA_Abort_IT+0xe8>)
 8004c8c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
    } 
  }
  return status;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40020008 	.word	0x40020008
 8004cbc:	4002001c 	.word	0x4002001c
 8004cc0:	40020030 	.word	0x40020030
 8004cc4:	40020044 	.word	0x40020044
 8004cc8:	40020058 	.word	0x40020058
 8004ccc:	4002006c 	.word	0x4002006c
 8004cd0:	40020000 	.word	0x40020000

08004cd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	2101      	movs	r1, #1
 8004cec:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b10      	cmp	r3, #16
 8004d00:	d108      	bne.n	8004d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004d12:	e007      	b.n	8004d24 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	60da      	str	r2, [r3, #12]
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
	...

08004d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b08b      	sub	sp, #44	; 0x2c
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d42:	e169      	b.n	8005018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d44:	2201      	movs	r2, #1
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	f040 8158 	bne.w	8005012 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	4a9a      	ldr	r2, [pc, #616]	; (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d05e      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d6c:	4a98      	ldr	r2, [pc, #608]	; (8004fd0 <HAL_GPIO_Init+0x2a0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d875      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d72:	4a98      	ldr	r2, [pc, #608]	; (8004fd4 <HAL_GPIO_Init+0x2a4>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d058      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d78:	4a96      	ldr	r2, [pc, #600]	; (8004fd4 <HAL_GPIO_Init+0x2a4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d86f      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d7e:	4a96      	ldr	r2, [pc, #600]	; (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d052      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d84:	4a94      	ldr	r2, [pc, #592]	; (8004fd8 <HAL_GPIO_Init+0x2a8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d869      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d8a:	4a94      	ldr	r2, [pc, #592]	; (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04c      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d90:	4a92      	ldr	r2, [pc, #584]	; (8004fdc <HAL_GPIO_Init+0x2ac>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d863      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004d96:	4a92      	ldr	r2, [pc, #584]	; (8004fe0 <HAL_GPIO_Init+0x2b0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d046      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
 8004d9c:	4a90      	ldr	r2, [pc, #576]	; (8004fe0 <HAL_GPIO_Init+0x2b0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d85d      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004da2:	2b12      	cmp	r3, #18
 8004da4:	d82a      	bhi.n	8004dfc <HAL_GPIO_Init+0xcc>
 8004da6:	2b12      	cmp	r3, #18
 8004da8:	d859      	bhi.n	8004e5e <HAL_GPIO_Init+0x12e>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_GPIO_Init+0x80>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004e2b 	.word	0x08004e2b
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004e17 	.word	0x08004e17
 8004dbc:	08004e59 	.word	0x08004e59
 8004dc0:	08004e5f 	.word	0x08004e5f
 8004dc4:	08004e5f 	.word	0x08004e5f
 8004dc8:	08004e5f 	.word	0x08004e5f
 8004dcc:	08004e5f 	.word	0x08004e5f
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e5f 	.word	0x08004e5f
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004e5f 	.word	0x08004e5f
 8004de4:	08004e5f 	.word	0x08004e5f
 8004de8:	08004e5f 	.word	0x08004e5f
 8004dec:	08004e5f 	.word	0x08004e5f
 8004df0:	08004e5f 	.word	0x08004e5f
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	4a79      	ldr	r2, [pc, #484]	; (8004fe4 <HAL_GPIO_Init+0x2b4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d013      	beq.n	8004e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004e02:	e02c      	b.n	8004e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	623b      	str	r3, [r7, #32]
          break;
 8004e0a:	e029      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	3304      	adds	r3, #4
 8004e12:	623b      	str	r3, [r7, #32]
          break;
 8004e14:	e024      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	3308      	adds	r3, #8
 8004e1c:	623b      	str	r3, [r7, #32]
          break;
 8004e1e:	e01f      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	330c      	adds	r3, #12
 8004e26:	623b      	str	r3, [r7, #32]
          break;
 8004e28:	e01a      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e32:	2304      	movs	r3, #4
 8004e34:	623b      	str	r3, [r7, #32]
          break;
 8004e36:	e013      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e40:	2308      	movs	r3, #8
 8004e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	611a      	str	r2, [r3, #16]
          break;
 8004e4a:	e009      	b.n	8004e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e4c:	2308      	movs	r3, #8
 8004e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69fa      	ldr	r2, [r7, #28]
 8004e54:	615a      	str	r2, [r3, #20]
          break;
 8004e56:	e003      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
          break;
 8004e5c:	e000      	b.n	8004e60 <HAL_GPIO_Init+0x130>
          break;
 8004e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2bff      	cmp	r3, #255	; 0xff
 8004e64:	d801      	bhi.n	8004e6a <HAL_GPIO_Init+0x13a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	e001      	b.n	8004e6e <HAL_GPIO_Init+0x13e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2bff      	cmp	r3, #255	; 0xff
 8004e74:	d802      	bhi.n	8004e7c <HAL_GPIO_Init+0x14c>
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	e002      	b.n	8004e82 <HAL_GPIO_Init+0x152>
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	3b08      	subs	r3, #8
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	210f      	movs	r1, #15
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	6a39      	ldr	r1, [r7, #32]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80b1 	beq.w	8005012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004eb0:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	4a4c      	ldr	r2, [pc, #304]	; (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6193      	str	r3, [r2, #24]
 8004ebc:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <HAL_GPIO_Init+0x2b8>)
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ec8:	4a48      	ldr	r2, [pc, #288]	; (8004fec <HAL_GPIO_Init+0x2bc>)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	089b      	lsrs	r3, r3, #2
 8004ece:	3302      	adds	r3, #2
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	f003 0303 	and.w	r3, r3, #3
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <HAL_GPIO_Init+0x2c0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <HAL_GPIO_Init+0x1ec>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3f      	ldr	r2, [pc, #252]	; (8004ff4 <HAL_GPIO_Init+0x2c4>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00d      	beq.n	8004f18 <HAL_GPIO_Init+0x1e8>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a3e      	ldr	r2, [pc, #248]	; (8004ff8 <HAL_GPIO_Init+0x2c8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d007      	beq.n	8004f14 <HAL_GPIO_Init+0x1e4>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3d      	ldr	r2, [pc, #244]	; (8004ffc <HAL_GPIO_Init+0x2cc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d101      	bne.n	8004f10 <HAL_GPIO_Init+0x1e0>
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e006      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f10:	2304      	movs	r3, #4
 8004f12:	e004      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e002      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e000      	b.n	8004f1e <HAL_GPIO_Init+0x1ee>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	f002 0203 	and.w	r2, r2, #3
 8004f24:	0092      	lsls	r2, r2, #2
 8004f26:	4093      	lsls	r3, r2
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f2e:	492f      	ldr	r1, [pc, #188]	; (8004fec <HAL_GPIO_Init+0x2bc>)
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d006      	beq.n	8004f56 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f48:	4b2d      	ldr	r3, [pc, #180]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	492c      	ldr	r1, [pc, #176]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]
 8004f54:	e006      	b.n	8004f64 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004f56:	4b2a      	ldr	r3, [pc, #168]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	4928      	ldr	r1, [pc, #160]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d006      	beq.n	8004f7e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f70:	4b23      	ldr	r3, [pc, #140]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	4922      	ldr	r1, [pc, #136]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	e006      	b.n	8004f8c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	491e      	ldr	r1, [pc, #120]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d006      	beq.n	8004fa6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f98:	4b19      	ldr	r3, [pc, #100]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	4918      	ldr	r1, [pc, #96]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	608b      	str	r3, [r1, #8]
 8004fa4:	e006      	b.n	8004fb4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fa8:	689a      	ldr	r2, [r3, #8]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	4914      	ldr	r1, [pc, #80]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d021      	beq.n	8005004 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	490e      	ldr	r1, [pc, #56]	; (8005000 <HAL_GPIO_Init+0x2d0>)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60cb      	str	r3, [r1, #12]
 8004fcc:	e021      	b.n	8005012 <HAL_GPIO_Init+0x2e2>
 8004fce:	bf00      	nop
 8004fd0:	10320000 	.word	0x10320000
 8004fd4:	10310000 	.word	0x10310000
 8004fd8:	10220000 	.word	0x10220000
 8004fdc:	10210000 	.word	0x10210000
 8004fe0:	10120000 	.word	0x10120000
 8004fe4:	10110000 	.word	0x10110000
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40010800 	.word	0x40010800
 8004ff4:	40010c00 	.word	0x40010c00
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_GPIO_Init+0x304>)
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	43db      	mvns	r3, r3
 800500c:	4909      	ldr	r1, [pc, #36]	; (8005034 <HAL_GPIO_Init+0x304>)
 800500e:	4013      	ands	r3, r2
 8005010:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	3301      	adds	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	fa22 f303 	lsr.w	r3, r2, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	f47f ae8e 	bne.w	8004d44 <HAL_GPIO_Init+0x14>
  }
}
 8005028:	bf00      	nop
 800502a:	bf00      	nop
 800502c:	372c      	adds	r7, #44	; 0x2c
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	40010400 	.word	0x40010400

08005038 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8005046:	e09a      	b.n	800517e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005048:	2201      	movs	r2, #1
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 808d 	beq.w	8005178 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800505e:	4a4e      	ldr	r2, [pc, #312]	; (8005198 <HAL_GPIO_DeInit+0x160>)
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	3302      	adds	r3, #2
 8005066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800506a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	220f      	movs	r2, #15
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4013      	ands	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a46      	ldr	r2, [pc, #280]	; (800519c <HAL_GPIO_DeInit+0x164>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_GPIO_DeInit+0x78>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a45      	ldr	r2, [pc, #276]	; (80051a0 <HAL_GPIO_DeInit+0x168>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00d      	beq.n	80050ac <HAL_GPIO_DeInit+0x74>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a44      	ldr	r2, [pc, #272]	; (80051a4 <HAL_GPIO_DeInit+0x16c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d007      	beq.n	80050a8 <HAL_GPIO_DeInit+0x70>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a43      	ldr	r2, [pc, #268]	; (80051a8 <HAL_GPIO_DeInit+0x170>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <HAL_GPIO_DeInit+0x6c>
 80050a0:	2303      	movs	r3, #3
 80050a2:	e006      	b.n	80050b2 <HAL_GPIO_DeInit+0x7a>
 80050a4:	2304      	movs	r3, #4
 80050a6:	e004      	b.n	80050b2 <HAL_GPIO_DeInit+0x7a>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e002      	b.n	80050b2 <HAL_GPIO_DeInit+0x7a>
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_GPIO_DeInit+0x7a>
 80050b0:	2300      	movs	r3, #0
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	f002 0203 	and.w	r2, r2, #3
 80050b8:	0092      	lsls	r2, r2, #2
 80050ba:	4093      	lsls	r3, r2
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d132      	bne.n	8005128 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	220f      	movs	r2, #15
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80050d2:	4a31      	ldr	r2, [pc, #196]	; (8005198 <HAL_GPIO_DeInit+0x160>)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	089b      	lsrs	r3, r3, #2
 80050d8:	3302      	adds	r3, #2
 80050da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	43da      	mvns	r2, r3
 80050e2:	482d      	ldr	r0, [pc, #180]	; (8005198 <HAL_GPIO_DeInit+0x160>)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	400a      	ands	r2, r1
 80050ea:	3302      	adds	r3, #2
 80050ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80050f0:	4b2e      	ldr	r3, [pc, #184]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	492c      	ldr	r1, [pc, #176]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80050fe:	4b2b      	ldr	r3, [pc, #172]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	43db      	mvns	r3, r3
 8005106:	4929      	ldr	r1, [pc, #164]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 8005108:	4013      	ands	r3, r2
 800510a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	43db      	mvns	r3, r3
 8005114:	4925      	ldr	r1, [pc, #148]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 8005116:	4013      	ands	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	43db      	mvns	r3, r3
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_GPIO_DeInit+0x174>)
 8005124:	4013      	ands	r3, r2
 8005126:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2bff      	cmp	r3, #255	; 0xff
 800512c:	d801      	bhi.n	8005132 <HAL_GPIO_DeInit+0xfa>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	e001      	b.n	8005136 <HAL_GPIO_DeInit+0xfe>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3304      	adds	r3, #4
 8005136:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	2bff      	cmp	r3, #255	; 0xff
 800513c:	d802      	bhi.n	8005144 <HAL_GPIO_DeInit+0x10c>
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	e002      	b.n	800514a <HAL_GPIO_DeInit+0x112>
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3b08      	subs	r3, #8
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	210f      	movs	r1, #15
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	43db      	mvns	r3, r3
 800515a:	401a      	ands	r2, r3
 800515c:	2104      	movs	r1, #4
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	431a      	orrs	r2, r3
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	43db      	mvns	r3, r3
 8005172:	401a      	ands	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3301      	adds	r3, #1
 800517c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	fa22 f303 	lsr.w	r3, r2, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	f47f af5e 	bne.w	8005048 <HAL_GPIO_DeInit+0x10>
  }
}
 800518c:	bf00      	nop
 800518e:	bf00      	nop
 8005190:	3724      	adds	r7, #36	; 0x24
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr
 8005198:	40010000 	.word	0x40010000
 800519c:	40010800 	.word	0x40010800
 80051a0:	40010c00 	.word	0x40010c00
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	40010400 	.word	0x40010400

080051b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	460b      	mov	r3, r1
 80051ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051c8:	2301      	movs	r3, #1
 80051ca:	73fb      	strb	r3, [r7, #15]
 80051cc:	e001      	b.n	80051d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ce:	2300      	movs	r3, #0
 80051d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	807b      	strh	r3, [r7, #2]
 80051ea:	4613      	mov	r3, r2
 80051ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051ee:	787b      	ldrb	r3, [r7, #1]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051f4:	887a      	ldrh	r2, [r7, #2]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80051fa:	e003      	b.n	8005204 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80051fc:	887b      	ldrh	r3, [r7, #2]
 80051fe:	041a      	lsls	r2, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	611a      	str	r2, [r3, #16]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr

0800520e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	460b      	mov	r3, r1
 8005218:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005220:	887a      	ldrh	r2, [r7, #2]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4013      	ands	r3, r2
 8005226:	041a      	lsls	r2, r3, #16
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	43d9      	mvns	r1, r3
 800522c:	887b      	ldrh	r3, [r7, #2]
 800522e:	400b      	ands	r3, r1
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d006      	beq.n	8005264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005256:	4a05      	ldr	r2, [pc, #20]	; (800526c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fe64 	bl	8002f2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40010400 	.word	0x40010400

08005270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e12b      	b.n	80054da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fd fa64 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0201 	bic.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d4:	f001 f9dc 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
 80052d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4a81      	ldr	r2, [pc, #516]	; (80054e4 <HAL_I2C_Init+0x274>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d807      	bhi.n	80052f4 <HAL_I2C_Init+0x84>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4a80      	ldr	r2, [pc, #512]	; (80054e8 <HAL_I2C_Init+0x278>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	bf94      	ite	ls
 80052ec:	2301      	movls	r3, #1
 80052ee:	2300      	movhi	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e006      	b.n	8005302 <HAL_I2C_Init+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a7d      	ldr	r2, [pc, #500]	; (80054ec <HAL_I2C_Init+0x27c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	bf94      	ite	ls
 80052fc:	2301      	movls	r3, #1
 80052fe:	2300      	movhi	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e0e7      	b.n	80054da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a78      	ldr	r2, [pc, #480]	; (80054f0 <HAL_I2C_Init+0x280>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0c9b      	lsrs	r3, r3, #18
 8005314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a6a      	ldr	r2, [pc, #424]	; (80054e4 <HAL_I2C_Init+0x274>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <HAL_I2C_Init+0xd4>
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3301      	adds	r3, #1
 8005342:	e009      	b.n	8005358 <HAL_I2C_Init+0xe8>
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	4a69      	ldr	r2, [pc, #420]	; (80054f4 <HAL_I2C_Init+0x284>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099b      	lsrs	r3, r3, #6
 8005356:	3301      	adds	r3, #1
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	430b      	orrs	r3, r1
 800535e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800536a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	495c      	ldr	r1, [pc, #368]	; (80054e4 <HAL_I2C_Init+0x274>)
 8005374:	428b      	cmp	r3, r1
 8005376:	d819      	bhi.n	80053ac <HAL_I2C_Init+0x13c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e59      	subs	r1, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fbb1 f3f3 	udiv	r3, r1, r3
 8005386:	1c59      	adds	r1, r3, #1
 8005388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800538c:	400b      	ands	r3, r1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <HAL_I2C_Init+0x138>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1e59      	subs	r1, r3, #1
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a6:	e051      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053a8:	2304      	movs	r3, #4
 80053aa:	e04f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d111      	bne.n	80053d8 <HAL_I2C_Init+0x168>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1e58      	subs	r0, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	440b      	add	r3, r1
 80053c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c6:	3301      	adds	r3, #1
 80053c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e012      	b.n	80053fe <HAL_I2C_Init+0x18e>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf0c      	ite	eq
 80053f8:	2301      	moveq	r3, #1
 80053fa:	2300      	movne	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <HAL_I2C_Init+0x196>
 8005402:	2301      	movs	r3, #1
 8005404:	e022      	b.n	800544c <HAL_I2C_Init+0x1dc>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10e      	bne.n	800542c <HAL_I2C_Init+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e58      	subs	r0, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6859      	ldr	r1, [r3, #4]
 8005416:	460b      	mov	r3, r1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	440b      	add	r3, r1
 800541c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542a:	e00f      	b.n	800544c <HAL_I2C_Init+0x1dc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1e58      	subs	r0, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6859      	ldr	r1, [r3, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	0099      	lsls	r1, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005442:	3301      	adds	r3, #1
 8005444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	6809      	ldr	r1, [r1, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	69da      	ldr	r2, [r3, #28]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800547a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	6911      	ldr	r1, [r2, #16]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	4311      	orrs	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	430b      	orrs	r3, r1
 800548e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	000186a0 	.word	0x000186a0
 80054e8:	001e847f 	.word	0x001e847f
 80054ec:	003d08ff 	.word	0x003d08ff
 80054f0:	431bde83 	.word	0x431bde83
 80054f4:	10624dd3 	.word	0x10624dd3

080054f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005516:	f7fd ff0b 	bl	8003330 <HAL_GetTick>
 800551a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	f040 8244 	bne.w	80059b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2319      	movs	r3, #25
 8005530:	2201      	movs	r2, #1
 8005532:	4982      	ldr	r1, [pc, #520]	; (800573c <HAL_I2C_Mem_Read+0x244>)
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fb3b 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	e237      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_I2C_Mem_Read+0x5a>
 800554e:	2302      	movs	r3, #2
 8005550:	e230      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d007      	beq.n	8005578 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0201 	orr.w	r2, r2, #1
 8005576:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005586:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2222      	movs	r2, #34	; 0x22
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2240      	movs	r2, #64	; 0x40
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4a62      	ldr	r2, [pc, #392]	; (8005740 <HAL_I2C_Mem_Read+0x248>)
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ba:	88f8      	ldrh	r0, [r7, #6]
 80055bc:	893a      	ldrh	r2, [r7, #8]
 80055be:	8979      	ldrh	r1, [r7, #10]
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	4603      	mov	r3, r0
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa08 	bl	80059e0 <I2C_RequestMemoryRead>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e1ec      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d113      	bne.n	800560a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e2:	2300      	movs	r3, #0
 80055e4:	61fb      	str	r3, [r7, #28]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695b      	ldr	r3, [r3, #20]
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	e1c0      	b.n	800598c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560e:	2b01      	cmp	r3, #1
 8005610:	d11e      	bne.n	8005650 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005620:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005622:	b672      	cpsid	i
}
 8005624:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800564c:	b662      	cpsie	i
}
 800564e:	e035      	b.n	80056bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005654:	2b02      	cmp	r3, #2
 8005656:	d11e      	bne.n	8005696 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005666:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005668:	b672      	cpsid	i
}
 800566a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005690:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005692:	b662      	cpsie	i
}
 8005694:	e012      	b.n	80056bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a6:	2300      	movs	r3, #0
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80056bc:	e166      	b.n	800598c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	f200 811f 	bhi.w	8005906 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d123      	bne.n	8005718 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fb82 	bl	8005dde <I2C_WaitOnRXNEFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e167      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005716:	e139      	b.n	800598c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800571c:	2b02      	cmp	r3, #2
 800571e:	d152      	bne.n	80057c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	2200      	movs	r2, #0
 8005728:	4906      	ldr	r1, [pc, #24]	; (8005744 <HAL_I2C_Mem_Read+0x24c>)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fa40 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e13c      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
 800573a:	bf00      	nop
 800573c:	00100002 	.word	0x00100002
 8005740:	ffff0000 	.word	0xffff0000
 8005744:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005748:	b672      	cpsid	i
}
 800574a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800578e:	b662      	cpsie	i
}
 8005790:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691a      	ldr	r2, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057c4:	e0e2      	b.n	800598c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057cc:	2200      	movs	r2, #0
 80057ce:	497b      	ldr	r1, [pc, #492]	; (80059bc <HAL_I2C_Mem_Read+0x4c4>)
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f9ed 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d001      	beq.n	80057e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e0e9      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80057f0:	b672      	cpsid	i
}
 80057f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005826:	4b66      	ldr	r3, [pc, #408]	; (80059c0 <HAL_I2C_Mem_Read+0x4c8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	08db      	lsrs	r3, r3, #3
 800582c:	4a65      	ldr	r2, [pc, #404]	; (80059c4 <HAL_I2C_Mem_Read+0x4cc>)
 800582e:	fba2 2303 	umull	r2, r3, r2, r3
 8005832:	0a1a      	lsrs	r2, r3, #8
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	00da      	lsls	r2, r3, #3
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	3b01      	subs	r3, #1
 8005844:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d118      	bne.n	800587e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800586e:	b662      	cpsie	i
}
 8005870:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e09a      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d1d9      	bne.n	8005840 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800589a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691a      	ldr	r2, [r3, #16]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80058ce:	b662      	cpsie	i
}
 80058d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005904:	e042      	b.n	800598c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fa67 	bl	8005dde <I2C_WaitOnRXNEFlagUntilTimeout>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e04c      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d118      	bne.n	800598c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f ae94 	bne.w	80056be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e000      	b.n	80059b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80059b2:	2302      	movs	r3, #2
  }
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3728      	adds	r7, #40	; 0x28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	00010004 	.word	0x00010004
 80059c0:	20000004 	.word	0x20000004
 80059c4:	14f8b589 	.word	0x14f8b589

080059c8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
	...

080059e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	817b      	strh	r3, [r7, #10]
 80059f2:	460b      	mov	r3, r1
 80059f4:	813b      	strh	r3, [r7, #8]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f8c2 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a40:	d103      	bne.n	8005a4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e0aa      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a4e:	897b      	ldrh	r3, [r7, #10]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	4952      	ldr	r1, [pc, #328]	; (8005bac <I2C_RequestMemoryRead+0x1cc>)
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f8fa 	bl	8005c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e097      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a74:	2300      	movs	r3, #0
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f964 	bl	8005d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00d      	beq.n	8005ab6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d107      	bne.n	8005ab2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ab0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e076      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005abc:	893b      	ldrh	r3, [r7, #8]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	611a      	str	r2, [r3, #16]
 8005ac6:	e021      	b.n	8005b0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ac8:	893b      	ldrh	r3, [r7, #8]
 8005aca:	0a1b      	lsrs	r3, r3, #8
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad8:	6a39      	ldr	r1, [r7, #32]
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f93e 	bl	8005d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00d      	beq.n	8005b02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d107      	bne.n	8005afe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e050      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b02:	893b      	ldrh	r3, [r7, #8]
 8005b04:	b2da      	uxtb	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	6a39      	ldr	r1, [r7, #32]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f923 	bl	8005d5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00d      	beq.n	8005b38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d107      	bne.n	8005b34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e035      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f82b 	bl	8005bb0 <I2C_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00d      	beq.n	8005b7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6e:	d103      	bne.n	8005b78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e013      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b7c:	897b      	ldrh	r3, [r7, #10]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f043 0301 	orr.w	r3, r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	4906      	ldr	r1, [pc, #24]	; (8005bac <I2C_RequestMemoryRead+0x1cc>)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f863 	bl	8005c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3718      	adds	r7, #24
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	00010002 	.word	0x00010002

08005bb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bc0:	e025      	b.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d021      	beq.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fd fbb1 	bl	8003330 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d116      	bne.n	8005c0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e023      	b.n	8005c56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10d      	bne.n	8005c34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	43da      	mvns	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	e00c      	b.n	8005c4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	43da      	mvns	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	bf0c      	ite	eq
 8005c46:	2301      	moveq	r3, #1
 8005c48:	2300      	movne	r3, #0
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	79fb      	ldrb	r3, [r7, #7]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d0b6      	beq.n	8005bc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	607a      	str	r2, [r7, #4]
 8005c6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c6c:	e051      	b.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7c:	d123      	bne.n	8005cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0204 	orr.w	r2, r3, #4
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e046      	b.n	8005d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d021      	beq.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cce:	f7fd fb2f 	bl	8003330 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d116      	bne.n	8005d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	f043 0220 	orr.w	r2, r3, #32
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e020      	b.n	8005d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10c      	bne.n	8005d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	43da      	mvns	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf14      	ite	ne
 8005d2e:	2301      	movne	r3, #1
 8005d30:	2300      	moveq	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	e00b      	b.n	8005d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	43da      	mvns	r2, r3
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	4013      	ands	r3, r2
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d18d      	bne.n	8005c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d68:	e02d      	b.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 f88d 	bl	8005e8a <I2C_IsAcknowledgeFailed>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e02d      	b.n	8005dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d021      	beq.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d82:	f7fd fad5 	bl	8003330 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d302      	bcc.n	8005d98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d116      	bne.n	8005dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	f043 0220 	orr.w	r2, r3, #32
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e007      	b.n	8005dd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d1ca      	bne.n	8005d6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dea:	e042      	b.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d119      	bne.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f06f 0210 	mvn.w	r2, #16
 8005e02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e029      	b.n	8005e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fd fa7f 	bl	8003330 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f043 0220 	orr.w	r2, r3, #32
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e007      	b.n	8005e82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d1b5      	bne.n	8005dec <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea0:	d11b      	bne.n	8005eda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005eaa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	f043 0204 	orr.w	r2, r3, #4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e272      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 8087 	beq.w	8006016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f08:	4b92      	ldr	r3, [pc, #584]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 030c 	and.w	r3, r3, #12
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d00c      	beq.n	8005f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f14:	4b8f      	ldr	r3, [pc, #572]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f003 030c 	and.w	r3, r3, #12
 8005f1c:	2b08      	cmp	r3, #8
 8005f1e:	d112      	bne.n	8005f46 <HAL_RCC_OscConfig+0x5e>
 8005f20:	4b8c      	ldr	r3, [pc, #560]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2c:	d10b      	bne.n	8005f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2e:	4b89      	ldr	r3, [pc, #548]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d06c      	beq.n	8006014 <HAL_RCC_OscConfig+0x12c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d168      	bne.n	8006014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e24c      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4e:	d106      	bne.n	8005f5e <HAL_RCC_OscConfig+0x76>
 8005f50:	4b80      	ldr	r3, [pc, #512]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a7f      	ldr	r2, [pc, #508]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e02e      	b.n	8005fbc <HAL_RCC_OscConfig+0xd4>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10c      	bne.n	8005f80 <HAL_RCC_OscConfig+0x98>
 8005f66:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a7a      	ldr	r2, [pc, #488]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	4b78      	ldr	r3, [pc, #480]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a77      	ldr	r2, [pc, #476]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	e01d      	b.n	8005fbc <HAL_RCC_OscConfig+0xd4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0xbc>
 8005f8a:	4b72      	ldr	r3, [pc, #456]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a71      	ldr	r2, [pc, #452]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	4b6f      	ldr	r3, [pc, #444]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a6e      	ldr	r2, [pc, #440]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	e00b      	b.n	8005fbc <HAL_RCC_OscConfig+0xd4>
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	4b68      	ldr	r3, [pc, #416]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a67      	ldr	r2, [pc, #412]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d013      	beq.n	8005fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc4:	f7fd f9b4 	bl	8003330 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fcc:	f7fd f9b0 	bl	8003330 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b64      	cmp	r3, #100	; 0x64
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e200      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fde:	4b5d      	ldr	r3, [pc, #372]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0xe4>
 8005fea:	e014      	b.n	8006016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fec:	f7fd f9a0 	bl	8003330 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ff4:	f7fd f99c 	bl	8003330 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b64      	cmp	r3, #100	; 0x64
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e1ec      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006006:	4b53      	ldr	r3, [pc, #332]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1f0      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x10c>
 8006012:	e000      	b.n	8006016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d063      	beq.n	80060ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006022:	4b4c      	ldr	r3, [pc, #304]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 030c 	and.w	r3, r3, #12
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800602e:	4b49      	ldr	r3, [pc, #292]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 030c 	and.w	r3, r3, #12
 8006036:	2b08      	cmp	r3, #8
 8006038:	d11c      	bne.n	8006074 <HAL_RCC_OscConfig+0x18c>
 800603a:	4b46      	ldr	r3, [pc, #280]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d116      	bne.n	8006074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006046:	4b43      	ldr	r3, [pc, #268]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_RCC_OscConfig+0x176>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d001      	beq.n	800605e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e1c0      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800605e:	4b3d      	ldr	r3, [pc, #244]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	4939      	ldr	r1, [pc, #228]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 800606e:	4313      	orrs	r3, r2
 8006070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006072:	e03a      	b.n	80060ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d020      	beq.n	80060be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800607c:	4b36      	ldr	r3, [pc, #216]	; (8006158 <HAL_RCC_OscConfig+0x270>)
 800607e:	2201      	movs	r2, #1
 8006080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006082:	f7fd f955 	bl	8003330 <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608a:	f7fd f951 	bl	8003330 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e1a1      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d0f0      	beq.n	800608a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4927      	ldr	r1, [pc, #156]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]
 80060bc:	e015      	b.n	80060ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060be:	4b26      	ldr	r3, [pc, #152]	; (8006158 <HAL_RCC_OscConfig+0x270>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fd f934 	bl	8003330 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060cc:	f7fd f930 	bl	8003330 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e180      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d03a      	beq.n	800616c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d019      	beq.n	8006132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060fe:	4b17      	ldr	r3, [pc, #92]	; (800615c <HAL_RCC_OscConfig+0x274>)
 8006100:	2201      	movs	r2, #1
 8006102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006104:	f7fd f914 	bl	8003330 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800610c:	f7fd f910 	bl	8003330 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e160      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611e:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <HAL_RCC_OscConfig+0x26c>)
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0f0      	beq.n	800610c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800612a:	2001      	movs	r0, #1
 800612c:	f000 fad8 	bl	80066e0 <RCC_Delay>
 8006130:	e01c      	b.n	800616c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <HAL_RCC_OscConfig+0x274>)
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006138:	f7fd f8fa 	bl	8003330 <HAL_GetTick>
 800613c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800613e:	e00f      	b.n	8006160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006140:	f7fd f8f6 	bl	8003330 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d908      	bls.n	8006160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e146      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
 8006152:	bf00      	nop
 8006154:	40021000 	.word	0x40021000
 8006158:	42420000 	.word	0x42420000
 800615c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006160:	4b92      	ldr	r3, [pc, #584]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e9      	bne.n	8006140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a6 	beq.w	80062c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800617e:	4b8b      	ldr	r3, [pc, #556]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10d      	bne.n	80061a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b88      	ldr	r3, [pc, #544]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	4a87      	ldr	r2, [pc, #540]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006194:	61d3      	str	r3, [r2, #28]
 8006196:	4b85      	ldr	r3, [pc, #532]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061a6:	4b82      	ldr	r3, [pc, #520]	; (80063b0 <HAL_RCC_OscConfig+0x4c8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d118      	bne.n	80061e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061b2:	4b7f      	ldr	r3, [pc, #508]	; (80063b0 <HAL_RCC_OscConfig+0x4c8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a7e      	ldr	r2, [pc, #504]	; (80063b0 <HAL_RCC_OscConfig+0x4c8>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061be:	f7fd f8b7 	bl	8003330 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c6:	f7fd f8b3 	bl	8003330 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b64      	cmp	r3, #100	; 0x64
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e103      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d8:	4b75      	ldr	r3, [pc, #468]	; (80063b0 <HAL_RCC_OscConfig+0x4c8>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d106      	bne.n	80061fa <HAL_RCC_OscConfig+0x312>
 80061ec:	4b6f      	ldr	r3, [pc, #444]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	4a6e      	ldr	r2, [pc, #440]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80061f2:	f043 0301 	orr.w	r3, r3, #1
 80061f6:	6213      	str	r3, [r2, #32]
 80061f8:	e02d      	b.n	8006256 <HAL_RCC_OscConfig+0x36e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCC_OscConfig+0x334>
 8006202:	4b6a      	ldr	r3, [pc, #424]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	4a69      	ldr	r2, [pc, #420]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006208:	f023 0301 	bic.w	r3, r3, #1
 800620c:	6213      	str	r3, [r2, #32]
 800620e:	4b67      	ldr	r3, [pc, #412]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	4a66      	ldr	r2, [pc, #408]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006214:	f023 0304 	bic.w	r3, r3, #4
 8006218:	6213      	str	r3, [r2, #32]
 800621a:	e01c      	b.n	8006256 <HAL_RCC_OscConfig+0x36e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b05      	cmp	r3, #5
 8006222:	d10c      	bne.n	800623e <HAL_RCC_OscConfig+0x356>
 8006224:	4b61      	ldr	r3, [pc, #388]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	4a60      	ldr	r2, [pc, #384]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	6213      	str	r3, [r2, #32]
 8006230:	4b5e      	ldr	r3, [pc, #376]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	4a5d      	ldr	r2, [pc, #372]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006236:	f043 0301 	orr.w	r3, r3, #1
 800623a:	6213      	str	r3, [r2, #32]
 800623c:	e00b      	b.n	8006256 <HAL_RCC_OscConfig+0x36e>
 800623e:	4b5b      	ldr	r3, [pc, #364]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	4a5a      	ldr	r2, [pc, #360]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006244:	f023 0301 	bic.w	r3, r3, #1
 8006248:	6213      	str	r3, [r2, #32]
 800624a:	4b58      	ldr	r3, [pc, #352]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	4a57      	ldr	r2, [pc, #348]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d015      	beq.n	800628a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800625e:	f7fd f867 	bl	8003330 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006264:	e00a      	b.n	800627c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006266:	f7fd f863 	bl	8003330 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	f241 3288 	movw	r2, #5000	; 0x1388
 8006274:	4293      	cmp	r3, r2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e0b1      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800627c:	4b4b      	ldr	r3, [pc, #300]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800627e:	6a1b      	ldr	r3, [r3, #32]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ee      	beq.n	8006266 <HAL_RCC_OscConfig+0x37e>
 8006288:	e014      	b.n	80062b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800628a:	f7fd f851 	bl	8003330 <HAL_GetTick>
 800628e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006292:	f7fd f84d 	bl	8003330 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e09b      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a8:	4b40      	ldr	r3, [pc, #256]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1ee      	bne.n	8006292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d105      	bne.n	80062c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ba:	4b3c      	ldr	r3, [pc, #240]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4a3b      	ldr	r2, [pc, #236]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80062c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8087 	beq.w	80063de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062d0:	4b36      	ldr	r3, [pc, #216]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 030c 	and.w	r3, r3, #12
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d061      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d146      	bne.n	8006372 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062e4:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <HAL_RCC_OscConfig+0x4cc>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ea:	f7fd f821 	bl	8003330 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f2:	f7fd f81d 	bl	8003330 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e06d      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006304:	4b29      	ldr	r3, [pc, #164]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1f0      	bne.n	80062f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006318:	d108      	bne.n	800632c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	4921      	ldr	r1, [pc, #132]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006328:	4313      	orrs	r3, r2
 800632a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800632c:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a19      	ldr	r1, [r3, #32]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	430b      	orrs	r3, r1
 800633e:	491b      	ldr	r1, [pc, #108]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006340:	4313      	orrs	r3, r2
 8006342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCC_OscConfig+0x4cc>)
 8006346:	2201      	movs	r2, #1
 8006348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634a:	f7fc fff1 	bl	8003330 <HAL_GetTick>
 800634e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006350:	e008      	b.n	8006364 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006352:	f7fc ffed 	bl	8003330 <HAL_GetTick>
 8006356:	4602      	mov	r2, r0
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d901      	bls.n	8006364 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e03d      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d0f0      	beq.n	8006352 <HAL_RCC_OscConfig+0x46a>
 8006370:	e035      	b.n	80063de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006372:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <HAL_RCC_OscConfig+0x4cc>)
 8006374:	2200      	movs	r2, #0
 8006376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006378:	f7fc ffda 	bl	8003330 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006380:	f7fc ffd6 	bl	8003330 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e026      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <HAL_RCC_OscConfig+0x4c4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x498>
 800639e:	e01e      	b.n	80063de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d107      	bne.n	80063b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e019      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
 80063ac:	40021000 	.word	0x40021000
 80063b0:	40007000 	.word	0x40007000
 80063b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063b8:	4b0b      	ldr	r3, [pc, #44]	; (80063e8 <HAL_RCC_OscConfig+0x500>)
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d106      	bne.n	80063da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d001      	beq.n	80063de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e000      	b.n	80063e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3718      	adds	r7, #24
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000

080063ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0d0      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006400:	4b6a      	ldr	r3, [pc, #424]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d910      	bls.n	8006430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800640e:	4b67      	ldr	r3, [pc, #412]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f023 0207 	bic.w	r2, r3, #7
 8006416:	4965      	ldr	r1, [pc, #404]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	4313      	orrs	r3, r2
 800641c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641e:	4b63      	ldr	r3, [pc, #396]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d001      	beq.n	8006430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e0b8      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d020      	beq.n	800647e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d005      	beq.n	8006454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006448:	4b59      	ldr	r3, [pc, #356]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0308 	and.w	r3, r3, #8
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006460:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a52      	ldr	r2, [pc, #328]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800646a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800646c:	4b50      	ldr	r3, [pc, #320]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	494d      	ldr	r1, [pc, #308]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	4313      	orrs	r3, r2
 800647c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d040      	beq.n	800650c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d107      	bne.n	80064a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d115      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e07f      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d107      	bne.n	80064ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064aa:	4b41      	ldr	r3, [pc, #260]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e073      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ba:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e06b      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ca:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f023 0203 	bic.w	r2, r3, #3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	4936      	ldr	r1, [pc, #216]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064dc:	f7fc ff28 	bl	8003330 <HAL_GetTick>
 80064e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e2:	e00a      	b.n	80064fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e4:	f7fc ff24 	bl	8003330 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e053      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fa:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 020c 	and.w	r2, r3, #12
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	429a      	cmp	r2, r3
 800650a:	d1eb      	bne.n	80064e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800650c:	4b27      	ldr	r3, [pc, #156]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d210      	bcs.n	800653c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b24      	ldr	r3, [pc, #144]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 0207 	bic.w	r2, r3, #7
 8006522:	4922      	ldr	r1, [pc, #136]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b20      	ldr	r3, [pc, #128]	; (80065ac <HAL_RCC_ClockConfig+0x1c0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e032      	b.n	80065a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006548:	4b19      	ldr	r3, [pc, #100]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	4916      	ldr	r1, [pc, #88]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006556:	4313      	orrs	r3, r2
 8006558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006566:	4b12      	ldr	r3, [pc, #72]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	490e      	ldr	r1, [pc, #56]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006576:	4313      	orrs	r3, r2
 8006578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800657a:	f000 f821 	bl	80065c0 <HAL_RCC_GetSysClockFreq>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	490a      	ldr	r1, [pc, #40]	; (80065b4 <HAL_RCC_ClockConfig+0x1c8>)
 800658c:	5ccb      	ldrb	r3, [r1, r3]
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	4a09      	ldr	r2, [pc, #36]	; (80065b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <HAL_RCC_ClockConfig+0x1d0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fc fe86 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	40022000 	.word	0x40022000
 80065b0:	40021000 	.word	0x40021000
 80065b4:	0800b39c 	.word	0x0800b39c
 80065b8:	20000004 	.word	0x20000004
 80065bc:	20000038 	.word	0x20000038

080065c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c0:	b490      	push	{r4, r7}
 80065c2:	b08a      	sub	sp, #40	; 0x28
 80065c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <HAL_RCC_GetSysClockFreq+0xac>)
 80065c8:	1d3c      	adds	r4, r7, #4
 80065ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065d0:	f240 2301 	movw	r3, #513	; 0x201
 80065d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	2300      	movs	r3, #0
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065ea:	4b21      	ldr	r3, [pc, #132]	; (8006670 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	f003 030c 	and.w	r3, r3, #12
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d002      	beq.n	8006600 <HAL_RCC_GetSysClockFreq+0x40>
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d003      	beq.n	8006606 <HAL_RCC_GetSysClockFreq+0x46>
 80065fe:	e02b      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006600:	4b1c      	ldr	r3, [pc, #112]	; (8006674 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006602:	623b      	str	r3, [r7, #32]
      break;
 8006604:	e02b      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	0c9b      	lsrs	r3, r3, #18
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	3328      	adds	r3, #40	; 0x28
 8006610:	443b      	add	r3, r7
 8006612:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006616:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	0c5b      	lsrs	r3, r3, #17
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	3328      	adds	r3, #40	; 0x28
 800662e:	443b      	add	r3, r7
 8006630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006634:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	4a0e      	ldr	r2, [pc, #56]	; (8006674 <HAL_RCC_GetSysClockFreq+0xb4>)
 800663a:	fb03 f202 	mul.w	r2, r3, r2
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
 8006646:	e004      	b.n	8006652 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	4a0b      	ldr	r2, [pc, #44]	; (8006678 <HAL_RCC_GetSysClockFreq+0xb8>)
 800664c:	fb02 f303 	mul.w	r3, r2, r3
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	623b      	str	r3, [r7, #32]
      break;
 8006656:	e002      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006658:	4b06      	ldr	r3, [pc, #24]	; (8006674 <HAL_RCC_GetSysClockFreq+0xb4>)
 800665a:	623b      	str	r3, [r7, #32]
      break;
 800665c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665e:	6a3b      	ldr	r3, [r7, #32]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3728      	adds	r7, #40	; 0x28
 8006664:	46bd      	mov	sp, r7
 8006666:	bc90      	pop	{r4, r7}
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	0800b28c 	.word	0x0800b28c
 8006670:	40021000 	.word	0x40021000
 8006674:	007a1200 	.word	0x007a1200
 8006678:	003d0900 	.word	0x003d0900

0800667c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006680:	4b02      	ldr	r3, [pc, #8]	; (800668c <HAL_RCC_GetHCLKFreq+0x10>)
 8006682:	681b      	ldr	r3, [r3, #0]
}
 8006684:	4618      	mov	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	20000004 	.word	0x20000004

08006690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006694:	f7ff fff2 	bl	800667c <HAL_RCC_GetHCLKFreq>
 8006698:	4602      	mov	r2, r0
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	4903      	ldr	r1, [pc, #12]	; (80066b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a6:	5ccb      	ldrb	r3, [r1, r3]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40021000 	.word	0x40021000
 80066b4:	0800b3ac 	.word	0x0800b3ac

080066b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066bc:	f7ff ffde 	bl	800667c <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	0adb      	lsrs	r3, r3, #11
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4903      	ldr	r1, [pc, #12]	; (80066dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40021000 	.word	0x40021000
 80066dc:	0800b3ac 	.word	0x0800b3ac

080066e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066e8:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <RCC_Delay+0x34>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a0a      	ldr	r2, [pc, #40]	; (8006718 <RCC_Delay+0x38>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	0a5b      	lsrs	r3, r3, #9
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066fc:	bf00      	nop
  }
  while (Delay --);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1e5a      	subs	r2, r3, #1
 8006702:	60fa      	str	r2, [r7, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1f9      	bne.n	80066fc <RCC_Delay+0x1c>
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr
 8006714:	20000004 	.word	0x20000004
 8006718:	10624dd3 	.word	0x10624dd3

0800671c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b00      	cmp	r3, #0
 8006736:	d07d      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800673c:	4b4f      	ldr	r3, [pc, #316]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006748:	4b4c      	ldr	r3, [pc, #304]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674a:	69db      	ldr	r3, [r3, #28]
 800674c:	4a4b      	ldr	r2, [pc, #300]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006752:	61d3      	str	r3, [r2, #28]
 8006754:	4b49      	ldr	r3, [pc, #292]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006764:	4b46      	ldr	r3, [pc, #280]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d118      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006770:	4b43      	ldr	r3, [pc, #268]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a42      	ldr	r2, [pc, #264]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800677c:	f7fc fdd8 	bl	8003330 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006782:	e008      	b.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006784:	f7fc fdd4 	bl	8003330 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b64      	cmp	r3, #100	; 0x64
 8006790:	d901      	bls.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e06d      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006796:	4b3a      	ldr	r3, [pc, #232]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067a2:	4b36      	ldr	r3, [pc, #216]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d02e      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d027      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067c0:	4b2e      	ldr	r3, [pc, #184]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80067ca:	4b2e      	ldr	r3, [pc, #184]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067cc:	2201      	movs	r2, #1
 80067ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80067d0:	4b2c      	ldr	r3, [pc, #176]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80067d6:	4a29      	ldr	r2, [pc, #164]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d014      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e6:	f7fc fda3 	bl	8003330 <HAL_GetTick>
 80067ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067ec:	e00a      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ee:	f7fc fd9f 	bl	8003330 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d901      	bls.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e036      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006804:	4b1d      	ldr	r3, [pc, #116]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0ee      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006810:	4b1a      	ldr	r3, [pc, #104]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4917      	ldr	r1, [pc, #92]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800681e:	4313      	orrs	r3, r2
 8006820:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d105      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	4a13      	ldr	r2, [pc, #76]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800682e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006832:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d008      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006840:	4b0e      	ldr	r3, [pc, #56]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	490b      	ldr	r1, [pc, #44]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800684e:	4313      	orrs	r3, r2
 8006850:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0310 	and.w	r3, r3, #16
 800685a:	2b00      	cmp	r3, #0
 800685c:	d008      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800685e:	4b07      	ldr	r3, [pc, #28]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	4904      	ldr	r1, [pc, #16]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800686c:	4313      	orrs	r3, r2
 800686e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40021000 	.word	0x40021000
 8006880:	40007000 	.word	0x40007000
 8006884:	42420440 	.word	0x42420440

08006888 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e076      	b.n	8006988 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d108      	bne.n	80068b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068aa:	d009      	beq.n	80068c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	61da      	str	r2, [r3, #28]
 80068b2:	e005      	b.n	80068c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fb ff80 	bl	80027e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695b      	ldr	r3, [r3, #20]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800693a:	431a      	orrs	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	ea42 0103 	orr.w	r1, r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	0c1a      	lsrs	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f002 0204 	and.w	r2, r2, #4
 8006966:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69da      	ldr	r2, [r3, #28]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006976:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	; 0x30
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800699e:	2301      	movs	r3, #1
 80069a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d101      	bne.n	80069b6 <HAL_SPI_TransmitReceive+0x26>
 80069b2:	2302      	movs	r3, #2
 80069b4:	e18a      	b.n	8006ccc <HAL_SPI_TransmitReceive+0x33c>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069be:	f7fc fcb7 	bl	8003330 <HAL_GetTick>
 80069c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80069d4:	887b      	ldrh	r3, [r7, #2]
 80069d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d00f      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x70>
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e6:	d107      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <HAL_SPI_TransmitReceive+0x68>
 80069f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d003      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80069fe:	e15b      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0x82>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <HAL_SPI_TransmitReceive+0x82>
 8006a0c:	887b      	ldrh	r3, [r7, #2]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006a18:	e14e      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d003      	beq.n	8006a2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2205      	movs	r2, #5
 8006a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	887a      	ldrh	r2, [r7, #2]
 8006a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	887a      	ldrh	r2, [r7, #2]
 8006a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	887a      	ldrh	r2, [r7, #2]
 8006a56:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b40      	cmp	r3, #64	; 0x40
 8006a70:	d007      	beq.n	8006a82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8a:	d178      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x10a>
 8006a94:	8b7b      	ldrh	r3, [r7, #26]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d166      	bne.n	8006b68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9e:	881a      	ldrh	r2, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006abe:	e053      	b.n	8006b68 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d11b      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x176>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d016      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x176>
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d113      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aee:	1c9a      	adds	r2, r3, #2
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d119      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x1b8>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d014      	beq.n	8006b48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b28:	b292      	uxth	r2, r2
 8006b2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	1c9a      	adds	r2, r3, #2
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b44:	2301      	movs	r3, #1
 8006b46:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b48:	f7fc fbf2 	bl	8003330 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d807      	bhi.n	8006b68 <HAL_SPI_TransmitReceive+0x1d8>
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b5e:	d003      	beq.n	8006b68 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006b66:	e0a7      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1a6      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x130>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1a1      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x130>
 8006b7c:	e07c      	b.n	8006c78 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <HAL_SPI_TransmitReceive+0x1fc>
 8006b86:	8b7b      	ldrh	r3, [r7, #26]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d16b      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb2:	e057      	b.n	8006c64 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d11c      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x26c>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <HAL_SPI_TransmitReceive+0x26c>
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d114      	bne.n	8006bfc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	7812      	ldrb	r2, [r2, #0]
 8006bde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d119      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x2ae>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d014      	beq.n	8006c3e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006c3e:	f7fc fb77 	bl	8003330 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d803      	bhi.n	8006c56 <HAL_SPI_TransmitReceive+0x2c6>
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d102      	bne.n	8006c5c <HAL_SPI_TransmitReceive+0x2cc>
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d103      	bne.n	8006c64 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006c62:	e029      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1a2      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x224>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d19d      	bne.n	8006bb4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f9b5 	bl	8006fec <SPI_EndRxTxTransaction>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d006      	beq.n	8006c96 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2220      	movs	r2, #32
 8006c92:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c94:	e010      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	617b      	str	r3, [r7, #20]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	617b      	str	r3, [r7, #20]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	e000      	b.n	8006cb8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006cb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3730      	adds	r7, #48	; 0x30
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	099b      	lsrs	r3, r3, #6
 8006cf0:	f003 0301 	and.w	r3, r3, #1
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10f      	bne.n	8006d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	099b      	lsrs	r3, r3, #6
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
    return;
 8006d16:	e0be      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00a      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x66>
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	09db      	lsrs	r3, r3, #7
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
    return;
 8006d38:	e0ad      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <HAL_SPI_IRQHandler+0x80>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	099b      	lsrs	r3, r3, #6
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 80a1 	beq.w	8006e96 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f003 0301 	and.w	r3, r3, #1
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 809a 	beq.w	8006e96 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	099b      	lsrs	r3, r3, #6
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d023      	beq.n	8006db6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d011      	beq.n	8006d9e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	f043 0204 	orr.w	r2, r3, #4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	617b      	str	r3, [r7, #20]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	e00b      	b.n	8006db6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d9e:	2300      	movs	r3, #0
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	693b      	ldr	r3, [r7, #16]
        return;
 8006db4:	e06f      	b.n	8006e96 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f043 0201 	orr.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	60fb      	str	r3, [r7, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d04f      	beq.n	8006e94 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e02:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <HAL_SPI_IRQHandler+0x14c>
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d034      	beq.n	8006e8a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0203 	bic.w	r2, r2, #3
 8006e2e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d011      	beq.n	8006e5c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3c:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_SPI_IRQHandler+0x1c8>)
 8006e3e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fd fecf 	bl	8004be8 <HAL_DMA_Abort_IT>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d016      	beq.n	8006e92 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e68:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <HAL_SPI_IRQHandler+0x1c8>)
 8006e6a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd feb9 	bl	8004be8 <HAL_DMA_Abort_IT>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e88:	e003      	b.n	8006e92 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f808 	bl	8006ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e90:	e000      	b.n	8006e94 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8006e92:	bf00      	nop
    return;
 8006e94:	bf00      	nop
  }
}
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	08006eb3 	.word	0x08006eb3

08006ea0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bc80      	pop	{r7}
 8006eb0:	4770      	bx	lr

08006eb2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f7ff ffe7 	bl	8006ea0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006eec:	f7fc fa20 	bl	8003330 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef4:	1a9b      	subs	r3, r3, r2
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	4413      	add	r3, r2
 8006efa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006efc:	f7fc fa18 	bl	8003330 <HAL_GetTick>
 8006f00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f02:	4b39      	ldr	r3, [pc, #228]	; (8006fe8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	015b      	lsls	r3, r3, #5
 8006f08:	0d1b      	lsrs	r3, r3, #20
 8006f0a:	69fa      	ldr	r2, [r7, #28]
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f12:	e054      	b.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d050      	beq.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f1c:	f7fc fa08 	bl	8003330 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d902      	bls.n	8006f32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d13d      	bne.n	8006fae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f4a:	d111      	bne.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f54:	d004      	beq.n	8006f60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f5e:	d107      	bne.n	8006f70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f78:	d10f      	bne.n	8006f9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e017      	b.n	8006fde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	bf0c      	ite	eq
 8006fce:	2301      	moveq	r3, #1
 8006fd0:	2300      	movne	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d19b      	bne.n	8006f14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000004 	.word	0x20000004

08006fec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	2180      	movs	r1, #128	; 0x80
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f7ff ff6a 	bl	8006edc <SPI_WaitFlagStateUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d007      	beq.n	800701e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	f043 0220 	orr.w	r2, r3, #32
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e000      	b.n	8007020 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e041      	b.n	80070be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d106      	bne.n	8007054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fb fc1a 	bl	8002888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2202      	movs	r2, #2
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3304      	adds	r3, #4
 8007064:	4619      	mov	r1, r3
 8007066:	4610      	mov	r0, r2
 8007068:	f000 fa70 	bl	800754c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d001      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e03a      	b.n	8007156 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <HAL_TIM_Base_Start_IT+0x98>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00e      	beq.n	8007120 <HAL_TIM_Base_Start_IT+0x58>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d009      	beq.n	8007120 <HAL_TIM_Base_Start_IT+0x58>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a14      	ldr	r2, [pc, #80]	; (8007164 <HAL_TIM_Base_Start_IT+0x9c>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d004      	beq.n	8007120 <HAL_TIM_Base_Start_IT+0x58>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a13      	ldr	r2, [pc, #76]	; (8007168 <HAL_TIM_Base_Start_IT+0xa0>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d111      	bne.n	8007144 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b06      	cmp	r3, #6
 8007130:	d010      	beq.n	8007154 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0201 	orr.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007142:	e007      	b.n	8007154 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800

0800716c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d122      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f003 0302 	and.w	r3, r3, #2
 800718c:	2b02      	cmp	r3, #2
 800718e:	d11b      	bne.n	80071c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f06f 0202 	mvn.w	r2, #2
 8007198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 f9b1 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 80071b4:	e005      	b.n	80071c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f9a4 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9b3 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d122      	bne.n	800721c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d11b      	bne.n	800721c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0204 	mvn.w	r2, #4
 80071ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f987 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 8007208:	e005      	b.n	8007216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f97a 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f989 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0308 	and.w	r3, r3, #8
 8007226:	2b08      	cmp	r3, #8
 8007228:	d122      	bne.n	8007270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b08      	cmp	r3, #8
 8007236:	d11b      	bne.n	8007270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f06f 0208 	mvn.w	r2, #8
 8007240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2204      	movs	r2, #4
 8007246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f95d 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 800725c:	e005      	b.n	800726a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f950 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f95f 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	2b10      	cmp	r3, #16
 800727c:	d122      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	f003 0310 	and.w	r3, r3, #16
 8007288:	2b10      	cmp	r3, #16
 800728a:	d11b      	bne.n	80072c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f06f 0210 	mvn.w	r2, #16
 8007294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2208      	movs	r2, #8
 800729a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f933 	bl	8007516 <HAL_TIM_IC_CaptureCallback>
 80072b0:	e005      	b.n	80072be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f926 	bl	8007504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f935 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d10e      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d107      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0201 	mvn.w	r2, #1
 80072e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fb fe54 	bl	8002f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072fa:	2b80      	cmp	r3, #128	; 0x80
 80072fc:	d10e      	bne.n	800731c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b80      	cmp	r3, #128	; 0x80
 800730a:	d107      	bne.n	800731c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fa77 	bl	800780a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d10e      	bne.n	8007348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007334:	2b40      	cmp	r3, #64	; 0x40
 8007336:	d107      	bne.n	8007348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f8f9 	bl	800753a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0320 	and.w	r3, r3, #32
 8007352:	2b20      	cmp	r3, #32
 8007354:	d10e      	bne.n	8007374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b20      	cmp	r3, #32
 8007362:	d107      	bne.n	8007374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0220 	mvn.w	r2, #32
 800736c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fa42 	bl	80077f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800738c:	2b01      	cmp	r3, #1
 800738e:	d101      	bne.n	8007394 <HAL_TIM_ConfigClockSource+0x18>
 8007390:	2302      	movs	r3, #2
 8007392:	e0b3      	b.n	80074fc <HAL_TIM_ConfigClockSource+0x180>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073cc:	d03e      	beq.n	800744c <HAL_TIM_ConfigClockSource+0xd0>
 80073ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073d2:	f200 8087 	bhi.w	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073da:	f000 8085 	beq.w	80074e8 <HAL_TIM_ConfigClockSource+0x16c>
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d87f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073e4:	2b70      	cmp	r3, #112	; 0x70
 80073e6:	d01a      	beq.n	800741e <HAL_TIM_ConfigClockSource+0xa2>
 80073e8:	2b70      	cmp	r3, #112	; 0x70
 80073ea:	d87b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073ec:	2b60      	cmp	r3, #96	; 0x60
 80073ee:	d050      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x116>
 80073f0:	2b60      	cmp	r3, #96	; 0x60
 80073f2:	d877      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073f4:	2b50      	cmp	r3, #80	; 0x50
 80073f6:	d03c      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0xf6>
 80073f8:	2b50      	cmp	r3, #80	; 0x50
 80073fa:	d873      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d058      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x136>
 8007400:	2b40      	cmp	r3, #64	; 0x40
 8007402:	d86f      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 8007404:	2b30      	cmp	r3, #48	; 0x30
 8007406:	d064      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007408:	2b30      	cmp	r3, #48	; 0x30
 800740a:	d86b      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 800740c:	2b20      	cmp	r3, #32
 800740e:	d060      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007410:	2b20      	cmp	r3, #32
 8007412:	d867      	bhi.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05c      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
 8007418:	2b10      	cmp	r3, #16
 800741a:	d05a      	beq.n	80074d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800741c:	e062      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	6899      	ldr	r1, [r3, #8]
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f000 f966 	bl	80076fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	609a      	str	r2, [r3, #8]
      break;
 800744a:	e04e      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6899      	ldr	r1, [r3, #8]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f000 f94f 	bl	80076fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746e:	609a      	str	r2, [r3, #8]
      break;
 8007470:	e03b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	461a      	mov	r2, r3
 8007480:	f000 f8c6 	bl	8007610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2150      	movs	r1, #80	; 0x50
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f91d 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 8007490:	e02b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 f8e4 	bl	800766c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2160      	movs	r1, #96	; 0x60
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 f90d 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 80074b0:	e01b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6818      	ldr	r0, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	6859      	ldr	r1, [r3, #4]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	461a      	mov	r2, r3
 80074c0:	f000 f8a6 	bl	8007610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2140      	movs	r1, #64	; 0x40
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f8fd 	bl	80076ca <TIM_ITRx_SetConfig>
      break;
 80074d0:	e00b      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4619      	mov	r1, r3
 80074dc:	4610      	mov	r0, r2
 80074de:	f000 f8f4 	bl	80076ca <TIM_ITRx_SetConfig>
        break;
 80074e2:	e002      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80074e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr

08007516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007516:	b480      	push	{r7}
 8007518:	b083      	sub	sp, #12
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr

0800753a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a29      	ldr	r2, [pc, #164]	; (8007604 <TIM_Base_SetConfig+0xb8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00b      	beq.n	800757c <TIM_Base_SetConfig+0x30>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756a:	d007      	beq.n	800757c <TIM_Base_SetConfig+0x30>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a26      	ldr	r2, [pc, #152]	; (8007608 <TIM_Base_SetConfig+0xbc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_Base_SetConfig+0x30>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a25      	ldr	r2, [pc, #148]	; (800760c <TIM_Base_SetConfig+0xc0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d108      	bne.n	800758e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <TIM_Base_SetConfig+0xb8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0x62>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0x62>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a19      	ldr	r2, [pc, #100]	; (8007608 <TIM_Base_SetConfig+0xbc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0x62>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a18      	ldr	r2, [pc, #96]	; (800760c <TIM_Base_SetConfig+0xc0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a07      	ldr	r2, [pc, #28]	; (8007604 <TIM_Base_SetConfig+0xb8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d103      	bne.n	80075f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	615a      	str	r2, [r3, #20]
}
 80075fa:	bf00      	nop
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800

08007610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	f023 0201 	bic.w	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800763a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 030a 	bic.w	r3, r3, #10
 800764c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6a1b      	ldr	r3, [r3, #32]
 800767c:	f023 0210 	bic.w	r2, r3, #16
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007696:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	031b      	lsls	r3, r3, #12
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	621a      	str	r2, [r3, #32]
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bc80      	pop	{r7}
 80076c8:	4770      	bx	lr

080076ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f043 0307 	orr.w	r3, r3, #7
 80076ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc80      	pop	{r7}
 80076fc:	4770      	bx	lr

080076fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076fe:	b480      	push	{r7}
 8007700:	b087      	sub	sp, #28
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	021a      	lsls	r2, r3, #8
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	431a      	orrs	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	4313      	orrs	r3, r2
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	609a      	str	r2, [r3, #8]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007750:	2302      	movs	r3, #2
 8007752:	e046      	b.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a16      	ldr	r2, [pc, #88]	; (80077ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a0:	d009      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a10      	ldr	r2, [pc, #64]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10c      	bne.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	40012c00 	.word	0x40012c00
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800

080077f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr

0800780a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr

0800781c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e03f      	b.n	80078ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fb f846 	bl	80028d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc25 	bl	80080b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	603b      	str	r3, [r7, #0]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d17c      	bne.n	80079d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d002      	beq.n	80078e2 <HAL_UART_Transmit+0x2c>
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e075      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_UART_Transmit+0x3e>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e06e      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2221      	movs	r2, #33	; 0x21
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790a:	f7fb fd11 	bl	8003330 <HAL_GetTick>
 800790e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d108      	bne.n	8007938 <HAL_UART_Transmit+0x82>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	61bb      	str	r3, [r7, #24]
 8007936:	e003      	b.n	8007940 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007948:	e02a      	b.n	80079a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 fa11 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e036      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007978:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	3302      	adds	r3, #2
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	e007      	b.n	8007992 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3301      	adds	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1cf      	bne.n	800794a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2200      	movs	r2, #0
 80079b2:	2140      	movs	r1, #64	; 0x40
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 f9e1 	bl	8007d7c <UART_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e006      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079cc:	2300      	movs	r3, #0
 80079ce:	e000      	b.n	80079d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079d0:	2302      	movs	r3, #2
  }
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b08a      	sub	sp, #40	; 0x28
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f003 030f 	and.w	r3, r3, #15
 8007a0a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10d      	bne.n	8007a2e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d008      	beq.n	8007a2e <HAL_UART_IRQHandler+0x52>
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa99 	bl	8007f5e <UART_Receive_IT>
      return;
 8007a2c:	e17b      	b.n	8007d26 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80b1 	beq.w	8007b98 <HAL_UART_IRQHandler+0x1bc>
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_UART_IRQHandler+0x70>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a6 	beq.w	8007b98 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <HAL_UART_IRQHandler+0x90>
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	f043 0201 	orr.w	r2, r3, #1
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00a      	beq.n	8007a8c <HAL_UART_IRQHandler+0xb0>
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a84:	f043 0202 	orr.w	r2, r3, #2
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00a      	beq.n	8007aac <HAL_UART_IRQHandler+0xd0>
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	f043 0204 	orr.w	r2, r3, #4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	f003 0308 	and.w	r3, r3, #8
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xfa>
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <HAL_UART_IRQHandler+0xee>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f043 0208 	orr.w	r2, r3, #8
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 811e 	beq.w	8007d1c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d007      	beq.n	8007afa <HAL_UART_IRQHandler+0x11e>
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	f003 0320 	and.w	r3, r3, #32
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa32 	bl	8007f5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf14      	ite	ne
 8007b08:	2301      	movne	r3, #1
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d102      	bne.n	8007b22 <HAL_UART_IRQHandler+0x146>
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d031      	beq.n	8007b86 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f974 	bl	8007e10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d023      	beq.n	8007b7e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695a      	ldr	r2, [r3, #20]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b44:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d013      	beq.n	8007b76 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	4a76      	ldr	r2, [pc, #472]	; (8007d2c <HAL_UART_IRQHandler+0x350>)
 8007b54:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd f844 	bl	8004be8 <HAL_DMA_Abort_IT>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d016      	beq.n	8007b94 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b74:	e00e      	b.n	8007b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f8ec 	bl	8007d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7c:	e00a      	b.n	8007b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f8e8 	bl	8007d54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e006      	b.n	8007b94 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8e4 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b92:	e0c3      	b.n	8007d1c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	bf00      	nop
    return;
 8007b96:	e0c1      	b.n	8007d1c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	f040 80a1 	bne.w	8007ce4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 809b 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f003 0310 	and.w	r3, r3, #16
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 8095 	beq.w	8007ce4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d04e      	beq.n	8007c7c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007be8:	8a3b      	ldrh	r3, [r7, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8098 	beq.w	8007d20 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bf4:	8a3a      	ldrh	r2, [r7, #16]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	f080 8092 	bcs.w	8007d20 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	8a3a      	ldrh	r2, [r7, #16]
 8007c00:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	699b      	ldr	r3, [r3, #24]
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d02b      	beq.n	8007c64 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c1a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695a      	ldr	r2, [r3, #20]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c3a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68da      	ldr	r2, [r3, #12]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0210 	bic.w	r2, r2, #16
 8007c58:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fc ff87 	bl	8004b72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	1ad3      	subs	r3, r2, r3
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f876 	bl	8007d66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c7a:	e051      	b.n	8007d20 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d047      	beq.n	8007d24 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007c94:	8a7b      	ldrh	r3, [r7, #18]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d044      	beq.n	8007d24 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ca8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0210 	bic.w	r2, r2, #16
 8007cd6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cd8:	8a7b      	ldrh	r3, [r7, #18]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f842 	bl	8007d66 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ce2:	e01f      	b.n	8007d24 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <HAL_UART_IRQHandler+0x324>
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f8c9 	bl	8007e90 <UART_Transmit_IT>
    return;
 8007cfe:	e012      	b.n	8007d26 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00d      	beq.n	8007d26 <HAL_UART_IRQHandler+0x34a>
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f90a 	bl	8007f2e <UART_EndTransmit_IT>
    return;
 8007d1a:	e004      	b.n	8007d26 <HAL_UART_IRQHandler+0x34a>
    return;
 8007d1c:	bf00      	nop
 8007d1e:	e002      	b.n	8007d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d20:	bf00      	nop
 8007d22:	e000      	b.n	8007d26 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d24:	bf00      	nop
  }
}
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	08007e69 	.word	0x08007e69

08007d30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr

08007d42 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bc80      	pop	{r7}
 8007d52:	4770      	bx	lr

08007d54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8c:	e02c      	b.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d028      	beq.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9c:	f7fb fac8 	bl	8003330 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d21d      	bcs.n	8007de8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68da      	ldr	r2, [r3, #12]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	695a      	ldr	r2, [r3, #20]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e00f      	b.n	8007e08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	4013      	ands	r3, r2
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	461a      	mov	r2, r3
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d0c3      	beq.n	8007d8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3710      	adds	r7, #16
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	695a      	ldr	r2, [r3, #20]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d107      	bne.n	8007e50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0210 	bic.w	r2, r2, #16
 8007e4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr

08007e68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff ff66 	bl	8007d54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b21      	cmp	r3, #33	; 0x21
 8007ea2:	d13e      	bne.n	8007f22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eac:	d114      	bne.n	8007ed8 <UART_Transmit_IT+0x48>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d110      	bne.n	8007ed8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	1c9a      	adds	r2, r3, #2
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	621a      	str	r2, [r3, #32]
 8007ed6:	e008      	b.n	8007eea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	1c59      	adds	r1, r3, #1
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6211      	str	r1, [r2, #32]
 8007ee2:	781a      	ldrb	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10f      	bne.n	8007f1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr

08007f2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff feee 	bl	8007d30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b086      	sub	sp, #24
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b22      	cmp	r3, #34	; 0x22
 8007f70:	f040 8099 	bne.w	80080a6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f7c:	d117      	bne.n	8007fae <UART_Receive_IT+0x50>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d113      	bne.n	8007fae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	1c9a      	adds	r2, r3, #2
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28
 8007fac:	e026      	b.n	8007ffc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc0:	d007      	beq.n	8007fd2 <UART_Receive_IT+0x74>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <UART_Receive_IT+0x82>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d106      	bne.n	8007fe0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	e008      	b.n	8007ff2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b01      	subs	r3, #1
 8008004:	b29b      	uxth	r3, r3
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	4619      	mov	r1, r3
 800800a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800800c:	2b00      	cmp	r3, #0
 800800e:	d148      	bne.n	80080a2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0220 	bic.w	r2, r2, #32
 800801e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68da      	ldr	r2, [r3, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800802e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695a      	ldr	r2, [r3, #20]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0201 	bic.w	r2, r2, #1
 800803e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2220      	movs	r2, #32
 8008044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	2b01      	cmp	r3, #1
 800804e:	d123      	bne.n	8008098 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0210 	bic.w	r2, r2, #16
 8008064:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b10      	cmp	r3, #16
 8008072:	d10a      	bne.n	800808a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008074:	2300      	movs	r3, #0
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7ff fe68 	bl	8007d66 <HAL_UARTEx_RxEventCallback>
 8008096:	e002      	b.n	800809e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff fe52 	bl	8007d42 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	e002      	b.n	80080a8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e000      	b.n	80080a8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80080a6:	2302      	movs	r3, #2
  }
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68da      	ldr	r2, [r3, #12]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689a      	ldr	r2, [r3, #8]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	431a      	orrs	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80080ea:	f023 030c 	bic.w	r3, r3, #12
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	430b      	orrs	r3, r1
 80080f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	699a      	ldr	r2, [r3, #24]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a2c      	ldr	r2, [pc, #176]	; (80081c4 <UART_SetConfig+0x114>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d103      	bne.n	8008120 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008118:	f7fe face 	bl	80066b8 <HAL_RCC_GetPCLK2Freq>
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	e002      	b.n	8008126 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008120:	f7fe fab6 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
 8008124:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009a      	lsls	r2, r3, #2
 8008130:	441a      	add	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	fbb2 f3f3 	udiv	r3, r2, r3
 800813c:	4a22      	ldr	r2, [pc, #136]	; (80081c8 <UART_SetConfig+0x118>)
 800813e:	fba2 2303 	umull	r2, r3, r2, r3
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	0119      	lsls	r1, r3, #4
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009a      	lsls	r2, r3, #2
 8008150:	441a      	add	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	fbb2 f2f3 	udiv	r2, r2, r3
 800815c:	4b1a      	ldr	r3, [pc, #104]	; (80081c8 <UART_SetConfig+0x118>)
 800815e:	fba3 0302 	umull	r0, r3, r3, r2
 8008162:	095b      	lsrs	r3, r3, #5
 8008164:	2064      	movs	r0, #100	; 0x64
 8008166:	fb00 f303 	mul.w	r3, r0, r3
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	3332      	adds	r3, #50	; 0x32
 8008170:	4a15      	ldr	r2, [pc, #84]	; (80081c8 <UART_SetConfig+0x118>)
 8008172:	fba2 2303 	umull	r2, r3, r2, r3
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800817c:	4419      	add	r1, r3
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009a      	lsls	r2, r3, #2
 8008188:	441a      	add	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	fbb2 f2f3 	udiv	r2, r2, r3
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <UART_SetConfig+0x118>)
 8008196:	fba3 0302 	umull	r0, r3, r3, r2
 800819a:	095b      	lsrs	r3, r3, #5
 800819c:	2064      	movs	r0, #100	; 0x64
 800819e:	fb00 f303 	mul.w	r3, r0, r3
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	011b      	lsls	r3, r3, #4
 80081a6:	3332      	adds	r3, #50	; 0x32
 80081a8:	4a07      	ldr	r2, [pc, #28]	; (80081c8 <UART_SetConfig+0x118>)
 80081aa:	fba2 2303 	umull	r2, r3, r2, r3
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	f003 020f 	and.w	r2, r3, #15
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	440a      	add	r2, r1
 80081ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80081bc:	bf00      	nop
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40013800 	.word	0x40013800
 80081c8:	51eb851f 	.word	0x51eb851f

080081cc <__errno>:
 80081cc:	4b01      	ldr	r3, [pc, #4]	; (80081d4 <__errno+0x8>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20000040 	.word	0x20000040

080081d8 <__libc_init_array>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	2600      	movs	r6, #0
 80081dc:	4d0c      	ldr	r5, [pc, #48]	; (8008210 <__libc_init_array+0x38>)
 80081de:	4c0d      	ldr	r4, [pc, #52]	; (8008214 <__libc_init_array+0x3c>)
 80081e0:	1b64      	subs	r4, r4, r5
 80081e2:	10a4      	asrs	r4, r4, #2
 80081e4:	42a6      	cmp	r6, r4
 80081e6:	d109      	bne.n	80081fc <__libc_init_array+0x24>
 80081e8:	f002 ffe2 	bl	800b1b0 <_init>
 80081ec:	2600      	movs	r6, #0
 80081ee:	4d0a      	ldr	r5, [pc, #40]	; (8008218 <__libc_init_array+0x40>)
 80081f0:	4c0a      	ldr	r4, [pc, #40]	; (800821c <__libc_init_array+0x44>)
 80081f2:	1b64      	subs	r4, r4, r5
 80081f4:	10a4      	asrs	r4, r4, #2
 80081f6:	42a6      	cmp	r6, r4
 80081f8:	d105      	bne.n	8008206 <__libc_init_array+0x2e>
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008200:	4798      	blx	r3
 8008202:	3601      	adds	r6, #1
 8008204:	e7ee      	b.n	80081e4 <__libc_init_array+0xc>
 8008206:	f855 3b04 	ldr.w	r3, [r5], #4
 800820a:	4798      	blx	r3
 800820c:	3601      	adds	r6, #1
 800820e:	e7f2      	b.n	80081f6 <__libc_init_array+0x1e>
 8008210:	0800b78c 	.word	0x0800b78c
 8008214:	0800b78c 	.word	0x0800b78c
 8008218:	0800b78c 	.word	0x0800b78c
 800821c:	0800b790 	.word	0x0800b790

08008220 <memset>:
 8008220:	4603      	mov	r3, r0
 8008222:	4402      	add	r2, r0
 8008224:	4293      	cmp	r3, r2
 8008226:	d100      	bne.n	800822a <memset+0xa>
 8008228:	4770      	bx	lr
 800822a:	f803 1b01 	strb.w	r1, [r3], #1
 800822e:	e7f9      	b.n	8008224 <memset+0x4>

08008230 <__cvt>:
 8008230:	2b00      	cmp	r3, #0
 8008232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008236:	461f      	mov	r7, r3
 8008238:	bfbb      	ittet	lt
 800823a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800823e:	461f      	movlt	r7, r3
 8008240:	2300      	movge	r3, #0
 8008242:	232d      	movlt	r3, #45	; 0x2d
 8008244:	b088      	sub	sp, #32
 8008246:	4614      	mov	r4, r2
 8008248:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800824a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800824c:	7013      	strb	r3, [r2, #0]
 800824e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008250:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008254:	f023 0820 	bic.w	r8, r3, #32
 8008258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800825c:	d005      	beq.n	800826a <__cvt+0x3a>
 800825e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008262:	d100      	bne.n	8008266 <__cvt+0x36>
 8008264:	3501      	adds	r5, #1
 8008266:	2302      	movs	r3, #2
 8008268:	e000      	b.n	800826c <__cvt+0x3c>
 800826a:	2303      	movs	r3, #3
 800826c:	aa07      	add	r2, sp, #28
 800826e:	9204      	str	r2, [sp, #16]
 8008270:	aa06      	add	r2, sp, #24
 8008272:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008276:	e9cd 3500 	strd	r3, r5, [sp]
 800827a:	4622      	mov	r2, r4
 800827c:	463b      	mov	r3, r7
 800827e:	f000 fcf7 	bl	8008c70 <_dtoa_r>
 8008282:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008286:	4606      	mov	r6, r0
 8008288:	d102      	bne.n	8008290 <__cvt+0x60>
 800828a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800828c:	07db      	lsls	r3, r3, #31
 800828e:	d522      	bpl.n	80082d6 <__cvt+0xa6>
 8008290:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008294:	eb06 0905 	add.w	r9, r6, r5
 8008298:	d110      	bne.n	80082bc <__cvt+0x8c>
 800829a:	7833      	ldrb	r3, [r6, #0]
 800829c:	2b30      	cmp	r3, #48	; 0x30
 800829e:	d10a      	bne.n	80082b6 <__cvt+0x86>
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	4620      	mov	r0, r4
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 fb7e 	bl	80009a8 <__aeabi_dcmpeq>
 80082ac:	b918      	cbnz	r0, 80082b6 <__cvt+0x86>
 80082ae:	f1c5 0501 	rsb	r5, r5, #1
 80082b2:	f8ca 5000 	str.w	r5, [sl]
 80082b6:	f8da 3000 	ldr.w	r3, [sl]
 80082ba:	4499      	add	r9, r3
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	4620      	mov	r0, r4
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f8 fb70 	bl	80009a8 <__aeabi_dcmpeq>
 80082c8:	b108      	cbz	r0, 80082ce <__cvt+0x9e>
 80082ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80082ce:	2230      	movs	r2, #48	; 0x30
 80082d0:	9b07      	ldr	r3, [sp, #28]
 80082d2:	454b      	cmp	r3, r9
 80082d4:	d307      	bcc.n	80082e6 <__cvt+0xb6>
 80082d6:	4630      	mov	r0, r6
 80082d8:	9b07      	ldr	r3, [sp, #28]
 80082da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80082dc:	1b9b      	subs	r3, r3, r6
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	b008      	add	sp, #32
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	1c59      	adds	r1, r3, #1
 80082e8:	9107      	str	r1, [sp, #28]
 80082ea:	701a      	strb	r2, [r3, #0]
 80082ec:	e7f0      	b.n	80082d0 <__cvt+0xa0>

080082ee <__exponent>:
 80082ee:	4603      	mov	r3, r0
 80082f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082f2:	2900      	cmp	r1, #0
 80082f4:	f803 2b02 	strb.w	r2, [r3], #2
 80082f8:	bfb6      	itet	lt
 80082fa:	222d      	movlt	r2, #45	; 0x2d
 80082fc:	222b      	movge	r2, #43	; 0x2b
 80082fe:	4249      	neglt	r1, r1
 8008300:	2909      	cmp	r1, #9
 8008302:	7042      	strb	r2, [r0, #1]
 8008304:	dd2b      	ble.n	800835e <__exponent+0x70>
 8008306:	f10d 0407 	add.w	r4, sp, #7
 800830a:	46a4      	mov	ip, r4
 800830c:	270a      	movs	r7, #10
 800830e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008312:	460a      	mov	r2, r1
 8008314:	46a6      	mov	lr, r4
 8008316:	fb07 1516 	mls	r5, r7, r6, r1
 800831a:	2a63      	cmp	r2, #99	; 0x63
 800831c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008320:	4631      	mov	r1, r6
 8008322:	f104 34ff 	add.w	r4, r4, #4294967295
 8008326:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800832a:	dcf0      	bgt.n	800830e <__exponent+0x20>
 800832c:	3130      	adds	r1, #48	; 0x30
 800832e:	f1ae 0502 	sub.w	r5, lr, #2
 8008332:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008336:	4629      	mov	r1, r5
 8008338:	1c44      	adds	r4, r0, #1
 800833a:	4561      	cmp	r1, ip
 800833c:	d30a      	bcc.n	8008354 <__exponent+0x66>
 800833e:	f10d 0209 	add.w	r2, sp, #9
 8008342:	eba2 020e 	sub.w	r2, r2, lr
 8008346:	4565      	cmp	r5, ip
 8008348:	bf88      	it	hi
 800834a:	2200      	movhi	r2, #0
 800834c:	4413      	add	r3, r2
 800834e:	1a18      	subs	r0, r3, r0
 8008350:	b003      	add	sp, #12
 8008352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008354:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008358:	f804 2f01 	strb.w	r2, [r4, #1]!
 800835c:	e7ed      	b.n	800833a <__exponent+0x4c>
 800835e:	2330      	movs	r3, #48	; 0x30
 8008360:	3130      	adds	r1, #48	; 0x30
 8008362:	7083      	strb	r3, [r0, #2]
 8008364:	70c1      	strb	r1, [r0, #3]
 8008366:	1d03      	adds	r3, r0, #4
 8008368:	e7f1      	b.n	800834e <__exponent+0x60>
	...

0800836c <_printf_float>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	b091      	sub	sp, #68	; 0x44
 8008372:	460c      	mov	r4, r1
 8008374:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008378:	4616      	mov	r6, r2
 800837a:	461f      	mov	r7, r3
 800837c:	4605      	mov	r5, r0
 800837e:	f001 fa65 	bl	800984c <_localeconv_r>
 8008382:	6803      	ldr	r3, [r0, #0]
 8008384:	4618      	mov	r0, r3
 8008386:	9309      	str	r3, [sp, #36]	; 0x24
 8008388:	f7f7 fee2 	bl	8000150 <strlen>
 800838c:	2300      	movs	r3, #0
 800838e:	930e      	str	r3, [sp, #56]	; 0x38
 8008390:	f8d8 3000 	ldr.w	r3, [r8]
 8008394:	900a      	str	r0, [sp, #40]	; 0x28
 8008396:	3307      	adds	r3, #7
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	f103 0208 	add.w	r2, r3, #8
 80083a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80083a4:	f8d4 b000 	ldr.w	fp, [r4]
 80083a8:	f8c8 2000 	str.w	r2, [r8]
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80083b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80083bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80083be:	f04f 32ff 	mov.w	r2, #4294967295
 80083c2:	4640      	mov	r0, r8
 80083c4:	4b9c      	ldr	r3, [pc, #624]	; (8008638 <_printf_float+0x2cc>)
 80083c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083c8:	f7f8 fb20 	bl	8000a0c <__aeabi_dcmpun>
 80083cc:	bb70      	cbnz	r0, 800842c <_printf_float+0xc0>
 80083ce:	f04f 32ff 	mov.w	r2, #4294967295
 80083d2:	4640      	mov	r0, r8
 80083d4:	4b98      	ldr	r3, [pc, #608]	; (8008638 <_printf_float+0x2cc>)
 80083d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083d8:	f7f8 fafa 	bl	80009d0 <__aeabi_dcmple>
 80083dc:	bb30      	cbnz	r0, 800842c <_printf_float+0xc0>
 80083de:	2200      	movs	r2, #0
 80083e0:	2300      	movs	r3, #0
 80083e2:	4640      	mov	r0, r8
 80083e4:	4651      	mov	r1, sl
 80083e6:	f7f8 fae9 	bl	80009bc <__aeabi_dcmplt>
 80083ea:	b110      	cbz	r0, 80083f2 <_printf_float+0x86>
 80083ec:	232d      	movs	r3, #45	; 0x2d
 80083ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083f2:	4b92      	ldr	r3, [pc, #584]	; (800863c <_printf_float+0x2d0>)
 80083f4:	4892      	ldr	r0, [pc, #584]	; (8008640 <_printf_float+0x2d4>)
 80083f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80083fa:	bf94      	ite	ls
 80083fc:	4698      	movls	r8, r3
 80083fe:	4680      	movhi	r8, r0
 8008400:	2303      	movs	r3, #3
 8008402:	f04f 0a00 	mov.w	sl, #0
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	f02b 0304 	bic.w	r3, fp, #4
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	4633      	mov	r3, r6
 8008410:	4621      	mov	r1, r4
 8008412:	4628      	mov	r0, r5
 8008414:	9700      	str	r7, [sp, #0]
 8008416:	aa0f      	add	r2, sp, #60	; 0x3c
 8008418:	f000 f9d4 	bl	80087c4 <_printf_common>
 800841c:	3001      	adds	r0, #1
 800841e:	f040 8090 	bne.w	8008542 <_printf_float+0x1d6>
 8008422:	f04f 30ff 	mov.w	r0, #4294967295
 8008426:	b011      	add	sp, #68	; 0x44
 8008428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842c:	4642      	mov	r2, r8
 800842e:	4653      	mov	r3, sl
 8008430:	4640      	mov	r0, r8
 8008432:	4651      	mov	r1, sl
 8008434:	f7f8 faea 	bl	8000a0c <__aeabi_dcmpun>
 8008438:	b148      	cbz	r0, 800844e <_printf_float+0xe2>
 800843a:	f1ba 0f00 	cmp.w	sl, #0
 800843e:	bfb8      	it	lt
 8008440:	232d      	movlt	r3, #45	; 0x2d
 8008442:	4880      	ldr	r0, [pc, #512]	; (8008644 <_printf_float+0x2d8>)
 8008444:	bfb8      	it	lt
 8008446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800844a:	4b7f      	ldr	r3, [pc, #508]	; (8008648 <_printf_float+0x2dc>)
 800844c:	e7d3      	b.n	80083f6 <_printf_float+0x8a>
 800844e:	6863      	ldr	r3, [r4, #4]
 8008450:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	d142      	bne.n	80084de <_printf_float+0x172>
 8008458:	2306      	movs	r3, #6
 800845a:	6063      	str	r3, [r4, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	9206      	str	r2, [sp, #24]
 8008460:	aa0e      	add	r2, sp, #56	; 0x38
 8008462:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008466:	aa0d      	add	r2, sp, #52	; 0x34
 8008468:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800846c:	9203      	str	r2, [sp, #12]
 800846e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008472:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	4642      	mov	r2, r8
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	4628      	mov	r0, r5
 8008480:	4653      	mov	r3, sl
 8008482:	910b      	str	r1, [sp, #44]	; 0x2c
 8008484:	f7ff fed4 	bl	8008230 <__cvt>
 8008488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800848a:	4680      	mov	r8, r0
 800848c:	2947      	cmp	r1, #71	; 0x47
 800848e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008490:	d108      	bne.n	80084a4 <_printf_float+0x138>
 8008492:	1cc8      	adds	r0, r1, #3
 8008494:	db02      	blt.n	800849c <_printf_float+0x130>
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	4299      	cmp	r1, r3
 800849a:	dd40      	ble.n	800851e <_printf_float+0x1b2>
 800849c:	f1a9 0902 	sub.w	r9, r9, #2
 80084a0:	fa5f f989 	uxtb.w	r9, r9
 80084a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80084a8:	d81f      	bhi.n	80084ea <_printf_float+0x17e>
 80084aa:	464a      	mov	r2, r9
 80084ac:	3901      	subs	r1, #1
 80084ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084b2:	910d      	str	r1, [sp, #52]	; 0x34
 80084b4:	f7ff ff1b 	bl	80082ee <__exponent>
 80084b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084ba:	4682      	mov	sl, r0
 80084bc:	1813      	adds	r3, r2, r0
 80084be:	2a01      	cmp	r2, #1
 80084c0:	6123      	str	r3, [r4, #16]
 80084c2:	dc02      	bgt.n	80084ca <_printf_float+0x15e>
 80084c4:	6822      	ldr	r2, [r4, #0]
 80084c6:	07d2      	lsls	r2, r2, #31
 80084c8:	d501      	bpl.n	80084ce <_printf_float+0x162>
 80084ca:	3301      	adds	r3, #1
 80084cc:	6123      	str	r3, [r4, #16]
 80084ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d09b      	beq.n	800840e <_printf_float+0xa2>
 80084d6:	232d      	movs	r3, #45	; 0x2d
 80084d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084dc:	e797      	b.n	800840e <_printf_float+0xa2>
 80084de:	2947      	cmp	r1, #71	; 0x47
 80084e0:	d1bc      	bne.n	800845c <_printf_float+0xf0>
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1ba      	bne.n	800845c <_printf_float+0xf0>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e7b7      	b.n	800845a <_printf_float+0xee>
 80084ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80084ee:	d118      	bne.n	8008522 <_printf_float+0x1b6>
 80084f0:	2900      	cmp	r1, #0
 80084f2:	6863      	ldr	r3, [r4, #4]
 80084f4:	dd0b      	ble.n	800850e <_printf_float+0x1a2>
 80084f6:	6121      	str	r1, [r4, #16]
 80084f8:	b913      	cbnz	r3, 8008500 <_printf_float+0x194>
 80084fa:	6822      	ldr	r2, [r4, #0]
 80084fc:	07d0      	lsls	r0, r2, #31
 80084fe:	d502      	bpl.n	8008506 <_printf_float+0x19a>
 8008500:	3301      	adds	r3, #1
 8008502:	440b      	add	r3, r1
 8008504:	6123      	str	r3, [r4, #16]
 8008506:	f04f 0a00 	mov.w	sl, #0
 800850a:	65a1      	str	r1, [r4, #88]	; 0x58
 800850c:	e7df      	b.n	80084ce <_printf_float+0x162>
 800850e:	b913      	cbnz	r3, 8008516 <_printf_float+0x1aa>
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	07d2      	lsls	r2, r2, #31
 8008514:	d501      	bpl.n	800851a <_printf_float+0x1ae>
 8008516:	3302      	adds	r3, #2
 8008518:	e7f4      	b.n	8008504 <_printf_float+0x198>
 800851a:	2301      	movs	r3, #1
 800851c:	e7f2      	b.n	8008504 <_printf_float+0x198>
 800851e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008524:	4299      	cmp	r1, r3
 8008526:	db05      	blt.n	8008534 <_printf_float+0x1c8>
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	6121      	str	r1, [r4, #16]
 800852c:	07d8      	lsls	r0, r3, #31
 800852e:	d5ea      	bpl.n	8008506 <_printf_float+0x19a>
 8008530:	1c4b      	adds	r3, r1, #1
 8008532:	e7e7      	b.n	8008504 <_printf_float+0x198>
 8008534:	2900      	cmp	r1, #0
 8008536:	bfcc      	ite	gt
 8008538:	2201      	movgt	r2, #1
 800853a:	f1c1 0202 	rsble	r2, r1, #2
 800853e:	4413      	add	r3, r2
 8008540:	e7e0      	b.n	8008504 <_printf_float+0x198>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	055a      	lsls	r2, r3, #21
 8008546:	d407      	bmi.n	8008558 <_printf_float+0x1ec>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	4642      	mov	r2, r8
 800854c:	4631      	mov	r1, r6
 800854e:	4628      	mov	r0, r5
 8008550:	47b8      	blx	r7
 8008552:	3001      	adds	r0, #1
 8008554:	d12b      	bne.n	80085ae <_printf_float+0x242>
 8008556:	e764      	b.n	8008422 <_printf_float+0xb6>
 8008558:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800855c:	f240 80dd 	bls.w	800871a <_printf_float+0x3ae>
 8008560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008564:	2200      	movs	r2, #0
 8008566:	2300      	movs	r3, #0
 8008568:	f7f8 fa1e 	bl	80009a8 <__aeabi_dcmpeq>
 800856c:	2800      	cmp	r0, #0
 800856e:	d033      	beq.n	80085d8 <_printf_float+0x26c>
 8008570:	2301      	movs	r3, #1
 8008572:	4631      	mov	r1, r6
 8008574:	4628      	mov	r0, r5
 8008576:	4a35      	ldr	r2, [pc, #212]	; (800864c <_printf_float+0x2e0>)
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f af51 	beq.w	8008422 <_printf_float+0xb6>
 8008580:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008584:	429a      	cmp	r2, r3
 8008586:	db02      	blt.n	800858e <_printf_float+0x222>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	07d8      	lsls	r0, r3, #31
 800858c:	d50f      	bpl.n	80085ae <_printf_float+0x242>
 800858e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008592:	4631      	mov	r1, r6
 8008594:	4628      	mov	r0, r5
 8008596:	47b8      	blx	r7
 8008598:	3001      	adds	r0, #1
 800859a:	f43f af42 	beq.w	8008422 <_printf_float+0xb6>
 800859e:	f04f 0800 	mov.w	r8, #0
 80085a2:	f104 091a 	add.w	r9, r4, #26
 80085a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085a8:	3b01      	subs	r3, #1
 80085aa:	4543      	cmp	r3, r8
 80085ac:	dc09      	bgt.n	80085c2 <_printf_float+0x256>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	079b      	lsls	r3, r3, #30
 80085b2:	f100 8102 	bmi.w	80087ba <_printf_float+0x44e>
 80085b6:	68e0      	ldr	r0, [r4, #12]
 80085b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ba:	4298      	cmp	r0, r3
 80085bc:	bfb8      	it	lt
 80085be:	4618      	movlt	r0, r3
 80085c0:	e731      	b.n	8008426 <_printf_float+0xba>
 80085c2:	2301      	movs	r3, #1
 80085c4:	464a      	mov	r2, r9
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	f43f af28 	beq.w	8008422 <_printf_float+0xb6>
 80085d2:	f108 0801 	add.w	r8, r8, #1
 80085d6:	e7e6      	b.n	80085a6 <_printf_float+0x23a>
 80085d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dc38      	bgt.n	8008650 <_printf_float+0x2e4>
 80085de:	2301      	movs	r3, #1
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	4a19      	ldr	r2, [pc, #100]	; (800864c <_printf_float+0x2e0>)
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f af1a 	beq.w	8008422 <_printf_float+0xb6>
 80085ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80085f2:	4313      	orrs	r3, r2
 80085f4:	d102      	bne.n	80085fc <_printf_float+0x290>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	07d9      	lsls	r1, r3, #31
 80085fa:	d5d8      	bpl.n	80085ae <_printf_float+0x242>
 80085fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	47b8      	blx	r7
 8008606:	3001      	adds	r0, #1
 8008608:	f43f af0b 	beq.w	8008422 <_printf_float+0xb6>
 800860c:	f04f 0900 	mov.w	r9, #0
 8008610:	f104 0a1a 	add.w	sl, r4, #26
 8008614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008616:	425b      	negs	r3, r3
 8008618:	454b      	cmp	r3, r9
 800861a:	dc01      	bgt.n	8008620 <_printf_float+0x2b4>
 800861c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800861e:	e794      	b.n	800854a <_printf_float+0x1de>
 8008620:	2301      	movs	r3, #1
 8008622:	4652      	mov	r2, sl
 8008624:	4631      	mov	r1, r6
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	f43f aef9 	beq.w	8008422 <_printf_float+0xb6>
 8008630:	f109 0901 	add.w	r9, r9, #1
 8008634:	e7ee      	b.n	8008614 <_printf_float+0x2a8>
 8008636:	bf00      	nop
 8008638:	7fefffff 	.word	0x7fefffff
 800863c:	0800b3b8 	.word	0x0800b3b8
 8008640:	0800b3bc 	.word	0x0800b3bc
 8008644:	0800b3c4 	.word	0x0800b3c4
 8008648:	0800b3c0 	.word	0x0800b3c0
 800864c:	0800b3c8 	.word	0x0800b3c8
 8008650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008652:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008654:	429a      	cmp	r2, r3
 8008656:	bfa8      	it	ge
 8008658:	461a      	movge	r2, r3
 800865a:	2a00      	cmp	r2, #0
 800865c:	4691      	mov	r9, r2
 800865e:	dc37      	bgt.n	80086d0 <_printf_float+0x364>
 8008660:	f04f 0b00 	mov.w	fp, #0
 8008664:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008668:	f104 021a 	add.w	r2, r4, #26
 800866c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008670:	ebaa 0309 	sub.w	r3, sl, r9
 8008674:	455b      	cmp	r3, fp
 8008676:	dc33      	bgt.n	80086e0 <_printf_float+0x374>
 8008678:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800867c:	429a      	cmp	r2, r3
 800867e:	db3b      	blt.n	80086f8 <_printf_float+0x38c>
 8008680:	6823      	ldr	r3, [r4, #0]
 8008682:	07da      	lsls	r2, r3, #31
 8008684:	d438      	bmi.n	80086f8 <_printf_float+0x38c>
 8008686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008688:	990d      	ldr	r1, [sp, #52]	; 0x34
 800868a:	eba3 020a 	sub.w	r2, r3, sl
 800868e:	eba3 0901 	sub.w	r9, r3, r1
 8008692:	4591      	cmp	r9, r2
 8008694:	bfa8      	it	ge
 8008696:	4691      	movge	r9, r2
 8008698:	f1b9 0f00 	cmp.w	r9, #0
 800869c:	dc34      	bgt.n	8008708 <_printf_float+0x39c>
 800869e:	f04f 0800 	mov.w	r8, #0
 80086a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086a6:	f104 0a1a 	add.w	sl, r4, #26
 80086aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80086ae:	1a9b      	subs	r3, r3, r2
 80086b0:	eba3 0309 	sub.w	r3, r3, r9
 80086b4:	4543      	cmp	r3, r8
 80086b6:	f77f af7a 	ble.w	80085ae <_printf_float+0x242>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4652      	mov	r2, sl
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	f43f aeac 	beq.w	8008422 <_printf_float+0xb6>
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	e7ec      	b.n	80086aa <_printf_float+0x33e>
 80086d0:	4613      	mov	r3, r2
 80086d2:	4631      	mov	r1, r6
 80086d4:	4642      	mov	r2, r8
 80086d6:	4628      	mov	r0, r5
 80086d8:	47b8      	blx	r7
 80086da:	3001      	adds	r0, #1
 80086dc:	d1c0      	bne.n	8008660 <_printf_float+0x2f4>
 80086de:	e6a0      	b.n	8008422 <_printf_float+0xb6>
 80086e0:	2301      	movs	r3, #1
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80086e8:	47b8      	blx	r7
 80086ea:	3001      	adds	r0, #1
 80086ec:	f43f ae99 	beq.w	8008422 <_printf_float+0xb6>
 80086f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086f2:	f10b 0b01 	add.w	fp, fp, #1
 80086f6:	e7b9      	b.n	800866c <_printf_float+0x300>
 80086f8:	4631      	mov	r1, r6
 80086fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086fe:	4628      	mov	r0, r5
 8008700:	47b8      	blx	r7
 8008702:	3001      	adds	r0, #1
 8008704:	d1bf      	bne.n	8008686 <_printf_float+0x31a>
 8008706:	e68c      	b.n	8008422 <_printf_float+0xb6>
 8008708:	464b      	mov	r3, r9
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	eb08 020a 	add.w	r2, r8, sl
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	d1c2      	bne.n	800869e <_printf_float+0x332>
 8008718:	e683      	b.n	8008422 <_printf_float+0xb6>
 800871a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800871c:	2a01      	cmp	r2, #1
 800871e:	dc01      	bgt.n	8008724 <_printf_float+0x3b8>
 8008720:	07db      	lsls	r3, r3, #31
 8008722:	d537      	bpl.n	8008794 <_printf_float+0x428>
 8008724:	2301      	movs	r3, #1
 8008726:	4642      	mov	r2, r8
 8008728:	4631      	mov	r1, r6
 800872a:	4628      	mov	r0, r5
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	f43f ae77 	beq.w	8008422 <_printf_float+0xb6>
 8008734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	f43f ae6f 	beq.w	8008422 <_printf_float+0xb6>
 8008744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008748:	2200      	movs	r2, #0
 800874a:	2300      	movs	r3, #0
 800874c:	f7f8 f92c 	bl	80009a8 <__aeabi_dcmpeq>
 8008750:	b9d8      	cbnz	r0, 800878a <_printf_float+0x41e>
 8008752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008754:	f108 0201 	add.w	r2, r8, #1
 8008758:	3b01      	subs	r3, #1
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d10e      	bne.n	8008782 <_printf_float+0x416>
 8008764:	e65d      	b.n	8008422 <_printf_float+0xb6>
 8008766:	2301      	movs	r3, #1
 8008768:	464a      	mov	r2, r9
 800876a:	4631      	mov	r1, r6
 800876c:	4628      	mov	r0, r5
 800876e:	47b8      	blx	r7
 8008770:	3001      	adds	r0, #1
 8008772:	f43f ae56 	beq.w	8008422 <_printf_float+0xb6>
 8008776:	f108 0801 	add.w	r8, r8, #1
 800877a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800877c:	3b01      	subs	r3, #1
 800877e:	4543      	cmp	r3, r8
 8008780:	dcf1      	bgt.n	8008766 <_printf_float+0x3fa>
 8008782:	4653      	mov	r3, sl
 8008784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008788:	e6e0      	b.n	800854c <_printf_float+0x1e0>
 800878a:	f04f 0800 	mov.w	r8, #0
 800878e:	f104 091a 	add.w	r9, r4, #26
 8008792:	e7f2      	b.n	800877a <_printf_float+0x40e>
 8008794:	2301      	movs	r3, #1
 8008796:	4642      	mov	r2, r8
 8008798:	e7df      	b.n	800875a <_printf_float+0x3ee>
 800879a:	2301      	movs	r3, #1
 800879c:	464a      	mov	r2, r9
 800879e:	4631      	mov	r1, r6
 80087a0:	4628      	mov	r0, r5
 80087a2:	47b8      	blx	r7
 80087a4:	3001      	adds	r0, #1
 80087a6:	f43f ae3c 	beq.w	8008422 <_printf_float+0xb6>
 80087aa:	f108 0801 	add.w	r8, r8, #1
 80087ae:	68e3      	ldr	r3, [r4, #12]
 80087b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80087b2:	1a5b      	subs	r3, r3, r1
 80087b4:	4543      	cmp	r3, r8
 80087b6:	dcf0      	bgt.n	800879a <_printf_float+0x42e>
 80087b8:	e6fd      	b.n	80085b6 <_printf_float+0x24a>
 80087ba:	f04f 0800 	mov.w	r8, #0
 80087be:	f104 0919 	add.w	r9, r4, #25
 80087c2:	e7f4      	b.n	80087ae <_printf_float+0x442>

080087c4 <_printf_common>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	4616      	mov	r6, r2
 80087ca:	4699      	mov	r9, r3
 80087cc:	688a      	ldr	r2, [r1, #8]
 80087ce:	690b      	ldr	r3, [r1, #16]
 80087d0:	4607      	mov	r7, r0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bfb8      	it	lt
 80087d6:	4613      	movlt	r3, r2
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087de:	460c      	mov	r4, r1
 80087e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e4:	b10a      	cbz	r2, 80087ea <_printf_common+0x26>
 80087e6:	3301      	adds	r3, #1
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	0699      	lsls	r1, r3, #26
 80087ee:	bf42      	ittt	mi
 80087f0:	6833      	ldrmi	r3, [r6, #0]
 80087f2:	3302      	addmi	r3, #2
 80087f4:	6033      	strmi	r3, [r6, #0]
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	f015 0506 	ands.w	r5, r5, #6
 80087fc:	d106      	bne.n	800880c <_printf_common+0x48>
 80087fe:	f104 0a19 	add.w	sl, r4, #25
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	6832      	ldr	r2, [r6, #0]
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc28      	bgt.n	800885e <_printf_common+0x9a>
 800880c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008810:	1e13      	subs	r3, r2, #0
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	bf18      	it	ne
 8008816:	2301      	movne	r3, #1
 8008818:	0692      	lsls	r2, r2, #26
 800881a:	d42d      	bmi.n	8008878 <_printf_common+0xb4>
 800881c:	4649      	mov	r1, r9
 800881e:	4638      	mov	r0, r7
 8008820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d020      	beq.n	800886c <_printf_common+0xa8>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	68e5      	ldr	r5, [r4, #12]
 800882e:	f003 0306 	and.w	r3, r3, #6
 8008832:	2b04      	cmp	r3, #4
 8008834:	bf18      	it	ne
 8008836:	2500      	movne	r5, #0
 8008838:	6832      	ldr	r2, [r6, #0]
 800883a:	f04f 0600 	mov.w	r6, #0
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	bf08      	it	eq
 8008842:	1aad      	subeq	r5, r5, r2
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	bf08      	it	eq
 8008848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800884c:	4293      	cmp	r3, r2
 800884e:	bfc4      	itt	gt
 8008850:	1a9b      	subgt	r3, r3, r2
 8008852:	18ed      	addgt	r5, r5, r3
 8008854:	341a      	adds	r4, #26
 8008856:	42b5      	cmp	r5, r6
 8008858:	d11a      	bne.n	8008890 <_printf_common+0xcc>
 800885a:	2000      	movs	r0, #0
 800885c:	e008      	b.n	8008870 <_printf_common+0xac>
 800885e:	2301      	movs	r3, #1
 8008860:	4652      	mov	r2, sl
 8008862:	4649      	mov	r1, r9
 8008864:	4638      	mov	r0, r7
 8008866:	47c0      	blx	r8
 8008868:	3001      	adds	r0, #1
 800886a:	d103      	bne.n	8008874 <_printf_common+0xb0>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008874:	3501      	adds	r5, #1
 8008876:	e7c4      	b.n	8008802 <_printf_common+0x3e>
 8008878:	2030      	movs	r0, #48	; 0x30
 800887a:	18e1      	adds	r1, r4, r3
 800887c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008886:	4422      	add	r2, r4
 8008888:	3302      	adds	r3, #2
 800888a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800888e:	e7c5      	b.n	800881c <_printf_common+0x58>
 8008890:	2301      	movs	r3, #1
 8008892:	4622      	mov	r2, r4
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d0e6      	beq.n	800886c <_printf_common+0xa8>
 800889e:	3601      	adds	r6, #1
 80088a0:	e7d9      	b.n	8008856 <_printf_common+0x92>
	...

080088a4 <_printf_i>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	7e0f      	ldrb	r7, [r1, #24]
 80088aa:	4691      	mov	r9, r2
 80088ac:	2f78      	cmp	r7, #120	; 0x78
 80088ae:	4680      	mov	r8, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	469a      	mov	sl, r3
 80088b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ba:	d807      	bhi.n	80088cc <_printf_i+0x28>
 80088bc:	2f62      	cmp	r7, #98	; 0x62
 80088be:	d80a      	bhi.n	80088d6 <_printf_i+0x32>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	f000 80d9 	beq.w	8008a78 <_printf_i+0x1d4>
 80088c6:	2f58      	cmp	r7, #88	; 0x58
 80088c8:	f000 80a4 	beq.w	8008a14 <_printf_i+0x170>
 80088cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d4:	e03a      	b.n	800894c <_printf_i+0xa8>
 80088d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088da:	2b15      	cmp	r3, #21
 80088dc:	d8f6      	bhi.n	80088cc <_printf_i+0x28>
 80088de:	a101      	add	r1, pc, #4	; (adr r1, 80088e4 <_printf_i+0x40>)
 80088e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008951 	.word	0x08008951
 80088ec:	080088cd 	.word	0x080088cd
 80088f0:	080088cd 	.word	0x080088cd
 80088f4:	080088cd 	.word	0x080088cd
 80088f8:	080088cd 	.word	0x080088cd
 80088fc:	08008951 	.word	0x08008951
 8008900:	080088cd 	.word	0x080088cd
 8008904:	080088cd 	.word	0x080088cd
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	08008a5f 	.word	0x08008a5f
 8008914:	08008981 	.word	0x08008981
 8008918:	08008a41 	.word	0x08008a41
 800891c:	080088cd 	.word	0x080088cd
 8008920:	080088cd 	.word	0x080088cd
 8008924:	08008a81 	.word	0x08008a81
 8008928:	080088cd 	.word	0x080088cd
 800892c:	08008981 	.word	0x08008981
 8008930:	080088cd 	.word	0x080088cd
 8008934:	080088cd 	.word	0x080088cd
 8008938:	08008a49 	.word	0x08008a49
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	1d1a      	adds	r2, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	602a      	str	r2, [r5, #0]
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800894c:	2301      	movs	r3, #1
 800894e:	e0a4      	b.n	8008a9a <_printf_i+0x1f6>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	6829      	ldr	r1, [r5, #0]
 8008954:	0606      	lsls	r6, r0, #24
 8008956:	f101 0304 	add.w	r3, r1, #4
 800895a:	d50a      	bpl.n	8008972 <_printf_i+0xce>
 800895c:	680e      	ldr	r6, [r1, #0]
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	2e00      	cmp	r6, #0
 8008962:	da03      	bge.n	800896c <_printf_i+0xc8>
 8008964:	232d      	movs	r3, #45	; 0x2d
 8008966:	4276      	negs	r6, r6
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	230a      	movs	r3, #10
 800896e:	485e      	ldr	r0, [pc, #376]	; (8008ae8 <_printf_i+0x244>)
 8008970:	e019      	b.n	80089a6 <_printf_i+0x102>
 8008972:	680e      	ldr	r6, [r1, #0]
 8008974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	bf18      	it	ne
 800897c:	b236      	sxthne	r6, r6
 800897e:	e7ef      	b.n	8008960 <_printf_i+0xbc>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	6820      	ldr	r0, [r4, #0]
 8008984:	1d19      	adds	r1, r3, #4
 8008986:	6029      	str	r1, [r5, #0]
 8008988:	0601      	lsls	r1, r0, #24
 800898a:	d501      	bpl.n	8008990 <_printf_i+0xec>
 800898c:	681e      	ldr	r6, [r3, #0]
 800898e:	e002      	b.n	8008996 <_printf_i+0xf2>
 8008990:	0646      	lsls	r6, r0, #25
 8008992:	d5fb      	bpl.n	800898c <_printf_i+0xe8>
 8008994:	881e      	ldrh	r6, [r3, #0]
 8008996:	2f6f      	cmp	r7, #111	; 0x6f
 8008998:	bf0c      	ite	eq
 800899a:	2308      	moveq	r3, #8
 800899c:	230a      	movne	r3, #10
 800899e:	4852      	ldr	r0, [pc, #328]	; (8008ae8 <_printf_i+0x244>)
 80089a0:	2100      	movs	r1, #0
 80089a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a6:	6865      	ldr	r5, [r4, #4]
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	bfa8      	it	ge
 80089ac:	6821      	ldrge	r1, [r4, #0]
 80089ae:	60a5      	str	r5, [r4, #8]
 80089b0:	bfa4      	itt	ge
 80089b2:	f021 0104 	bicge.w	r1, r1, #4
 80089b6:	6021      	strge	r1, [r4, #0]
 80089b8:	b90e      	cbnz	r6, 80089be <_printf_i+0x11a>
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	d04d      	beq.n	8008a5a <_printf_i+0x1b6>
 80089be:	4615      	mov	r5, r2
 80089c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80089c4:	fb03 6711 	mls	r7, r3, r1, r6
 80089c8:	5dc7      	ldrb	r7, [r0, r7]
 80089ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ce:	4637      	mov	r7, r6
 80089d0:	42bb      	cmp	r3, r7
 80089d2:	460e      	mov	r6, r1
 80089d4:	d9f4      	bls.n	80089c0 <_printf_i+0x11c>
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	d10b      	bne.n	80089f2 <_printf_i+0x14e>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	07de      	lsls	r6, r3, #31
 80089de:	d508      	bpl.n	80089f2 <_printf_i+0x14e>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	6861      	ldr	r1, [r4, #4]
 80089e4:	4299      	cmp	r1, r3
 80089e6:	bfde      	ittt	le
 80089e8:	2330      	movle	r3, #48	; 0x30
 80089ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089f2:	1b52      	subs	r2, r2, r5
 80089f4:	6122      	str	r2, [r4, #16]
 80089f6:	464b      	mov	r3, r9
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f8cd a000 	str.w	sl, [sp]
 8008a00:	aa03      	add	r2, sp, #12
 8008a02:	f7ff fedf 	bl	80087c4 <_printf_common>
 8008a06:	3001      	adds	r0, #1
 8008a08:	d14c      	bne.n	8008aa4 <_printf_i+0x200>
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	b004      	add	sp, #16
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	4834      	ldr	r0, [pc, #208]	; (8008ae8 <_printf_i+0x244>)
 8008a16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a1a:	6829      	ldr	r1, [r5, #0]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a22:	6029      	str	r1, [r5, #0]
 8008a24:	061d      	lsls	r5, r3, #24
 8008a26:	d514      	bpl.n	8008a52 <_printf_i+0x1ae>
 8008a28:	07df      	lsls	r7, r3, #31
 8008a2a:	bf44      	itt	mi
 8008a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a30:	6023      	strmi	r3, [r4, #0]
 8008a32:	b91e      	cbnz	r6, 8008a3c <_printf_i+0x198>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	f023 0320 	bic.w	r3, r3, #32
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	e7af      	b.n	80089a0 <_printf_i+0xfc>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	f043 0320 	orr.w	r3, r3, #32
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	2378      	movs	r3, #120	; 0x78
 8008a4a:	4828      	ldr	r0, [pc, #160]	; (8008aec <_printf_i+0x248>)
 8008a4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a50:	e7e3      	b.n	8008a1a <_printf_i+0x176>
 8008a52:	0659      	lsls	r1, r3, #25
 8008a54:	bf48      	it	mi
 8008a56:	b2b6      	uxthmi	r6, r6
 8008a58:	e7e6      	b.n	8008a28 <_printf_i+0x184>
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	e7bb      	b.n	80089d6 <_printf_i+0x132>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	6826      	ldr	r6, [r4, #0]
 8008a62:	1d18      	adds	r0, r3, #4
 8008a64:	6961      	ldr	r1, [r4, #20]
 8008a66:	6028      	str	r0, [r5, #0]
 8008a68:	0635      	lsls	r5, r6, #24
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	d501      	bpl.n	8008a72 <_printf_i+0x1ce>
 8008a6e:	6019      	str	r1, [r3, #0]
 8008a70:	e002      	b.n	8008a78 <_printf_i+0x1d4>
 8008a72:	0670      	lsls	r0, r6, #25
 8008a74:	d5fb      	bpl.n	8008a6e <_printf_i+0x1ca>
 8008a76:	8019      	strh	r1, [r3, #0]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4615      	mov	r5, r2
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	e7ba      	b.n	80089f6 <_printf_i+0x152>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	2100      	movs	r1, #0
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	681d      	ldr	r5, [r3, #0]
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 fee9 	bl	8009864 <memchr>
 8008a92:	b108      	cbz	r0, 8008a98 <_printf_i+0x1f4>
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	6060      	str	r0, [r4, #4]
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa2:	e7a8      	b.n	80089f6 <_printf_i+0x152>
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	47d0      	blx	sl
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d0ab      	beq.n	8008a0a <_printf_i+0x166>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	079b      	lsls	r3, r3, #30
 8008ab6:	d413      	bmi.n	8008ae0 <_printf_i+0x23c>
 8008ab8:	68e0      	ldr	r0, [r4, #12]
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	4298      	cmp	r0, r3
 8008abe:	bfb8      	it	lt
 8008ac0:	4618      	movlt	r0, r3
 8008ac2:	e7a4      	b.n	8008a0e <_printf_i+0x16a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4632      	mov	r2, r6
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4640      	mov	r0, r8
 8008acc:	47d0      	blx	sl
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d09b      	beq.n	8008a0a <_printf_i+0x166>
 8008ad2:	3501      	adds	r5, #1
 8008ad4:	68e3      	ldr	r3, [r4, #12]
 8008ad6:	9903      	ldr	r1, [sp, #12]
 8008ad8:	1a5b      	subs	r3, r3, r1
 8008ada:	42ab      	cmp	r3, r5
 8008adc:	dcf2      	bgt.n	8008ac4 <_printf_i+0x220>
 8008ade:	e7eb      	b.n	8008ab8 <_printf_i+0x214>
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	f104 0619 	add.w	r6, r4, #25
 8008ae6:	e7f5      	b.n	8008ad4 <_printf_i+0x230>
 8008ae8:	0800b3ca 	.word	0x0800b3ca
 8008aec:	0800b3db 	.word	0x0800b3db

08008af0 <sniprintf>:
 8008af0:	b40c      	push	{r2, r3}
 8008af2:	b530      	push	{r4, r5, lr}
 8008af4:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <sniprintf+0x64>)
 8008af6:	1e0c      	subs	r4, r1, #0
 8008af8:	681d      	ldr	r5, [r3, #0]
 8008afa:	b09d      	sub	sp, #116	; 0x74
 8008afc:	da08      	bge.n	8008b10 <sniprintf+0x20>
 8008afe:	238b      	movs	r3, #139	; 0x8b
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	b01d      	add	sp, #116	; 0x74
 8008b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b0c:	b002      	add	sp, #8
 8008b0e:	4770      	bx	lr
 8008b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b18:	bf0c      	ite	eq
 8008b1a:	4623      	moveq	r3, r4
 8008b1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b20:	9304      	str	r3, [sp, #16]
 8008b22:	9307      	str	r3, [sp, #28]
 8008b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008b28:	9002      	str	r0, [sp, #8]
 8008b2a:	9006      	str	r0, [sp, #24]
 8008b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008b30:	4628      	mov	r0, r5
 8008b32:	ab21      	add	r3, sp, #132	; 0x84
 8008b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b36:	a902      	add	r1, sp, #8
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f001 fb7d 	bl	800a238 <_svfiprintf_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	bfbc      	itt	lt
 8008b42:	238b      	movlt	r3, #139	; 0x8b
 8008b44:	602b      	strlt	r3, [r5, #0]
 8008b46:	2c00      	cmp	r4, #0
 8008b48:	d0dd      	beq.n	8008b06 <sniprintf+0x16>
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	9b02      	ldr	r3, [sp, #8]
 8008b4e:	701a      	strb	r2, [r3, #0]
 8008b50:	e7d9      	b.n	8008b06 <sniprintf+0x16>
 8008b52:	bf00      	nop
 8008b54:	20000040 	.word	0x20000040

08008b58 <quorem>:
 8008b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	6903      	ldr	r3, [r0, #16]
 8008b5e:	690c      	ldr	r4, [r1, #16]
 8008b60:	4607      	mov	r7, r0
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	f2c0 8082 	blt.w	8008c6c <quorem+0x114>
 8008b68:	3c01      	subs	r4, #1
 8008b6a:	f100 0514 	add.w	r5, r0, #20
 8008b6e:	f101 0814 	add.w	r8, r1, #20
 8008b72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b80:	3301      	adds	r3, #1
 8008b82:	429a      	cmp	r2, r3
 8008b84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b90:	d331      	bcc.n	8008bf6 <quorem+0x9e>
 8008b92:	f04f 0e00 	mov.w	lr, #0
 8008b96:	4640      	mov	r0, r8
 8008b98:	46ac      	mov	ip, r5
 8008b9a:	46f2      	mov	sl, lr
 8008b9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ba0:	b293      	uxth	r3, r2
 8008ba2:	fb06 e303 	mla	r3, r6, r3, lr
 8008ba6:	0c12      	lsrs	r2, r2, #16
 8008ba8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	fb06 e202 	mla	r2, r6, r2, lr
 8008bb2:	ebaa 0303 	sub.w	r3, sl, r3
 8008bb6:	f8dc a000 	ldr.w	sl, [ip]
 8008bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bbe:	fa1f fa8a 	uxth.w	sl, sl
 8008bc2:	4453      	add	r3, sl
 8008bc4:	f8dc a000 	ldr.w	sl, [ip]
 8008bc8:	b292      	uxth	r2, r2
 8008bca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bd8:	4581      	cmp	r9, r0
 8008bda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008bde:	f84c 3b04 	str.w	r3, [ip], #4
 8008be2:	d2db      	bcs.n	8008b9c <quorem+0x44>
 8008be4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008be8:	b92b      	cbnz	r3, 8008bf6 <quorem+0x9e>
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	3b04      	subs	r3, #4
 8008bee:	429d      	cmp	r5, r3
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	d32f      	bcc.n	8008c54 <quorem+0xfc>
 8008bf4:	613c      	str	r4, [r7, #16]
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f001 f8ce 	bl	8009d98 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	db25      	blt.n	8008c4c <quorem+0xf4>
 8008c00:	4628      	mov	r0, r5
 8008c02:	f04f 0c00 	mov.w	ip, #0
 8008c06:	3601      	adds	r6, #1
 8008c08:	f858 1b04 	ldr.w	r1, [r8], #4
 8008c0c:	f8d0 e000 	ldr.w	lr, [r0]
 8008c10:	b28b      	uxth	r3, r1
 8008c12:	ebac 0303 	sub.w	r3, ip, r3
 8008c16:	fa1f f28e 	uxth.w	r2, lr
 8008c1a:	4413      	add	r3, r2
 8008c1c:	0c0a      	lsrs	r2, r1, #16
 8008c1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2c:	45c1      	cmp	r9, r8
 8008c2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c32:	f840 3b04 	str.w	r3, [r0], #4
 8008c36:	d2e7      	bcs.n	8008c08 <quorem+0xb0>
 8008c38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c40:	b922      	cbnz	r2, 8008c4c <quorem+0xf4>
 8008c42:	3b04      	subs	r3, #4
 8008c44:	429d      	cmp	r5, r3
 8008c46:	461a      	mov	r2, r3
 8008c48:	d30a      	bcc.n	8008c60 <quorem+0x108>
 8008c4a:	613c      	str	r4, [r7, #16]
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	b003      	add	sp, #12
 8008c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	3b04      	subs	r3, #4
 8008c58:	2a00      	cmp	r2, #0
 8008c5a:	d1cb      	bne.n	8008bf4 <quorem+0x9c>
 8008c5c:	3c01      	subs	r4, #1
 8008c5e:	e7c6      	b.n	8008bee <quorem+0x96>
 8008c60:	6812      	ldr	r2, [r2, #0]
 8008c62:	3b04      	subs	r3, #4
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	d1f0      	bne.n	8008c4a <quorem+0xf2>
 8008c68:	3c01      	subs	r4, #1
 8008c6a:	e7eb      	b.n	8008c44 <quorem+0xec>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7ee      	b.n	8008c4e <quorem+0xf6>

08008c70 <_dtoa_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	4616      	mov	r6, r2
 8008c76:	461f      	mov	r7, r3
 8008c78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008c7a:	b099      	sub	sp, #100	; 0x64
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008c82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008c86:	b974      	cbnz	r4, 8008ca6 <_dtoa_r+0x36>
 8008c88:	2010      	movs	r0, #16
 8008c8a:	f000 fde3 	bl	8009854 <malloc>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6268      	str	r0, [r5, #36]	; 0x24
 8008c92:	b920      	cbnz	r0, 8008c9e <_dtoa_r+0x2e>
 8008c94:	21ea      	movs	r1, #234	; 0xea
 8008c96:	4ba8      	ldr	r3, [pc, #672]	; (8008f38 <_dtoa_r+0x2c8>)
 8008c98:	48a8      	ldr	r0, [pc, #672]	; (8008f3c <_dtoa_r+0x2cc>)
 8008c9a:	f001 fbdd 	bl	800a458 <__assert_func>
 8008c9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ca2:	6004      	str	r4, [r0, #0]
 8008ca4:	60c4      	str	r4, [r0, #12]
 8008ca6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	b151      	cbz	r1, 8008cc2 <_dtoa_r+0x52>
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4093      	lsls	r3, r2
 8008cb2:	604a      	str	r2, [r1, #4]
 8008cb4:	608b      	str	r3, [r1, #8]
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 fe30 	bl	800991c <_Bfree>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	1e3b      	subs	r3, r7, #0
 8008cc4:	bfaf      	iteee	ge
 8008cc6:	2300      	movge	r3, #0
 8008cc8:	2201      	movlt	r2, #1
 8008cca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cce:	9305      	strlt	r3, [sp, #20]
 8008cd0:	bfa8      	it	ge
 8008cd2:	f8c8 3000 	strge.w	r3, [r8]
 8008cd6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008cda:	4b99      	ldr	r3, [pc, #612]	; (8008f40 <_dtoa_r+0x2d0>)
 8008cdc:	bfb8      	it	lt
 8008cde:	f8c8 2000 	strlt.w	r2, [r8]
 8008ce2:	ea33 0309 	bics.w	r3, r3, r9
 8008ce6:	d119      	bne.n	8008d1c <_dtoa_r+0xac>
 8008ce8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008cec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cf4:	4333      	orrs	r3, r6
 8008cf6:	f000 857f 	beq.w	80097f8 <_dtoa_r+0xb88>
 8008cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cfc:	b953      	cbnz	r3, 8008d14 <_dtoa_r+0xa4>
 8008cfe:	4b91      	ldr	r3, [pc, #580]	; (8008f44 <_dtoa_r+0x2d4>)
 8008d00:	e022      	b.n	8008d48 <_dtoa_r+0xd8>
 8008d02:	4b91      	ldr	r3, [pc, #580]	; (8008f48 <_dtoa_r+0x2d8>)
 8008d04:	9303      	str	r3, [sp, #12]
 8008d06:	3308      	adds	r3, #8
 8008d08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	9803      	ldr	r0, [sp, #12]
 8008d0e:	b019      	add	sp, #100	; 0x64
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d14:	4b8b      	ldr	r3, [pc, #556]	; (8008f44 <_dtoa_r+0x2d4>)
 8008d16:	9303      	str	r3, [sp, #12]
 8008d18:	3303      	adds	r3, #3
 8008d1a:	e7f5      	b.n	8008d08 <_dtoa_r+0x98>
 8008d1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008d20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d28:	2200      	movs	r2, #0
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f7f7 fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d30:	4680      	mov	r8, r0
 8008d32:	b158      	cbz	r0, 8008d4c <_dtoa_r+0xdc>
 8008d34:	2301      	movs	r3, #1
 8008d36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8558 	beq.w	80097f2 <_dtoa_r+0xb82>
 8008d42:	4882      	ldr	r0, [pc, #520]	; (8008f4c <_dtoa_r+0x2dc>)
 8008d44:	6018      	str	r0, [r3, #0]
 8008d46:	1e43      	subs	r3, r0, #1
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	e7df      	b.n	8008d0c <_dtoa_r+0x9c>
 8008d4c:	ab16      	add	r3, sp, #88	; 0x58
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	ab17      	add	r3, sp, #92	; 0x5c
 8008d52:	9300      	str	r3, [sp, #0]
 8008d54:	4628      	mov	r0, r5
 8008d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d5a:	f001 f8c5 	bl	8009ee8 <__d2b>
 8008d5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008d62:	4683      	mov	fp, r0
 8008d64:	2c00      	cmp	r4, #0
 8008d66:	d07f      	beq.n	8008e68 <_dtoa_r+0x1f8>
 8008d68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008d72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008d7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008d7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008d82:	2200      	movs	r2, #0
 8008d84:	4b72      	ldr	r3, [pc, #456]	; (8008f50 <_dtoa_r+0x2e0>)
 8008d86:	f7f7 f9ef 	bl	8000168 <__aeabi_dsub>
 8008d8a:	a365      	add	r3, pc, #404	; (adr r3, 8008f20 <_dtoa_r+0x2b0>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	f7f7 fba2 	bl	80004d8 <__aeabi_dmul>
 8008d94:	a364      	add	r3, pc, #400	; (adr r3, 8008f28 <_dtoa_r+0x2b8>)
 8008d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9a:	f7f7 f9e7 	bl	800016c <__adddf3>
 8008d9e:	4606      	mov	r6, r0
 8008da0:	4620      	mov	r0, r4
 8008da2:	460f      	mov	r7, r1
 8008da4:	f7f7 fb2e 	bl	8000404 <__aeabi_i2d>
 8008da8:	a361      	add	r3, pc, #388	; (adr r3, 8008f30 <_dtoa_r+0x2c0>)
 8008daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dae:	f7f7 fb93 	bl	80004d8 <__aeabi_dmul>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 f9d7 	bl	800016c <__adddf3>
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	460f      	mov	r7, r1
 8008dc2:	f7f7 fe39 	bl	8000a38 <__aeabi_d2iz>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	4682      	mov	sl, r0
 8008dca:	2300      	movs	r3, #0
 8008dcc:	4630      	mov	r0, r6
 8008dce:	4639      	mov	r1, r7
 8008dd0:	f7f7 fdf4 	bl	80009bc <__aeabi_dcmplt>
 8008dd4:	b148      	cbz	r0, 8008dea <_dtoa_r+0x17a>
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f7f7 fb14 	bl	8000404 <__aeabi_i2d>
 8008ddc:	4632      	mov	r2, r6
 8008dde:	463b      	mov	r3, r7
 8008de0:	f7f7 fde2 	bl	80009a8 <__aeabi_dcmpeq>
 8008de4:	b908      	cbnz	r0, 8008dea <_dtoa_r+0x17a>
 8008de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dea:	f1ba 0f16 	cmp.w	sl, #22
 8008dee:	d858      	bhi.n	8008ea2 <_dtoa_r+0x232>
 8008df0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008df4:	4b57      	ldr	r3, [pc, #348]	; (8008f54 <_dtoa_r+0x2e4>)
 8008df6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fddd 	bl	80009bc <__aeabi_dcmplt>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d04f      	beq.n	8008ea6 <_dtoa_r+0x236>
 8008e06:	2300      	movs	r3, #0
 8008e08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e10:	1b1c      	subs	r4, r3, r4
 8008e12:	1e63      	subs	r3, r4, #1
 8008e14:	9309      	str	r3, [sp, #36]	; 0x24
 8008e16:	bf49      	itett	mi
 8008e18:	f1c4 0301 	rsbmi	r3, r4, #1
 8008e1c:	2300      	movpl	r3, #0
 8008e1e:	9306      	strmi	r3, [sp, #24]
 8008e20:	2300      	movmi	r3, #0
 8008e22:	bf54      	ite	pl
 8008e24:	9306      	strpl	r3, [sp, #24]
 8008e26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008e28:	f1ba 0f00 	cmp.w	sl, #0
 8008e2c:	db3d      	blt.n	8008eaa <_dtoa_r+0x23a>
 8008e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008e34:	4453      	add	r3, sl
 8008e36:	9309      	str	r3, [sp, #36]	; 0x24
 8008e38:	2300      	movs	r3, #0
 8008e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e3e:	2b09      	cmp	r3, #9
 8008e40:	f200 808c 	bhi.w	8008f5c <_dtoa_r+0x2ec>
 8008e44:	2b05      	cmp	r3, #5
 8008e46:	bfc4      	itt	gt
 8008e48:	3b04      	subgt	r3, #4
 8008e4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e4e:	bfc8      	it	gt
 8008e50:	2400      	movgt	r4, #0
 8008e52:	f1a3 0302 	sub.w	r3, r3, #2
 8008e56:	bfd8      	it	le
 8008e58:	2401      	movle	r4, #1
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	f200 808a 	bhi.w	8008f74 <_dtoa_r+0x304>
 8008e60:	e8df f003 	tbb	[pc, r3]
 8008e64:	5b4d4f2d 	.word	0x5b4d4f2d
 8008e68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008e6c:	441c      	add	r4, r3
 8008e6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	bfc3      	ittte	gt
 8008e76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008e7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008e82:	f1c3 0320 	rsble	r3, r3, #32
 8008e86:	bfc6      	itte	gt
 8008e88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e8c:	4318      	orrgt	r0, r3
 8008e8e:	fa06 f003 	lslle.w	r0, r6, r3
 8008e92:	f7f7 faa7 	bl	80003e4 <__aeabi_ui2d>
 8008e96:	2301      	movs	r3, #1
 8008e98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008e9c:	3c01      	subs	r4, #1
 8008e9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ea0:	e76f      	b.n	8008d82 <_dtoa_r+0x112>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7b2      	b.n	8008e0c <_dtoa_r+0x19c>
 8008ea6:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ea8:	e7b1      	b.n	8008e0e <_dtoa_r+0x19e>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	eba3 030a 	sub.w	r3, r3, sl
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	f1ca 0300 	rsb	r3, sl, #0
 8008eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb8:	2300      	movs	r3, #0
 8008eba:	930e      	str	r3, [sp, #56]	; 0x38
 8008ebc:	e7be      	b.n	8008e3c <_dtoa_r+0x1cc>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dc58      	bgt.n	8008f7a <_dtoa_r+0x30a>
 8008ec8:	f04f 0901 	mov.w	r9, #1
 8008ecc:	464b      	mov	r3, r9
 8008ece:	f8cd 9020 	str.w	r9, [sp, #32]
 8008ed2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008eda:	6042      	str	r2, [r0, #4]
 8008edc:	2204      	movs	r2, #4
 8008ede:	f102 0614 	add.w	r6, r2, #20
 8008ee2:	429e      	cmp	r6, r3
 8008ee4:	6841      	ldr	r1, [r0, #4]
 8008ee6:	d94e      	bls.n	8008f86 <_dtoa_r+0x316>
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fcd7 	bl	800989c <_Balloc>
 8008eee:	9003      	str	r0, [sp, #12]
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d14c      	bne.n	8008f8e <_dtoa_r+0x31e>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008efa:	4b17      	ldr	r3, [pc, #92]	; (8008f58 <_dtoa_r+0x2e8>)
 8008efc:	e6cc      	b.n	8008c98 <_dtoa_r+0x28>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e7de      	b.n	8008ec0 <_dtoa_r+0x250>
 8008f02:	2300      	movs	r3, #0
 8008f04:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f08:	eb0a 0903 	add.w	r9, sl, r3
 8008f0c:	f109 0301 	add.w	r3, r9, #1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	9308      	str	r3, [sp, #32]
 8008f14:	bfb8      	it	lt
 8008f16:	2301      	movlt	r3, #1
 8008f18:	e7dd      	b.n	8008ed6 <_dtoa_r+0x266>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e7f2      	b.n	8008f04 <_dtoa_r+0x294>
 8008f1e:	bf00      	nop
 8008f20:	636f4361 	.word	0x636f4361
 8008f24:	3fd287a7 	.word	0x3fd287a7
 8008f28:	8b60c8b3 	.word	0x8b60c8b3
 8008f2c:	3fc68a28 	.word	0x3fc68a28
 8008f30:	509f79fb 	.word	0x509f79fb
 8008f34:	3fd34413 	.word	0x3fd34413
 8008f38:	0800b3f9 	.word	0x0800b3f9
 8008f3c:	0800b410 	.word	0x0800b410
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	0800b3f5 	.word	0x0800b3f5
 8008f48:	0800b3ec 	.word	0x0800b3ec
 8008f4c:	0800b3c9 	.word	0x0800b3c9
 8008f50:	3ff80000 	.word	0x3ff80000
 8008f54:	0800b500 	.word	0x0800b500
 8008f58:	0800b46b 	.word	0x0800b46b
 8008f5c:	2401      	movs	r4, #1
 8008f5e:	2300      	movs	r3, #0
 8008f60:	940b      	str	r4, [sp, #44]	; 0x2c
 8008f62:	9322      	str	r3, [sp, #136]	; 0x88
 8008f64:	f04f 39ff 	mov.w	r9, #4294967295
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2312      	movs	r3, #18
 8008f6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008f70:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f72:	e7b0      	b.n	8008ed6 <_dtoa_r+0x266>
 8008f74:	2301      	movs	r3, #1
 8008f76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f78:	e7f4      	b.n	8008f64 <_dtoa_r+0x2f4>
 8008f7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8008f7e:	464b      	mov	r3, r9
 8008f80:	f8cd 9020 	str.w	r9, [sp, #32]
 8008f84:	e7a7      	b.n	8008ed6 <_dtoa_r+0x266>
 8008f86:	3101      	adds	r1, #1
 8008f88:	6041      	str	r1, [r0, #4]
 8008f8a:	0052      	lsls	r2, r2, #1
 8008f8c:	e7a7      	b.n	8008ede <_dtoa_r+0x26e>
 8008f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f90:	9a03      	ldr	r2, [sp, #12]
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	9b08      	ldr	r3, [sp, #32]
 8008f96:	2b0e      	cmp	r3, #14
 8008f98:	f200 80a8 	bhi.w	80090ec <_dtoa_r+0x47c>
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	f000 80a5 	beq.w	80090ec <_dtoa_r+0x47c>
 8008fa2:	f1ba 0f00 	cmp.w	sl, #0
 8008fa6:	dd34      	ble.n	8009012 <_dtoa_r+0x3a2>
 8008fa8:	4a9a      	ldr	r2, [pc, #616]	; (8009214 <_dtoa_r+0x5a4>)
 8008faa:	f00a 030f 	and.w	r3, sl, #15
 8008fae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008fb2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008fb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008fba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008fbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008fc2:	d016      	beq.n	8008ff2 <_dtoa_r+0x382>
 8008fc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fc8:	4b93      	ldr	r3, [pc, #588]	; (8009218 <_dtoa_r+0x5a8>)
 8008fca:	2703      	movs	r7, #3
 8008fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008fd0:	f7f7 fbac 	bl	800072c <__aeabi_ddiv>
 8008fd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fd8:	f004 040f 	and.w	r4, r4, #15
 8008fdc:	4e8e      	ldr	r6, [pc, #568]	; (8009218 <_dtoa_r+0x5a8>)
 8008fde:	b954      	cbnz	r4, 8008ff6 <_dtoa_r+0x386>
 8008fe0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008fe8:	f7f7 fba0 	bl	800072c <__aeabi_ddiv>
 8008fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ff0:	e029      	b.n	8009046 <_dtoa_r+0x3d6>
 8008ff2:	2702      	movs	r7, #2
 8008ff4:	e7f2      	b.n	8008fdc <_dtoa_r+0x36c>
 8008ff6:	07e1      	lsls	r1, r4, #31
 8008ff8:	d508      	bpl.n	800900c <_dtoa_r+0x39c>
 8008ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ffe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009002:	f7f7 fa69 	bl	80004d8 <__aeabi_dmul>
 8009006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800900a:	3701      	adds	r7, #1
 800900c:	1064      	asrs	r4, r4, #1
 800900e:	3608      	adds	r6, #8
 8009010:	e7e5      	b.n	8008fde <_dtoa_r+0x36e>
 8009012:	f000 80a5 	beq.w	8009160 <_dtoa_r+0x4f0>
 8009016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800901a:	f1ca 0400 	rsb	r4, sl, #0
 800901e:	4b7d      	ldr	r3, [pc, #500]	; (8009214 <_dtoa_r+0x5a4>)
 8009020:	f004 020f 	and.w	r2, r4, #15
 8009024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902c:	f7f7 fa54 	bl	80004d8 <__aeabi_dmul>
 8009030:	2702      	movs	r7, #2
 8009032:	2300      	movs	r3, #0
 8009034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009038:	4e77      	ldr	r6, [pc, #476]	; (8009218 <_dtoa_r+0x5a8>)
 800903a:	1124      	asrs	r4, r4, #4
 800903c:	2c00      	cmp	r4, #0
 800903e:	f040 8084 	bne.w	800914a <_dtoa_r+0x4da>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d1d2      	bne.n	8008fec <_dtoa_r+0x37c>
 8009046:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 808b 	beq.w	8009164 <_dtoa_r+0x4f4>
 800904e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009052:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009056:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800905a:	2200      	movs	r2, #0
 800905c:	4b6f      	ldr	r3, [pc, #444]	; (800921c <_dtoa_r+0x5ac>)
 800905e:	f7f7 fcad 	bl	80009bc <__aeabi_dcmplt>
 8009062:	2800      	cmp	r0, #0
 8009064:	d07e      	beq.n	8009164 <_dtoa_r+0x4f4>
 8009066:	9b08      	ldr	r3, [sp, #32]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d07b      	beq.n	8009164 <_dtoa_r+0x4f4>
 800906c:	f1b9 0f00 	cmp.w	r9, #0
 8009070:	dd38      	ble.n	80090e4 <_dtoa_r+0x474>
 8009072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009076:	2200      	movs	r2, #0
 8009078:	4b69      	ldr	r3, [pc, #420]	; (8009220 <_dtoa_r+0x5b0>)
 800907a:	f7f7 fa2d 	bl	80004d8 <__aeabi_dmul>
 800907e:	464c      	mov	r4, r9
 8009080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009084:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009088:	3701      	adds	r7, #1
 800908a:	4638      	mov	r0, r7
 800908c:	f7f7 f9ba 	bl	8000404 <__aeabi_i2d>
 8009090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009094:	f7f7 fa20 	bl	80004d8 <__aeabi_dmul>
 8009098:	2200      	movs	r2, #0
 800909a:	4b62      	ldr	r3, [pc, #392]	; (8009224 <_dtoa_r+0x5b4>)
 800909c:	f7f7 f866 	bl	800016c <__adddf3>
 80090a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80090a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090a8:	9611      	str	r6, [sp, #68]	; 0x44
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	d15d      	bne.n	800916a <_dtoa_r+0x4fa>
 80090ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090b2:	2200      	movs	r2, #0
 80090b4:	4b5c      	ldr	r3, [pc, #368]	; (8009228 <_dtoa_r+0x5b8>)
 80090b6:	f7f7 f857 	bl	8000168 <__aeabi_dsub>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090c2:	4633      	mov	r3, r6
 80090c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090c6:	f7f7 fc97 	bl	80009f8 <__aeabi_dcmpgt>
 80090ca:	2800      	cmp	r0, #0
 80090cc:	f040 829c 	bne.w	8009608 <_dtoa_r+0x998>
 80090d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090d6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80090da:	f7f7 fc6f 	bl	80009bc <__aeabi_dcmplt>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f040 8290 	bne.w	8009604 <_dtoa_r+0x994>
 80090e4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80090e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80090ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f2c0 8152 	blt.w	8009398 <_dtoa_r+0x728>
 80090f4:	f1ba 0f0e 	cmp.w	sl, #14
 80090f8:	f300 814e 	bgt.w	8009398 <_dtoa_r+0x728>
 80090fc:	4b45      	ldr	r3, [pc, #276]	; (8009214 <_dtoa_r+0x5a4>)
 80090fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009102:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009106:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800910a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800910c:	2b00      	cmp	r3, #0
 800910e:	f280 80db 	bge.w	80092c8 <_dtoa_r+0x658>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f300 80d7 	bgt.w	80092c8 <_dtoa_r+0x658>
 800911a:	f040 8272 	bne.w	8009602 <_dtoa_r+0x992>
 800911e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009122:	2200      	movs	r2, #0
 8009124:	4b40      	ldr	r3, [pc, #256]	; (8009228 <_dtoa_r+0x5b8>)
 8009126:	f7f7 f9d7 	bl	80004d8 <__aeabi_dmul>
 800912a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800912e:	f7f7 fc59 	bl	80009e4 <__aeabi_dcmpge>
 8009132:	9c08      	ldr	r4, [sp, #32]
 8009134:	4626      	mov	r6, r4
 8009136:	2800      	cmp	r0, #0
 8009138:	f040 8248 	bne.w	80095cc <_dtoa_r+0x95c>
 800913c:	2331      	movs	r3, #49	; 0x31
 800913e:	9f03      	ldr	r7, [sp, #12]
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	f807 3b01 	strb.w	r3, [r7], #1
 8009148:	e244      	b.n	80095d4 <_dtoa_r+0x964>
 800914a:	07e2      	lsls	r2, r4, #31
 800914c:	d505      	bpl.n	800915a <_dtoa_r+0x4ea>
 800914e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009152:	f7f7 f9c1 	bl	80004d8 <__aeabi_dmul>
 8009156:	2301      	movs	r3, #1
 8009158:	3701      	adds	r7, #1
 800915a:	1064      	asrs	r4, r4, #1
 800915c:	3608      	adds	r6, #8
 800915e:	e76d      	b.n	800903c <_dtoa_r+0x3cc>
 8009160:	2702      	movs	r7, #2
 8009162:	e770      	b.n	8009046 <_dtoa_r+0x3d6>
 8009164:	46d0      	mov	r8, sl
 8009166:	9c08      	ldr	r4, [sp, #32]
 8009168:	e78f      	b.n	800908a <_dtoa_r+0x41a>
 800916a:	9903      	ldr	r1, [sp, #12]
 800916c:	4b29      	ldr	r3, [pc, #164]	; (8009214 <_dtoa_r+0x5a4>)
 800916e:	4421      	add	r1, r4
 8009170:	9112      	str	r1, [sp, #72]	; 0x48
 8009172:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009174:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009178:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800917c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009180:	2900      	cmp	r1, #0
 8009182:	d055      	beq.n	8009230 <_dtoa_r+0x5c0>
 8009184:	2000      	movs	r0, #0
 8009186:	4929      	ldr	r1, [pc, #164]	; (800922c <_dtoa_r+0x5bc>)
 8009188:	f7f7 fad0 	bl	800072c <__aeabi_ddiv>
 800918c:	463b      	mov	r3, r7
 800918e:	4632      	mov	r2, r6
 8009190:	f7f6 ffea 	bl	8000168 <__aeabi_dsub>
 8009194:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009198:	9f03      	ldr	r7, [sp, #12]
 800919a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800919e:	f7f7 fc4b 	bl	8000a38 <__aeabi_d2iz>
 80091a2:	4604      	mov	r4, r0
 80091a4:	f7f7 f92e 	bl	8000404 <__aeabi_i2d>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091b0:	f7f6 ffda 	bl	8000168 <__aeabi_dsub>
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	3430      	adds	r4, #48	; 0x30
 80091ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091c2:	f807 4b01 	strb.w	r4, [r7], #1
 80091c6:	f7f7 fbf9 	bl	80009bc <__aeabi_dcmplt>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d174      	bne.n	80092b8 <_dtoa_r+0x648>
 80091ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091d2:	2000      	movs	r0, #0
 80091d4:	4911      	ldr	r1, [pc, #68]	; (800921c <_dtoa_r+0x5ac>)
 80091d6:	f7f6 ffc7 	bl	8000168 <__aeabi_dsub>
 80091da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80091de:	f7f7 fbed 	bl	80009bc <__aeabi_dcmplt>
 80091e2:	2800      	cmp	r0, #0
 80091e4:	f040 80b7 	bne.w	8009356 <_dtoa_r+0x6e6>
 80091e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091ea:	429f      	cmp	r7, r3
 80091ec:	f43f af7a 	beq.w	80090e4 <_dtoa_r+0x474>
 80091f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80091f4:	2200      	movs	r2, #0
 80091f6:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <_dtoa_r+0x5b0>)
 80091f8:	f7f7 f96e 	bl	80004d8 <__aeabi_dmul>
 80091fc:	2200      	movs	r2, #0
 80091fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009202:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <_dtoa_r+0x5b0>)
 8009208:	f7f7 f966 	bl	80004d8 <__aeabi_dmul>
 800920c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009210:	e7c3      	b.n	800919a <_dtoa_r+0x52a>
 8009212:	bf00      	nop
 8009214:	0800b500 	.word	0x0800b500
 8009218:	0800b4d8 	.word	0x0800b4d8
 800921c:	3ff00000 	.word	0x3ff00000
 8009220:	40240000 	.word	0x40240000
 8009224:	401c0000 	.word	0x401c0000
 8009228:	40140000 	.word	0x40140000
 800922c:	3fe00000 	.word	0x3fe00000
 8009230:	4630      	mov	r0, r6
 8009232:	4639      	mov	r1, r7
 8009234:	f7f7 f950 	bl	80004d8 <__aeabi_dmul>
 8009238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800923a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800923e:	9c03      	ldr	r4, [sp, #12]
 8009240:	9314      	str	r3, [sp, #80]	; 0x50
 8009242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009246:	f7f7 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800924a:	9015      	str	r0, [sp, #84]	; 0x54
 800924c:	f7f7 f8da 	bl	8000404 <__aeabi_i2d>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009258:	f7f6 ff86 	bl	8000168 <__aeabi_dsub>
 800925c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800925e:	4606      	mov	r6, r0
 8009260:	3330      	adds	r3, #48	; 0x30
 8009262:	f804 3b01 	strb.w	r3, [r4], #1
 8009266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009268:	460f      	mov	r7, r1
 800926a:	429c      	cmp	r4, r3
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	d124      	bne.n	80092bc <_dtoa_r+0x64c>
 8009272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009276:	4bb0      	ldr	r3, [pc, #704]	; (8009538 <_dtoa_r+0x8c8>)
 8009278:	f7f6 ff78 	bl	800016c <__adddf3>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4630      	mov	r0, r6
 8009282:	4639      	mov	r1, r7
 8009284:	f7f7 fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 8009288:	2800      	cmp	r0, #0
 800928a:	d163      	bne.n	8009354 <_dtoa_r+0x6e4>
 800928c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009290:	2000      	movs	r0, #0
 8009292:	49a9      	ldr	r1, [pc, #676]	; (8009538 <_dtoa_r+0x8c8>)
 8009294:	f7f6 ff68 	bl	8000168 <__aeabi_dsub>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4630      	mov	r0, r6
 800929e:	4639      	mov	r1, r7
 80092a0:	f7f7 fb8c 	bl	80009bc <__aeabi_dcmplt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	f43f af1d 	beq.w	80090e4 <_dtoa_r+0x474>
 80092aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80092ac:	1e7b      	subs	r3, r7, #1
 80092ae:	9314      	str	r3, [sp, #80]	; 0x50
 80092b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80092b4:	2b30      	cmp	r3, #48	; 0x30
 80092b6:	d0f8      	beq.n	80092aa <_dtoa_r+0x63a>
 80092b8:	46c2      	mov	sl, r8
 80092ba:	e03b      	b.n	8009334 <_dtoa_r+0x6c4>
 80092bc:	4b9f      	ldr	r3, [pc, #636]	; (800953c <_dtoa_r+0x8cc>)
 80092be:	f7f7 f90b 	bl	80004d8 <__aeabi_dmul>
 80092c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c6:	e7bc      	b.n	8009242 <_dtoa_r+0x5d2>
 80092c8:	9f03      	ldr	r7, [sp, #12]
 80092ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80092ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f7 fa29 	bl	800072c <__aeabi_ddiv>
 80092da:	f7f7 fbad 	bl	8000a38 <__aeabi_d2iz>
 80092de:	4604      	mov	r4, r0
 80092e0:	f7f7 f890 	bl	8000404 <__aeabi_i2d>
 80092e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e8:	f7f7 f8f6 	bl	80004d8 <__aeabi_dmul>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	f7f6 ff38 	bl	8000168 <__aeabi_dsub>
 80092f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80092fc:	f807 6b01 	strb.w	r6, [r7], #1
 8009300:	9e03      	ldr	r6, [sp, #12]
 8009302:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009306:	1bbe      	subs	r6, r7, r6
 8009308:	45b4      	cmp	ip, r6
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	d136      	bne.n	800937e <_dtoa_r+0x70e>
 8009310:	f7f6 ff2c 	bl	800016c <__adddf3>
 8009314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009318:	4680      	mov	r8, r0
 800931a:	4689      	mov	r9, r1
 800931c:	f7f7 fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009320:	bb58      	cbnz	r0, 800937a <_dtoa_r+0x70a>
 8009322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009326:	4640      	mov	r0, r8
 8009328:	4649      	mov	r1, r9
 800932a:	f7f7 fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800932e:	b108      	cbz	r0, 8009334 <_dtoa_r+0x6c4>
 8009330:	07e1      	lsls	r1, r4, #31
 8009332:	d422      	bmi.n	800937a <_dtoa_r+0x70a>
 8009334:	4628      	mov	r0, r5
 8009336:	4659      	mov	r1, fp
 8009338:	f000 faf0 	bl	800991c <_Bfree>
 800933c:	2300      	movs	r3, #0
 800933e:	703b      	strb	r3, [r7, #0]
 8009340:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009342:	f10a 0001 	add.w	r0, sl, #1
 8009346:	6018      	str	r0, [r3, #0]
 8009348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800934a:	2b00      	cmp	r3, #0
 800934c:	f43f acde 	beq.w	8008d0c <_dtoa_r+0x9c>
 8009350:	601f      	str	r7, [r3, #0]
 8009352:	e4db      	b.n	8008d0c <_dtoa_r+0x9c>
 8009354:	4627      	mov	r7, r4
 8009356:	463b      	mov	r3, r7
 8009358:	461f      	mov	r7, r3
 800935a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800935e:	2a39      	cmp	r2, #57	; 0x39
 8009360:	d107      	bne.n	8009372 <_dtoa_r+0x702>
 8009362:	9a03      	ldr	r2, [sp, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d1f7      	bne.n	8009358 <_dtoa_r+0x6e8>
 8009368:	2230      	movs	r2, #48	; 0x30
 800936a:	9903      	ldr	r1, [sp, #12]
 800936c:	f108 0801 	add.w	r8, r8, #1
 8009370:	700a      	strb	r2, [r1, #0]
 8009372:	781a      	ldrb	r2, [r3, #0]
 8009374:	3201      	adds	r2, #1
 8009376:	701a      	strb	r2, [r3, #0]
 8009378:	e79e      	b.n	80092b8 <_dtoa_r+0x648>
 800937a:	46d0      	mov	r8, sl
 800937c:	e7eb      	b.n	8009356 <_dtoa_r+0x6e6>
 800937e:	2200      	movs	r2, #0
 8009380:	4b6e      	ldr	r3, [pc, #440]	; (800953c <_dtoa_r+0x8cc>)
 8009382:	f7f7 f8a9 	bl	80004d8 <__aeabi_dmul>
 8009386:	2200      	movs	r2, #0
 8009388:	2300      	movs	r3, #0
 800938a:	4680      	mov	r8, r0
 800938c:	4689      	mov	r9, r1
 800938e:	f7f7 fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8009392:	2800      	cmp	r0, #0
 8009394:	d09b      	beq.n	80092ce <_dtoa_r+0x65e>
 8009396:	e7cd      	b.n	8009334 <_dtoa_r+0x6c4>
 8009398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800939a:	2a00      	cmp	r2, #0
 800939c:	f000 80d0 	beq.w	8009540 <_dtoa_r+0x8d0>
 80093a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80093a2:	2a01      	cmp	r2, #1
 80093a4:	f300 80ae 	bgt.w	8009504 <_dtoa_r+0x894>
 80093a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093aa:	2a00      	cmp	r2, #0
 80093ac:	f000 80a6 	beq.w	80094fc <_dtoa_r+0x88c>
 80093b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80093b6:	9f06      	ldr	r7, [sp, #24]
 80093b8:	9a06      	ldr	r2, [sp, #24]
 80093ba:	2101      	movs	r1, #1
 80093bc:	441a      	add	r2, r3
 80093be:	9206      	str	r2, [sp, #24]
 80093c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c2:	4628      	mov	r0, r5
 80093c4:	441a      	add	r2, r3
 80093c6:	9209      	str	r2, [sp, #36]	; 0x24
 80093c8:	f000 fb5e 	bl	8009a88 <__i2b>
 80093cc:	4606      	mov	r6, r0
 80093ce:	2f00      	cmp	r7, #0
 80093d0:	dd0c      	ble.n	80093ec <_dtoa_r+0x77c>
 80093d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd09      	ble.n	80093ec <_dtoa_r+0x77c>
 80093d8:	42bb      	cmp	r3, r7
 80093da:	bfa8      	it	ge
 80093dc:	463b      	movge	r3, r7
 80093de:	9a06      	ldr	r2, [sp, #24]
 80093e0:	1aff      	subs	r7, r7, r3
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	9206      	str	r2, [sp, #24]
 80093e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	9309      	str	r3, [sp, #36]	; 0x24
 80093ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ee:	b1f3      	cbz	r3, 800942e <_dtoa_r+0x7be>
 80093f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f000 80a8 	beq.w	8009548 <_dtoa_r+0x8d8>
 80093f8:	2c00      	cmp	r4, #0
 80093fa:	dd10      	ble.n	800941e <_dtoa_r+0x7ae>
 80093fc:	4631      	mov	r1, r6
 80093fe:	4622      	mov	r2, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f000 fbff 	bl	8009c04 <__pow5mult>
 8009406:	465a      	mov	r2, fp
 8009408:	4601      	mov	r1, r0
 800940a:	4606      	mov	r6, r0
 800940c:	4628      	mov	r0, r5
 800940e:	f000 fb51 	bl	8009ab4 <__multiply>
 8009412:	4680      	mov	r8, r0
 8009414:	4659      	mov	r1, fp
 8009416:	4628      	mov	r0, r5
 8009418:	f000 fa80 	bl	800991c <_Bfree>
 800941c:	46c3      	mov	fp, r8
 800941e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009420:	1b1a      	subs	r2, r3, r4
 8009422:	d004      	beq.n	800942e <_dtoa_r+0x7be>
 8009424:	4659      	mov	r1, fp
 8009426:	4628      	mov	r0, r5
 8009428:	f000 fbec 	bl	8009c04 <__pow5mult>
 800942c:	4683      	mov	fp, r0
 800942e:	2101      	movs	r1, #1
 8009430:	4628      	mov	r0, r5
 8009432:	f000 fb29 	bl	8009a88 <__i2b>
 8009436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009438:	4604      	mov	r4, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	f340 8086 	ble.w	800954c <_dtoa_r+0x8dc>
 8009440:	461a      	mov	r2, r3
 8009442:	4601      	mov	r1, r0
 8009444:	4628      	mov	r0, r5
 8009446:	f000 fbdd 	bl	8009c04 <__pow5mult>
 800944a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800944c:	4604      	mov	r4, r0
 800944e:	2b01      	cmp	r3, #1
 8009450:	dd7f      	ble.n	8009552 <_dtoa_r+0x8e2>
 8009452:	f04f 0800 	mov.w	r8, #0
 8009456:	6923      	ldr	r3, [r4, #16]
 8009458:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800945c:	6918      	ldr	r0, [r3, #16]
 800945e:	f000 fac5 	bl	80099ec <__hi0bits>
 8009462:	f1c0 0020 	rsb	r0, r0, #32
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	4418      	add	r0, r3
 800946a:	f010 001f 	ands.w	r0, r0, #31
 800946e:	f000 8092 	beq.w	8009596 <_dtoa_r+0x926>
 8009472:	f1c0 0320 	rsb	r3, r0, #32
 8009476:	2b04      	cmp	r3, #4
 8009478:	f340 808a 	ble.w	8009590 <_dtoa_r+0x920>
 800947c:	f1c0 001c 	rsb	r0, r0, #28
 8009480:	9b06      	ldr	r3, [sp, #24]
 8009482:	4407      	add	r7, r0
 8009484:	4403      	add	r3, r0
 8009486:	9306      	str	r3, [sp, #24]
 8009488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948a:	4403      	add	r3, r0
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	9b06      	ldr	r3, [sp, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dd05      	ble.n	80094a0 <_dtoa_r+0x830>
 8009494:	4659      	mov	r1, fp
 8009496:	461a      	mov	r2, r3
 8009498:	4628      	mov	r0, r5
 800949a:	f000 fc0d 	bl	8009cb8 <__lshift>
 800949e:	4683      	mov	fp, r0
 80094a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd05      	ble.n	80094b2 <_dtoa_r+0x842>
 80094a6:	4621      	mov	r1, r4
 80094a8:	461a      	mov	r2, r3
 80094aa:	4628      	mov	r0, r5
 80094ac:	f000 fc04 	bl	8009cb8 <__lshift>
 80094b0:	4604      	mov	r4, r0
 80094b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d070      	beq.n	800959a <_dtoa_r+0x92a>
 80094b8:	4621      	mov	r1, r4
 80094ba:	4658      	mov	r0, fp
 80094bc:	f000 fc6c 	bl	8009d98 <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	da6a      	bge.n	800959a <_dtoa_r+0x92a>
 80094c4:	2300      	movs	r3, #0
 80094c6:	4659      	mov	r1, fp
 80094c8:	220a      	movs	r2, #10
 80094ca:	4628      	mov	r0, r5
 80094cc:	f000 fa48 	bl	8009960 <__multadd>
 80094d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094d2:	4683      	mov	fp, r0
 80094d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8194 	beq.w	8009806 <_dtoa_r+0xb96>
 80094de:	4631      	mov	r1, r6
 80094e0:	2300      	movs	r3, #0
 80094e2:	220a      	movs	r2, #10
 80094e4:	4628      	mov	r0, r5
 80094e6:	f000 fa3b 	bl	8009960 <__multadd>
 80094ea:	f1b9 0f00 	cmp.w	r9, #0
 80094ee:	4606      	mov	r6, r0
 80094f0:	f300 8093 	bgt.w	800961a <_dtoa_r+0x9aa>
 80094f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	dc57      	bgt.n	80095aa <_dtoa_r+0x93a>
 80094fa:	e08e      	b.n	800961a <_dtoa_r+0x9aa>
 80094fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80094fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009502:	e757      	b.n	80093b4 <_dtoa_r+0x744>
 8009504:	9b08      	ldr	r3, [sp, #32]
 8009506:	1e5c      	subs	r4, r3, #1
 8009508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800950a:	42a3      	cmp	r3, r4
 800950c:	bfb7      	itett	lt
 800950e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009510:	1b1c      	subge	r4, r3, r4
 8009512:	1ae2      	sublt	r2, r4, r3
 8009514:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009516:	bfbe      	ittt	lt
 8009518:	940a      	strlt	r4, [sp, #40]	; 0x28
 800951a:	189b      	addlt	r3, r3, r2
 800951c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800951e:	9b08      	ldr	r3, [sp, #32]
 8009520:	bfb8      	it	lt
 8009522:	2400      	movlt	r4, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbb      	ittet	lt
 8009528:	9b06      	ldrlt	r3, [sp, #24]
 800952a:	9a08      	ldrlt	r2, [sp, #32]
 800952c:	9f06      	ldrge	r7, [sp, #24]
 800952e:	1a9f      	sublt	r7, r3, r2
 8009530:	bfac      	ite	ge
 8009532:	9b08      	ldrge	r3, [sp, #32]
 8009534:	2300      	movlt	r3, #0
 8009536:	e73f      	b.n	80093b8 <_dtoa_r+0x748>
 8009538:	3fe00000 	.word	0x3fe00000
 800953c:	40240000 	.word	0x40240000
 8009540:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009542:	9f06      	ldr	r7, [sp, #24]
 8009544:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009546:	e742      	b.n	80093ce <_dtoa_r+0x75e>
 8009548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800954a:	e76b      	b.n	8009424 <_dtoa_r+0x7b4>
 800954c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800954e:	2b01      	cmp	r3, #1
 8009550:	dc19      	bgt.n	8009586 <_dtoa_r+0x916>
 8009552:	9b04      	ldr	r3, [sp, #16]
 8009554:	b9bb      	cbnz	r3, 8009586 <_dtoa_r+0x916>
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800955c:	b99b      	cbnz	r3, 8009586 <_dtoa_r+0x916>
 800955e:	9b05      	ldr	r3, [sp, #20]
 8009560:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009564:	0d1b      	lsrs	r3, r3, #20
 8009566:	051b      	lsls	r3, r3, #20
 8009568:	b183      	cbz	r3, 800958c <_dtoa_r+0x91c>
 800956a:	f04f 0801 	mov.w	r8, #1
 800956e:	9b06      	ldr	r3, [sp, #24]
 8009570:	3301      	adds	r3, #1
 8009572:	9306      	str	r3, [sp, #24]
 8009574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009576:	3301      	adds	r3, #1
 8009578:	9309      	str	r3, [sp, #36]	; 0x24
 800957a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957c:	2b00      	cmp	r3, #0
 800957e:	f47f af6a 	bne.w	8009456 <_dtoa_r+0x7e6>
 8009582:	2001      	movs	r0, #1
 8009584:	e76f      	b.n	8009466 <_dtoa_r+0x7f6>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	e7f6      	b.n	800957a <_dtoa_r+0x90a>
 800958c:	4698      	mov	r8, r3
 800958e:	e7f4      	b.n	800957a <_dtoa_r+0x90a>
 8009590:	f43f af7d 	beq.w	800948e <_dtoa_r+0x81e>
 8009594:	4618      	mov	r0, r3
 8009596:	301c      	adds	r0, #28
 8009598:	e772      	b.n	8009480 <_dtoa_r+0x810>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dc36      	bgt.n	800960e <_dtoa_r+0x99e>
 80095a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	dd33      	ble.n	800960e <_dtoa_r+0x99e>
 80095a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095aa:	f1b9 0f00 	cmp.w	r9, #0
 80095ae:	d10d      	bne.n	80095cc <_dtoa_r+0x95c>
 80095b0:	4621      	mov	r1, r4
 80095b2:	464b      	mov	r3, r9
 80095b4:	2205      	movs	r2, #5
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 f9d2 	bl	8009960 <__multadd>
 80095bc:	4601      	mov	r1, r0
 80095be:	4604      	mov	r4, r0
 80095c0:	4658      	mov	r0, fp
 80095c2:	f000 fbe9 	bl	8009d98 <__mcmp>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f73f adb8 	bgt.w	800913c <_dtoa_r+0x4cc>
 80095cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80095ce:	9f03      	ldr	r7, [sp, #12]
 80095d0:	ea6f 0a03 	mvn.w	sl, r3
 80095d4:	f04f 0800 	mov.w	r8, #0
 80095d8:	4621      	mov	r1, r4
 80095da:	4628      	mov	r0, r5
 80095dc:	f000 f99e 	bl	800991c <_Bfree>
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	f43f aea7 	beq.w	8009334 <_dtoa_r+0x6c4>
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	d005      	beq.n	80095f8 <_dtoa_r+0x988>
 80095ec:	45b0      	cmp	r8, r6
 80095ee:	d003      	beq.n	80095f8 <_dtoa_r+0x988>
 80095f0:	4641      	mov	r1, r8
 80095f2:	4628      	mov	r0, r5
 80095f4:	f000 f992 	bl	800991c <_Bfree>
 80095f8:	4631      	mov	r1, r6
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 f98e 	bl	800991c <_Bfree>
 8009600:	e698      	b.n	8009334 <_dtoa_r+0x6c4>
 8009602:	2400      	movs	r4, #0
 8009604:	4626      	mov	r6, r4
 8009606:	e7e1      	b.n	80095cc <_dtoa_r+0x95c>
 8009608:	46c2      	mov	sl, r8
 800960a:	4626      	mov	r6, r4
 800960c:	e596      	b.n	800913c <_dtoa_r+0x4cc>
 800960e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009610:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80fd 	beq.w	8009814 <_dtoa_r+0xba4>
 800961a:	2f00      	cmp	r7, #0
 800961c:	dd05      	ble.n	800962a <_dtoa_r+0x9ba>
 800961e:	4631      	mov	r1, r6
 8009620:	463a      	mov	r2, r7
 8009622:	4628      	mov	r0, r5
 8009624:	f000 fb48 	bl	8009cb8 <__lshift>
 8009628:	4606      	mov	r6, r0
 800962a:	f1b8 0f00 	cmp.w	r8, #0
 800962e:	d05c      	beq.n	80096ea <_dtoa_r+0xa7a>
 8009630:	4628      	mov	r0, r5
 8009632:	6871      	ldr	r1, [r6, #4]
 8009634:	f000 f932 	bl	800989c <_Balloc>
 8009638:	4607      	mov	r7, r0
 800963a:	b928      	cbnz	r0, 8009648 <_dtoa_r+0x9d8>
 800963c:	4602      	mov	r2, r0
 800963e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009642:	4b7f      	ldr	r3, [pc, #508]	; (8009840 <_dtoa_r+0xbd0>)
 8009644:	f7ff bb28 	b.w	8008c98 <_dtoa_r+0x28>
 8009648:	6932      	ldr	r2, [r6, #16]
 800964a:	f106 010c 	add.w	r1, r6, #12
 800964e:	3202      	adds	r2, #2
 8009650:	0092      	lsls	r2, r2, #2
 8009652:	300c      	adds	r0, #12
 8009654:	f000 f914 	bl	8009880 <memcpy>
 8009658:	2201      	movs	r2, #1
 800965a:	4639      	mov	r1, r7
 800965c:	4628      	mov	r0, r5
 800965e:	f000 fb2b 	bl	8009cb8 <__lshift>
 8009662:	46b0      	mov	r8, r6
 8009664:	4606      	mov	r6, r0
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	3301      	adds	r3, #1
 800966a:	9308      	str	r3, [sp, #32]
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	444b      	add	r3, r9
 8009670:	930a      	str	r3, [sp, #40]	; 0x28
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	f003 0301 	and.w	r3, r3, #1
 8009678:	9309      	str	r3, [sp, #36]	; 0x24
 800967a:	9b08      	ldr	r3, [sp, #32]
 800967c:	4621      	mov	r1, r4
 800967e:	3b01      	subs	r3, #1
 8009680:	4658      	mov	r0, fp
 8009682:	9304      	str	r3, [sp, #16]
 8009684:	f7ff fa68 	bl	8008b58 <quorem>
 8009688:	4603      	mov	r3, r0
 800968a:	4641      	mov	r1, r8
 800968c:	3330      	adds	r3, #48	; 0x30
 800968e:	9006      	str	r0, [sp, #24]
 8009690:	4658      	mov	r0, fp
 8009692:	930b      	str	r3, [sp, #44]	; 0x2c
 8009694:	f000 fb80 	bl	8009d98 <__mcmp>
 8009698:	4632      	mov	r2, r6
 800969a:	4681      	mov	r9, r0
 800969c:	4621      	mov	r1, r4
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 fb96 	bl	8009dd0 <__mdiff>
 80096a4:	68c2      	ldr	r2, [r0, #12]
 80096a6:	4607      	mov	r7, r0
 80096a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096aa:	bb02      	cbnz	r2, 80096ee <_dtoa_r+0xa7e>
 80096ac:	4601      	mov	r1, r0
 80096ae:	4658      	mov	r0, fp
 80096b0:	f000 fb72 	bl	8009d98 <__mcmp>
 80096b4:	4602      	mov	r2, r0
 80096b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b8:	4639      	mov	r1, r7
 80096ba:	4628      	mov	r0, r5
 80096bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80096c0:	f000 f92c 	bl	800991c <_Bfree>
 80096c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80096c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096c8:	9f08      	ldr	r7, [sp, #32]
 80096ca:	ea43 0102 	orr.w	r1, r3, r2
 80096ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d0:	430b      	orrs	r3, r1
 80096d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d4:	d10d      	bne.n	80096f2 <_dtoa_r+0xa82>
 80096d6:	2b39      	cmp	r3, #57	; 0x39
 80096d8:	d029      	beq.n	800972e <_dtoa_r+0xabe>
 80096da:	f1b9 0f00 	cmp.w	r9, #0
 80096de:	dd01      	ble.n	80096e4 <_dtoa_r+0xa74>
 80096e0:	9b06      	ldr	r3, [sp, #24]
 80096e2:	3331      	adds	r3, #49	; 0x31
 80096e4:	9a04      	ldr	r2, [sp, #16]
 80096e6:	7013      	strb	r3, [r2, #0]
 80096e8:	e776      	b.n	80095d8 <_dtoa_r+0x968>
 80096ea:	4630      	mov	r0, r6
 80096ec:	e7b9      	b.n	8009662 <_dtoa_r+0x9f2>
 80096ee:	2201      	movs	r2, #1
 80096f0:	e7e2      	b.n	80096b8 <_dtoa_r+0xa48>
 80096f2:	f1b9 0f00 	cmp.w	r9, #0
 80096f6:	db06      	blt.n	8009706 <_dtoa_r+0xa96>
 80096f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80096fa:	ea41 0909 	orr.w	r9, r1, r9
 80096fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009700:	ea59 0101 	orrs.w	r1, r9, r1
 8009704:	d120      	bne.n	8009748 <_dtoa_r+0xad8>
 8009706:	2a00      	cmp	r2, #0
 8009708:	ddec      	ble.n	80096e4 <_dtoa_r+0xa74>
 800970a:	4659      	mov	r1, fp
 800970c:	2201      	movs	r2, #1
 800970e:	4628      	mov	r0, r5
 8009710:	9308      	str	r3, [sp, #32]
 8009712:	f000 fad1 	bl	8009cb8 <__lshift>
 8009716:	4621      	mov	r1, r4
 8009718:	4683      	mov	fp, r0
 800971a:	f000 fb3d 	bl	8009d98 <__mcmp>
 800971e:	2800      	cmp	r0, #0
 8009720:	9b08      	ldr	r3, [sp, #32]
 8009722:	dc02      	bgt.n	800972a <_dtoa_r+0xaba>
 8009724:	d1de      	bne.n	80096e4 <_dtoa_r+0xa74>
 8009726:	07da      	lsls	r2, r3, #31
 8009728:	d5dc      	bpl.n	80096e4 <_dtoa_r+0xa74>
 800972a:	2b39      	cmp	r3, #57	; 0x39
 800972c:	d1d8      	bne.n	80096e0 <_dtoa_r+0xa70>
 800972e:	2339      	movs	r3, #57	; 0x39
 8009730:	9a04      	ldr	r2, [sp, #16]
 8009732:	7013      	strb	r3, [r2, #0]
 8009734:	463b      	mov	r3, r7
 8009736:	461f      	mov	r7, r3
 8009738:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800973c:	3b01      	subs	r3, #1
 800973e:	2a39      	cmp	r2, #57	; 0x39
 8009740:	d050      	beq.n	80097e4 <_dtoa_r+0xb74>
 8009742:	3201      	adds	r2, #1
 8009744:	701a      	strb	r2, [r3, #0]
 8009746:	e747      	b.n	80095d8 <_dtoa_r+0x968>
 8009748:	2a00      	cmp	r2, #0
 800974a:	dd03      	ble.n	8009754 <_dtoa_r+0xae4>
 800974c:	2b39      	cmp	r3, #57	; 0x39
 800974e:	d0ee      	beq.n	800972e <_dtoa_r+0xabe>
 8009750:	3301      	adds	r3, #1
 8009752:	e7c7      	b.n	80096e4 <_dtoa_r+0xa74>
 8009754:	9a08      	ldr	r2, [sp, #32]
 8009756:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009758:	f802 3c01 	strb.w	r3, [r2, #-1]
 800975c:	428a      	cmp	r2, r1
 800975e:	d02a      	beq.n	80097b6 <_dtoa_r+0xb46>
 8009760:	4659      	mov	r1, fp
 8009762:	2300      	movs	r3, #0
 8009764:	220a      	movs	r2, #10
 8009766:	4628      	mov	r0, r5
 8009768:	f000 f8fa 	bl	8009960 <__multadd>
 800976c:	45b0      	cmp	r8, r6
 800976e:	4683      	mov	fp, r0
 8009770:	f04f 0300 	mov.w	r3, #0
 8009774:	f04f 020a 	mov.w	r2, #10
 8009778:	4641      	mov	r1, r8
 800977a:	4628      	mov	r0, r5
 800977c:	d107      	bne.n	800978e <_dtoa_r+0xb1e>
 800977e:	f000 f8ef 	bl	8009960 <__multadd>
 8009782:	4680      	mov	r8, r0
 8009784:	4606      	mov	r6, r0
 8009786:	9b08      	ldr	r3, [sp, #32]
 8009788:	3301      	adds	r3, #1
 800978a:	9308      	str	r3, [sp, #32]
 800978c:	e775      	b.n	800967a <_dtoa_r+0xa0a>
 800978e:	f000 f8e7 	bl	8009960 <__multadd>
 8009792:	4631      	mov	r1, r6
 8009794:	4680      	mov	r8, r0
 8009796:	2300      	movs	r3, #0
 8009798:	220a      	movs	r2, #10
 800979a:	4628      	mov	r0, r5
 800979c:	f000 f8e0 	bl	8009960 <__multadd>
 80097a0:	4606      	mov	r6, r0
 80097a2:	e7f0      	b.n	8009786 <_dtoa_r+0xb16>
 80097a4:	f1b9 0f00 	cmp.w	r9, #0
 80097a8:	bfcc      	ite	gt
 80097aa:	464f      	movgt	r7, r9
 80097ac:	2701      	movle	r7, #1
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	9a03      	ldr	r2, [sp, #12]
 80097b4:	4417      	add	r7, r2
 80097b6:	4659      	mov	r1, fp
 80097b8:	2201      	movs	r2, #1
 80097ba:	4628      	mov	r0, r5
 80097bc:	9308      	str	r3, [sp, #32]
 80097be:	f000 fa7b 	bl	8009cb8 <__lshift>
 80097c2:	4621      	mov	r1, r4
 80097c4:	4683      	mov	fp, r0
 80097c6:	f000 fae7 	bl	8009d98 <__mcmp>
 80097ca:	2800      	cmp	r0, #0
 80097cc:	dcb2      	bgt.n	8009734 <_dtoa_r+0xac4>
 80097ce:	d102      	bne.n	80097d6 <_dtoa_r+0xb66>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	07db      	lsls	r3, r3, #31
 80097d4:	d4ae      	bmi.n	8009734 <_dtoa_r+0xac4>
 80097d6:	463b      	mov	r3, r7
 80097d8:	461f      	mov	r7, r3
 80097da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097de:	2a30      	cmp	r2, #48	; 0x30
 80097e0:	d0fa      	beq.n	80097d8 <_dtoa_r+0xb68>
 80097e2:	e6f9      	b.n	80095d8 <_dtoa_r+0x968>
 80097e4:	9a03      	ldr	r2, [sp, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d1a5      	bne.n	8009736 <_dtoa_r+0xac6>
 80097ea:	2331      	movs	r3, #49	; 0x31
 80097ec:	f10a 0a01 	add.w	sl, sl, #1
 80097f0:	e779      	b.n	80096e6 <_dtoa_r+0xa76>
 80097f2:	4b14      	ldr	r3, [pc, #80]	; (8009844 <_dtoa_r+0xbd4>)
 80097f4:	f7ff baa8 	b.w	8008d48 <_dtoa_r+0xd8>
 80097f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f47f aa81 	bne.w	8008d02 <_dtoa_r+0x92>
 8009800:	4b11      	ldr	r3, [pc, #68]	; (8009848 <_dtoa_r+0xbd8>)
 8009802:	f7ff baa1 	b.w	8008d48 <_dtoa_r+0xd8>
 8009806:	f1b9 0f00 	cmp.w	r9, #0
 800980a:	dc03      	bgt.n	8009814 <_dtoa_r+0xba4>
 800980c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800980e:	2b02      	cmp	r3, #2
 8009810:	f73f aecb 	bgt.w	80095aa <_dtoa_r+0x93a>
 8009814:	9f03      	ldr	r7, [sp, #12]
 8009816:	4621      	mov	r1, r4
 8009818:	4658      	mov	r0, fp
 800981a:	f7ff f99d 	bl	8008b58 <quorem>
 800981e:	9a03      	ldr	r2, [sp, #12]
 8009820:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009824:	f807 3b01 	strb.w	r3, [r7], #1
 8009828:	1aba      	subs	r2, r7, r2
 800982a:	4591      	cmp	r9, r2
 800982c:	ddba      	ble.n	80097a4 <_dtoa_r+0xb34>
 800982e:	4659      	mov	r1, fp
 8009830:	2300      	movs	r3, #0
 8009832:	220a      	movs	r2, #10
 8009834:	4628      	mov	r0, r5
 8009836:	f000 f893 	bl	8009960 <__multadd>
 800983a:	4683      	mov	fp, r0
 800983c:	e7eb      	b.n	8009816 <_dtoa_r+0xba6>
 800983e:	bf00      	nop
 8009840:	0800b46b 	.word	0x0800b46b
 8009844:	0800b3c8 	.word	0x0800b3c8
 8009848:	0800b3ec 	.word	0x0800b3ec

0800984c <_localeconv_r>:
 800984c:	4800      	ldr	r0, [pc, #0]	; (8009850 <_localeconv_r+0x4>)
 800984e:	4770      	bx	lr
 8009850:	20000194 	.word	0x20000194

08009854 <malloc>:
 8009854:	4b02      	ldr	r3, [pc, #8]	; (8009860 <malloc+0xc>)
 8009856:	4601      	mov	r1, r0
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	f000 bc1d 	b.w	800a098 <_malloc_r>
 800985e:	bf00      	nop
 8009860:	20000040 	.word	0x20000040

08009864 <memchr>:
 8009864:	4603      	mov	r3, r0
 8009866:	b510      	push	{r4, lr}
 8009868:	b2c9      	uxtb	r1, r1
 800986a:	4402      	add	r2, r0
 800986c:	4293      	cmp	r3, r2
 800986e:	4618      	mov	r0, r3
 8009870:	d101      	bne.n	8009876 <memchr+0x12>
 8009872:	2000      	movs	r0, #0
 8009874:	e003      	b.n	800987e <memchr+0x1a>
 8009876:	7804      	ldrb	r4, [r0, #0]
 8009878:	3301      	adds	r3, #1
 800987a:	428c      	cmp	r4, r1
 800987c:	d1f6      	bne.n	800986c <memchr+0x8>
 800987e:	bd10      	pop	{r4, pc}

08009880 <memcpy>:
 8009880:	440a      	add	r2, r1
 8009882:	4291      	cmp	r1, r2
 8009884:	f100 33ff 	add.w	r3, r0, #4294967295
 8009888:	d100      	bne.n	800988c <memcpy+0xc>
 800988a:	4770      	bx	lr
 800988c:	b510      	push	{r4, lr}
 800988e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009892:	4291      	cmp	r1, r2
 8009894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009898:	d1f9      	bne.n	800988e <memcpy+0xe>
 800989a:	bd10      	pop	{r4, pc}

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Balloc+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7ff ffd4 	bl	8009854 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	6260      	str	r0, [r4, #36]	; 0x24
 80098b0:	b920      	cbnz	r0, 80098bc <_Balloc+0x20>
 80098b2:	2166      	movs	r1, #102	; 0x66
 80098b4:	4b17      	ldr	r3, [pc, #92]	; (8009914 <_Balloc+0x78>)
 80098b6:	4818      	ldr	r0, [pc, #96]	; (8009918 <_Balloc+0x7c>)
 80098b8:	f000 fdce 	bl	800a458 <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	b183      	cbz	r3, 80098ec <_Balloc+0x50>
 80098ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098d2:	b9b8      	cbnz	r0, 8009904 <_Balloc+0x68>
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f605 	lsl.w	r6, r1, r5
 80098da:	1d72      	adds	r2, r6, #5
 80098dc:	4620      	mov	r0, r4
 80098de:	0092      	lsls	r2, r2, #2
 80098e0:	f000 fb5e 	bl	8009fa0 <_calloc_r>
 80098e4:	b160      	cbz	r0, 8009900 <_Balloc+0x64>
 80098e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ea:	e00e      	b.n	800990a <_Balloc+0x6e>
 80098ec:	2221      	movs	r2, #33	; 0x21
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fb55 	bl	8009fa0 <_calloc_r>
 80098f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098f8:	60f0      	str	r0, [r6, #12]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <_Balloc+0x2e>
 8009900:	2000      	movs	r0, #0
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800990a:	2300      	movs	r3, #0
 800990c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009910:	e7f7      	b.n	8009902 <_Balloc+0x66>
 8009912:	bf00      	nop
 8009914:	0800b3f9 	.word	0x0800b3f9
 8009918:	0800b47c 	.word	0x0800b47c

0800991c <_Bfree>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Bfree+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff ff94 	bl	8009854 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	6268      	str	r0, [r5, #36]	; 0x24
 8009930:	b920      	cbnz	r0, 800993c <_Bfree+0x20>
 8009932:	218a      	movs	r1, #138	; 0x8a
 8009934:	4b08      	ldr	r3, [pc, #32]	; (8009958 <_Bfree+0x3c>)
 8009936:	4809      	ldr	r0, [pc, #36]	; (800995c <_Bfree+0x40>)
 8009938:	f000 fd8e 	bl	800a458 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	b13c      	cbz	r4, 8009956 <_Bfree+0x3a>
 8009946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0800b3f9 	.word	0x0800b3f9
 800995c:	0800b47c 	.word	0x0800b47c

08009960 <__multadd>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	4607      	mov	r7, r0
 8009966:	460c      	mov	r4, r1
 8009968:	461e      	mov	r6, r3
 800996a:	2000      	movs	r0, #0
 800996c:	690d      	ldr	r5, [r1, #16]
 800996e:	f101 0c14 	add.w	ip, r1, #20
 8009972:	f8dc 3000 	ldr.w	r3, [ip]
 8009976:	3001      	adds	r0, #1
 8009978:	b299      	uxth	r1, r3
 800997a:	fb02 6101 	mla	r1, r2, r1, r6
 800997e:	0c1e      	lsrs	r6, r3, #16
 8009980:	0c0b      	lsrs	r3, r1, #16
 8009982:	fb02 3306 	mla	r3, r2, r6, r3
 8009986:	b289      	uxth	r1, r1
 8009988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800998c:	4285      	cmp	r5, r0
 800998e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009992:	f84c 1b04 	str.w	r1, [ip], #4
 8009996:	dcec      	bgt.n	8009972 <__multadd+0x12>
 8009998:	b30e      	cbz	r6, 80099de <__multadd+0x7e>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	42ab      	cmp	r3, r5
 800999e:	dc19      	bgt.n	80099d4 <__multadd+0x74>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4638      	mov	r0, r7
 80099a4:	3101      	adds	r1, #1
 80099a6:	f7ff ff79 	bl	800989c <_Balloc>
 80099aa:	4680      	mov	r8, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__multadd+0x5a>
 80099ae:	4602      	mov	r2, r0
 80099b0:	21b5      	movs	r1, #181	; 0xb5
 80099b2:	4b0c      	ldr	r3, [pc, #48]	; (80099e4 <__multadd+0x84>)
 80099b4:	480c      	ldr	r0, [pc, #48]	; (80099e8 <__multadd+0x88>)
 80099b6:	f000 fd4f 	bl	800a458 <__assert_func>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	f104 010c 	add.w	r1, r4, #12
 80099c0:	3202      	adds	r2, #2
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f7ff ff5b 	bl	8009880 <memcpy>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ffa5 	bl	800991c <_Bfree>
 80099d2:	4644      	mov	r4, r8
 80099d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d8:	3501      	adds	r5, #1
 80099da:	615e      	str	r6, [r3, #20]
 80099dc:	6125      	str	r5, [r4, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	0800b46b 	.word	0x0800b46b
 80099e8:	0800b47c 	.word	0x0800b47c

080099ec <__hi0bits>:
 80099ec:	0c02      	lsrs	r2, r0, #16
 80099ee:	0412      	lsls	r2, r2, #16
 80099f0:	4603      	mov	r3, r0
 80099f2:	b9ca      	cbnz	r2, 8009a28 <__hi0bits+0x3c>
 80099f4:	0403      	lsls	r3, r0, #16
 80099f6:	2010      	movs	r0, #16
 80099f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80099fc:	bf04      	itt	eq
 80099fe:	021b      	lsleq	r3, r3, #8
 8009a00:	3008      	addeq	r0, #8
 8009a02:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009a06:	bf04      	itt	eq
 8009a08:	011b      	lsleq	r3, r3, #4
 8009a0a:	3004      	addeq	r0, #4
 8009a0c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009a10:	bf04      	itt	eq
 8009a12:	009b      	lsleq	r3, r3, #2
 8009a14:	3002      	addeq	r0, #2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	db05      	blt.n	8009a26 <__hi0bits+0x3a>
 8009a1a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009a1e:	f100 0001 	add.w	r0, r0, #1
 8009a22:	bf08      	it	eq
 8009a24:	2020      	moveq	r0, #32
 8009a26:	4770      	bx	lr
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e7e5      	b.n	80099f8 <__hi0bits+0xc>

08009a2c <__lo0bits>:
 8009a2c:	6803      	ldr	r3, [r0, #0]
 8009a2e:	4602      	mov	r2, r0
 8009a30:	f013 0007 	ands.w	r0, r3, #7
 8009a34:	d00b      	beq.n	8009a4e <__lo0bits+0x22>
 8009a36:	07d9      	lsls	r1, r3, #31
 8009a38:	d421      	bmi.n	8009a7e <__lo0bits+0x52>
 8009a3a:	0798      	lsls	r0, r3, #30
 8009a3c:	bf49      	itett	mi
 8009a3e:	085b      	lsrmi	r3, r3, #1
 8009a40:	089b      	lsrpl	r3, r3, #2
 8009a42:	2001      	movmi	r0, #1
 8009a44:	6013      	strmi	r3, [r2, #0]
 8009a46:	bf5c      	itt	pl
 8009a48:	2002      	movpl	r0, #2
 8009a4a:	6013      	strpl	r3, [r2, #0]
 8009a4c:	4770      	bx	lr
 8009a4e:	b299      	uxth	r1, r3
 8009a50:	b909      	cbnz	r1, 8009a56 <__lo0bits+0x2a>
 8009a52:	2010      	movs	r0, #16
 8009a54:	0c1b      	lsrs	r3, r3, #16
 8009a56:	b2d9      	uxtb	r1, r3
 8009a58:	b909      	cbnz	r1, 8009a5e <__lo0bits+0x32>
 8009a5a:	3008      	adds	r0, #8
 8009a5c:	0a1b      	lsrs	r3, r3, #8
 8009a5e:	0719      	lsls	r1, r3, #28
 8009a60:	bf04      	itt	eq
 8009a62:	091b      	lsreq	r3, r3, #4
 8009a64:	3004      	addeq	r0, #4
 8009a66:	0799      	lsls	r1, r3, #30
 8009a68:	bf04      	itt	eq
 8009a6a:	089b      	lsreq	r3, r3, #2
 8009a6c:	3002      	addeq	r0, #2
 8009a6e:	07d9      	lsls	r1, r3, #31
 8009a70:	d403      	bmi.n	8009a7a <__lo0bits+0x4e>
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	f100 0001 	add.w	r0, r0, #1
 8009a78:	d003      	beq.n	8009a82 <__lo0bits+0x56>
 8009a7a:	6013      	str	r3, [r2, #0]
 8009a7c:	4770      	bx	lr
 8009a7e:	2000      	movs	r0, #0
 8009a80:	4770      	bx	lr
 8009a82:	2020      	movs	r0, #32
 8009a84:	4770      	bx	lr
	...

08009a88 <__i2b>:
 8009a88:	b510      	push	{r4, lr}
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	f7ff ff05 	bl	800989c <_Balloc>
 8009a92:	4602      	mov	r2, r0
 8009a94:	b928      	cbnz	r0, 8009aa2 <__i2b+0x1a>
 8009a96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009a9a:	4b04      	ldr	r3, [pc, #16]	; (8009aac <__i2b+0x24>)
 8009a9c:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <__i2b+0x28>)
 8009a9e:	f000 fcdb 	bl	800a458 <__assert_func>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	6144      	str	r4, [r0, #20]
 8009aa6:	6103      	str	r3, [r0, #16]
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	0800b46b 	.word	0x0800b46b
 8009ab0:	0800b47c 	.word	0x0800b47c

08009ab4 <__multiply>:
 8009ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	4691      	mov	r9, r2
 8009aba:	690a      	ldr	r2, [r1, #16]
 8009abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	bfbe      	ittt	lt
 8009ac6:	460b      	movlt	r3, r1
 8009ac8:	464c      	movlt	r4, r9
 8009aca:	4699      	movlt	r9, r3
 8009acc:	6927      	ldr	r7, [r4, #16]
 8009ace:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ad2:	68a3      	ldr	r3, [r4, #8]
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	eb07 060a 	add.w	r6, r7, sl
 8009ada:	42b3      	cmp	r3, r6
 8009adc:	b085      	sub	sp, #20
 8009ade:	bfb8      	it	lt
 8009ae0:	3101      	addlt	r1, #1
 8009ae2:	f7ff fedb 	bl	800989c <_Balloc>
 8009ae6:	b930      	cbnz	r0, 8009af6 <__multiply+0x42>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	f240 115d 	movw	r1, #349	; 0x15d
 8009aee:	4b43      	ldr	r3, [pc, #268]	; (8009bfc <__multiply+0x148>)
 8009af0:	4843      	ldr	r0, [pc, #268]	; (8009c00 <__multiply+0x14c>)
 8009af2:	f000 fcb1 	bl	800a458 <__assert_func>
 8009af6:	f100 0514 	add.w	r5, r0, #20
 8009afa:	462b      	mov	r3, r5
 8009afc:	2200      	movs	r2, #0
 8009afe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b02:	4543      	cmp	r3, r8
 8009b04:	d321      	bcc.n	8009b4a <__multiply+0x96>
 8009b06:	f104 0314 	add.w	r3, r4, #20
 8009b0a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b0e:	f109 0314 	add.w	r3, r9, #20
 8009b12:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b16:	9202      	str	r2, [sp, #8]
 8009b18:	1b3a      	subs	r2, r7, r4
 8009b1a:	3a15      	subs	r2, #21
 8009b1c:	f022 0203 	bic.w	r2, r2, #3
 8009b20:	3204      	adds	r2, #4
 8009b22:	f104 0115 	add.w	r1, r4, #21
 8009b26:	428f      	cmp	r7, r1
 8009b28:	bf38      	it	cc
 8009b2a:	2204      	movcc	r2, #4
 8009b2c:	9201      	str	r2, [sp, #4]
 8009b2e:	9a02      	ldr	r2, [sp, #8]
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d80c      	bhi.n	8009b50 <__multiply+0x9c>
 8009b36:	2e00      	cmp	r6, #0
 8009b38:	dd03      	ble.n	8009b42 <__multiply+0x8e>
 8009b3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d059      	beq.n	8009bf6 <__multiply+0x142>
 8009b42:	6106      	str	r6, [r0, #16]
 8009b44:	b005      	add	sp, #20
 8009b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4a:	f843 2b04 	str.w	r2, [r3], #4
 8009b4e:	e7d8      	b.n	8009b02 <__multiply+0x4e>
 8009b50:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b54:	f1ba 0f00 	cmp.w	sl, #0
 8009b58:	d023      	beq.n	8009ba2 <__multiply+0xee>
 8009b5a:	46a9      	mov	r9, r5
 8009b5c:	f04f 0c00 	mov.w	ip, #0
 8009b60:	f104 0e14 	add.w	lr, r4, #20
 8009b64:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009b68:	f8d9 1000 	ldr.w	r1, [r9]
 8009b6c:	fa1f fb82 	uxth.w	fp, r2
 8009b70:	b289      	uxth	r1, r1
 8009b72:	fb0a 110b 	mla	r1, sl, fp, r1
 8009b76:	4461      	add	r1, ip
 8009b78:	f8d9 c000 	ldr.w	ip, [r9]
 8009b7c:	0c12      	lsrs	r2, r2, #16
 8009b7e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009b82:	fb0a c202 	mla	r2, sl, r2, ip
 8009b86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b8a:	b289      	uxth	r1, r1
 8009b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009b90:	4577      	cmp	r7, lr
 8009b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009b96:	f849 1b04 	str.w	r1, [r9], #4
 8009b9a:	d8e3      	bhi.n	8009b64 <__multiply+0xb0>
 8009b9c:	9a01      	ldr	r2, [sp, #4]
 8009b9e:	f845 c002 	str.w	ip, [r5, r2]
 8009ba2:	9a03      	ldr	r2, [sp, #12]
 8009ba4:	3304      	adds	r3, #4
 8009ba6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009baa:	f1b9 0f00 	cmp.w	r9, #0
 8009bae:	d020      	beq.n	8009bf2 <__multiply+0x13e>
 8009bb0:	46ae      	mov	lr, r5
 8009bb2:	f04f 0a00 	mov.w	sl, #0
 8009bb6:	6829      	ldr	r1, [r5, #0]
 8009bb8:	f104 0c14 	add.w	ip, r4, #20
 8009bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8009bc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009bc4:	b289      	uxth	r1, r1
 8009bc6:	fb09 220b 	mla	r2, r9, fp, r2
 8009bca:	4492      	add	sl, r2
 8009bcc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009bd0:	f84e 1b04 	str.w	r1, [lr], #4
 8009bd4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009bd8:	f8be 1000 	ldrh.w	r1, [lr]
 8009bdc:	0c12      	lsrs	r2, r2, #16
 8009bde:	fb09 1102 	mla	r1, r9, r2, r1
 8009be2:	4567      	cmp	r7, ip
 8009be4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009be8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009bec:	d8e6      	bhi.n	8009bbc <__multiply+0x108>
 8009bee:	9a01      	ldr	r2, [sp, #4]
 8009bf0:	50a9      	str	r1, [r5, r2]
 8009bf2:	3504      	adds	r5, #4
 8009bf4:	e79b      	b.n	8009b2e <__multiply+0x7a>
 8009bf6:	3e01      	subs	r6, #1
 8009bf8:	e79d      	b.n	8009b36 <__multiply+0x82>
 8009bfa:	bf00      	nop
 8009bfc:	0800b46b 	.word	0x0800b46b
 8009c00:	0800b47c 	.word	0x0800b47c

08009c04 <__pow5mult>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4615      	mov	r5, r2
 8009c0a:	f012 0203 	ands.w	r2, r2, #3
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460f      	mov	r7, r1
 8009c12:	d007      	beq.n	8009c24 <__pow5mult+0x20>
 8009c14:	4c25      	ldr	r4, [pc, #148]	; (8009cac <__pow5mult+0xa8>)
 8009c16:	3a01      	subs	r2, #1
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c1e:	f7ff fe9f 	bl	8009960 <__multadd>
 8009c22:	4607      	mov	r7, r0
 8009c24:	10ad      	asrs	r5, r5, #2
 8009c26:	d03d      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c2a:	b97c      	cbnz	r4, 8009c4c <__pow5mult+0x48>
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f7ff fe11 	bl	8009854 <malloc>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6270      	str	r0, [r6, #36]	; 0x24
 8009c36:	b928      	cbnz	r0, 8009c44 <__pow5mult+0x40>
 8009c38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c3c:	4b1c      	ldr	r3, [pc, #112]	; (8009cb0 <__pow5mult+0xac>)
 8009c3e:	481d      	ldr	r0, [pc, #116]	; (8009cb4 <__pow5mult+0xb0>)
 8009c40:	f000 fc0a 	bl	800a458 <__assert_func>
 8009c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c48:	6004      	str	r4, [r0, #0]
 8009c4a:	60c4      	str	r4, [r0, #12]
 8009c4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c54:	b94c      	cbnz	r4, 8009c6a <__pow5mult+0x66>
 8009c56:	f240 2171 	movw	r1, #625	; 0x271
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ff14 	bl	8009a88 <__i2b>
 8009c60:	2300      	movs	r3, #0
 8009c62:	4604      	mov	r4, r0
 8009c64:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	07eb      	lsls	r3, r5, #31
 8009c70:	d50a      	bpl.n	8009c88 <__pow5mult+0x84>
 8009c72:	4639      	mov	r1, r7
 8009c74:	4622      	mov	r2, r4
 8009c76:	4630      	mov	r0, r6
 8009c78:	f7ff ff1c 	bl	8009ab4 <__multiply>
 8009c7c:	4680      	mov	r8, r0
 8009c7e:	4639      	mov	r1, r7
 8009c80:	4630      	mov	r0, r6
 8009c82:	f7ff fe4b 	bl	800991c <_Bfree>
 8009c86:	4647      	mov	r7, r8
 8009c88:	106d      	asrs	r5, r5, #1
 8009c8a:	d00b      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	b938      	cbnz	r0, 8009ca0 <__pow5mult+0x9c>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4621      	mov	r1, r4
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff ff0d 	bl	8009ab4 <__multiply>
 8009c9a:	6020      	str	r0, [r4, #0]
 8009c9c:	f8c0 9000 	str.w	r9, [r0]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	e7e4      	b.n	8009c6e <__pow5mult+0x6a>
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009caa:	bf00      	nop
 8009cac:	0800b5c8 	.word	0x0800b5c8
 8009cb0:	0800b3f9 	.word	0x0800b3f9
 8009cb4:	0800b47c 	.word	0x0800b47c

08009cb8 <__lshift>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	4607      	mov	r7, r0
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	6849      	ldr	r1, [r1, #4]
 8009cc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cd0:	f108 0601 	add.w	r6, r8, #1
 8009cd4:	42b3      	cmp	r3, r6
 8009cd6:	db0b      	blt.n	8009cf0 <__lshift+0x38>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff fddf 	bl	800989c <_Balloc>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	b948      	cbnz	r0, 8009cf6 <__lshift+0x3e>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009ce8:	4b29      	ldr	r3, [pc, #164]	; (8009d90 <__lshift+0xd8>)
 8009cea:	482a      	ldr	r0, [pc, #168]	; (8009d94 <__lshift+0xdc>)
 8009cec:	f000 fbb4 	bl	800a458 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__lshift+0x1c>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f100 0114 	add.w	r1, r0, #20
 8009cfc:	f100 0210 	add.w	r2, r0, #16
 8009d00:	4618      	mov	r0, r3
 8009d02:	4553      	cmp	r3, sl
 8009d04:	db37      	blt.n	8009d76 <__lshift+0xbe>
 8009d06:	6920      	ldr	r0, [r4, #16]
 8009d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d0c:	f104 0314 	add.w	r3, r4, #20
 8009d10:	f019 091f 	ands.w	r9, r9, #31
 8009d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009d1c:	d02f      	beq.n	8009d7e <__lshift+0xc6>
 8009d1e:	468a      	mov	sl, r1
 8009d20:	f04f 0c00 	mov.w	ip, #0
 8009d24:	f1c9 0e20 	rsb	lr, r9, #32
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	fa02 f209 	lsl.w	r2, r2, r9
 8009d2e:	ea42 020c 	orr.w	r2, r2, ip
 8009d32:	f84a 2b04 	str.w	r2, [sl], #4
 8009d36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3a:	4298      	cmp	r0, r3
 8009d3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009d40:	d8f2      	bhi.n	8009d28 <__lshift+0x70>
 8009d42:	1b03      	subs	r3, r0, r4
 8009d44:	3b15      	subs	r3, #21
 8009d46:	f023 0303 	bic.w	r3, r3, #3
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	f104 0215 	add.w	r2, r4, #21
 8009d50:	4290      	cmp	r0, r2
 8009d52:	bf38      	it	cc
 8009d54:	2304      	movcc	r3, #4
 8009d56:	f841 c003 	str.w	ip, [r1, r3]
 8009d5a:	f1bc 0f00 	cmp.w	ip, #0
 8009d5e:	d001      	beq.n	8009d64 <__lshift+0xac>
 8009d60:	f108 0602 	add.w	r6, r8, #2
 8009d64:	3e01      	subs	r6, #1
 8009d66:	4638      	mov	r0, r7
 8009d68:	4621      	mov	r1, r4
 8009d6a:	612e      	str	r6, [r5, #16]
 8009d6c:	f7ff fdd6 	bl	800991c <_Bfree>
 8009d70:	4628      	mov	r0, r5
 8009d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d76:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	e7c1      	b.n	8009d02 <__lshift+0x4a>
 8009d7e:	3904      	subs	r1, #4
 8009d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d84:	4298      	cmp	r0, r3
 8009d86:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d8a:	d8f9      	bhi.n	8009d80 <__lshift+0xc8>
 8009d8c:	e7ea      	b.n	8009d64 <__lshift+0xac>
 8009d8e:	bf00      	nop
 8009d90:	0800b46b 	.word	0x0800b46b
 8009d94:	0800b47c 	.word	0x0800b47c

08009d98 <__mcmp>:
 8009d98:	4603      	mov	r3, r0
 8009d9a:	690a      	ldr	r2, [r1, #16]
 8009d9c:	6900      	ldr	r0, [r0, #16]
 8009d9e:	b530      	push	{r4, r5, lr}
 8009da0:	1a80      	subs	r0, r0, r2
 8009da2:	d10d      	bne.n	8009dc0 <__mcmp+0x28>
 8009da4:	3314      	adds	r3, #20
 8009da6:	3114      	adds	r1, #20
 8009da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009dac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009db0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009db4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009db8:	4295      	cmp	r5, r2
 8009dba:	d002      	beq.n	8009dc2 <__mcmp+0x2a>
 8009dbc:	d304      	bcc.n	8009dc8 <__mcmp+0x30>
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	bd30      	pop	{r4, r5, pc}
 8009dc2:	42a3      	cmp	r3, r4
 8009dc4:	d3f4      	bcc.n	8009db0 <__mcmp+0x18>
 8009dc6:	e7fb      	b.n	8009dc0 <__mcmp+0x28>
 8009dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dcc:	e7f8      	b.n	8009dc0 <__mcmp+0x28>
	...

08009dd0 <__mdiff>:
 8009dd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	460d      	mov	r5, r1
 8009dd6:	4607      	mov	r7, r0
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4628      	mov	r0, r5
 8009ddc:	4614      	mov	r4, r2
 8009dde:	f7ff ffdb 	bl	8009d98 <__mcmp>
 8009de2:	1e06      	subs	r6, r0, #0
 8009de4:	d111      	bne.n	8009e0a <__mdiff+0x3a>
 8009de6:	4631      	mov	r1, r6
 8009de8:	4638      	mov	r0, r7
 8009dea:	f7ff fd57 	bl	800989c <_Balloc>
 8009dee:	4602      	mov	r2, r0
 8009df0:	b928      	cbnz	r0, 8009dfe <__mdiff+0x2e>
 8009df2:	f240 2132 	movw	r1, #562	; 0x232
 8009df6:	4b3a      	ldr	r3, [pc, #232]	; (8009ee0 <__mdiff+0x110>)
 8009df8:	483a      	ldr	r0, [pc, #232]	; (8009ee4 <__mdiff+0x114>)
 8009dfa:	f000 fb2d 	bl	800a458 <__assert_func>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009e04:	4610      	mov	r0, r2
 8009e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	bfa4      	itt	ge
 8009e0c:	4623      	movge	r3, r4
 8009e0e:	462c      	movge	r4, r5
 8009e10:	4638      	mov	r0, r7
 8009e12:	6861      	ldr	r1, [r4, #4]
 8009e14:	bfa6      	itte	ge
 8009e16:	461d      	movge	r5, r3
 8009e18:	2600      	movge	r6, #0
 8009e1a:	2601      	movlt	r6, #1
 8009e1c:	f7ff fd3e 	bl	800989c <_Balloc>
 8009e20:	4602      	mov	r2, r0
 8009e22:	b918      	cbnz	r0, 8009e2c <__mdiff+0x5c>
 8009e24:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e28:	4b2d      	ldr	r3, [pc, #180]	; (8009ee0 <__mdiff+0x110>)
 8009e2a:	e7e5      	b.n	8009df8 <__mdiff+0x28>
 8009e2c:	f102 0814 	add.w	r8, r2, #20
 8009e30:	46c2      	mov	sl, r8
 8009e32:	f04f 0c00 	mov.w	ip, #0
 8009e36:	6927      	ldr	r7, [r4, #16]
 8009e38:	60c6      	str	r6, [r0, #12]
 8009e3a:	692e      	ldr	r6, [r5, #16]
 8009e3c:	f104 0014 	add.w	r0, r4, #20
 8009e40:	f105 0914 	add.w	r9, r5, #20
 8009e44:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009e48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e4c:	3410      	adds	r4, #16
 8009e4e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009e52:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e56:	fa1f f18b 	uxth.w	r1, fp
 8009e5a:	448c      	add	ip, r1
 8009e5c:	b299      	uxth	r1, r3
 8009e5e:	0c1b      	lsrs	r3, r3, #16
 8009e60:	ebac 0101 	sub.w	r1, ip, r1
 8009e64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e68:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009e6c:	b289      	uxth	r1, r1
 8009e6e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009e72:	454e      	cmp	r6, r9
 8009e74:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009e78:	f84a 3b04 	str.w	r3, [sl], #4
 8009e7c:	d8e7      	bhi.n	8009e4e <__mdiff+0x7e>
 8009e7e:	1b73      	subs	r3, r6, r5
 8009e80:	3b15      	subs	r3, #21
 8009e82:	f023 0303 	bic.w	r3, r3, #3
 8009e86:	3515      	adds	r5, #21
 8009e88:	3304      	adds	r3, #4
 8009e8a:	42ae      	cmp	r6, r5
 8009e8c:	bf38      	it	cc
 8009e8e:	2304      	movcc	r3, #4
 8009e90:	4418      	add	r0, r3
 8009e92:	4443      	add	r3, r8
 8009e94:	461e      	mov	r6, r3
 8009e96:	4605      	mov	r5, r0
 8009e98:	4575      	cmp	r5, lr
 8009e9a:	d30e      	bcc.n	8009eba <__mdiff+0xea>
 8009e9c:	f10e 0103 	add.w	r1, lr, #3
 8009ea0:	1a09      	subs	r1, r1, r0
 8009ea2:	f021 0103 	bic.w	r1, r1, #3
 8009ea6:	3803      	subs	r0, #3
 8009ea8:	4586      	cmp	lr, r0
 8009eaa:	bf38      	it	cc
 8009eac:	2100      	movcc	r1, #0
 8009eae:	4419      	add	r1, r3
 8009eb0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009eb4:	b18b      	cbz	r3, 8009eda <__mdiff+0x10a>
 8009eb6:	6117      	str	r7, [r2, #16]
 8009eb8:	e7a4      	b.n	8009e04 <__mdiff+0x34>
 8009eba:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ebe:	fa1f f188 	uxth.w	r1, r8
 8009ec2:	4461      	add	r1, ip
 8009ec4:	140c      	asrs	r4, r1, #16
 8009ec6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009eca:	b289      	uxth	r1, r1
 8009ecc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ed0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009ed4:	f846 1b04 	str.w	r1, [r6], #4
 8009ed8:	e7de      	b.n	8009e98 <__mdiff+0xc8>
 8009eda:	3f01      	subs	r7, #1
 8009edc:	e7e8      	b.n	8009eb0 <__mdiff+0xe0>
 8009ede:	bf00      	nop
 8009ee0:	0800b46b 	.word	0x0800b46b
 8009ee4:	0800b47c 	.word	0x0800b47c

08009ee8 <__d2b>:
 8009ee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009eec:	2101      	movs	r1, #1
 8009eee:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009ef2:	4690      	mov	r8, r2
 8009ef4:	461d      	mov	r5, r3
 8009ef6:	f7ff fcd1 	bl	800989c <_Balloc>
 8009efa:	4604      	mov	r4, r0
 8009efc:	b930      	cbnz	r0, 8009f0c <__d2b+0x24>
 8009efe:	4602      	mov	r2, r0
 8009f00:	f240 310a 	movw	r1, #778	; 0x30a
 8009f04:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <__d2b+0xb0>)
 8009f06:	4825      	ldr	r0, [pc, #148]	; (8009f9c <__d2b+0xb4>)
 8009f08:	f000 faa6 	bl	800a458 <__assert_func>
 8009f0c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f10:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f14:	bb2d      	cbnz	r5, 8009f62 <__d2b+0x7a>
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	f1b8 0300 	subs.w	r3, r8, #0
 8009f1c:	d026      	beq.n	8009f6c <__d2b+0x84>
 8009f1e:	4668      	mov	r0, sp
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	f7ff fd83 	bl	8009a2c <__lo0bits>
 8009f26:	9900      	ldr	r1, [sp, #0]
 8009f28:	b1f0      	cbz	r0, 8009f68 <__d2b+0x80>
 8009f2a:	9a01      	ldr	r2, [sp, #4]
 8009f2c:	f1c0 0320 	rsb	r3, r0, #32
 8009f30:	fa02 f303 	lsl.w	r3, r2, r3
 8009f34:	430b      	orrs	r3, r1
 8009f36:	40c2      	lsrs	r2, r0
 8009f38:	6163      	str	r3, [r4, #20]
 8009f3a:	9201      	str	r2, [sp, #4]
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	bf14      	ite	ne
 8009f42:	2102      	movne	r1, #2
 8009f44:	2101      	moveq	r1, #1
 8009f46:	61a3      	str	r3, [r4, #24]
 8009f48:	6121      	str	r1, [r4, #16]
 8009f4a:	b1c5      	cbz	r5, 8009f7e <__d2b+0x96>
 8009f4c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f50:	4405      	add	r5, r0
 8009f52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f56:	603d      	str	r5, [r7, #0]
 8009f58:	6030      	str	r0, [r6, #0]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	b002      	add	sp, #8
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f66:	e7d6      	b.n	8009f16 <__d2b+0x2e>
 8009f68:	6161      	str	r1, [r4, #20]
 8009f6a:	e7e7      	b.n	8009f3c <__d2b+0x54>
 8009f6c:	a801      	add	r0, sp, #4
 8009f6e:	f7ff fd5d 	bl	8009a2c <__lo0bits>
 8009f72:	2101      	movs	r1, #1
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	6121      	str	r1, [r4, #16]
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	3020      	adds	r0, #32
 8009f7c:	e7e5      	b.n	8009f4a <__d2b+0x62>
 8009f7e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009f82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009f86:	6038      	str	r0, [r7, #0]
 8009f88:	6918      	ldr	r0, [r3, #16]
 8009f8a:	f7ff fd2f 	bl	80099ec <__hi0bits>
 8009f8e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009f92:	6031      	str	r1, [r6, #0]
 8009f94:	e7e1      	b.n	8009f5a <__d2b+0x72>
 8009f96:	bf00      	nop
 8009f98:	0800b46b 	.word	0x0800b46b
 8009f9c:	0800b47c 	.word	0x0800b47c

08009fa0 <_calloc_r>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	fba1 5402 	umull	r5, r4, r1, r2
 8009fa6:	b934      	cbnz	r4, 8009fb6 <_calloc_r+0x16>
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f000 f875 	bl	800a098 <_malloc_r>
 8009fae:	4606      	mov	r6, r0
 8009fb0:	b928      	cbnz	r0, 8009fbe <_calloc_r+0x1e>
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	bd70      	pop	{r4, r5, r6, pc}
 8009fb6:	220c      	movs	r2, #12
 8009fb8:	2600      	movs	r6, #0
 8009fba:	6002      	str	r2, [r0, #0]
 8009fbc:	e7f9      	b.n	8009fb2 <_calloc_r+0x12>
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4621      	mov	r1, r4
 8009fc2:	f7fe f92d 	bl	8008220 <memset>
 8009fc6:	e7f4      	b.n	8009fb2 <_calloc_r+0x12>

08009fc8 <_free_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d040      	beq.n	800a052 <_free_r+0x8a>
 8009fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd4:	1f0c      	subs	r4, r1, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfb8      	it	lt
 8009fda:	18e4      	addlt	r4, r4, r3
 8009fdc:	f000 fa98 	bl	800a510 <__malloc_lock>
 8009fe0:	4a1c      	ldr	r2, [pc, #112]	; (800a054 <_free_r+0x8c>)
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	b933      	cbnz	r3, 8009ff4 <_free_r+0x2c>
 8009fe6:	6063      	str	r3, [r4, #4]
 8009fe8:	6014      	str	r4, [r2, #0]
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff0:	f000 ba94 	b.w	800a51c <__malloc_unlock>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d908      	bls.n	800a00a <_free_r+0x42>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	1821      	adds	r1, r4, r0
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf01      	itttt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	1809      	addeq	r1, r1, r0
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	e7ed      	b.n	8009fe6 <_free_r+0x1e>
 800a00a:	461a      	mov	r2, r3
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	b10b      	cbz	r3, 800a014 <_free_r+0x4c>
 800a010:	42a3      	cmp	r3, r4
 800a012:	d9fa      	bls.n	800a00a <_free_r+0x42>
 800a014:	6811      	ldr	r1, [r2, #0]
 800a016:	1850      	adds	r0, r2, r1
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d10b      	bne.n	800a034 <_free_r+0x6c>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	4401      	add	r1, r0
 800a020:	1850      	adds	r0, r2, r1
 800a022:	4283      	cmp	r3, r0
 800a024:	6011      	str	r1, [r2, #0]
 800a026:	d1e0      	bne.n	8009fea <_free_r+0x22>
 800a028:	6818      	ldr	r0, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	4401      	add	r1, r0
 800a02e:	6011      	str	r1, [r2, #0]
 800a030:	6053      	str	r3, [r2, #4]
 800a032:	e7da      	b.n	8009fea <_free_r+0x22>
 800a034:	d902      	bls.n	800a03c <_free_r+0x74>
 800a036:	230c      	movs	r3, #12
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	e7d6      	b.n	8009fea <_free_r+0x22>
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	1821      	adds	r1, r4, r0
 800a040:	428b      	cmp	r3, r1
 800a042:	bf01      	itttt	eq
 800a044:	6819      	ldreq	r1, [r3, #0]
 800a046:	685b      	ldreq	r3, [r3, #4]
 800a048:	1809      	addeq	r1, r1, r0
 800a04a:	6021      	streq	r1, [r4, #0]
 800a04c:	6063      	str	r3, [r4, #4]
 800a04e:	6054      	str	r4, [r2, #4]
 800a050:	e7cb      	b.n	8009fea <_free_r+0x22>
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	200004e8 	.word	0x200004e8

0800a058 <sbrk_aligned>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4e0e      	ldr	r6, [pc, #56]	; (800a094 <sbrk_aligned+0x3c>)
 800a05c:	460c      	mov	r4, r1
 800a05e:	6831      	ldr	r1, [r6, #0]
 800a060:	4605      	mov	r5, r0
 800a062:	b911      	cbnz	r1, 800a06a <sbrk_aligned+0x12>
 800a064:	f000 f9e8 	bl	800a438 <_sbrk_r>
 800a068:	6030      	str	r0, [r6, #0]
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f9e3 	bl	800a438 <_sbrk_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d00a      	beq.n	800a08c <sbrk_aligned+0x34>
 800a076:	1cc4      	adds	r4, r0, #3
 800a078:	f024 0403 	bic.w	r4, r4, #3
 800a07c:	42a0      	cmp	r0, r4
 800a07e:	d007      	beq.n	800a090 <sbrk_aligned+0x38>
 800a080:	1a21      	subs	r1, r4, r0
 800a082:	4628      	mov	r0, r5
 800a084:	f000 f9d8 	bl	800a438 <_sbrk_r>
 800a088:	3001      	adds	r0, #1
 800a08a:	d101      	bne.n	800a090 <sbrk_aligned+0x38>
 800a08c:	f04f 34ff 	mov.w	r4, #4294967295
 800a090:	4620      	mov	r0, r4
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	200004ec 	.word	0x200004ec

0800a098 <_malloc_r>:
 800a098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09c:	1ccd      	adds	r5, r1, #3
 800a09e:	f025 0503 	bic.w	r5, r5, #3
 800a0a2:	3508      	adds	r5, #8
 800a0a4:	2d0c      	cmp	r5, #12
 800a0a6:	bf38      	it	cc
 800a0a8:	250c      	movcc	r5, #12
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	db01      	blt.n	800a0b4 <_malloc_r+0x1c>
 800a0b0:	42a9      	cmp	r1, r5
 800a0b2:	d905      	bls.n	800a0c0 <_malloc_r+0x28>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	2600      	movs	r6, #0
 800a0b8:	603b      	str	r3, [r7, #0]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	4e2e      	ldr	r6, [pc, #184]	; (800a17c <_malloc_r+0xe4>)
 800a0c2:	f000 fa25 	bl	800a510 <__malloc_lock>
 800a0c6:	6833      	ldr	r3, [r6, #0]
 800a0c8:	461c      	mov	r4, r3
 800a0ca:	bb34      	cbnz	r4, 800a11a <_malloc_r+0x82>
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	f7ff ffc2 	bl	800a058 <sbrk_aligned>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	d14d      	bne.n	800a176 <_malloc_r+0xde>
 800a0da:	6834      	ldr	r4, [r6, #0]
 800a0dc:	4626      	mov	r6, r4
 800a0de:	2e00      	cmp	r6, #0
 800a0e0:	d140      	bne.n	800a164 <_malloc_r+0xcc>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4638      	mov	r0, r7
 800a0e8:	eb04 0803 	add.w	r8, r4, r3
 800a0ec:	f000 f9a4 	bl	800a438 <_sbrk_r>
 800a0f0:	4580      	cmp	r8, r0
 800a0f2:	d13a      	bne.n	800a16a <_malloc_r+0xd2>
 800a0f4:	6821      	ldr	r1, [r4, #0]
 800a0f6:	3503      	adds	r5, #3
 800a0f8:	1a6d      	subs	r5, r5, r1
 800a0fa:	f025 0503 	bic.w	r5, r5, #3
 800a0fe:	3508      	adds	r5, #8
 800a100:	2d0c      	cmp	r5, #12
 800a102:	bf38      	it	cc
 800a104:	250c      	movcc	r5, #12
 800a106:	4638      	mov	r0, r7
 800a108:	4629      	mov	r1, r5
 800a10a:	f7ff ffa5 	bl	800a058 <sbrk_aligned>
 800a10e:	3001      	adds	r0, #1
 800a110:	d02b      	beq.n	800a16a <_malloc_r+0xd2>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	442b      	add	r3, r5
 800a116:	6023      	str	r3, [r4, #0]
 800a118:	e00e      	b.n	800a138 <_malloc_r+0xa0>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	1b52      	subs	r2, r2, r5
 800a11e:	d41e      	bmi.n	800a15e <_malloc_r+0xc6>
 800a120:	2a0b      	cmp	r2, #11
 800a122:	d916      	bls.n	800a152 <_malloc_r+0xba>
 800a124:	1961      	adds	r1, r4, r5
 800a126:	42a3      	cmp	r3, r4
 800a128:	6025      	str	r5, [r4, #0]
 800a12a:	bf18      	it	ne
 800a12c:	6059      	strne	r1, [r3, #4]
 800a12e:	6863      	ldr	r3, [r4, #4]
 800a130:	bf08      	it	eq
 800a132:	6031      	streq	r1, [r6, #0]
 800a134:	5162      	str	r2, [r4, r5]
 800a136:	604b      	str	r3, [r1, #4]
 800a138:	4638      	mov	r0, r7
 800a13a:	f104 060b 	add.w	r6, r4, #11
 800a13e:	f000 f9ed 	bl	800a51c <__malloc_unlock>
 800a142:	f026 0607 	bic.w	r6, r6, #7
 800a146:	1d23      	adds	r3, r4, #4
 800a148:	1af2      	subs	r2, r6, r3
 800a14a:	d0b6      	beq.n	800a0ba <_malloc_r+0x22>
 800a14c:	1b9b      	subs	r3, r3, r6
 800a14e:	50a3      	str	r3, [r4, r2]
 800a150:	e7b3      	b.n	800a0ba <_malloc_r+0x22>
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	42a3      	cmp	r3, r4
 800a156:	bf0c      	ite	eq
 800a158:	6032      	streq	r2, [r6, #0]
 800a15a:	605a      	strne	r2, [r3, #4]
 800a15c:	e7ec      	b.n	800a138 <_malloc_r+0xa0>
 800a15e:	4623      	mov	r3, r4
 800a160:	6864      	ldr	r4, [r4, #4]
 800a162:	e7b2      	b.n	800a0ca <_malloc_r+0x32>
 800a164:	4634      	mov	r4, r6
 800a166:	6876      	ldr	r6, [r6, #4]
 800a168:	e7b9      	b.n	800a0de <_malloc_r+0x46>
 800a16a:	230c      	movs	r3, #12
 800a16c:	4638      	mov	r0, r7
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	f000 f9d4 	bl	800a51c <__malloc_unlock>
 800a174:	e7a1      	b.n	800a0ba <_malloc_r+0x22>
 800a176:	6025      	str	r5, [r4, #0]
 800a178:	e7de      	b.n	800a138 <_malloc_r+0xa0>
 800a17a:	bf00      	nop
 800a17c:	200004e8 	.word	0x200004e8

0800a180 <__ssputs_r>:
 800a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	688e      	ldr	r6, [r1, #8]
 800a186:	4682      	mov	sl, r0
 800a188:	429e      	cmp	r6, r3
 800a18a:	460c      	mov	r4, r1
 800a18c:	4690      	mov	r8, r2
 800a18e:	461f      	mov	r7, r3
 800a190:	d838      	bhi.n	800a204 <__ssputs_r+0x84>
 800a192:	898a      	ldrh	r2, [r1, #12]
 800a194:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a198:	d032      	beq.n	800a200 <__ssputs_r+0x80>
 800a19a:	6825      	ldr	r5, [r4, #0]
 800a19c:	6909      	ldr	r1, [r1, #16]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	eba5 0901 	sub.w	r9, r5, r1
 800a1a4:	6965      	ldr	r5, [r4, #20]
 800a1a6:	444b      	add	r3, r9
 800a1a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1b0:	106d      	asrs	r5, r5, #1
 800a1b2:	429d      	cmp	r5, r3
 800a1b4:	bf38      	it	cc
 800a1b6:	461d      	movcc	r5, r3
 800a1b8:	0553      	lsls	r3, r2, #21
 800a1ba:	d531      	bpl.n	800a220 <__ssputs_r+0xa0>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	f7ff ff6b 	bl	800a098 <_malloc_r>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b950      	cbnz	r0, 800a1dc <__ssputs_r+0x5c>
 800a1c6:	230c      	movs	r3, #12
 800a1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1cc:	f8ca 3000 	str.w	r3, [sl]
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1dc:	464a      	mov	r2, r9
 800a1de:	6921      	ldr	r1, [r4, #16]
 800a1e0:	f7ff fb4e 	bl	8009880 <memcpy>
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	6126      	str	r6, [r4, #16]
 800a1f2:	444e      	add	r6, r9
 800a1f4:	6026      	str	r6, [r4, #0]
 800a1f6:	463e      	mov	r6, r7
 800a1f8:	6165      	str	r5, [r4, #20]
 800a1fa:	eba5 0509 	sub.w	r5, r5, r9
 800a1fe:	60a5      	str	r5, [r4, #8]
 800a200:	42be      	cmp	r6, r7
 800a202:	d900      	bls.n	800a206 <__ssputs_r+0x86>
 800a204:	463e      	mov	r6, r7
 800a206:	4632      	mov	r2, r6
 800a208:	4641      	mov	r1, r8
 800a20a:	6820      	ldr	r0, [r4, #0]
 800a20c:	f000 f966 	bl	800a4dc <memmove>
 800a210:	68a3      	ldr	r3, [r4, #8]
 800a212:	2000      	movs	r0, #0
 800a214:	1b9b      	subs	r3, r3, r6
 800a216:	60a3      	str	r3, [r4, #8]
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	4433      	add	r3, r6
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	e7db      	b.n	800a1d8 <__ssputs_r+0x58>
 800a220:	462a      	mov	r2, r5
 800a222:	f000 f981 	bl	800a528 <_realloc_r>
 800a226:	4606      	mov	r6, r0
 800a228:	2800      	cmp	r0, #0
 800a22a:	d1e1      	bne.n	800a1f0 <__ssputs_r+0x70>
 800a22c:	4650      	mov	r0, sl
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	f7ff feca 	bl	8009fc8 <_free_r>
 800a234:	e7c7      	b.n	800a1c6 <__ssputs_r+0x46>
	...

0800a238 <_svfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	4698      	mov	r8, r3
 800a23e:	898b      	ldrh	r3, [r1, #12]
 800a240:	4607      	mov	r7, r0
 800a242:	061b      	lsls	r3, r3, #24
 800a244:	460d      	mov	r5, r1
 800a246:	4614      	mov	r4, r2
 800a248:	b09d      	sub	sp, #116	; 0x74
 800a24a:	d50e      	bpl.n	800a26a <_svfiprintf_r+0x32>
 800a24c:	690b      	ldr	r3, [r1, #16]
 800a24e:	b963      	cbnz	r3, 800a26a <_svfiprintf_r+0x32>
 800a250:	2140      	movs	r1, #64	; 0x40
 800a252:	f7ff ff21 	bl	800a098 <_malloc_r>
 800a256:	6028      	str	r0, [r5, #0]
 800a258:	6128      	str	r0, [r5, #16]
 800a25a:	b920      	cbnz	r0, 800a266 <_svfiprintf_r+0x2e>
 800a25c:	230c      	movs	r3, #12
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	e0d1      	b.n	800a40a <_svfiprintf_r+0x1d2>
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	616b      	str	r3, [r5, #20]
 800a26a:	2300      	movs	r3, #0
 800a26c:	9309      	str	r3, [sp, #36]	; 0x24
 800a26e:	2320      	movs	r3, #32
 800a270:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a274:	2330      	movs	r3, #48	; 0x30
 800a276:	f04f 0901 	mov.w	r9, #1
 800a27a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a27e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a424 <_svfiprintf_r+0x1ec>
 800a282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a286:	4623      	mov	r3, r4
 800a288:	469a      	mov	sl, r3
 800a28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a28e:	b10a      	cbz	r2, 800a294 <_svfiprintf_r+0x5c>
 800a290:	2a25      	cmp	r2, #37	; 0x25
 800a292:	d1f9      	bne.n	800a288 <_svfiprintf_r+0x50>
 800a294:	ebba 0b04 	subs.w	fp, sl, r4
 800a298:	d00b      	beq.n	800a2b2 <_svfiprintf_r+0x7a>
 800a29a:	465b      	mov	r3, fp
 800a29c:	4622      	mov	r2, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	4638      	mov	r0, r7
 800a2a2:	f7ff ff6d 	bl	800a180 <__ssputs_r>
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f000 80aa 	beq.w	800a400 <_svfiprintf_r+0x1c8>
 800a2ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ae:	445a      	add	r2, fp
 800a2b0:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f000 80a2 	beq.w	800a400 <_svfiprintf_r+0x1c8>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c6:	f10a 0a01 	add.w	sl, sl, #1
 800a2ca:	9304      	str	r3, [sp, #16]
 800a2cc:	9307      	str	r3, [sp, #28]
 800a2ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2d2:	931a      	str	r3, [sp, #104]	; 0x68
 800a2d4:	4654      	mov	r4, sl
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	4851      	ldr	r0, [pc, #324]	; (800a424 <_svfiprintf_r+0x1ec>)
 800a2de:	f7ff fac1 	bl	8009864 <memchr>
 800a2e2:	9a04      	ldr	r2, [sp, #16]
 800a2e4:	b9d8      	cbnz	r0, 800a31e <_svfiprintf_r+0xe6>
 800a2e6:	06d0      	lsls	r0, r2, #27
 800a2e8:	bf44      	itt	mi
 800a2ea:	2320      	movmi	r3, #32
 800a2ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2f0:	0711      	lsls	r1, r2, #28
 800a2f2:	bf44      	itt	mi
 800a2f4:	232b      	movmi	r3, #43	; 0x2b
 800a2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a2fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a300:	d015      	beq.n	800a32e <_svfiprintf_r+0xf6>
 800a302:	4654      	mov	r4, sl
 800a304:	2000      	movs	r0, #0
 800a306:	f04f 0c0a 	mov.w	ip, #10
 800a30a:	9a07      	ldr	r2, [sp, #28]
 800a30c:	4621      	mov	r1, r4
 800a30e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a312:	3b30      	subs	r3, #48	; 0x30
 800a314:	2b09      	cmp	r3, #9
 800a316:	d94e      	bls.n	800a3b6 <_svfiprintf_r+0x17e>
 800a318:	b1b0      	cbz	r0, 800a348 <_svfiprintf_r+0x110>
 800a31a:	9207      	str	r2, [sp, #28]
 800a31c:	e014      	b.n	800a348 <_svfiprintf_r+0x110>
 800a31e:	eba0 0308 	sub.w	r3, r0, r8
 800a322:	fa09 f303 	lsl.w	r3, r9, r3
 800a326:	4313      	orrs	r3, r2
 800a328:	46a2      	mov	sl, r4
 800a32a:	9304      	str	r3, [sp, #16]
 800a32c:	e7d2      	b.n	800a2d4 <_svfiprintf_r+0x9c>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	1d19      	adds	r1, r3, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	9103      	str	r1, [sp, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfbb      	ittet	lt
 800a33a:	425b      	neglt	r3, r3
 800a33c:	f042 0202 	orrlt.w	r2, r2, #2
 800a340:	9307      	strge	r3, [sp, #28]
 800a342:	9307      	strlt	r3, [sp, #28]
 800a344:	bfb8      	it	lt
 800a346:	9204      	strlt	r2, [sp, #16]
 800a348:	7823      	ldrb	r3, [r4, #0]
 800a34a:	2b2e      	cmp	r3, #46	; 0x2e
 800a34c:	d10c      	bne.n	800a368 <_svfiprintf_r+0x130>
 800a34e:	7863      	ldrb	r3, [r4, #1]
 800a350:	2b2a      	cmp	r3, #42	; 0x2a
 800a352:	d135      	bne.n	800a3c0 <_svfiprintf_r+0x188>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	3402      	adds	r4, #2
 800a358:	1d1a      	adds	r2, r3, #4
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	9203      	str	r2, [sp, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	bfb8      	it	lt
 800a362:	f04f 33ff 	movlt.w	r3, #4294967295
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a428 <_svfiprintf_r+0x1f0>
 800a36c:	2203      	movs	r2, #3
 800a36e:	4650      	mov	r0, sl
 800a370:	7821      	ldrb	r1, [r4, #0]
 800a372:	f7ff fa77 	bl	8009864 <memchr>
 800a376:	b140      	cbz	r0, 800a38a <_svfiprintf_r+0x152>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	eba0 000a 	sub.w	r0, r0, sl
 800a37e:	fa03 f000 	lsl.w	r0, r3, r0
 800a382:	9b04      	ldr	r3, [sp, #16]
 800a384:	3401      	adds	r4, #1
 800a386:	4303      	orrs	r3, r0
 800a388:	9304      	str	r3, [sp, #16]
 800a38a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38e:	2206      	movs	r2, #6
 800a390:	4826      	ldr	r0, [pc, #152]	; (800a42c <_svfiprintf_r+0x1f4>)
 800a392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a396:	f7ff fa65 	bl	8009864 <memchr>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d038      	beq.n	800a410 <_svfiprintf_r+0x1d8>
 800a39e:	4b24      	ldr	r3, [pc, #144]	; (800a430 <_svfiprintf_r+0x1f8>)
 800a3a0:	bb1b      	cbnz	r3, 800a3ea <_svfiprintf_r+0x1b2>
 800a3a2:	9b03      	ldr	r3, [sp, #12]
 800a3a4:	3307      	adds	r3, #7
 800a3a6:	f023 0307 	bic.w	r3, r3, #7
 800a3aa:	3308      	adds	r3, #8
 800a3ac:	9303      	str	r3, [sp, #12]
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	4433      	add	r3, r6
 800a3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b4:	e767      	b.n	800a286 <_svfiprintf_r+0x4e>
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	2001      	movs	r0, #1
 800a3ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3be:	e7a5      	b.n	800a30c <_svfiprintf_r+0xd4>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f04f 0c0a 	mov.w	ip, #10
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	3401      	adds	r4, #1
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d2:	3a30      	subs	r2, #48	; 0x30
 800a3d4:	2a09      	cmp	r2, #9
 800a3d6:	d903      	bls.n	800a3e0 <_svfiprintf_r+0x1a8>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0c5      	beq.n	800a368 <_svfiprintf_r+0x130>
 800a3dc:	9105      	str	r1, [sp, #20]
 800a3de:	e7c3      	b.n	800a368 <_svfiprintf_r+0x130>
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e8:	e7f0      	b.n	800a3cc <_svfiprintf_r+0x194>
 800a3ea:	ab03      	add	r3, sp, #12
 800a3ec:	9300      	str	r3, [sp, #0]
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	4638      	mov	r0, r7
 800a3f2:	4b10      	ldr	r3, [pc, #64]	; (800a434 <_svfiprintf_r+0x1fc>)
 800a3f4:	a904      	add	r1, sp, #16
 800a3f6:	f7fd ffb9 	bl	800836c <_printf_float>
 800a3fa:	1c42      	adds	r2, r0, #1
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	d1d6      	bne.n	800a3ae <_svfiprintf_r+0x176>
 800a400:	89ab      	ldrh	r3, [r5, #12]
 800a402:	065b      	lsls	r3, r3, #25
 800a404:	f53f af2c 	bmi.w	800a260 <_svfiprintf_r+0x28>
 800a408:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a40a:	b01d      	add	sp, #116	; 0x74
 800a40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a410:	ab03      	add	r3, sp, #12
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	462a      	mov	r2, r5
 800a416:	4638      	mov	r0, r7
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <_svfiprintf_r+0x1fc>)
 800a41a:	a904      	add	r1, sp, #16
 800a41c:	f7fe fa42 	bl	80088a4 <_printf_i>
 800a420:	e7eb      	b.n	800a3fa <_svfiprintf_r+0x1c2>
 800a422:	bf00      	nop
 800a424:	0800b5d4 	.word	0x0800b5d4
 800a428:	0800b5da 	.word	0x0800b5da
 800a42c:	0800b5de 	.word	0x0800b5de
 800a430:	0800836d 	.word	0x0800836d
 800a434:	0800a181 	.word	0x0800a181

0800a438 <_sbrk_r>:
 800a438:	b538      	push	{r3, r4, r5, lr}
 800a43a:	2300      	movs	r3, #0
 800a43c:	4d05      	ldr	r5, [pc, #20]	; (800a454 <_sbrk_r+0x1c>)
 800a43e:	4604      	mov	r4, r0
 800a440:	4608      	mov	r0, r1
 800a442:	602b      	str	r3, [r5, #0]
 800a444:	f7f8 fb94 	bl	8002b70 <_sbrk>
 800a448:	1c43      	adds	r3, r0, #1
 800a44a:	d102      	bne.n	800a452 <_sbrk_r+0x1a>
 800a44c:	682b      	ldr	r3, [r5, #0]
 800a44e:	b103      	cbz	r3, 800a452 <_sbrk_r+0x1a>
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	bd38      	pop	{r3, r4, r5, pc}
 800a454:	200004f0 	.word	0x200004f0

0800a458 <__assert_func>:
 800a458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a45a:	4614      	mov	r4, r2
 800a45c:	461a      	mov	r2, r3
 800a45e:	4b09      	ldr	r3, [pc, #36]	; (800a484 <__assert_func+0x2c>)
 800a460:	4605      	mov	r5, r0
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68d8      	ldr	r0, [r3, #12]
 800a466:	b14c      	cbz	r4, 800a47c <__assert_func+0x24>
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <__assert_func+0x30>)
 800a46a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a46e:	9100      	str	r1, [sp, #0]
 800a470:	462b      	mov	r3, r5
 800a472:	4906      	ldr	r1, [pc, #24]	; (800a48c <__assert_func+0x34>)
 800a474:	f000 f80e 	bl	800a494 <fiprintf>
 800a478:	f000 faaa 	bl	800a9d0 <abort>
 800a47c:	4b04      	ldr	r3, [pc, #16]	; (800a490 <__assert_func+0x38>)
 800a47e:	461c      	mov	r4, r3
 800a480:	e7f3      	b.n	800a46a <__assert_func+0x12>
 800a482:	bf00      	nop
 800a484:	20000040 	.word	0x20000040
 800a488:	0800b5e5 	.word	0x0800b5e5
 800a48c:	0800b5f2 	.word	0x0800b5f2
 800a490:	0800b620 	.word	0x0800b620

0800a494 <fiprintf>:
 800a494:	b40e      	push	{r1, r2, r3}
 800a496:	b503      	push	{r0, r1, lr}
 800a498:	4601      	mov	r1, r0
 800a49a:	ab03      	add	r3, sp, #12
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <fiprintf+0x20>)
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	6800      	ldr	r0, [r0, #0]
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f000 f895 	bl	800a5d4 <_vfiprintf_r>
 800a4aa:	b002      	add	sp, #8
 800a4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4b0:	b003      	add	sp, #12
 800a4b2:	4770      	bx	lr
 800a4b4:	20000040 	.word	0x20000040

0800a4b8 <__ascii_mbtowc>:
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	b901      	cbnz	r1, 800a4be <__ascii_mbtowc+0x6>
 800a4bc:	a901      	add	r1, sp, #4
 800a4be:	b142      	cbz	r2, 800a4d2 <__ascii_mbtowc+0x1a>
 800a4c0:	b14b      	cbz	r3, 800a4d6 <__ascii_mbtowc+0x1e>
 800a4c2:	7813      	ldrb	r3, [r2, #0]
 800a4c4:	600b      	str	r3, [r1, #0]
 800a4c6:	7812      	ldrb	r2, [r2, #0]
 800a4c8:	1e10      	subs	r0, r2, #0
 800a4ca:	bf18      	it	ne
 800a4cc:	2001      	movne	r0, #1
 800a4ce:	b002      	add	sp, #8
 800a4d0:	4770      	bx	lr
 800a4d2:	4610      	mov	r0, r2
 800a4d4:	e7fb      	b.n	800a4ce <__ascii_mbtowc+0x16>
 800a4d6:	f06f 0001 	mvn.w	r0, #1
 800a4da:	e7f8      	b.n	800a4ce <__ascii_mbtowc+0x16>

0800a4dc <memmove>:
 800a4dc:	4288      	cmp	r0, r1
 800a4de:	b510      	push	{r4, lr}
 800a4e0:	eb01 0402 	add.w	r4, r1, r2
 800a4e4:	d902      	bls.n	800a4ec <memmove+0x10>
 800a4e6:	4284      	cmp	r4, r0
 800a4e8:	4623      	mov	r3, r4
 800a4ea:	d807      	bhi.n	800a4fc <memmove+0x20>
 800a4ec:	1e43      	subs	r3, r0, #1
 800a4ee:	42a1      	cmp	r1, r4
 800a4f0:	d008      	beq.n	800a504 <memmove+0x28>
 800a4f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4fa:	e7f8      	b.n	800a4ee <memmove+0x12>
 800a4fc:	4601      	mov	r1, r0
 800a4fe:	4402      	add	r2, r0
 800a500:	428a      	cmp	r2, r1
 800a502:	d100      	bne.n	800a506 <memmove+0x2a>
 800a504:	bd10      	pop	{r4, pc}
 800a506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a50a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a50e:	e7f7      	b.n	800a500 <memmove+0x24>

0800a510 <__malloc_lock>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__malloc_lock+0x8>)
 800a512:	f000 bc19 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	200004f4 	.word	0x200004f4

0800a51c <__malloc_unlock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__malloc_unlock+0x8>)
 800a51e:	f000 bc14 	b.w	800ad4a <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	200004f4 	.word	0x200004f4

0800a528 <_realloc_r>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	4680      	mov	r8, r0
 800a52e:	4614      	mov	r4, r2
 800a530:	460e      	mov	r6, r1
 800a532:	b921      	cbnz	r1, 800a53e <_realloc_r+0x16>
 800a534:	4611      	mov	r1, r2
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f7ff bdad 	b.w	800a098 <_malloc_r>
 800a53e:	b92a      	cbnz	r2, 800a54c <_realloc_r+0x24>
 800a540:	f7ff fd42 	bl	8009fc8 <_free_r>
 800a544:	4625      	mov	r5, r4
 800a546:	4628      	mov	r0, r5
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54c:	f000 fc64 	bl	800ae18 <_malloc_usable_size_r>
 800a550:	4284      	cmp	r4, r0
 800a552:	4607      	mov	r7, r0
 800a554:	d802      	bhi.n	800a55c <_realloc_r+0x34>
 800a556:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a55a:	d812      	bhi.n	800a582 <_realloc_r+0x5a>
 800a55c:	4621      	mov	r1, r4
 800a55e:	4640      	mov	r0, r8
 800a560:	f7ff fd9a 	bl	800a098 <_malloc_r>
 800a564:	4605      	mov	r5, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d0ed      	beq.n	800a546 <_realloc_r+0x1e>
 800a56a:	42bc      	cmp	r4, r7
 800a56c:	4622      	mov	r2, r4
 800a56e:	4631      	mov	r1, r6
 800a570:	bf28      	it	cs
 800a572:	463a      	movcs	r2, r7
 800a574:	f7ff f984 	bl	8009880 <memcpy>
 800a578:	4631      	mov	r1, r6
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fd24 	bl	8009fc8 <_free_r>
 800a580:	e7e1      	b.n	800a546 <_realloc_r+0x1e>
 800a582:	4635      	mov	r5, r6
 800a584:	e7df      	b.n	800a546 <_realloc_r+0x1e>

0800a586 <__sfputc_r>:
 800a586:	6893      	ldr	r3, [r2, #8]
 800a588:	b410      	push	{r4}
 800a58a:	3b01      	subs	r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	6093      	str	r3, [r2, #8]
 800a590:	da07      	bge.n	800a5a2 <__sfputc_r+0x1c>
 800a592:	6994      	ldr	r4, [r2, #24]
 800a594:	42a3      	cmp	r3, r4
 800a596:	db01      	blt.n	800a59c <__sfputc_r+0x16>
 800a598:	290a      	cmp	r1, #10
 800a59a:	d102      	bne.n	800a5a2 <__sfputc_r+0x1c>
 800a59c:	bc10      	pop	{r4}
 800a59e:	f000 b949 	b.w	800a834 <__swbuf_r>
 800a5a2:	6813      	ldr	r3, [r2, #0]
 800a5a4:	1c58      	adds	r0, r3, #1
 800a5a6:	6010      	str	r0, [r2, #0]
 800a5a8:	7019      	strb	r1, [r3, #0]
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	bc10      	pop	{r4}
 800a5ae:	4770      	bx	lr

0800a5b0 <__sfputs_r>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	4606      	mov	r6, r0
 800a5b4:	460f      	mov	r7, r1
 800a5b6:	4614      	mov	r4, r2
 800a5b8:	18d5      	adds	r5, r2, r3
 800a5ba:	42ac      	cmp	r4, r5
 800a5bc:	d101      	bne.n	800a5c2 <__sfputs_r+0x12>
 800a5be:	2000      	movs	r0, #0
 800a5c0:	e007      	b.n	800a5d2 <__sfputs_r+0x22>
 800a5c2:	463a      	mov	r2, r7
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ca:	f7ff ffdc 	bl	800a586 <__sfputc_r>
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	d1f3      	bne.n	800a5ba <__sfputs_r+0xa>
 800a5d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5d4 <_vfiprintf_r>:
 800a5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	460d      	mov	r5, r1
 800a5da:	4614      	mov	r4, r2
 800a5dc:	4698      	mov	r8, r3
 800a5de:	4606      	mov	r6, r0
 800a5e0:	b09d      	sub	sp, #116	; 0x74
 800a5e2:	b118      	cbz	r0, 800a5ec <_vfiprintf_r+0x18>
 800a5e4:	6983      	ldr	r3, [r0, #24]
 800a5e6:	b90b      	cbnz	r3, 800a5ec <_vfiprintf_r+0x18>
 800a5e8:	f000 fb10 	bl	800ac0c <__sinit>
 800a5ec:	4b89      	ldr	r3, [pc, #548]	; (800a814 <_vfiprintf_r+0x240>)
 800a5ee:	429d      	cmp	r5, r3
 800a5f0:	d11b      	bne.n	800a62a <_vfiprintf_r+0x56>
 800a5f2:	6875      	ldr	r5, [r6, #4]
 800a5f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f6:	07d9      	lsls	r1, r3, #31
 800a5f8:	d405      	bmi.n	800a606 <_vfiprintf_r+0x32>
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	059a      	lsls	r2, r3, #22
 800a5fe:	d402      	bmi.n	800a606 <_vfiprintf_r+0x32>
 800a600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a602:	f000 fba1 	bl	800ad48 <__retarget_lock_acquire_recursive>
 800a606:	89ab      	ldrh	r3, [r5, #12]
 800a608:	071b      	lsls	r3, r3, #28
 800a60a:	d501      	bpl.n	800a610 <_vfiprintf_r+0x3c>
 800a60c:	692b      	ldr	r3, [r5, #16]
 800a60e:	b9eb      	cbnz	r3, 800a64c <_vfiprintf_r+0x78>
 800a610:	4629      	mov	r1, r5
 800a612:	4630      	mov	r0, r6
 800a614:	f000 f96e 	bl	800a8f4 <__swsetup_r>
 800a618:	b1c0      	cbz	r0, 800a64c <_vfiprintf_r+0x78>
 800a61a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a61c:	07dc      	lsls	r4, r3, #31
 800a61e:	d50e      	bpl.n	800a63e <_vfiprintf_r+0x6a>
 800a620:	f04f 30ff 	mov.w	r0, #4294967295
 800a624:	b01d      	add	sp, #116	; 0x74
 800a626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62a:	4b7b      	ldr	r3, [pc, #492]	; (800a818 <_vfiprintf_r+0x244>)
 800a62c:	429d      	cmp	r5, r3
 800a62e:	d101      	bne.n	800a634 <_vfiprintf_r+0x60>
 800a630:	68b5      	ldr	r5, [r6, #8]
 800a632:	e7df      	b.n	800a5f4 <_vfiprintf_r+0x20>
 800a634:	4b79      	ldr	r3, [pc, #484]	; (800a81c <_vfiprintf_r+0x248>)
 800a636:	429d      	cmp	r5, r3
 800a638:	bf08      	it	eq
 800a63a:	68f5      	ldreq	r5, [r6, #12]
 800a63c:	e7da      	b.n	800a5f4 <_vfiprintf_r+0x20>
 800a63e:	89ab      	ldrh	r3, [r5, #12]
 800a640:	0598      	lsls	r0, r3, #22
 800a642:	d4ed      	bmi.n	800a620 <_vfiprintf_r+0x4c>
 800a644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a646:	f000 fb80 	bl	800ad4a <__retarget_lock_release_recursive>
 800a64a:	e7e9      	b.n	800a620 <_vfiprintf_r+0x4c>
 800a64c:	2300      	movs	r3, #0
 800a64e:	9309      	str	r3, [sp, #36]	; 0x24
 800a650:	2320      	movs	r3, #32
 800a652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a656:	2330      	movs	r3, #48	; 0x30
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a660:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a820 <_vfiprintf_r+0x24c>
 800a664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a668:	4623      	mov	r3, r4
 800a66a:	469a      	mov	sl, r3
 800a66c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a670:	b10a      	cbz	r2, 800a676 <_vfiprintf_r+0xa2>
 800a672:	2a25      	cmp	r2, #37	; 0x25
 800a674:	d1f9      	bne.n	800a66a <_vfiprintf_r+0x96>
 800a676:	ebba 0b04 	subs.w	fp, sl, r4
 800a67a:	d00b      	beq.n	800a694 <_vfiprintf_r+0xc0>
 800a67c:	465b      	mov	r3, fp
 800a67e:	4622      	mov	r2, r4
 800a680:	4629      	mov	r1, r5
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff ff94 	bl	800a5b0 <__sfputs_r>
 800a688:	3001      	adds	r0, #1
 800a68a:	f000 80aa 	beq.w	800a7e2 <_vfiprintf_r+0x20e>
 800a68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a690:	445a      	add	r2, fp
 800a692:	9209      	str	r2, [sp, #36]	; 0x24
 800a694:	f89a 3000 	ldrb.w	r3, [sl]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80a2 	beq.w	800a7e2 <_vfiprintf_r+0x20e>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6a8:	f10a 0a01 	add.w	sl, sl, #1
 800a6ac:	9304      	str	r3, [sp, #16]
 800a6ae:	9307      	str	r3, [sp, #28]
 800a6b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6b4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6b6:	4654      	mov	r4, sl
 800a6b8:	2205      	movs	r2, #5
 800a6ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6be:	4858      	ldr	r0, [pc, #352]	; (800a820 <_vfiprintf_r+0x24c>)
 800a6c0:	f7ff f8d0 	bl	8009864 <memchr>
 800a6c4:	9a04      	ldr	r2, [sp, #16]
 800a6c6:	b9d8      	cbnz	r0, 800a700 <_vfiprintf_r+0x12c>
 800a6c8:	06d1      	lsls	r1, r2, #27
 800a6ca:	bf44      	itt	mi
 800a6cc:	2320      	movmi	r3, #32
 800a6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6d2:	0713      	lsls	r3, r2, #28
 800a6d4:	bf44      	itt	mi
 800a6d6:	232b      	movmi	r3, #43	; 0x2b
 800a6d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e2:	d015      	beq.n	800a710 <_vfiprintf_r+0x13c>
 800a6e4:	4654      	mov	r4, sl
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f04f 0c0a 	mov.w	ip, #10
 800a6ec:	9a07      	ldr	r2, [sp, #28]
 800a6ee:	4621      	mov	r1, r4
 800a6f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6f4:	3b30      	subs	r3, #48	; 0x30
 800a6f6:	2b09      	cmp	r3, #9
 800a6f8:	d94e      	bls.n	800a798 <_vfiprintf_r+0x1c4>
 800a6fa:	b1b0      	cbz	r0, 800a72a <_vfiprintf_r+0x156>
 800a6fc:	9207      	str	r2, [sp, #28]
 800a6fe:	e014      	b.n	800a72a <_vfiprintf_r+0x156>
 800a700:	eba0 0308 	sub.w	r3, r0, r8
 800a704:	fa09 f303 	lsl.w	r3, r9, r3
 800a708:	4313      	orrs	r3, r2
 800a70a:	46a2      	mov	sl, r4
 800a70c:	9304      	str	r3, [sp, #16]
 800a70e:	e7d2      	b.n	800a6b6 <_vfiprintf_r+0xe2>
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	1d19      	adds	r1, r3, #4
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	9103      	str	r1, [sp, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bfbb      	ittet	lt
 800a71c:	425b      	neglt	r3, r3
 800a71e:	f042 0202 	orrlt.w	r2, r2, #2
 800a722:	9307      	strge	r3, [sp, #28]
 800a724:	9307      	strlt	r3, [sp, #28]
 800a726:	bfb8      	it	lt
 800a728:	9204      	strlt	r2, [sp, #16]
 800a72a:	7823      	ldrb	r3, [r4, #0]
 800a72c:	2b2e      	cmp	r3, #46	; 0x2e
 800a72e:	d10c      	bne.n	800a74a <_vfiprintf_r+0x176>
 800a730:	7863      	ldrb	r3, [r4, #1]
 800a732:	2b2a      	cmp	r3, #42	; 0x2a
 800a734:	d135      	bne.n	800a7a2 <_vfiprintf_r+0x1ce>
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	3402      	adds	r4, #2
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	9203      	str	r2, [sp, #12]
 800a740:	2b00      	cmp	r3, #0
 800a742:	bfb8      	it	lt
 800a744:	f04f 33ff 	movlt.w	r3, #4294967295
 800a748:	9305      	str	r3, [sp, #20]
 800a74a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a824 <_vfiprintf_r+0x250>
 800a74e:	2203      	movs	r2, #3
 800a750:	4650      	mov	r0, sl
 800a752:	7821      	ldrb	r1, [r4, #0]
 800a754:	f7ff f886 	bl	8009864 <memchr>
 800a758:	b140      	cbz	r0, 800a76c <_vfiprintf_r+0x198>
 800a75a:	2340      	movs	r3, #64	; 0x40
 800a75c:	eba0 000a 	sub.w	r0, r0, sl
 800a760:	fa03 f000 	lsl.w	r0, r3, r0
 800a764:	9b04      	ldr	r3, [sp, #16]
 800a766:	3401      	adds	r4, #1
 800a768:	4303      	orrs	r3, r0
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a770:	2206      	movs	r2, #6
 800a772:	482d      	ldr	r0, [pc, #180]	; (800a828 <_vfiprintf_r+0x254>)
 800a774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a778:	f7ff f874 	bl	8009864 <memchr>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d03f      	beq.n	800a800 <_vfiprintf_r+0x22c>
 800a780:	4b2a      	ldr	r3, [pc, #168]	; (800a82c <_vfiprintf_r+0x258>)
 800a782:	bb1b      	cbnz	r3, 800a7cc <_vfiprintf_r+0x1f8>
 800a784:	9b03      	ldr	r3, [sp, #12]
 800a786:	3307      	adds	r3, #7
 800a788:	f023 0307 	bic.w	r3, r3, #7
 800a78c:	3308      	adds	r3, #8
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a792:	443b      	add	r3, r7
 800a794:	9309      	str	r3, [sp, #36]	; 0x24
 800a796:	e767      	b.n	800a668 <_vfiprintf_r+0x94>
 800a798:	460c      	mov	r4, r1
 800a79a:	2001      	movs	r0, #1
 800a79c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7a0:	e7a5      	b.n	800a6ee <_vfiprintf_r+0x11a>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f04f 0c0a 	mov.w	ip, #10
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	3401      	adds	r4, #1
 800a7ac:	9305      	str	r3, [sp, #20]
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7b4:	3a30      	subs	r2, #48	; 0x30
 800a7b6:	2a09      	cmp	r2, #9
 800a7b8:	d903      	bls.n	800a7c2 <_vfiprintf_r+0x1ee>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0c5      	beq.n	800a74a <_vfiprintf_r+0x176>
 800a7be:	9105      	str	r1, [sp, #20]
 800a7c0:	e7c3      	b.n	800a74a <_vfiprintf_r+0x176>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7ca:	e7f0      	b.n	800a7ae <_vfiprintf_r+0x1da>
 800a7cc:	ab03      	add	r3, sp, #12
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	462a      	mov	r2, r5
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4b16      	ldr	r3, [pc, #88]	; (800a830 <_vfiprintf_r+0x25c>)
 800a7d6:	a904      	add	r1, sp, #16
 800a7d8:	f7fd fdc8 	bl	800836c <_printf_float>
 800a7dc:	4607      	mov	r7, r0
 800a7de:	1c78      	adds	r0, r7, #1
 800a7e0:	d1d6      	bne.n	800a790 <_vfiprintf_r+0x1bc>
 800a7e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e4:	07d9      	lsls	r1, r3, #31
 800a7e6:	d405      	bmi.n	800a7f4 <_vfiprintf_r+0x220>
 800a7e8:	89ab      	ldrh	r3, [r5, #12]
 800a7ea:	059a      	lsls	r2, r3, #22
 800a7ec:	d402      	bmi.n	800a7f4 <_vfiprintf_r+0x220>
 800a7ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f0:	f000 faab 	bl	800ad4a <__retarget_lock_release_recursive>
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	065b      	lsls	r3, r3, #25
 800a7f8:	f53f af12 	bmi.w	800a620 <_vfiprintf_r+0x4c>
 800a7fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7fe:	e711      	b.n	800a624 <_vfiprintf_r+0x50>
 800a800:	ab03      	add	r3, sp, #12
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	462a      	mov	r2, r5
 800a806:	4630      	mov	r0, r6
 800a808:	4b09      	ldr	r3, [pc, #36]	; (800a830 <_vfiprintf_r+0x25c>)
 800a80a:	a904      	add	r1, sp, #16
 800a80c:	f7fe f84a 	bl	80088a4 <_printf_i>
 800a810:	e7e4      	b.n	800a7dc <_vfiprintf_r+0x208>
 800a812:	bf00      	nop
 800a814:	0800b74c 	.word	0x0800b74c
 800a818:	0800b76c 	.word	0x0800b76c
 800a81c:	0800b72c 	.word	0x0800b72c
 800a820:	0800b5d4 	.word	0x0800b5d4
 800a824:	0800b5da 	.word	0x0800b5da
 800a828:	0800b5de 	.word	0x0800b5de
 800a82c:	0800836d 	.word	0x0800836d
 800a830:	0800a5b1 	.word	0x0800a5b1

0800a834 <__swbuf_r>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	460e      	mov	r6, r1
 800a838:	4614      	mov	r4, r2
 800a83a:	4605      	mov	r5, r0
 800a83c:	b118      	cbz	r0, 800a846 <__swbuf_r+0x12>
 800a83e:	6983      	ldr	r3, [r0, #24]
 800a840:	b90b      	cbnz	r3, 800a846 <__swbuf_r+0x12>
 800a842:	f000 f9e3 	bl	800ac0c <__sinit>
 800a846:	4b21      	ldr	r3, [pc, #132]	; (800a8cc <__swbuf_r+0x98>)
 800a848:	429c      	cmp	r4, r3
 800a84a:	d12b      	bne.n	800a8a4 <__swbuf_r+0x70>
 800a84c:	686c      	ldr	r4, [r5, #4]
 800a84e:	69a3      	ldr	r3, [r4, #24]
 800a850:	60a3      	str	r3, [r4, #8]
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	071a      	lsls	r2, r3, #28
 800a856:	d52f      	bpl.n	800a8b8 <__swbuf_r+0x84>
 800a858:	6923      	ldr	r3, [r4, #16]
 800a85a:	b36b      	cbz	r3, 800a8b8 <__swbuf_r+0x84>
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	6820      	ldr	r0, [r4, #0]
 800a860:	b2f6      	uxtb	r6, r6
 800a862:	1ac0      	subs	r0, r0, r3
 800a864:	6963      	ldr	r3, [r4, #20]
 800a866:	4637      	mov	r7, r6
 800a868:	4283      	cmp	r3, r0
 800a86a:	dc04      	bgt.n	800a876 <__swbuf_r+0x42>
 800a86c:	4621      	mov	r1, r4
 800a86e:	4628      	mov	r0, r5
 800a870:	f000 f938 	bl	800aae4 <_fflush_r>
 800a874:	bb30      	cbnz	r0, 800a8c4 <__swbuf_r+0x90>
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	3001      	adds	r0, #1
 800a87a:	3b01      	subs	r3, #1
 800a87c:	60a3      	str	r3, [r4, #8]
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	701e      	strb	r6, [r3, #0]
 800a886:	6963      	ldr	r3, [r4, #20]
 800a888:	4283      	cmp	r3, r0
 800a88a:	d004      	beq.n	800a896 <__swbuf_r+0x62>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	07db      	lsls	r3, r3, #31
 800a890:	d506      	bpl.n	800a8a0 <__swbuf_r+0x6c>
 800a892:	2e0a      	cmp	r6, #10
 800a894:	d104      	bne.n	800a8a0 <__swbuf_r+0x6c>
 800a896:	4621      	mov	r1, r4
 800a898:	4628      	mov	r0, r5
 800a89a:	f000 f923 	bl	800aae4 <_fflush_r>
 800a89e:	b988      	cbnz	r0, 800a8c4 <__swbuf_r+0x90>
 800a8a0:	4638      	mov	r0, r7
 800a8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <__swbuf_r+0x9c>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <__swbuf_r+0x7a>
 800a8aa:	68ac      	ldr	r4, [r5, #8]
 800a8ac:	e7cf      	b.n	800a84e <__swbuf_r+0x1a>
 800a8ae:	4b09      	ldr	r3, [pc, #36]	; (800a8d4 <__swbuf_r+0xa0>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68ec      	ldreq	r4, [r5, #12]
 800a8b6:	e7ca      	b.n	800a84e <__swbuf_r+0x1a>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f81a 	bl	800a8f4 <__swsetup_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0cb      	beq.n	800a85c <__swbuf_r+0x28>
 800a8c4:	f04f 37ff 	mov.w	r7, #4294967295
 800a8c8:	e7ea      	b.n	800a8a0 <__swbuf_r+0x6c>
 800a8ca:	bf00      	nop
 800a8cc:	0800b74c 	.word	0x0800b74c
 800a8d0:	0800b76c 	.word	0x0800b76c
 800a8d4:	0800b72c 	.word	0x0800b72c

0800a8d8 <__ascii_wctomb>:
 800a8d8:	4603      	mov	r3, r0
 800a8da:	4608      	mov	r0, r1
 800a8dc:	b141      	cbz	r1, 800a8f0 <__ascii_wctomb+0x18>
 800a8de:	2aff      	cmp	r2, #255	; 0xff
 800a8e0:	d904      	bls.n	800a8ec <__ascii_wctomb+0x14>
 800a8e2:	228a      	movs	r2, #138	; 0x8a
 800a8e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	4770      	bx	lr
 800a8ec:	2001      	movs	r0, #1
 800a8ee:	700a      	strb	r2, [r1, #0]
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <__swsetup_r>:
 800a8f4:	4b32      	ldr	r3, [pc, #200]	; (800a9c0 <__swsetup_r+0xcc>)
 800a8f6:	b570      	push	{r4, r5, r6, lr}
 800a8f8:	681d      	ldr	r5, [r3, #0]
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	b125      	cbz	r5, 800a90a <__swsetup_r+0x16>
 800a900:	69ab      	ldr	r3, [r5, #24]
 800a902:	b913      	cbnz	r3, 800a90a <__swsetup_r+0x16>
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f981 	bl	800ac0c <__sinit>
 800a90a:	4b2e      	ldr	r3, [pc, #184]	; (800a9c4 <__swsetup_r+0xd0>)
 800a90c:	429c      	cmp	r4, r3
 800a90e:	d10f      	bne.n	800a930 <__swsetup_r+0x3c>
 800a910:	686c      	ldr	r4, [r5, #4]
 800a912:	89a3      	ldrh	r3, [r4, #12]
 800a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	d42c      	bmi.n	800a976 <__swsetup_r+0x82>
 800a91c:	06dd      	lsls	r5, r3, #27
 800a91e:	d411      	bmi.n	800a944 <__swsetup_r+0x50>
 800a920:	2309      	movs	r3, #9
 800a922:	6033      	str	r3, [r6, #0]
 800a924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a928:	f04f 30ff 	mov.w	r0, #4294967295
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	e03e      	b.n	800a9ae <__swsetup_r+0xba>
 800a930:	4b25      	ldr	r3, [pc, #148]	; (800a9c8 <__swsetup_r+0xd4>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d101      	bne.n	800a93a <__swsetup_r+0x46>
 800a936:	68ac      	ldr	r4, [r5, #8]
 800a938:	e7eb      	b.n	800a912 <__swsetup_r+0x1e>
 800a93a:	4b24      	ldr	r3, [pc, #144]	; (800a9cc <__swsetup_r+0xd8>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	bf08      	it	eq
 800a940:	68ec      	ldreq	r4, [r5, #12]
 800a942:	e7e6      	b.n	800a912 <__swsetup_r+0x1e>
 800a944:	0758      	lsls	r0, r3, #29
 800a946:	d512      	bpl.n	800a96e <__swsetup_r+0x7a>
 800a948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94a:	b141      	cbz	r1, 800a95e <__swsetup_r+0x6a>
 800a94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a950:	4299      	cmp	r1, r3
 800a952:	d002      	beq.n	800a95a <__swsetup_r+0x66>
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff fb37 	bl	8009fc8 <_free_r>
 800a95a:	2300      	movs	r3, #0
 800a95c:	6363      	str	r3, [r4, #52]	; 0x34
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	2300      	movs	r3, #0
 800a968:	6063      	str	r3, [r4, #4]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	6023      	str	r3, [r4, #0]
 800a96e:	89a3      	ldrh	r3, [r4, #12]
 800a970:	f043 0308 	orr.w	r3, r3, #8
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	b94b      	cbnz	r3, 800a98e <__swsetup_r+0x9a>
 800a97a:	89a3      	ldrh	r3, [r4, #12]
 800a97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a984:	d003      	beq.n	800a98e <__swsetup_r+0x9a>
 800a986:	4621      	mov	r1, r4
 800a988:	4630      	mov	r0, r6
 800a98a:	f000 fa05 	bl	800ad98 <__smakebuf_r>
 800a98e:	89a0      	ldrh	r0, [r4, #12]
 800a990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a994:	f010 0301 	ands.w	r3, r0, #1
 800a998:	d00a      	beq.n	800a9b0 <__swsetup_r+0xbc>
 800a99a:	2300      	movs	r3, #0
 800a99c:	60a3      	str	r3, [r4, #8]
 800a99e:	6963      	ldr	r3, [r4, #20]
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	61a3      	str	r3, [r4, #24]
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	b943      	cbnz	r3, 800a9ba <__swsetup_r+0xc6>
 800a9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9ac:	d1ba      	bne.n	800a924 <__swsetup_r+0x30>
 800a9ae:	bd70      	pop	{r4, r5, r6, pc}
 800a9b0:	0781      	lsls	r1, r0, #30
 800a9b2:	bf58      	it	pl
 800a9b4:	6963      	ldrpl	r3, [r4, #20]
 800a9b6:	60a3      	str	r3, [r4, #8]
 800a9b8:	e7f4      	b.n	800a9a4 <__swsetup_r+0xb0>
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7f7      	b.n	800a9ae <__swsetup_r+0xba>
 800a9be:	bf00      	nop
 800a9c0:	20000040 	.word	0x20000040
 800a9c4:	0800b74c 	.word	0x0800b74c
 800a9c8:	0800b76c 	.word	0x0800b76c
 800a9cc:	0800b72c 	.word	0x0800b72c

0800a9d0 <abort>:
 800a9d0:	2006      	movs	r0, #6
 800a9d2:	b508      	push	{r3, lr}
 800a9d4:	f000 fa50 	bl	800ae78 <raise>
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f7f8 f856 	bl	8002a8a <_exit>
	...

0800a9e0 <__sflush_r>:
 800a9e0:	898a      	ldrh	r2, [r1, #12]
 800a9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e4:	4605      	mov	r5, r0
 800a9e6:	0710      	lsls	r0, r2, #28
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	d457      	bmi.n	800aa9c <__sflush_r+0xbc>
 800a9ec:	684b      	ldr	r3, [r1, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dc04      	bgt.n	800a9fc <__sflush_r+0x1c>
 800a9f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc01      	bgt.n	800a9fc <__sflush_r+0x1c>
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	d0fa      	beq.n	800a9f8 <__sflush_r+0x18>
 800aa02:	2300      	movs	r3, #0
 800aa04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa08:	682f      	ldr	r7, [r5, #0]
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	d032      	beq.n	800aa74 <__sflush_r+0x94>
 800aa0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa10:	89a3      	ldrh	r3, [r4, #12]
 800aa12:	075a      	lsls	r2, r3, #29
 800aa14:	d505      	bpl.n	800aa22 <__sflush_r+0x42>
 800aa16:	6863      	ldr	r3, [r4, #4]
 800aa18:	1ac0      	subs	r0, r0, r3
 800aa1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa1c:	b10b      	cbz	r3, 800aa22 <__sflush_r+0x42>
 800aa1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa20:	1ac0      	subs	r0, r0, r3
 800aa22:	2300      	movs	r3, #0
 800aa24:	4602      	mov	r2, r0
 800aa26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa28:	4628      	mov	r0, r5
 800aa2a:	6a21      	ldr	r1, [r4, #32]
 800aa2c:	47b0      	blx	r6
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	d106      	bne.n	800aa42 <__sflush_r+0x62>
 800aa34:	6829      	ldr	r1, [r5, #0]
 800aa36:	291d      	cmp	r1, #29
 800aa38:	d82c      	bhi.n	800aa94 <__sflush_r+0xb4>
 800aa3a:	4a29      	ldr	r2, [pc, #164]	; (800aae0 <__sflush_r+0x100>)
 800aa3c:	40ca      	lsrs	r2, r1
 800aa3e:	07d6      	lsls	r6, r2, #31
 800aa40:	d528      	bpl.n	800aa94 <__sflush_r+0xb4>
 800aa42:	2200      	movs	r2, #0
 800aa44:	6062      	str	r2, [r4, #4]
 800aa46:	6922      	ldr	r2, [r4, #16]
 800aa48:	04d9      	lsls	r1, r3, #19
 800aa4a:	6022      	str	r2, [r4, #0]
 800aa4c:	d504      	bpl.n	800aa58 <__sflush_r+0x78>
 800aa4e:	1c42      	adds	r2, r0, #1
 800aa50:	d101      	bne.n	800aa56 <__sflush_r+0x76>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	b903      	cbnz	r3, 800aa58 <__sflush_r+0x78>
 800aa56:	6560      	str	r0, [r4, #84]	; 0x54
 800aa58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa5a:	602f      	str	r7, [r5, #0]
 800aa5c:	2900      	cmp	r1, #0
 800aa5e:	d0cb      	beq.n	800a9f8 <__sflush_r+0x18>
 800aa60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa64:	4299      	cmp	r1, r3
 800aa66:	d002      	beq.n	800aa6e <__sflush_r+0x8e>
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f7ff faad 	bl	8009fc8 <_free_r>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	6360      	str	r0, [r4, #52]	; 0x34
 800aa72:	e7c2      	b.n	800a9fa <__sflush_r+0x1a>
 800aa74:	6a21      	ldr	r1, [r4, #32]
 800aa76:	2301      	movs	r3, #1
 800aa78:	4628      	mov	r0, r5
 800aa7a:	47b0      	blx	r6
 800aa7c:	1c41      	adds	r1, r0, #1
 800aa7e:	d1c7      	bne.n	800aa10 <__sflush_r+0x30>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d0c4      	beq.n	800aa10 <__sflush_r+0x30>
 800aa86:	2b1d      	cmp	r3, #29
 800aa88:	d001      	beq.n	800aa8e <__sflush_r+0xae>
 800aa8a:	2b16      	cmp	r3, #22
 800aa8c:	d101      	bne.n	800aa92 <__sflush_r+0xb2>
 800aa8e:	602f      	str	r7, [r5, #0]
 800aa90:	e7b2      	b.n	800a9f8 <__sflush_r+0x18>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa98:	81a3      	strh	r3, [r4, #12]
 800aa9a:	e7ae      	b.n	800a9fa <__sflush_r+0x1a>
 800aa9c:	690f      	ldr	r7, [r1, #16]
 800aa9e:	2f00      	cmp	r7, #0
 800aaa0:	d0aa      	beq.n	800a9f8 <__sflush_r+0x18>
 800aaa2:	0793      	lsls	r3, r2, #30
 800aaa4:	bf18      	it	ne
 800aaa6:	2300      	movne	r3, #0
 800aaa8:	680e      	ldr	r6, [r1, #0]
 800aaaa:	bf08      	it	eq
 800aaac:	694b      	ldreq	r3, [r1, #20]
 800aaae:	1bf6      	subs	r6, r6, r7
 800aab0:	600f      	str	r7, [r1, #0]
 800aab2:	608b      	str	r3, [r1, #8]
 800aab4:	2e00      	cmp	r6, #0
 800aab6:	dd9f      	ble.n	800a9f8 <__sflush_r+0x18>
 800aab8:	4633      	mov	r3, r6
 800aaba:	463a      	mov	r2, r7
 800aabc:	4628      	mov	r0, r5
 800aabe:	6a21      	ldr	r1, [r4, #32]
 800aac0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aac4:	47e0      	blx	ip
 800aac6:	2800      	cmp	r0, #0
 800aac8:	dc06      	bgt.n	800aad8 <__sflush_r+0xf8>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f04f 30ff 	mov.w	r0, #4294967295
 800aad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	e790      	b.n	800a9fa <__sflush_r+0x1a>
 800aad8:	4407      	add	r7, r0
 800aada:	1a36      	subs	r6, r6, r0
 800aadc:	e7ea      	b.n	800aab4 <__sflush_r+0xd4>
 800aade:	bf00      	nop
 800aae0:	20400001 	.word	0x20400001

0800aae4 <_fflush_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	690b      	ldr	r3, [r1, #16]
 800aae8:	4605      	mov	r5, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b913      	cbnz	r3, 800aaf4 <_fflush_r+0x10>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	bd38      	pop	{r3, r4, r5, pc}
 800aaf4:	b118      	cbz	r0, 800aafe <_fflush_r+0x1a>
 800aaf6:	6983      	ldr	r3, [r0, #24]
 800aaf8:	b90b      	cbnz	r3, 800aafe <_fflush_r+0x1a>
 800aafa:	f000 f887 	bl	800ac0c <__sinit>
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <_fflush_r+0x6c>)
 800ab00:	429c      	cmp	r4, r3
 800ab02:	d11b      	bne.n	800ab3c <_fflush_r+0x58>
 800ab04:	686c      	ldr	r4, [r5, #4]
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0ef      	beq.n	800aaee <_fflush_r+0xa>
 800ab0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab10:	07d0      	lsls	r0, r2, #31
 800ab12:	d404      	bmi.n	800ab1e <_fflush_r+0x3a>
 800ab14:	0599      	lsls	r1, r3, #22
 800ab16:	d402      	bmi.n	800ab1e <_fflush_r+0x3a>
 800ab18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab1a:	f000 f915 	bl	800ad48 <__retarget_lock_acquire_recursive>
 800ab1e:	4628      	mov	r0, r5
 800ab20:	4621      	mov	r1, r4
 800ab22:	f7ff ff5d 	bl	800a9e0 <__sflush_r>
 800ab26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab28:	4605      	mov	r5, r0
 800ab2a:	07da      	lsls	r2, r3, #31
 800ab2c:	d4e0      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab2e:	89a3      	ldrh	r3, [r4, #12]
 800ab30:	059b      	lsls	r3, r3, #22
 800ab32:	d4dd      	bmi.n	800aaf0 <_fflush_r+0xc>
 800ab34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab36:	f000 f908 	bl	800ad4a <__retarget_lock_release_recursive>
 800ab3a:	e7d9      	b.n	800aaf0 <_fflush_r+0xc>
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <_fflush_r+0x70>)
 800ab3e:	429c      	cmp	r4, r3
 800ab40:	d101      	bne.n	800ab46 <_fflush_r+0x62>
 800ab42:	68ac      	ldr	r4, [r5, #8]
 800ab44:	e7df      	b.n	800ab06 <_fflush_r+0x22>
 800ab46:	4b04      	ldr	r3, [pc, #16]	; (800ab58 <_fflush_r+0x74>)
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	bf08      	it	eq
 800ab4c:	68ec      	ldreq	r4, [r5, #12]
 800ab4e:	e7da      	b.n	800ab06 <_fflush_r+0x22>
 800ab50:	0800b74c 	.word	0x0800b74c
 800ab54:	0800b76c 	.word	0x0800b76c
 800ab58:	0800b72c 	.word	0x0800b72c

0800ab5c <std>:
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	4604      	mov	r4, r0
 800ab62:	e9c0 3300 	strd	r3, r3, [r0]
 800ab66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab6a:	6083      	str	r3, [r0, #8]
 800ab6c:	8181      	strh	r1, [r0, #12]
 800ab6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ab70:	81c2      	strh	r2, [r0, #14]
 800ab72:	6183      	str	r3, [r0, #24]
 800ab74:	4619      	mov	r1, r3
 800ab76:	2208      	movs	r2, #8
 800ab78:	305c      	adds	r0, #92	; 0x5c
 800ab7a:	f7fd fb51 	bl	8008220 <memset>
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <std+0x38>)
 800ab80:	6224      	str	r4, [r4, #32]
 800ab82:	6263      	str	r3, [r4, #36]	; 0x24
 800ab84:	4b04      	ldr	r3, [pc, #16]	; (800ab98 <std+0x3c>)
 800ab86:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <std+0x40>)
 800ab8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab8c:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <std+0x44>)
 800ab8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	bf00      	nop
 800ab94:	0800aeb1 	.word	0x0800aeb1
 800ab98:	0800aed3 	.word	0x0800aed3
 800ab9c:	0800af0b 	.word	0x0800af0b
 800aba0:	0800af2f 	.word	0x0800af2f

0800aba4 <_cleanup_r>:
 800aba4:	4901      	ldr	r1, [pc, #4]	; (800abac <_cleanup_r+0x8>)
 800aba6:	f000 b8af 	b.w	800ad08 <_fwalk_reent>
 800abaa:	bf00      	nop
 800abac:	0800aae5 	.word	0x0800aae5

0800abb0 <__sfmoreglue>:
 800abb0:	2268      	movs	r2, #104	; 0x68
 800abb2:	b570      	push	{r4, r5, r6, lr}
 800abb4:	1e4d      	subs	r5, r1, #1
 800abb6:	4355      	muls	r5, r2
 800abb8:	460e      	mov	r6, r1
 800abba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800abbe:	f7ff fa6b 	bl	800a098 <_malloc_r>
 800abc2:	4604      	mov	r4, r0
 800abc4:	b140      	cbz	r0, 800abd8 <__sfmoreglue+0x28>
 800abc6:	2100      	movs	r1, #0
 800abc8:	e9c0 1600 	strd	r1, r6, [r0]
 800abcc:	300c      	adds	r0, #12
 800abce:	60a0      	str	r0, [r4, #8]
 800abd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800abd4:	f7fd fb24 	bl	8008220 <memset>
 800abd8:	4620      	mov	r0, r4
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__sfp_lock_acquire>:
 800abdc:	4801      	ldr	r0, [pc, #4]	; (800abe4 <__sfp_lock_acquire+0x8>)
 800abde:	f000 b8b3 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800abe2:	bf00      	nop
 800abe4:	200004f5 	.word	0x200004f5

0800abe8 <__sfp_lock_release>:
 800abe8:	4801      	ldr	r0, [pc, #4]	; (800abf0 <__sfp_lock_release+0x8>)
 800abea:	f000 b8ae 	b.w	800ad4a <__retarget_lock_release_recursive>
 800abee:	bf00      	nop
 800abf0:	200004f5 	.word	0x200004f5

0800abf4 <__sinit_lock_acquire>:
 800abf4:	4801      	ldr	r0, [pc, #4]	; (800abfc <__sinit_lock_acquire+0x8>)
 800abf6:	f000 b8a7 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800abfa:	bf00      	nop
 800abfc:	200004f6 	.word	0x200004f6

0800ac00 <__sinit_lock_release>:
 800ac00:	4801      	ldr	r0, [pc, #4]	; (800ac08 <__sinit_lock_release+0x8>)
 800ac02:	f000 b8a2 	b.w	800ad4a <__retarget_lock_release_recursive>
 800ac06:	bf00      	nop
 800ac08:	200004f6 	.word	0x200004f6

0800ac0c <__sinit>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	4604      	mov	r4, r0
 800ac10:	f7ff fff0 	bl	800abf4 <__sinit_lock_acquire>
 800ac14:	69a3      	ldr	r3, [r4, #24]
 800ac16:	b11b      	cbz	r3, 800ac20 <__sinit+0x14>
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f7ff bff0 	b.w	800ac00 <__sinit_lock_release>
 800ac20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac24:	6523      	str	r3, [r4, #80]	; 0x50
 800ac26:	4b13      	ldr	r3, [pc, #76]	; (800ac74 <__sinit+0x68>)
 800ac28:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <__sinit+0x6c>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	bf08      	it	eq
 800ac32:	2301      	moveq	r3, #1
 800ac34:	4620      	mov	r0, r4
 800ac36:	bf08      	it	eq
 800ac38:	61a3      	streq	r3, [r4, #24]
 800ac3a:	f000 f81f 	bl	800ac7c <__sfp>
 800ac3e:	6060      	str	r0, [r4, #4]
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 f81b 	bl	800ac7c <__sfp>
 800ac46:	60a0      	str	r0, [r4, #8]
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f000 f817 	bl	800ac7c <__sfp>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2104      	movs	r1, #4
 800ac52:	60e0      	str	r0, [r4, #12]
 800ac54:	6860      	ldr	r0, [r4, #4]
 800ac56:	f7ff ff81 	bl	800ab5c <std>
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	2109      	movs	r1, #9
 800ac5e:	68a0      	ldr	r0, [r4, #8]
 800ac60:	f7ff ff7c 	bl	800ab5c <std>
 800ac64:	2202      	movs	r2, #2
 800ac66:	2112      	movs	r1, #18
 800ac68:	68e0      	ldr	r0, [r4, #12]
 800ac6a:	f7ff ff77 	bl	800ab5c <std>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	61a3      	str	r3, [r4, #24]
 800ac72:	e7d1      	b.n	800ac18 <__sinit+0xc>
 800ac74:	0800b3b4 	.word	0x0800b3b4
 800ac78:	0800aba5 	.word	0x0800aba5

0800ac7c <__sfp>:
 800ac7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7e:	4607      	mov	r7, r0
 800ac80:	f7ff ffac 	bl	800abdc <__sfp_lock_acquire>
 800ac84:	4b1e      	ldr	r3, [pc, #120]	; (800ad00 <__sfp+0x84>)
 800ac86:	681e      	ldr	r6, [r3, #0]
 800ac88:	69b3      	ldr	r3, [r6, #24]
 800ac8a:	b913      	cbnz	r3, 800ac92 <__sfp+0x16>
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f7ff ffbd 	bl	800ac0c <__sinit>
 800ac92:	3648      	adds	r6, #72	; 0x48
 800ac94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	d503      	bpl.n	800aca4 <__sfp+0x28>
 800ac9c:	6833      	ldr	r3, [r6, #0]
 800ac9e:	b30b      	cbz	r3, 800ace4 <__sfp+0x68>
 800aca0:	6836      	ldr	r6, [r6, #0]
 800aca2:	e7f7      	b.n	800ac94 <__sfp+0x18>
 800aca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aca8:	b9d5      	cbnz	r5, 800ace0 <__sfp+0x64>
 800acaa:	4b16      	ldr	r3, [pc, #88]	; (800ad04 <__sfp+0x88>)
 800acac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acb0:	60e3      	str	r3, [r4, #12]
 800acb2:	6665      	str	r5, [r4, #100]	; 0x64
 800acb4:	f000 f847 	bl	800ad46 <__retarget_lock_init_recursive>
 800acb8:	f7ff ff96 	bl	800abe8 <__sfp_lock_release>
 800acbc:	2208      	movs	r2, #8
 800acbe:	4629      	mov	r1, r5
 800acc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800acc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800acc8:	6025      	str	r5, [r4, #0]
 800acca:	61a5      	str	r5, [r4, #24]
 800accc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800acd0:	f7fd faa6 	bl	8008220 <memset>
 800acd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800acd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800acdc:	4620      	mov	r0, r4
 800acde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ace0:	3468      	adds	r4, #104	; 0x68
 800ace2:	e7d9      	b.n	800ac98 <__sfp+0x1c>
 800ace4:	2104      	movs	r1, #4
 800ace6:	4638      	mov	r0, r7
 800ace8:	f7ff ff62 	bl	800abb0 <__sfmoreglue>
 800acec:	4604      	mov	r4, r0
 800acee:	6030      	str	r0, [r6, #0]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	d1d5      	bne.n	800aca0 <__sfp+0x24>
 800acf4:	f7ff ff78 	bl	800abe8 <__sfp_lock_release>
 800acf8:	230c      	movs	r3, #12
 800acfa:	603b      	str	r3, [r7, #0]
 800acfc:	e7ee      	b.n	800acdc <__sfp+0x60>
 800acfe:	bf00      	nop
 800ad00:	0800b3b4 	.word	0x0800b3b4
 800ad04:	ffff0001 	.word	0xffff0001

0800ad08 <_fwalk_reent>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4606      	mov	r6, r0
 800ad0e:	4688      	mov	r8, r1
 800ad10:	2700      	movs	r7, #0
 800ad12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1e:	d505      	bpl.n	800ad2c <_fwalk_reent+0x24>
 800ad20:	6824      	ldr	r4, [r4, #0]
 800ad22:	2c00      	cmp	r4, #0
 800ad24:	d1f7      	bne.n	800ad16 <_fwalk_reent+0xe>
 800ad26:	4638      	mov	r0, r7
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2c:	89ab      	ldrh	r3, [r5, #12]
 800ad2e:	2b01      	cmp	r3, #1
 800ad30:	d907      	bls.n	800ad42 <_fwalk_reent+0x3a>
 800ad32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad36:	3301      	adds	r3, #1
 800ad38:	d003      	beq.n	800ad42 <_fwalk_reent+0x3a>
 800ad3a:	4629      	mov	r1, r5
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	47c0      	blx	r8
 800ad40:	4307      	orrs	r7, r0
 800ad42:	3568      	adds	r5, #104	; 0x68
 800ad44:	e7e9      	b.n	800ad1a <_fwalk_reent+0x12>

0800ad46 <__retarget_lock_init_recursive>:
 800ad46:	4770      	bx	lr

0800ad48 <__retarget_lock_acquire_recursive>:
 800ad48:	4770      	bx	lr

0800ad4a <__retarget_lock_release_recursive>:
 800ad4a:	4770      	bx	lr

0800ad4c <__swhatbuf_r>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	460e      	mov	r6, r1
 800ad50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad54:	4614      	mov	r4, r2
 800ad56:	2900      	cmp	r1, #0
 800ad58:	461d      	mov	r5, r3
 800ad5a:	b096      	sub	sp, #88	; 0x58
 800ad5c:	da08      	bge.n	800ad70 <__swhatbuf_r+0x24>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	061a      	lsls	r2, r3, #24
 800ad68:	d410      	bmi.n	800ad8c <__swhatbuf_r+0x40>
 800ad6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6e:	e00e      	b.n	800ad8e <__swhatbuf_r+0x42>
 800ad70:	466a      	mov	r2, sp
 800ad72:	f000 f903 	bl	800af7c <_fstat_r>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	dbf1      	blt.n	800ad5e <__swhatbuf_r+0x12>
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad84:	425a      	negs	r2, r3
 800ad86:	415a      	adcs	r2, r3
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	e7ee      	b.n	800ad6a <__swhatbuf_r+0x1e>
 800ad8c:	2340      	movs	r3, #64	; 0x40
 800ad8e:	2000      	movs	r0, #0
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	b016      	add	sp, #88	; 0x58
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad98 <__smakebuf_r>:
 800ad98:	898b      	ldrh	r3, [r1, #12]
 800ad9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad9c:	079d      	lsls	r5, r3, #30
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460c      	mov	r4, r1
 800ada2:	d507      	bpl.n	800adb4 <__smakebuf_r+0x1c>
 800ada4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	2301      	movs	r3, #1
 800adae:	6163      	str	r3, [r4, #20]
 800adb0:	b002      	add	sp, #8
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	466a      	mov	r2, sp
 800adb6:	ab01      	add	r3, sp, #4
 800adb8:	f7ff ffc8 	bl	800ad4c <__swhatbuf_r>
 800adbc:	9900      	ldr	r1, [sp, #0]
 800adbe:	4605      	mov	r5, r0
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff f969 	bl	800a098 <_malloc_r>
 800adc6:	b948      	cbnz	r0, 800addc <__smakebuf_r+0x44>
 800adc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d4ef      	bmi.n	800adb0 <__smakebuf_r+0x18>
 800add0:	f023 0303 	bic.w	r3, r3, #3
 800add4:	f043 0302 	orr.w	r3, r3, #2
 800add8:	81a3      	strh	r3, [r4, #12]
 800adda:	e7e3      	b.n	800ada4 <__smakebuf_r+0xc>
 800addc:	4b0d      	ldr	r3, [pc, #52]	; (800ae14 <__smakebuf_r+0x7c>)
 800adde:	62b3      	str	r3, [r6, #40]	; 0x28
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	6020      	str	r0, [r4, #0]
 800ade4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ade8:	81a3      	strh	r3, [r4, #12]
 800adea:	9b00      	ldr	r3, [sp, #0]
 800adec:	6120      	str	r0, [r4, #16]
 800adee:	6163      	str	r3, [r4, #20]
 800adf0:	9b01      	ldr	r3, [sp, #4]
 800adf2:	b15b      	cbz	r3, 800ae0c <__smakebuf_r+0x74>
 800adf4:	4630      	mov	r0, r6
 800adf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adfa:	f000 f8d1 	bl	800afa0 <_isatty_r>
 800adfe:	b128      	cbz	r0, 800ae0c <__smakebuf_r+0x74>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f023 0303 	bic.w	r3, r3, #3
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	89a0      	ldrh	r0, [r4, #12]
 800ae0e:	4305      	orrs	r5, r0
 800ae10:	81a5      	strh	r5, [r4, #12]
 800ae12:	e7cd      	b.n	800adb0 <__smakebuf_r+0x18>
 800ae14:	0800aba5 	.word	0x0800aba5

0800ae18 <_malloc_usable_size_r>:
 800ae18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae1c:	1f18      	subs	r0, r3, #4
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bfbc      	itt	lt
 800ae22:	580b      	ldrlt	r3, [r1, r0]
 800ae24:	18c0      	addlt	r0, r0, r3
 800ae26:	4770      	bx	lr

0800ae28 <_raise_r>:
 800ae28:	291f      	cmp	r1, #31
 800ae2a:	b538      	push	{r3, r4, r5, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	d904      	bls.n	800ae3c <_raise_r+0x14>
 800ae32:	2316      	movs	r3, #22
 800ae34:	6003      	str	r3, [r0, #0]
 800ae36:	f04f 30ff 	mov.w	r0, #4294967295
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae3e:	b112      	cbz	r2, 800ae46 <_raise_r+0x1e>
 800ae40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae44:	b94b      	cbnz	r3, 800ae5a <_raise_r+0x32>
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f830 	bl	800aeac <_getpid_r>
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4601      	mov	r1, r0
 800ae50:	4620      	mov	r0, r4
 800ae52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae56:	f000 b817 	b.w	800ae88 <_kill_r>
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d00a      	beq.n	800ae74 <_raise_r+0x4c>
 800ae5e:	1c59      	adds	r1, r3, #1
 800ae60:	d103      	bne.n	800ae6a <_raise_r+0x42>
 800ae62:	2316      	movs	r3, #22
 800ae64:	6003      	str	r3, [r0, #0]
 800ae66:	2001      	movs	r0, #1
 800ae68:	e7e7      	b.n	800ae3a <_raise_r+0x12>
 800ae6a:	2400      	movs	r4, #0
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae72:	4798      	blx	r3
 800ae74:	2000      	movs	r0, #0
 800ae76:	e7e0      	b.n	800ae3a <_raise_r+0x12>

0800ae78 <raise>:
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <raise+0xc>)
 800ae7a:	4601      	mov	r1, r0
 800ae7c:	6818      	ldr	r0, [r3, #0]
 800ae7e:	f7ff bfd3 	b.w	800ae28 <_raise_r>
 800ae82:	bf00      	nop
 800ae84:	20000040 	.word	0x20000040

0800ae88 <_kill_r>:
 800ae88:	b538      	push	{r3, r4, r5, lr}
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	4d06      	ldr	r5, [pc, #24]	; (800aea8 <_kill_r+0x20>)
 800ae8e:	4604      	mov	r4, r0
 800ae90:	4608      	mov	r0, r1
 800ae92:	4611      	mov	r1, r2
 800ae94:	602b      	str	r3, [r5, #0]
 800ae96:	f7f7 fde8 	bl	8002a6a <_kill>
 800ae9a:	1c43      	adds	r3, r0, #1
 800ae9c:	d102      	bne.n	800aea4 <_kill_r+0x1c>
 800ae9e:	682b      	ldr	r3, [r5, #0]
 800aea0:	b103      	cbz	r3, 800aea4 <_kill_r+0x1c>
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	bf00      	nop
 800aea8:	200004f0 	.word	0x200004f0

0800aeac <_getpid_r>:
 800aeac:	f7f7 bdd6 	b.w	8002a5c <_getpid>

0800aeb0 <__sread>:
 800aeb0:	b510      	push	{r4, lr}
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb8:	f000 f894 	bl	800afe4 <_read_r>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	bfab      	itete	ge
 800aec0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aec2:	89a3      	ldrhlt	r3, [r4, #12]
 800aec4:	181b      	addge	r3, r3, r0
 800aec6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aeca:	bfac      	ite	ge
 800aecc:	6563      	strge	r3, [r4, #84]	; 0x54
 800aece:	81a3      	strhlt	r3, [r4, #12]
 800aed0:	bd10      	pop	{r4, pc}

0800aed2 <__swrite>:
 800aed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aed6:	461f      	mov	r7, r3
 800aed8:	898b      	ldrh	r3, [r1, #12]
 800aeda:	4605      	mov	r5, r0
 800aedc:	05db      	lsls	r3, r3, #23
 800aede:	460c      	mov	r4, r1
 800aee0:	4616      	mov	r6, r2
 800aee2:	d505      	bpl.n	800aef0 <__swrite+0x1e>
 800aee4:	2302      	movs	r3, #2
 800aee6:	2200      	movs	r2, #0
 800aee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeec:	f000 f868 	bl	800afc0 <_lseek_r>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	4632      	mov	r2, r6
 800aef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	4628      	mov	r0, r5
 800aefc:	463b      	mov	r3, r7
 800aefe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af06:	f000 b817 	b.w	800af38 <_write_r>

0800af0a <__sseek>:
 800af0a:	b510      	push	{r4, lr}
 800af0c:	460c      	mov	r4, r1
 800af0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af12:	f000 f855 	bl	800afc0 <_lseek_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	bf15      	itete	ne
 800af1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800af1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af26:	81a3      	strheq	r3, [r4, #12]
 800af28:	bf18      	it	ne
 800af2a:	81a3      	strhne	r3, [r4, #12]
 800af2c:	bd10      	pop	{r4, pc}

0800af2e <__sclose>:
 800af2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af32:	f000 b813 	b.w	800af5c <_close_r>
	...

0800af38 <_write_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	4604      	mov	r4, r0
 800af3c:	4608      	mov	r0, r1
 800af3e:	4611      	mov	r1, r2
 800af40:	2200      	movs	r2, #0
 800af42:	4d05      	ldr	r5, [pc, #20]	; (800af58 <_write_r+0x20>)
 800af44:	602a      	str	r2, [r5, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	f7f7 fdc6 	bl	8002ad8 <_write>
 800af4c:	1c43      	adds	r3, r0, #1
 800af4e:	d102      	bne.n	800af56 <_write_r+0x1e>
 800af50:	682b      	ldr	r3, [r5, #0]
 800af52:	b103      	cbz	r3, 800af56 <_write_r+0x1e>
 800af54:	6023      	str	r3, [r4, #0]
 800af56:	bd38      	pop	{r3, r4, r5, pc}
 800af58:	200004f0 	.word	0x200004f0

0800af5c <_close_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	2300      	movs	r3, #0
 800af60:	4d05      	ldr	r5, [pc, #20]	; (800af78 <_close_r+0x1c>)
 800af62:	4604      	mov	r4, r0
 800af64:	4608      	mov	r0, r1
 800af66:	602b      	str	r3, [r5, #0]
 800af68:	f7f7 fdd2 	bl	8002b10 <_close>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_close_r+0x1a>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_close_r+0x1a>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	200004f0 	.word	0x200004f0

0800af7c <_fstat_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	2300      	movs	r3, #0
 800af80:	4d06      	ldr	r5, [pc, #24]	; (800af9c <_fstat_r+0x20>)
 800af82:	4604      	mov	r4, r0
 800af84:	4608      	mov	r0, r1
 800af86:	4611      	mov	r1, r2
 800af88:	602b      	str	r3, [r5, #0]
 800af8a:	f7f7 fdcc 	bl	8002b26 <_fstat>
 800af8e:	1c43      	adds	r3, r0, #1
 800af90:	d102      	bne.n	800af98 <_fstat_r+0x1c>
 800af92:	682b      	ldr	r3, [r5, #0]
 800af94:	b103      	cbz	r3, 800af98 <_fstat_r+0x1c>
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	bd38      	pop	{r3, r4, r5, pc}
 800af9a:	bf00      	nop
 800af9c:	200004f0 	.word	0x200004f0

0800afa0 <_isatty_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	2300      	movs	r3, #0
 800afa4:	4d05      	ldr	r5, [pc, #20]	; (800afbc <_isatty_r+0x1c>)
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7f7 fdca 	bl	8002b44 <_isatty>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_isatty_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_isatty_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	200004f0 	.word	0x200004f0

0800afc0 <_lseek_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	4611      	mov	r1, r2
 800afc8:	2200      	movs	r2, #0
 800afca:	4d05      	ldr	r5, [pc, #20]	; (800afe0 <_lseek_r+0x20>)
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7f7 fdc2 	bl	8002b58 <_lseek>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_lseek_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_lseek_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	200004f0 	.word	0x200004f0

0800afe4 <_read_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4604      	mov	r4, r0
 800afe8:	4608      	mov	r0, r1
 800afea:	4611      	mov	r1, r2
 800afec:	2200      	movs	r2, #0
 800afee:	4d05      	ldr	r5, [pc, #20]	; (800b004 <_read_r+0x20>)
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f7 fd53 	bl	8002a9e <_read>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_read_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_read_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	200004f0 	.word	0x200004f0

0800b008 <sqrt>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	4606      	mov	r6, r0
 800b00c:	460f      	mov	r7, r1
 800b00e:	f000 f81f 	bl	800b050 <__ieee754_sqrt>
 800b012:	4632      	mov	r2, r6
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
 800b018:	463b      	mov	r3, r7
 800b01a:	4630      	mov	r0, r6
 800b01c:	4639      	mov	r1, r7
 800b01e:	f7f5 fcf5 	bl	8000a0c <__aeabi_dcmpun>
 800b022:	b990      	cbnz	r0, 800b04a <sqrt+0x42>
 800b024:	2200      	movs	r2, #0
 800b026:	2300      	movs	r3, #0
 800b028:	4630      	mov	r0, r6
 800b02a:	4639      	mov	r1, r7
 800b02c:	f7f5 fcc6 	bl	80009bc <__aeabi_dcmplt>
 800b030:	b158      	cbz	r0, 800b04a <sqrt+0x42>
 800b032:	f7fd f8cb 	bl	80081cc <__errno>
 800b036:	2321      	movs	r3, #33	; 0x21
 800b038:	2200      	movs	r2, #0
 800b03a:	6003      	str	r3, [r0, #0]
 800b03c:	2300      	movs	r3, #0
 800b03e:	4610      	mov	r0, r2
 800b040:	4619      	mov	r1, r3
 800b042:	f7f5 fb73 	bl	800072c <__aeabi_ddiv>
 800b046:	4604      	mov	r4, r0
 800b048:	460d      	mov	r5, r1
 800b04a:	4620      	mov	r0, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b050 <__ieee754_sqrt>:
 800b050:	f8df c158 	ldr.w	ip, [pc, #344]	; 800b1ac <__ieee754_sqrt+0x15c>
 800b054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b058:	ea3c 0c01 	bics.w	ip, ip, r1
 800b05c:	4606      	mov	r6, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	460c      	mov	r4, r1
 800b062:	460a      	mov	r2, r1
 800b064:	4607      	mov	r7, r0
 800b066:	4603      	mov	r3, r0
 800b068:	d10f      	bne.n	800b08a <__ieee754_sqrt+0x3a>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	f7f5 fa33 	bl	80004d8 <__aeabi_dmul>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4630      	mov	r0, r6
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 f877 	bl	800016c <__adddf3>
 800b07e:	4606      	mov	r6, r0
 800b080:	460d      	mov	r5, r1
 800b082:	4630      	mov	r0, r6
 800b084:	4629      	mov	r1, r5
 800b086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b08a:	2900      	cmp	r1, #0
 800b08c:	dc0e      	bgt.n	800b0ac <__ieee754_sqrt+0x5c>
 800b08e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b092:	ea5c 0707 	orrs.w	r7, ip, r7
 800b096:	d0f4      	beq.n	800b082 <__ieee754_sqrt+0x32>
 800b098:	b141      	cbz	r1, 800b0ac <__ieee754_sqrt+0x5c>
 800b09a:	4602      	mov	r2, r0
 800b09c:	460b      	mov	r3, r1
 800b09e:	f7f5 f863 	bl	8000168 <__aeabi_dsub>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	f7f5 fb41 	bl	800072c <__aeabi_ddiv>
 800b0aa:	e7e8      	b.n	800b07e <__ieee754_sqrt+0x2e>
 800b0ac:	1521      	asrs	r1, r4, #20
 800b0ae:	d075      	beq.n	800b19c <__ieee754_sqrt+0x14c>
 800b0b0:	07cc      	lsls	r4, r1, #31
 800b0b2:	f04f 0400 	mov.w	r4, #0
 800b0b6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b0ba:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b0be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b0c2:	bf5e      	ittt	pl
 800b0c4:	0fd9      	lsrpl	r1, r3, #31
 800b0c6:	005b      	lslpl	r3, r3, #1
 800b0c8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b0cc:	0fd9      	lsrs	r1, r3, #31
 800b0ce:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b0d2:	2516      	movs	r5, #22
 800b0d4:	4620      	mov	r0, r4
 800b0d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b0da:	107f      	asrs	r7, r7, #1
 800b0dc:	005b      	lsls	r3, r3, #1
 800b0de:	1846      	adds	r6, r0, r1
 800b0e0:	4296      	cmp	r6, r2
 800b0e2:	bfde      	ittt	le
 800b0e4:	1b92      	suble	r2, r2, r6
 800b0e6:	1870      	addle	r0, r6, r1
 800b0e8:	1864      	addle	r4, r4, r1
 800b0ea:	0052      	lsls	r2, r2, #1
 800b0ec:	3d01      	subs	r5, #1
 800b0ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b0f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b0f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b0fa:	d1f0      	bne.n	800b0de <__ieee754_sqrt+0x8e>
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f04f 0e20 	mov.w	lr, #32
 800b102:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b106:	4282      	cmp	r2, r0
 800b108:	eb06 0c05 	add.w	ip, r6, r5
 800b10c:	dc02      	bgt.n	800b114 <__ieee754_sqrt+0xc4>
 800b10e:	d113      	bne.n	800b138 <__ieee754_sqrt+0xe8>
 800b110:	459c      	cmp	ip, r3
 800b112:	d811      	bhi.n	800b138 <__ieee754_sqrt+0xe8>
 800b114:	f1bc 0f00 	cmp.w	ip, #0
 800b118:	eb0c 0506 	add.w	r5, ip, r6
 800b11c:	da43      	bge.n	800b1a6 <__ieee754_sqrt+0x156>
 800b11e:	2d00      	cmp	r5, #0
 800b120:	db41      	blt.n	800b1a6 <__ieee754_sqrt+0x156>
 800b122:	f100 0801 	add.w	r8, r0, #1
 800b126:	1a12      	subs	r2, r2, r0
 800b128:	4640      	mov	r0, r8
 800b12a:	459c      	cmp	ip, r3
 800b12c:	bf88      	it	hi
 800b12e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800b132:	eba3 030c 	sub.w	r3, r3, ip
 800b136:	4431      	add	r1, r6
 800b138:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b13c:	f1be 0e01 	subs.w	lr, lr, #1
 800b140:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800b144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b14c:	d1db      	bne.n	800b106 <__ieee754_sqrt+0xb6>
 800b14e:	4313      	orrs	r3, r2
 800b150:	d006      	beq.n	800b160 <__ieee754_sqrt+0x110>
 800b152:	1c48      	adds	r0, r1, #1
 800b154:	bf0b      	itete	eq
 800b156:	4671      	moveq	r1, lr
 800b158:	3101      	addne	r1, #1
 800b15a:	3401      	addeq	r4, #1
 800b15c:	f021 0101 	bicne.w	r1, r1, #1
 800b160:	1063      	asrs	r3, r4, #1
 800b162:	0849      	lsrs	r1, r1, #1
 800b164:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b168:	07e2      	lsls	r2, r4, #31
 800b16a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b16e:	bf48      	it	mi
 800b170:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800b174:	460e      	mov	r6, r1
 800b176:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b17a:	e782      	b.n	800b082 <__ieee754_sqrt+0x32>
 800b17c:	0ada      	lsrs	r2, r3, #11
 800b17e:	3815      	subs	r0, #21
 800b180:	055b      	lsls	r3, r3, #21
 800b182:	2a00      	cmp	r2, #0
 800b184:	d0fa      	beq.n	800b17c <__ieee754_sqrt+0x12c>
 800b186:	02d5      	lsls	r5, r2, #11
 800b188:	d50a      	bpl.n	800b1a0 <__ieee754_sqrt+0x150>
 800b18a:	f1c1 0420 	rsb	r4, r1, #32
 800b18e:	fa23 f404 	lsr.w	r4, r3, r4
 800b192:	1e4d      	subs	r5, r1, #1
 800b194:	408b      	lsls	r3, r1
 800b196:	4322      	orrs	r2, r4
 800b198:	1b41      	subs	r1, r0, r5
 800b19a:	e789      	b.n	800b0b0 <__ieee754_sqrt+0x60>
 800b19c:	4608      	mov	r0, r1
 800b19e:	e7f0      	b.n	800b182 <__ieee754_sqrt+0x132>
 800b1a0:	0052      	lsls	r2, r2, #1
 800b1a2:	3101      	adds	r1, #1
 800b1a4:	e7ef      	b.n	800b186 <__ieee754_sqrt+0x136>
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	e7bd      	b.n	800b126 <__ieee754_sqrt+0xd6>
 800b1aa:	bf00      	nop
 800b1ac:	7ff00000 	.word	0x7ff00000

0800b1b0 <_init>:
 800b1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b2:	bf00      	nop
 800b1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1b6:	bc08      	pop	{r3}
 800b1b8:	469e      	mov	lr, r3
 800b1ba:	4770      	bx	lr

0800b1bc <_fini>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr
