
2022_NTUR_FrontBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008f10  08008f10  00018f10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009354  08009354  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  08009354  08009354  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009354  08009354  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009354  08009354  00019354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800935c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000020c  08009568  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08009568  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012abb  00000000  00000000  00020235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002afa  00000000  00000000  00032cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000357f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001198  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003764  00000000  00000000  00037c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d81  00000000  00000000  0003b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000966b9  00000000  00000000  00050105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e67be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d8  00000000  00000000  000e6810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000020c 	.word	0x2000020c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008ef4 	.word	0x08008ef4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000210 	.word	0x20000210
 800014c:	08008ef4 	.word	0x08008ef4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <APPS1_transfer_function>:
  * @brief  transfer function for the analog APPS1 on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down
  */
uint8_t APPS1_transfer_function(uint32_t reading){
 8001110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001114:	b087      	sub	sp, #28
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x = (float)reading;
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fdba 	bl	8000c94 <__aeabi_ui2f>
 8001120:	4603      	mov	r3, r0
 8001122:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 8001124:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001128:	613b      	str	r3, [r7, #16]
	value = (9397*a-5497*x)/(9000*(a-x))-sqrt(88303609*a*a-189063818*a*x+115970209*x*x)/(9000*(a-x));
 800112a:	4965      	ldr	r1, [pc, #404]	; (80012c0 <APPS1_transfer_function+0x1b0>)
 800112c:	6938      	ldr	r0, [r7, #16]
 800112e:	f7ff fe09 	bl	8000d44 <__aeabi_fmul>
 8001132:	4603      	mov	r3, r0
 8001134:	461c      	mov	r4, r3
 8001136:	4963      	ldr	r1, [pc, #396]	; (80012c4 <APPS1_transfer_function+0x1b4>)
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff fe03 	bl	8000d44 <__aeabi_fmul>
 800113e:	4603      	mov	r3, r0
 8001140:	4619      	mov	r1, r3
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff fcf4 	bl	8000b30 <__aeabi_fsub>
 8001148:	4603      	mov	r3, r0
 800114a:	461c      	mov	r4, r3
 800114c:	6979      	ldr	r1, [r7, #20]
 800114e:	6938      	ldr	r0, [r7, #16]
 8001150:	f7ff fcee 	bl	8000b30 <__aeabi_fsub>
 8001154:	4603      	mov	r3, r0
 8001156:	495c      	ldr	r1, [pc, #368]	; (80012c8 <APPS1_transfer_function+0x1b8>)
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdf3 	bl	8000d44 <__aeabi_fmul>
 800115e:	4603      	mov	r3, r0
 8001160:	4619      	mov	r1, r3
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff fea2 	bl	8000eac <__aeabi_fdiv>
 8001168:	4603      	mov	r3, r0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f95c 	bl	8000428 <__aeabi_f2d>
 8001170:	4604      	mov	r4, r0
 8001172:	460d      	mov	r5, r1
 8001174:	4955      	ldr	r1, [pc, #340]	; (80012cc <APPS1_transfer_function+0x1bc>)
 8001176:	6938      	ldr	r0, [r7, #16]
 8001178:	f7ff fde4 	bl	8000d44 <__aeabi_fmul>
 800117c:	4603      	mov	r3, r0
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fddf 	bl	8000d44 <__aeabi_fmul>
 8001186:	4603      	mov	r3, r0
 8001188:	461e      	mov	r6, r3
 800118a:	4951      	ldr	r1, [pc, #324]	; (80012d0 <APPS1_transfer_function+0x1c0>)
 800118c:	6938      	ldr	r0, [r7, #16]
 800118e:	f7ff fdd9 	bl	8000d44 <__aeabi_fmul>
 8001192:	4603      	mov	r3, r0
 8001194:	6979      	ldr	r1, [r7, #20]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fdd4 	bl	8000d44 <__aeabi_fmul>
 800119c:	4603      	mov	r3, r0
 800119e:	4619      	mov	r1, r3
 80011a0:	4630      	mov	r0, r6
 80011a2:	f7ff fcc5 	bl	8000b30 <__aeabi_fsub>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461e      	mov	r6, r3
 80011aa:	494a      	ldr	r1, [pc, #296]	; (80012d4 <APPS1_transfer_function+0x1c4>)
 80011ac:	6978      	ldr	r0, [r7, #20]
 80011ae:	f7ff fdc9 	bl	8000d44 <__aeabi_fmul>
 80011b2:	4603      	mov	r3, r0
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fdc4 	bl	8000d44 <__aeabi_fmul>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4630      	mov	r0, r6
 80011c2:	f7ff fcb7 	bl	8000b34 <__addsf3>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f92d 	bl	8000428 <__aeabi_f2d>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4610      	mov	r0, r2
 80011d4:	4619      	mov	r1, r3
 80011d6:	f007 fdb9 	bl	8008d4c <sqrt>
 80011da:	4680      	mov	r8, r0
 80011dc:	4689      	mov	r9, r1
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	6938      	ldr	r0, [r7, #16]
 80011e2:	f7ff fca5 	bl	8000b30 <__aeabi_fsub>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4937      	ldr	r1, [pc, #220]	; (80012c8 <APPS1_transfer_function+0x1b8>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fdaa 	bl	8000d44 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f918 	bl	8000428 <__aeabi_f2d>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4640      	mov	r0, r8
 80011fe:	4649      	mov	r1, r9
 8001200:	f7ff fa94 	bl	800072c <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4620      	mov	r0, r4
 800120a:	4629      	mov	r1, r5
 800120c:	f7fe ffac 	bl	8000168 <__aeabi_dsub>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fc36 	bl	8000a88 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	60fb      	str	r3, [r7, #12]
	value = (value-(50-39.5)/50) * (50)/(37);
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f901 	bl	8000428 <__aeabi_f2d>
 8001226:	a324      	add	r3, pc, #144	; (adr r3, 80012b8 <APPS1_transfer_function+0x1a8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7fe ff9c 	bl	8000168 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <APPS1_transfer_function+0x1c8>)
 800123e:	f7ff f94b 	bl	80004d8 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <APPS1_transfer_function+0x1cc>)
 8001250:	f7ff fa6c 	bl	800072c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc14 	bl	8000a88 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	60fb      	str	r3, [r7, #12]
	value = value*254;
 8001264:	491e      	ldr	r1, [pc, #120]	; (80012e0 <APPS1_transfer_function+0x1d0>)
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff fd6c 	bl	8000d44 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 8001270:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff fc5d 	bl	8000b34 <__addsf3>
 800127a:	4603      	mov	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 800127e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f7ff fefc 	bl	8001080 <__aeabi_fcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <APPS1_transfer_function+0x182>
 800128e:	2300      	movs	r3, #0
 8001290:	e00d      	b.n	80012ae <APPS1_transfer_function+0x19e>
    else if(value>=255)	{return 255;}
 8001292:	4914      	ldr	r1, [pc, #80]	; (80012e4 <APPS1_transfer_function+0x1d4>)
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f7ff ff07 	bl	80010a8 <__aeabi_fcmpge>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <APPS1_transfer_function+0x194>
 80012a0:	23ff      	movs	r3, #255	; 0xff
 80012a2:	e004      	b.n	80012ae <APPS1_transfer_function+0x19e>
    else 				{return (uint8_t)value;}
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f7ff ff13 	bl	80010d0 <__aeabi_f2uiz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	b2db      	uxtb	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012b8:	ae147ae1 	.word	0xae147ae1
 80012bc:	3fcae147 	.word	0x3fcae147
 80012c0:	4612d400 	.word	0x4612d400
 80012c4:	45abc800 	.word	0x45abc800
 80012c8:	460ca000 	.word	0x460ca000
 80012cc:	4ca86cff 	.word	0x4ca86cff
 80012d0:	4d344e29 	.word	0x4d344e29
 80012d4:	4cdd3214 	.word	0x4cdd3214
 80012d8:	40490000 	.word	0x40490000
 80012dc:	40428000 	.word	0x40428000
 80012e0:	437e0000 	.word	0x437e0000
 80012e4:	437f0000 	.word	0x437f0000

080012e8 <APPS2_transfer_function>:
  * @brief  transfer function for the analog APPS2 on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down.
  */
uint8_t APPS2_transfer_function(uint32_t reading){
 80012e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012ec:	b087      	sub	sp, #28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 39.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x = (float)reading;
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fcce 	bl	8000c94 <__aeabi_ui2f>
 80012f8:	4603      	mov	r3, r0
 80012fa:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 80012fc:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001300:	613b      	str	r3, [r7, #16]
	value = (919*a - 530*x)/(1020*(a - x)) - sqrt(844561*a*a - 1798820*a*x + 1105580*x*x)/(1020*(a - x));
 8001302:	4965      	ldr	r1, [pc, #404]	; (8001498 <APPS2_transfer_function+0x1b0>)
 8001304:	6938      	ldr	r0, [r7, #16]
 8001306:	f7ff fd1d 	bl	8000d44 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	461c      	mov	r4, r3
 800130e:	4963      	ldr	r1, [pc, #396]	; (800149c <APPS2_transfer_function+0x1b4>)
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff fd17 	bl	8000d44 <__aeabi_fmul>
 8001316:	4603      	mov	r3, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4620      	mov	r0, r4
 800131c:	f7ff fc08 	bl	8000b30 <__aeabi_fsub>
 8001320:	4603      	mov	r3, r0
 8001322:	461c      	mov	r4, r3
 8001324:	6979      	ldr	r1, [r7, #20]
 8001326:	6938      	ldr	r0, [r7, #16]
 8001328:	f7ff fc02 	bl	8000b30 <__aeabi_fsub>
 800132c:	4603      	mov	r3, r0
 800132e:	495c      	ldr	r1, [pc, #368]	; (80014a0 <APPS2_transfer_function+0x1b8>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fd07 	bl	8000d44 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fdb6 	bl	8000eac <__aeabi_fdiv>
 8001340:	4603      	mov	r3, r0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f870 	bl	8000428 <__aeabi_f2d>
 8001348:	4604      	mov	r4, r0
 800134a:	460d      	mov	r5, r1
 800134c:	4955      	ldr	r1, [pc, #340]	; (80014a4 <APPS2_transfer_function+0x1bc>)
 800134e:	6938      	ldr	r0, [r7, #16]
 8001350:	f7ff fcf8 	bl	8000d44 <__aeabi_fmul>
 8001354:	4603      	mov	r3, r0
 8001356:	6939      	ldr	r1, [r7, #16]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcf3 	bl	8000d44 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	461e      	mov	r6, r3
 8001362:	4951      	ldr	r1, [pc, #324]	; (80014a8 <APPS2_transfer_function+0x1c0>)
 8001364:	6938      	ldr	r0, [r7, #16]
 8001366:	f7ff fced 	bl	8000d44 <__aeabi_fmul>
 800136a:	4603      	mov	r3, r0
 800136c:	6979      	ldr	r1, [r7, #20]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fce8 	bl	8000d44 <__aeabi_fmul>
 8001374:	4603      	mov	r3, r0
 8001376:	4619      	mov	r1, r3
 8001378:	4630      	mov	r0, r6
 800137a:	f7ff fbd9 	bl	8000b30 <__aeabi_fsub>
 800137e:	4603      	mov	r3, r0
 8001380:	461e      	mov	r6, r3
 8001382:	494a      	ldr	r1, [pc, #296]	; (80014ac <APPS2_transfer_function+0x1c4>)
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff fcdd 	bl	8000d44 <__aeabi_fmul>
 800138a:	4603      	mov	r3, r0
 800138c:	6979      	ldr	r1, [r7, #20]
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fcd8 	bl	8000d44 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4630      	mov	r0, r6
 800139a:	f7ff fbcb 	bl	8000b34 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f841 	bl	8000428 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f007 fccd 	bl	8008d4c <sqrt>
 80013b2:	4680      	mov	r8, r0
 80013b4:	4689      	mov	r9, r1
 80013b6:	6979      	ldr	r1, [r7, #20]
 80013b8:	6938      	ldr	r0, [r7, #16]
 80013ba:	f7ff fbb9 	bl	8000b30 <__aeabi_fsub>
 80013be:	4603      	mov	r3, r0
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <APPS2_transfer_function+0x1b8>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fcbe 	bl	8000d44 <__aeabi_fmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f82c 	bl	8000428 <__aeabi_f2d>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4640      	mov	r0, r8
 80013d6:	4649      	mov	r1, r9
 80013d8:	f7ff f9a8 	bl	800072c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4620      	mov	r0, r4
 80013e2:	4629      	mov	r1, r5
 80013e4:	f7fe fec0 	bl	8000168 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fb4a 	bl	8000a88 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	60fb      	str	r3, [r7, #12]
	value = (value-(50-39.5)/50) * (50)/(37);
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f7ff f815 	bl	8000428 <__aeabi_f2d>
 80013fe:	a324      	add	r3, pc, #144	; (adr r3, 8001490 <APPS2_transfer_function+0x1a8>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f7fe feb0 	bl	8000168 <__aeabi_dsub>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4610      	mov	r0, r2
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <APPS2_transfer_function+0x1c8>)
 8001416:	f7ff f85f 	bl	80004d8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <APPS2_transfer_function+0x1cc>)
 8001428:	f7ff f980 	bl	800072c <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb28 	bl	8000a88 <__aeabi_d2f>
 8001438:	4603      	mov	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
	value = value*254;
 800143c:	491e      	ldr	r1, [pc, #120]	; (80014b8 <APPS2_transfer_function+0x1d0>)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f7ff fc80 	bl	8000d44 <__aeabi_fmul>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 8001448:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f7ff fb71 	bl	8000b34 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 8001456:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f7ff fe10 	bl	8001080 <__aeabi_fcmplt>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <APPS2_transfer_function+0x182>
 8001466:	2300      	movs	r3, #0
 8001468:	e00d      	b.n	8001486 <APPS2_transfer_function+0x19e>
	else if(value>=255)	{return 255;}
 800146a:	4914      	ldr	r1, [pc, #80]	; (80014bc <APPS2_transfer_function+0x1d4>)
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fe1b 	bl	80010a8 <__aeabi_fcmpge>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <APPS2_transfer_function+0x194>
 8001478:	23ff      	movs	r3, #255	; 0xff
 800147a:	e004      	b.n	8001486 <APPS2_transfer_function+0x19e>
	else 				{return (uint8_t)value;}
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff fe27 	bl	80010d0 <__aeabi_f2uiz>
 8001482:	4603      	mov	r3, r0
 8001484:	b2db      	uxtb	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	371c      	adds	r7, #28
 800148a:	46bd      	mov	sp, r7
 800148c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001490:	ae147ae1 	.word	0xae147ae1
 8001494:	3fcae147 	.word	0x3fcae147
 8001498:	4465c000 	.word	0x4465c000
 800149c:	44048000 	.word	0x44048000
 80014a0:	447f0000 	.word	0x447f0000
 80014a4:	494e3110 	.word	0x494e3110
 80014a8:	49db9520 	.word	0x49db9520
 80014ac:	4986f560 	.word	0x4986f560
 80014b0:	40490000 	.word	0x40490000
 80014b4:	40428000 	.word	0x40428000
 80014b8:	437e0000 	.word	0x437e0000
 80014bc:	437f0000 	.word	0x437f0000

080014c0 <BSE_transfer_function>:
  * @brief  transfer function for the analog BSE on ep4
  * @param  reading: the raw ADC 12bit number
  * @retval value: the relative ratio for how much pedal travel is being pressed times 254,
  * 		rounding down.
  */
uint8_t BSE_transfer_function(uint32_t reading){
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	 * to scale the number to fit the proportions as well
	 *
	 * Note: 24.5mm corresponds to 0% pedal, and 2.5mm corresponds to 100% pedal travel.
	 * */
	float value;
	float x=(float)reading;
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fbe3 	bl	8000c94 <__aeabi_ui2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	617b      	str	r3, [r7, #20]
	float a = max_adc_value;
 80014d2:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80014d6:	613b      	str	r3, [r7, #16]
	value = (sqrt(7767369*a*a - 10940888*a*x + 7074144*x*x) - 2787*a + 812*x)/(2*(812*x - 812*a));
 80014d8:	4967      	ldr	r1, [pc, #412]	; (8001678 <BSE_transfer_function+0x1b8>)
 80014da:	6938      	ldr	r0, [r7, #16]
 80014dc:	f7ff fc32 	bl	8000d44 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc2d 	bl	8000d44 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461c      	mov	r4, r3
 80014ee:	4963      	ldr	r1, [pc, #396]	; (800167c <BSE_transfer_function+0x1bc>)
 80014f0:	6938      	ldr	r0, [r7, #16]
 80014f2:	f7ff fc27 	bl	8000d44 <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	6979      	ldr	r1, [r7, #20]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fc22 	bl	8000d44 <__aeabi_fmul>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb13 	bl	8000b30 <__aeabi_fsub>
 800150a:	4603      	mov	r3, r0
 800150c:	461c      	mov	r4, r3
 800150e:	495c      	ldr	r1, [pc, #368]	; (8001680 <BSE_transfer_function+0x1c0>)
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff fc17 	bl	8000d44 <__aeabi_fmul>
 8001516:	4603      	mov	r3, r0
 8001518:	6979      	ldr	r1, [r7, #20]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc12 	bl	8000d44 <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	4619      	mov	r1, r3
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fb05 	bl	8000b34 <__addsf3>
 800152a:	4603      	mov	r3, r0
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ff7b 	bl	8000428 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	f007 fc07 	bl	8008d4c <sqrt>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	4950      	ldr	r1, [pc, #320]	; (8001684 <BSE_transfer_function+0x1c4>)
 8001544:	6938      	ldr	r0, [r7, #16]
 8001546:	f7ff fbfd 	bl	8000d44 <__aeabi_fmul>
 800154a:	4603      	mov	r3, r0
 800154c:	4618      	mov	r0, r3
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7fe fe05 	bl	8000168 <__aeabi_dsub>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4614      	mov	r4, r2
 8001564:	461d      	mov	r5, r3
 8001566:	4948      	ldr	r1, [pc, #288]	; (8001688 <BSE_transfer_function+0x1c8>)
 8001568:	6978      	ldr	r0, [r7, #20]
 800156a:	f7ff fbeb 	bl	8000d44 <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff59 	bl	8000428 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4620      	mov	r0, r4
 800157c:	4629      	mov	r1, r5
 800157e:	f7fe fdf5 	bl	800016c <__adddf3>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4614      	mov	r4, r2
 8001588:	461d      	mov	r5, r3
 800158a:	493f      	ldr	r1, [pc, #252]	; (8001688 <BSE_transfer_function+0x1c8>)
 800158c:	6978      	ldr	r0, [r7, #20]
 800158e:	f7ff fbd9 	bl	8000d44 <__aeabi_fmul>
 8001592:	4603      	mov	r3, r0
 8001594:	461e      	mov	r6, r3
 8001596:	493c      	ldr	r1, [pc, #240]	; (8001688 <BSE_transfer_function+0x1c8>)
 8001598:	6938      	ldr	r0, [r7, #16]
 800159a:	f7ff fbd3 	bl	8000d44 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4630      	mov	r0, r6
 80015a4:	f7ff fac4 	bl	8000b30 <__aeabi_fsub>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fac1 	bl	8000b34 <__addsf3>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ff37 	bl	8000428 <__aeabi_f2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7ff f8b3 	bl	800072c <__aeabi_ddiv>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f7ff fa5b 	bl	8000a88 <__aeabi_d2f>
 80015d2:	4603      	mov	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]
	value = (value-(50-24.5)/25) * (25)/(24.5-2.5);
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe ff26 	bl	8000428 <__aeabi_f2d>
 80015dc:	a324      	add	r3, pc, #144	; (adr r3, 8001670 <BSE_transfer_function+0x1b0>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fdc1 	bl	8000168 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <BSE_transfer_function+0x1cc>)
 80015f4:	f7fe ff70 	bl	80004d8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <BSE_transfer_function+0x1d0>)
 8001606:	f7ff f891 	bl	800072c <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa39 	bl	8000a88 <__aeabi_d2f>
 8001616:	4603      	mov	r3, r0
 8001618:	60fb      	str	r3, [r7, #12]
	value *= 254;
 800161a:	491e      	ldr	r1, [pc, #120]	; (8001694 <BSE_transfer_function+0x1d4>)
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fb91 	bl	8000d44 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	60fb      	str	r3, [r7, #12]
	/*snapping everything out of bounds to designated values*/
	value+=1;
 8001626:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fa82 	bl	8000b34 <__addsf3>
 8001630:	4603      	mov	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
	if(value<1)			{return 0;}
 8001634:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff fd21 	bl	8001080 <__aeabi_fcmplt>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <BSE_transfer_function+0x188>
 8001644:	2300      	movs	r3, #0
 8001646:	e00d      	b.n	8001664 <BSE_transfer_function+0x1a4>
	else if(value>=255)	{return 255;}
 8001648:	4913      	ldr	r1, [pc, #76]	; (8001698 <BSE_transfer_function+0x1d8>)
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f7ff fd2c 	bl	80010a8 <__aeabi_fcmpge>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <BSE_transfer_function+0x19a>
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	e004      	b.n	8001664 <BSE_transfer_function+0x1a4>
	else 				{return (uint8_t)value;}
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fd38 	bl	80010d0 <__aeabi_f2uiz>
 8001660:	4603      	mov	r3, r0
 8001662:	b2db      	uxtb	r3, r3
}
 8001664:	4618      	mov	r0, r3
 8001666:	371c      	adds	r7, #28
 8001668:	46bd      	mov	sp, r7
 800166a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166c:	f3af 8000 	nop.w
 8001670:	851eb852 	.word	0x851eb852
 8001674:	3ff051eb 	.word	0x3ff051eb
 8001678:	4aed0a92 	.word	0x4aed0a92
 800167c:	4b26f1d8 	.word	0x4b26f1d8
 8001680:	4ad7e2c0 	.word	0x4ad7e2c0
 8001684:	452e3000 	.word	0x452e3000
 8001688:	444b0000 	.word	0x444b0000
 800168c:	40390000 	.word	0x40390000
 8001690:	40360000 	.word	0x40360000
 8001694:	437e0000 	.word	0x437e0000
 8001698:	437f0000 	.word	0x437f0000
 800169c:	00000000 	.word	0x00000000

080016a0 <suspension_travel_transfer_function>:
	uint8_t value=0;

	return value;
}

uint8_t suspension_travel_transfer_function(uint32_t reading){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	/*The length of the suspension measuring sensor goes from 200~245mm, which corresponds to 5.5~50.5mm extension
	 * The extended displacement is calculated below.*/

	float value = 0.0;
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
	float input = (float)reading;
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff faf0 	bl	8000c94 <__aeabi_ui2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	60bb      	str	r3, [r7, #8]
	value = (reading-5.5*(4096/75))*(256/(4096*(50.5-5.5)/75));
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7fe fe93 	bl	80003e4 <__aeabi_ui2d>
 80016be:	a318      	add	r3, pc, #96	; (adr r3, 8001720 <suspension_travel_transfer_function+0x80>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fd50 	bl	8000168 <__aeabi_dsub>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	a315      	add	r3, pc, #84	; (adr r3, 8001728 <suspension_travel_transfer_function+0x88>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe feff 	bl	80004d8 <__aeabi_dmul>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff f9d1 	bl	8000a88 <__aeabi_d2f>
 80016e6:	4603      	mov	r3, r0
 80016e8:	60fb      	str	r3, [r7, #12]
	if(value>=256){return 255;}
 80016ea:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff fcda 	bl	80010a8 <__aeabi_fcmpge>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <suspension_travel_transfer_function+0x5e>
 80016fa:	23ff      	movs	r3, #255	; 0xff
 80016fc:	e009      	b.n	8001712 <suspension_travel_transfer_function+0x72>
	else if(value<=0){return 0;}
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f7ff fcc6 	bl	8001094 <__aeabi_fcmple>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <suspension_travel_transfer_function+0x72>
 800170e:	2300      	movs	r3, #0
 8001710:	e7ff      	b.n	8001712 <suspension_travel_transfer_function+0x72>
	else{(uint8_t)value;}
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	f3af 8000 	nop.w
 8001720:	00000000 	.word	0x00000000
 8001724:	40729000 	.word	0x40729000
 8001728:	aaaaaaab 	.word	0xaaaaaaab
 800172c:	3fbaaaaa 	.word	0x3fbaaaaa

08001730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f000 ff4e 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 f811 	bl	800175e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800173c:	f000 f9e6 	bl	8001b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001740:	f000 f9ce 	bl	8001ae0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001744:	f000 f868 	bl	8001818 <MX_ADC1_Init>
  MX_CAN_Init();
 8001748:	f000 f8ec 	bl	8001924 <MX_CAN_Init>
  MX_I2C1_Init();
 800174c:	f000 f922 	bl	8001994 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001750:	f000 f99c 	bl	8001a8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8001754:	f000 f94c 	bl	80019f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  user_main();
 8001758:	f000 fd9a 	bl	8002290 <user_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800175c:	e7fe      	b.n	800175c <main+0x2c>

0800175e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b094      	sub	sp, #80	; 0x50
 8001762:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001764:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001768:	2228      	movs	r2, #40	; 0x28
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fd63 	bl	8006238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178e:	2301      	movs	r3, #1
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800179c:	2301      	movs	r3, #1
 800179e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a0:	2302      	movs	r3, #2
 80017a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 ff73 	bl	80046a0 <HAL_RCC_OscConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017c0:	f000 fa46 	bl	8001c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c4:	230f      	movs	r3, #15
 80017c6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017d4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2102      	movs	r1, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f9de 	bl	8004ba4 <HAL_RCC_ClockConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ee:	f000 fa2f 	bl	8001c50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017f2:	2302      	movs	r3, #2
 80017f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80017f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fb68 	bl	8004ed4 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800180a:	f000 fa21 	bl	8001c50 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3750      	adds	r7, #80	; 0x50
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001828:	4b3c      	ldr	r3, [pc, #240]	; (800191c <MX_ADC1_Init+0x104>)
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <MX_ADC1_Init+0x108>)
 800182c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <MX_ADC1_Init+0x104>)
 8001830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001834:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001836:	4b39      	ldr	r3, [pc, #228]	; (800191c <MX_ADC1_Init+0x104>)
 8001838:	2201      	movs	r2, #1
 800183a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <MX_ADC1_Init+0x104>)
 800183e:	2200      	movs	r2, #0
 8001840:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001842:	4b36      	ldr	r3, [pc, #216]	; (800191c <MX_ADC1_Init+0x104>)
 8001844:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001848:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <MX_ADC1_Init+0x104>)
 800184c:	2200      	movs	r2, #0
 800184e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 6;
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <MX_ADC1_Init+0x104>)
 8001852:	2206      	movs	r2, #6
 8001854:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001856:	4831      	ldr	r0, [pc, #196]	; (800191c <MX_ADC1_Init+0x104>)
 8001858:	f000 ff42 	bl	80026e0 <HAL_ADC_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001862:	f000 f9f5 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001866:	2306      	movs	r3, #6
 8001868:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800186a:	2301      	movs	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_41CYCLES_5;
 800186e:	2304      	movs	r3, #4
 8001870:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4829      	ldr	r0, [pc, #164]	; (800191c <MX_ADC1_Init+0x104>)
 8001878:	f001 f904 	bl	8002a84 <HAL_ADC_ConfigChannel>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001882:	f000 f9e5 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001886:	2309      	movs	r3, #9
 8001888:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800188a:	2302      	movs	r3, #2
 800188c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4822      	ldr	r0, [pc, #136]	; (800191c <MX_ADC1_Init+0x104>)
 8001894:	f001 f8f6 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800189e:	f000 f9d7 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80018a2:	2308      	movs	r3, #8
 80018a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80018a6:	2303      	movs	r3, #3
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	481b      	ldr	r0, [pc, #108]	; (800191c <MX_ADC1_Init+0x104>)
 80018b0:	f001 f8e8 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80018ba:	f000 f9c9 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80018be:	2302      	movs	r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80018c2:	2304      	movs	r3, #4
 80018c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <MX_ADC1_Init+0x104>)
 80018cc:	f001 f8da 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80018d6:	f000 f9bb 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80018da:	2303      	movs	r3, #3
 80018dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80018de:	2305      	movs	r3, #5
 80018e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_ADC1_Init+0x104>)
 80018e8:	f001 f8cc 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018f2:	f000 f9ad 	bl	8001c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80018fa:	2306      	movs	r3, #6
 80018fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	4619      	mov	r1, r3
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <MX_ADC1_Init+0x104>)
 8001904:	f001 f8be 	bl	8002a84 <HAL_ADC_ConfigChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800190e:	f000 f99f 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000228 	.word	0x20000228
 8001920:	40012400 	.word	0x40012400

08001924 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001928:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_CAN_Init+0x68>)
 800192a:	4a19      	ldr	r2, [pc, #100]	; (8001990 <MX_CAN_Init+0x6c>)
 800192c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800192e:	4b17      	ldr	r3, [pc, #92]	; (800198c <MX_CAN_Init+0x68>)
 8001930:	2208      	movs	r2, #8
 8001932:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001934:	4b15      	ldr	r3, [pc, #84]	; (800198c <MX_CAN_Init+0x68>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_CAN_Init+0x68>)
 800193c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001940:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_CAN_Init+0x68>)
 8001944:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001948:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_CAN_Init+0x68>)
 800194c:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001950:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_CAN_Init+0x68>)
 8001954:	2200      	movs	r2, #0
 8001956:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_CAN_Init+0x68>)
 800195a:	2200      	movs	r2, #0
 800195c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_CAN_Init+0x68>)
 8001960:	2200      	movs	r2, #0
 8001962:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_CAN_Init+0x68>)
 8001966:	2200      	movs	r2, #0
 8001968:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_CAN_Init+0x68>)
 800196c:	2200      	movs	r2, #0
 800196e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_CAN_Init+0x68>)
 8001972:	2200      	movs	r2, #0
 8001974:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_CAN_Init+0x68>)
 8001978:	f001 fa7d 	bl	8002e76 <HAL_CAN_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001982:	f000 f965 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000029c 	.word	0x2000029c
 8001990:	40006400 	.word	0x40006400

08001994 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x50>)
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <MX_I2C1_Init+0x54>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800199e:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <MX_I2C1_Init+0x58>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_I2C1_Init+0x50>)
 80019d2:	f002 fd21 	bl	8004418 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 f938 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200002c4 	.word	0x200002c4
 80019e8:	40005400 	.word	0x40005400
 80019ec:	000186a0 	.word	0x000186a0

080019f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0308 	add.w	r3, r7, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a0e:	4a1e      	ldr	r2, [pc, #120]	; (8001a88 <MX_TIM3_Init+0x98>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8000-1;
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a14:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000-1;
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a22:	f242 3227 	movw	r2, #8999	; 0x2327
 8001a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a36:	f003 fb03 	bl	8005040 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a40:	f000 f906 	bl	8001c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480c      	ldr	r0, [pc, #48]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a52:	f003 fc9f 	bl	8005394 <HAL_TIM_ConfigClockSource>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a5c:	f000 f8f8 	bl	8001c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a68:	463b      	mov	r3, r7
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <MX_TIM3_Init+0x94>)
 8001a6e:	f003 fe71 	bl	8005754 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a78:	f000 f8ea 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000318 	.word	0x20000318
 8001a88:	40000400 	.word	0x40000400

08001a8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <MX_USART1_UART_Init+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a96:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_USART1_UART_Init+0x4c>)
 8001ac4:	f003 feb6 	bl	8005834 <HAL_UART_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ace:	f000 f8bf 	bl	8001c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000360 	.word	0x20000360
 8001adc:	40013800 	.word	0x40013800

08001ae0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <MX_DMA_Init+0x28>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <MX_DMA_Init+0x28>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <MX_DMA_Init+0x28>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40021000 	.word	0x40021000

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a3f      	ldr	r2, [pc, #252]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	6193      	str	r3, [r2, #24]
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <MX_GPIO_Init+0x130>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b86:	482e      	ldr	r0, [pc, #184]	; (8001c40 <MX_GPIO_Init+0x134>)
 8001b88:	f002 fbfd 	bl	8004386 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4826      	ldr	r0, [pc, #152]	; (8001c40 <MX_GPIO_Init+0x134>)
 8001ba6:	f002 fa53 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4820      	ldr	r0, [pc, #128]	; (8001c40 <MX_GPIO_Init+0x134>)
 8001bc0:	f002 fa46 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8001bc4:	2383      	movs	r3, #131	; 0x83
 8001bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481c      	ldr	r0, [pc, #112]	; (8001c48 <MX_GPIO_Init+0x13c>)
 8001bd8:	f002 fa3a 	bl	8004050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_GPIO_Init+0x138>)
 8001be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4817      	ldr	r0, [pc, #92]	; (8001c4c <MX_GPIO_Init+0x140>)
 8001bf0:	f002 fa2e 	bl	8004050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f002 f85a 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f002 f873 	bl	8003cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2007      	movs	r0, #7
 8001c0a:	f002 f852 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c0e:	2007      	movs	r0, #7
 8001c10:	f002 f86b 	bl	8003cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2017      	movs	r0, #23
 8001c1a:	f002 f84a 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c1e:	2017      	movs	r0, #23
 8001c20:	f002 f863 	bl	8003cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f002 f842 	bl	8003cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f002 f85b 	bl	8003cea <HAL_NVIC_EnableIRQ>

}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40011000 	.word	0x40011000
 8001c44:	10210000 	.word	0x10210000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_Delay(200);
 8001c58:	20c8      	movs	r0, #200	; 0xc8
 8001c5a:	f000 fd1d 	bl	8002698 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	4802      	ldr	r0, [pc, #8]	; (8001c6c <Error_Handler+0x1c>)
 8001c64:	f002 fba7 	bl	80043b6 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 8001c68:	e7f6      	b.n	8001c58 <Error_Handler+0x8>
 8001c6a:	bf00      	nop
 8001c6c:	40011000 	.word	0x40011000

08001c70 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&ch, 1, 0xFFFF);
 8001c78:	1d39      	adds	r1, r7, #4
 8001c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <__io_putchar+0x20>)
 8001c82:	f003 fe24 	bl	80058ce <HAL_UART_Transmit>
	return ch;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000360 	.word	0x20000360

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6193      	str	r3, [r2, #24]
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	61d3      	str	r3, [r2, #28]
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_MspInit+0x5c>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_MspInit+0x60>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <HAL_MspInit+0x60>)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010000 	.word	0x40010000

08001cf8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0318 	add.w	r3, r7, #24
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	; (8001de0 <HAL_ADC_MspInit+0xe8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d15f      	bne.n	8001dd8 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d18:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a31      	ldr	r2, [pc, #196]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_ADC_MspInit+0xec>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8001d60:	235c      	movs	r3, #92	; 0x5c
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d64:	2303      	movs	r3, #3
 8001d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	481e      	ldr	r0, [pc, #120]	; (8001de8 <HAL_ADC_MspInit+0xf0>)
 8001d70:	f002 f96e 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d74:	2303      	movs	r3, #3
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	4619      	mov	r1, r3
 8001d82:	481a      	ldr	r0, [pc, #104]	; (8001dec <HAL_ADC_MspInit+0xf4>)
 8001d84:	f002 f964 	bl	8004050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001d8a:	4a1a      	ldr	r2, [pc, #104]	; (8001df4 <HAL_ADC_MspInit+0xfc>)
 8001d8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d94:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001d9c:	2280      	movs	r2, #128	; 0x80
 8001d9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001daa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001db2:	2220      	movs	r2, #32
 8001db4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dbc:	480c      	ldr	r0, [pc, #48]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001dbe:	f001 ffaf 	bl	8003d20 <HAL_DMA_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001dc8:	f7ff ff42 	bl	8001c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001dd0:	621a      	str	r2, [r3, #32]
 8001dd2:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_ADC_MspInit+0xf8>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40012400 	.word	0x40012400
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010800 	.word	0x40010800
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	20000258 	.word	0x20000258
 8001df4:	40020008 	.word	0x40020008

08001df8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a29      	ldr	r2, [pc, #164]	; (8001eb8 <HAL_CAN_MspInit+0xc0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d14b      	bne.n	8001eb0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e22:	61d3      	str	r3, [r2, #28]
 8001e24:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e36:	f043 0308 	orr.w	r3, r3, #8
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <HAL_CAN_MspInit+0xc4>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4818      	ldr	r0, [pc, #96]	; (8001ec0 <HAL_CAN_MspInit+0xc8>)
 8001e5e:	f002 f8f7 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4812      	ldr	r0, [pc, #72]	; (8001ec0 <HAL_CAN_MspInit+0xc8>)
 8001e78:	f002 f8ea 	bl	8004050 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_CAN_MspInit+0xcc>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_CAN_MspInit+0xcc>)
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2014      	movs	r0, #20
 8001ea6:	f001 ff04 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001eaa:	2014      	movs	r0, #20
 8001eac:	f001 ff1d 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40006400 	.word	0x40006400
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	f107 0310 	add.w	r3, r7, #16
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a15      	ldr	r2, [pc, #84]	; (8001f38 <HAL_I2C_MspInit+0x70>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d123      	bne.n	8001f30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f00:	23c0      	movs	r3, #192	; 0xc0
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f04:	2312      	movs	r3, #18
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	4619      	mov	r1, r3
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <HAL_I2C_MspInit+0x78>)
 8001f14:	f002 f89c 	bl	8004050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f22:	61d3      	str	r3, [r2, #28]
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_I2C_MspInit+0x74>)
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3720      	adds	r7, #32
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_TIM_Base_MspInit+0x44>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d113      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	61d3      	str	r3, [r2, #28]
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	201d      	movs	r0, #29
 8001f74:	f001 fe9d 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f78:	201d      	movs	r0, #29
 8001f7a:	f001 feb6 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_UART_MspInit+0x9c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d139      	bne.n	8002024 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6193      	str	r3, [r2, #24]
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_UART_MspInit+0xa0>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 0310 	add.w	r3, r7, #16
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480f      	ldr	r0, [pc, #60]	; (8002034 <HAL_UART_MspInit+0xa4>)
 8001ff6:	f002 f82b 	bl	8004050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	4619      	mov	r1, r3
 800200e:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_UART_MspInit+0xa4>)
 8002010:	f002 f81e 	bl	8004050 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2025      	movs	r0, #37	; 0x25
 800201a:	f001 fe4a 	bl	8003cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800201e:	2025      	movs	r0, #37	; 0x25
 8002020:	f001 fe63 	bl	8003cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002024:	bf00      	nop
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40013800 	.word	0x40013800
 8002030:	40021000 	.word	0x40021000
 8002034:	40010800 	.word	0x40010800

08002038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203c:	e7fe      	b.n	800203c <NMI_Handler+0x4>

0800203e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002042:	e7fe      	b.n	8002042 <HardFault_Handler+0x4>

08002044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <MemManage_Handler+0x4>

0800204a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <UsageFault_Handler+0x4>

08002056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr

0800206e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800207e:	f000 faef 	bl	8002660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800208a:	2001      	movs	r0, #1
 800208c:	f002 f9ac 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002098:	2002      	movs	r0, #2
 800209a:	f002 f9a5 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80020aa:	f001 fafc 	bl	80036a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	2000029c 	.word	0x2000029c

080020b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80020bc:	2020      	movs	r0, #32
 80020be:	f002 f993 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020c2:	2080      	movs	r0, #128	; 0x80
 80020c4:	f002 f990 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}

080020cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <TIM3_IRQHandler+0x10>)
 80020d2:	f003 f857 	bl	8005184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000318 	.word	0x20000318

080020e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <USART1_IRQHandler+0x10>)
 80020e6:	f003 fc85 	bl	80059f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000360 	.word	0x20000360

080020f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020fc:	f002 f974 	bl	80043e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
	return 1;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <_kill>:

int _kill(int pid, int sig)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211c:	f004 f862 	bl	80061e4 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	2216      	movs	r2, #22
 8002124:	601a      	str	r2, [r3, #0]
	return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_exit>:

void _exit (int status)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800213a:	f04f 31ff 	mov.w	r1, #4294967295
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffe7 	bl	8002112 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002144:	e7fe      	b.n	8002144 <_exit+0x12>

08002146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e00a      	b.n	800216e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002158:	f3af 8000 	nop.w
 800215c:	4601      	mov	r1, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbf0      	blt.n	8002158 <_read+0x12>
	}

return len;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e009      	b.n	80021a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fd68 	bl	8001c70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbf1      	blt.n	8002192 <_write+0x12>
	}
	return len;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_close>:

int _close(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <_isatty>:

int _isatty(int file)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	return 1;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f003 ffcc 	bl	80061e4 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20005000 	.word	0x20005000
 8002278:	00000400 	.word	0x00000400
 800227c:	200003a4 	.word	0x200003a4
 8002280:	20000420 	.word	0x20000420

08002284 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <user_main>:
  * 		including the super loop.
  * 		Should be called once after all auto-gererated init functions in main()
  * @param  None
  * @retval None
  */
void user_main(){
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b092      	sub	sp, #72	; 0x48
 8002294:	af00      	add	r7, sp, #0
	 /*ADC1 DMA mode Start*/
	 HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&ADC_value,6);
 8002296:	2206      	movs	r2, #6
 8002298:	495d      	ldr	r1, [pc, #372]	; (8002410 <user_main+0x180>)
 800229a:	485e      	ldr	r0, [pc, #376]	; (8002414 <user_main+0x184>)
 800229c:	f000 faf8 	bl	8002890 <HAL_ADC_Start_DMA>

	 /*timer3 interrupt mode start, used in hall sensors calculations*/
	 HAL_TIM_Base_Start_IT(&htim3);
 80022a0:	485d      	ldr	r0, [pc, #372]	; (8002418 <user_main+0x188>)
 80022a2:	f002 ff1d 	bl	80050e0 <HAL_TIM_Base_Start_IT>

	/*CAN receive filter configuration*/
	  CAN_FilterTypeDef canfilterconfig = {
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <user_main+0x18c>)
 80022a8:	463c      	mov	r4, r7
 80022aa:	461d      	mov	r5, r3
 80022ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b8:	e884 0003 	stmia.w	r4, {r0, r1}
			  .FilterIdHigh = 0x333<<5,
			  .FilterIdLow = 0,
			  .FilterMaskIdHigh = 0x333<<5,
			  .FilterMaskIdLow = 0x0000
	  };
	  if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig)!=HAL_OK){
 80022bc:	463b      	mov	r3, r7
 80022be:	4619      	mov	r1, r3
 80022c0:	4857      	ldr	r0, [pc, #348]	; (8002420 <user_main+0x190>)
 80022c2:	f000 fed3 	bl	800306c <HAL_CAN_ConfigFilter>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <user_main+0x40>
		  Error_Handler();
 80022cc:	f7ff fcc0 	bl	8001c50 <Error_Handler>
	  }
	 /*turn on receiving interrupt, then starts the CAN module*/
	  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80022d0:	2102      	movs	r1, #2
 80022d2:	4853      	ldr	r0, [pc, #332]	; (8002420 <user_main+0x190>)
 80022d4:	f001 f9c2 	bl	800365c <HAL_CAN_ActivateNotification>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <user_main+0x52>
		  Error_Handler();
 80022de:	f7ff fcb7 	bl	8001c50 <Error_Handler>
	  }
	  HAL_CAN_Start(&hcan);
 80022e2:	484f      	ldr	r0, [pc, #316]	; (8002420 <user_main+0x190>)
 80022e4:	f000 ff8b 	bl	80031fe <HAL_CAN_Start>

	  /*super loop*/
	  while(1){
		  /*APPS and BSE raw value obtaining and test output */
		  uint32_t APPS1test = ADC_value[ADC_DMA_ARRAY_RANK_APPS1];
 80022e8:	4b49      	ldr	r3, [pc, #292]	; (8002410 <user_main+0x180>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
		  uint32_t APPS2test = ADC_value[ADC_DMA_ARRAY_RANK_APPS2];
 80022ee:	4b48      	ldr	r3, [pc, #288]	; (8002410 <user_main+0x180>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	643b      	str	r3, [r7, #64]	; 0x40
		  uint32_t BSEtest = ADC_value[ADC_DMA_ARRAY_RANK_BSE];
 80022f4:	4b46      	ldr	r3, [pc, #280]	; (8002410 <user_main+0x180>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		  /*the pinsare connected to NO pin on the switch, which is connected to Gnd, and the switch is pressed when
		   *the pedals are at the fully extended state. So, The boolean state of the pin matches whether the pedal
		   *is pressed or not.*/
		  uint8_t APPSmicro = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 80022fa:	2102      	movs	r1, #2
 80022fc:	4849      	ldr	r0, [pc, #292]	; (8002424 <user_main+0x194>)
 80022fe:	f002 f82b 	bl	8004358 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		  uint8_t BSEmicro = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8002308:	2101      	movs	r1, #1
 800230a:	4846      	ldr	r0, [pc, #280]	; (8002424 <user_main+0x194>)
 800230c:	f002 f824 	bl	8004358 <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		  /*APPS&BSE value preprocessing*/
		  uint8_t APPS1Value=APPS1_transfer_function(APPS1test);
 8002316:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002318:	f7fe fefa 	bl	8001110 <APPS1_transfer_function>
 800231c:	4603      	mov	r3, r0
 800231e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		  uint8_t APPS2Value=APPS2_transfer_function(APPS2test);
 8002322:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002324:	f7fe ffe0 	bl	80012e8 <APPS2_transfer_function>
 8002328:	4603      	mov	r3, r0
 800232a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
		  uint8_t BSEValue=BSE_transfer_function(BSEtest);
 800232e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002330:	f7ff f8c6 	bl	80014c0 <BSE_transfer_function>
 8002334:	4603      	mov	r3, r0
 8002336:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  /*wheel speed output , assuming there is only one tooth per revolution*/
		  int wheel_speedL=hall_counter_result[0]*60;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <user_main+0x198>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	1a9b      	subs	r3, r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
		  int wheel_speedR=hall_counter_result[1]*60;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <user_main+0x198>)
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
		 // printf("%.2f C \r\n",MLX90614_ReadReg(0x5A,0x07,0)*0.02-273.15);
		 // printf("%.2f C \r\n",MLX90614_ReadReg(0x5A,0x08,0)*0.02-273.15);
		 // printf("%x\r\n",MLX90614_ReadReg(0x5A,0x08,0));

		  /*grabing the suspension travel data*/
		  uint8_t travel_L = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_LTRAVEL]);
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <user_main+0x180>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f9a0 	bl	80016a0 <suspension_travel_transfer_function>
 8002360:	4603      	mov	r3, r0
 8002362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  uint8_t travel_R = suspension_travel_transfer_function(ADC_value[ADC_DMA_ARRAY_RANK_RTRAVEL]);
 8002366:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <user_main+0x180>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff f998 	bl	80016a0 <suspension_travel_transfer_function>
 8002370:	4603      	mov	r3, r0
 8002372:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

		  /*loading data into message arrayTO BE DETERMINED:the format of the wheel speed*/
		  CAN_TxData_1[0]=(uint8_t)(wheel_speedL>>8);
 8002376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002378:	121b      	asrs	r3, r3, #8
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b2b      	ldr	r3, [pc, #172]	; (800242c <user_main+0x19c>)
 800237e:	701a      	strb	r2, [r3, #0]
		  CAN_TxData_1[1]=(uint8_t)wheel_speedL;
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b29      	ldr	r3, [pc, #164]	; (800242c <user_main+0x19c>)
 8002386:	705a      	strb	r2, [r3, #1]
		  CAN_TxData_1[2]=(uint8_t)(wheel_speedR>>8);
 8002388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238a:	121b      	asrs	r3, r3, #8
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <user_main+0x19c>)
 8002390:	709a      	strb	r2, [r3, #2]
		  CAN_TxData_1[3]=(uint8_t)wheel_speedR;
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b25      	ldr	r3, [pc, #148]	; (800242c <user_main+0x19c>)
 8002398:	70da      	strb	r2, [r3, #3]

		  CAN_TxData_2[0]=BSEValue;
 800239a:	4a25      	ldr	r2, [pc, #148]	; (8002430 <user_main+0x1a0>)
 800239c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023a0:	7013      	strb	r3, [r2, #0]
		  CAN_TxData_2[1]=APPS1Value;
 80023a2:	4a23      	ldr	r2, [pc, #140]	; (8002430 <user_main+0x1a0>)
 80023a4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80023a8:	7053      	strb	r3, [r2, #1]
		  CAN_TxData_2[2]=APPS2Value;
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <user_main+0x1a0>)
 80023ac:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80023b0:	7093      	strb	r3, [r2, #2]
		  CAN_TxData_2[4]=travel_L;
 80023b2:	4a1f      	ldr	r2, [pc, #124]	; (8002430 <user_main+0x1a0>)
 80023b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023b8:	7113      	strb	r3, [r2, #4]
		  CAN_TxData_2[5]=travel_R;
 80023ba:	4a1d      	ldr	r2, [pc, #116]	; (8002430 <user_main+0x1a0>)
 80023bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80023c0:	7153      	strb	r3, [r2, #5]
		  CAN_TxData_2[7]=(APPSmicro|(BSEmicro<<1)); //bit0 contains APPS switch data, bit1 contains BSE switch data
 80023c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <user_main+0x1a0>)
 80023d6:	71da      	strb	r2, [r3, #7]
		  /*the CAN transmit HAL API*/
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader1,CAN_TxData_1,&TxMailbox1);
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <user_main+0x1a4>)
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <user_main+0x19c>)
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <user_main+0x1a8>)
 80023de:	4810      	ldr	r0, [pc, #64]	; (8002420 <user_main+0x190>)
 80023e0:	f000 ff51 	bl	8003286 <HAL_CAN_AddTxMessage>
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader2,CAN_TxData_2,&TxMailbox2);
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <user_main+0x1ac>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <user_main+0x1a0>)
 80023e8:	4915      	ldr	r1, [pc, #84]	; (8002440 <user_main+0x1b0>)
 80023ea:	480d      	ldr	r0, [pc, #52]	; (8002420 <user_main+0x190>)
 80023ec:	f000 ff4b 	bl	8003286 <HAL_CAN_AddTxMessage>

		  if(HAL_CAN_GetError(&hcan)==HAL_CAN_ERROR_BOF){
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <user_main+0x190>)
 80023f2:	f001 fb7b 	bl	8003aec <HAL_CAN_GetError>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d104      	bne.n	8002406 <user_main+0x176>
			  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80023fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002400:	4810      	ldr	r0, [pc, #64]	; (8002444 <user_main+0x1b4>)
 8002402:	f001 ffd8 	bl	80043b6 <HAL_GPIO_TogglePin>
		  printf("BSE: %d\n",BSEValue);
		  printf("left wheel speed is %d rpm\n",wheel_speedL);
		  printf("right wheel speed is %d rpm\n",wheel_speedR);
#endif
		  /*superloop execution interval*/
		  HAL_Delay(20);
 8002406:	2014      	movs	r0, #20
 8002408:	f000 f946 	bl	8002698 <HAL_Delay>
	  while(1){
 800240c:	e76c      	b.n	80022e8 <user_main+0x58>
 800240e:	bf00      	nop
 8002410:	200003a8 	.word	0x200003a8
 8002414:	20000228 	.word	0x20000228
 8002418:	20000318 	.word	0x20000318
 800241c:	08008f10 	.word	0x08008f10
 8002420:	2000029c 	.word	0x2000029c
 8002424:	40010800 	.word	0x40010800
 8002428:	200003c8 	.word	0x200003c8
 800242c:	200003d0 	.word	0x200003d0
 8002430:	200003d8 	.word	0x200003d8
 8002434:	200003e4 	.word	0x200003e4
 8002438:	20000004 	.word	0x20000004
 800243c:	200003e0 	.word	0x200003e0
 8002440:	2000001c 	.word	0x2000001c
 8002444:	40011000 	.word	0x40011000

08002448 <HAL_GPIO_EXTI_Callback>:
  * @brief  User defined EXTI interrupt callback function, namely EXTI ISR.
  * 		Shall only be called by HAL interrupt handlers
  * @param  GPIO_PIN: the GPIO pin that generated the interrupt.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_PIN){
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002458:	d023      	beq.n	80024a2 <HAL_GPIO_EXTI_Callback+0x5a>
 800245a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800245e:	dc24      	bgt.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d010      	beq.n	8002486 <HAL_GPIO_EXTI_Callback+0x3e>
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	dc20      	bgt.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
 8002468:	2b20      	cmp	r3, #32
 800246a:	d006      	beq.n	800247a <HAL_GPIO_EXTI_Callback+0x32>
 800246c:	2b20      	cmp	r3, #32
 800246e:	dc1c      	bgt.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
 8002470:	2b01      	cmp	r3, #1
 8002472:	d00e      	beq.n	8002492 <HAL_GPIO_EXTI_Callback+0x4a>
 8002474:	2b02      	cmp	r3, #2
 8002476:	d010      	beq.n	800249a <HAL_GPIO_EXTI_Callback+0x52>
 8002478:	e017      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_5: /*right wheel hall sensor*/
			hall_counter[1]++;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	3301      	adds	r3, #1
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 8002482:	6053      	str	r3, [r2, #4]
#ifdef PRINTF_TEST_OUTPUT
			printf("EXTI5:%d\n",hall_counter[1]);
#endif
			break;
 8002484:	e011      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_7: /*left wheel hall sensor*/
			hall_counter[0]++;
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3301      	adds	r3, #1
 800248c:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_GPIO_EXTI_Callback+0x74>)
 800248e:	6013      	str	r3, [r2, #0]
#ifdef PRINTF_TEST_OUTPUT
			printf("EXTI7:%d\n",hall_counter[0]);
#endif
			break;
 8002490:	e00b      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_0:
			printf("EXTI0\n");
 8002492:	480b      	ldr	r0, [pc, #44]	; (80024c0 <HAL_GPIO_EXTI_Callback+0x78>)
 8002494:	f004 fba6 	bl	8006be4 <puts>
			break;
 8002498:	e007      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_1:
			printf("EXTI1\n");
 800249a:	480a      	ldr	r0, [pc, #40]	; (80024c4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800249c:	f004 fba2 	bl	8006be4 <puts>
			break;
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_EXTI_Callback+0x62>
		case GPIO_PIN_15:
			printf("EXTI15\n");
 80024a2:	4809      	ldr	r0, [pc, #36]	; (80024c8 <HAL_GPIO_EXTI_Callback+0x80>)
 80024a4:	f004 fb9e 	bl	8006be4 <puts>
			break;
 80024a8:	bf00      	nop
	}
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80024aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <HAL_GPIO_EXTI_Callback+0x84>)
 80024b0:	f001 ff81 	bl	80043b6 <HAL_GPIO_TogglePin>
	return;
 80024b4:	bf00      	nop
}
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200003c0 	.word	0x200003c0
 80024c0:	08008f38 	.word	0x08008f38
 80024c4:	08008f40 	.word	0x08008f40
 80024c8:	08008f48 	.word	0x08008f48
 80024cc:	40011000 	.word	0x40011000

080024d0 <HAL_TIM_PeriodElapsedCallback>:
  * @note 	For timer3, which should update in a fixed interval defined in CubeMX, we grab
  * 		the current hall sensor counts, then reset it.
  * @param  htim: the timer that generated the interrupt.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d118      	bne.n	8002512 <HAL_TIM_PeriodElapsedCallback+0x42>
		int i=0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
		for(i=0;i<sizeof(hall_counter)/sizeof(hall_counter[0]);i++){
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	e00f      	b.n	800250a <HAL_TIM_PeriodElapsedCallback+0x3a>
			hall_counter_result[i]=hall_counter[i];
 80024ea:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024f2:	490c      	ldr	r1, [pc, #48]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			hall_counter[i]=0;
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2100      	movs	r1, #0
 8002500:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(i=0;i<sizeof(hall_counter)/sizeof(hall_counter[0]);i++){
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3301      	adds	r3, #1
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d9ec      	bls.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
	}
	return;
 8002510:	bf00      	nop
 8002512:	bf00      	nop
}
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	20000318 	.word	0x20000318
 8002520:	200003c0 	.word	0x200003c0
 8002524:	200003c8 	.word	0x200003c8

08002528 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * 		Shall only be called by HAL interrupt handlers
  * @param  hcan: the can handle structure that received the message.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CAN_RxData) != HAL_OK){
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8002534:	2100      	movs	r1, #0
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 ff7f 	bl	800343a <HAL_CAN_GetRxMessage>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 8002542:	f7ff fb85 	bl	8001c50 <Error_Handler>
  }
   if (CAN_RxData[0]==0x01&&CAN_RxData[1]==0x02&&CAN_RxData[2]==0x03&&CAN_RxData[3]==0x04){
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d111      	bne.n	8002572 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d10d      	bne.n	8002572 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002558:	789b      	ldrb	r3, [r3, #2]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d109      	bne.n	8002572 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8002560:	78db      	ldrb	r3, [r3, #3]
 8002562:	2b04      	cmp	r3, #4
 8002564:	d105      	bne.n	8002572 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
	  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800256a:	4806      	ldr	r0, [pc, #24]	; (8002584 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800256c:	f001 ff23 	bl	80043b6 <HAL_GPIO_TogglePin>
  }

   return;
 8002570:	bf00      	nop
 8002572:	bf00      	nop
}
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000404 	.word	0x20000404
 8002580:	200003e8 	.word	0x200003e8
 8002584:	40011000 	.word	0x40011000

08002588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	; (80025c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	; (80025cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ae:	f7ff fe69 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025b2:	f003 fe1d 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025b6:	f7ff f8bb 	bl	8001730 <main>
  bx lr
 80025ba:	4770      	bx	lr
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80025c4:	0800935c 	.word	0x0800935c
  ldr r2, =_sbss
 80025c8:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 80025cc:	2000041c 	.word	0x2000041c

080025d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC1_2_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_Init+0x28>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a07      	ldr	r2, [pc, #28]	; (80025fc <HAL_Init+0x28>)
 80025de:	f043 0310 	orr.w	r3, r3, #16
 80025e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e4:	2003      	movs	r0, #3
 80025e6:	f001 fb59 	bl	8003c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ea:	200f      	movs	r0, #15
 80025ec:	f000 f808 	bl	8002600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025f0:	f7ff fb50 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40022000 	.word	0x40022000

08002600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <HAL_InitTick+0x54>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_InitTick+0x58>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4619      	mov	r1, r3
 8002612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002616:	fbb3 f3f1 	udiv	r3, r3, r1
 800261a:	fbb2 f3f3 	udiv	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f001 fb71 	bl	8003d06 <HAL_SYSTICK_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e00e      	b.n	800264c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b0f      	cmp	r3, #15
 8002632:	d80a      	bhi.n	800264a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002634:	2200      	movs	r2, #0
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f001 fb39 	bl	8003cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002640:	4a06      	ldr	r2, [pc, #24]	; (800265c <HAL_InitTick+0x5c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	20000000 	.word	0x20000000
 8002658:	20000038 	.word	0x20000038
 800265c:	20000034 	.word	0x20000034

08002660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_IncTick+0x1c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b05      	ldr	r3, [pc, #20]	; (8002680 <HAL_IncTick+0x20>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4413      	add	r3, r2
 8002670:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_IncTick+0x20>)
 8002672:	6013      	str	r3, [r2, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000038 	.word	0x20000038
 8002680:	20000408 	.word	0x20000408

08002684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return uwTick;
 8002688:	4b02      	ldr	r3, [pc, #8]	; (8002694 <HAL_GetTick+0x10>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	20000408 	.word	0x20000408

08002698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026a0:	f7ff fff0 	bl	8002684 <HAL_GetTick>
 80026a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b0:	d005      	beq.n	80026be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_Delay+0x44>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026be:	bf00      	nop
 80026c0:	f7ff ffe0 	bl	8002684 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d8f7      	bhi.n	80026c0 <HAL_Delay+0x28>
  {
  }
}
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000038 	.word	0x20000038

080026e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e0be      	b.n	8002880 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d109      	bne.n	8002724 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff faea 	bl	8001cf8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 faff 	bl	8002d28 <ADC_ConversionStop_Disable>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 8099 	bne.w	800286e <HAL_ADC_Init+0x18e>
 800273c:	7dfb      	ldrb	r3, [r7, #23]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 8095 	bne.w	800286e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800274c:	f023 0302 	bic.w	r3, r3, #2
 8002750:	f043 0202 	orr.w	r2, r3, #2
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002760:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	7b1b      	ldrb	r3, [r3, #12]
 8002766:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002768:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4313      	orrs	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002778:	d003      	beq.n	8002782 <HAL_ADC_Init+0xa2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d102      	bne.n	8002788 <HAL_ADC_Init+0xa8>
 8002782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002786:	e000      	b.n	800278a <HAL_ADC_Init+0xaa>
 8002788:	2300      	movs	r3, #0
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7d1b      	ldrb	r3, [r3, #20]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d119      	bne.n	80027cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	7b1b      	ldrb	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	035a      	lsls	r2, r3, #13
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	e00b      	b.n	80027cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_ADC_Init+0x1a8>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fc:	d003      	beq.n	8002806 <HAL_ADC_Init+0x126>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d104      	bne.n	8002810 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	3b01      	subs	r3, #1
 800280c:	051b      	lsls	r3, r3, #20
 800280e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	430a      	orrs	r2, r1
 8002822:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_ADC_Init+0x1ac>)
 800282c:	4013      	ands	r3, r2
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d10b      	bne.n	800284c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800284a:	e018      	b.n	800287e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	f023 0312 	bic.w	r3, r3, #18
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800286c:	e007      	b.n	800287e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	ffe1f7fd 	.word	0xffe1f7fd
 800288c:	ff1f0efe 	.word	0xff1f0efe

08002890 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a64      	ldr	r2, [pc, #400]	; (8002a38 <HAL_ADC_Start_DMA+0x1a8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_ADC_Start_DMA+0x24>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a63      	ldr	r2, [pc, #396]	; (8002a3c <HAL_ADC_Start_DMA+0x1ac>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d106      	bne.n	80028c2 <HAL_ADC_Start_DMA+0x32>
 80028b4:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <HAL_ADC_Start_DMA+0x1a8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f040 80b3 	bne.w	8002a28 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_Start_DMA+0x40>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0ae      	b.n	8002a2e <HAL_ADC_Start_DMA+0x19e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 f9cb 	bl	8002c74 <ADC_Enable>
 80028de:	4603      	mov	r3, r0
 80028e0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028e2:	7dfb      	ldrb	r3, [r7, #23]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f040 809a 	bne.w	8002a1e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a4e      	ldr	r2, [pc, #312]	; (8002a3c <HAL_ADC_Start_DMA+0x1ac>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d105      	bne.n	8002914 <HAL_ADC_Start_DMA+0x84>
 8002908:	4b4b      	ldr	r3, [pc, #300]	; (8002a38 <HAL_ADC_Start_DMA+0x1a8>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d115      	bne.n	8002940 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d026      	beq.n	800297c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002936:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800293e:	e01d      	b.n	800297c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002944:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a39      	ldr	r2, [pc, #228]	; (8002a38 <HAL_ADC_Start_DMA+0x1a8>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_ADC_Start_DMA+0xd0>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <HAL_ADC_Start_DMA+0x1ac>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d10d      	bne.n	800297c <HAL_ADC_Start_DMA+0xec>
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <HAL_ADC_Start_DMA+0x1a8>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002974:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d006      	beq.n	8002996 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	f023 0206 	bic.w	r2, r3, #6
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
 8002994:	e002      	b.n	800299c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4a25      	ldr	r2, [pc, #148]	; (8002a40 <HAL_ADC_Start_DMA+0x1b0>)
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <HAL_ADC_Start_DMA+0x1b4>)
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_ADC_Start_DMA+0x1b8>)
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0202 	mvn.w	r2, #2
 80029c4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a18      	ldr	r0, [r3, #32]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	334c      	adds	r3, #76	; 0x4c
 80029e0:	4619      	mov	r1, r3
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f001 f9f5 	bl	8003dd4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029f8:	d108      	bne.n	8002a0c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002a08:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a0a:	e00f      	b.n	8002a2c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a1a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002a1c:	e006      	b.n	8002a2c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002a26:	e001      	b.n	8002a2c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40012400 	.word	0x40012400
 8002a3c:	40012800 	.word	0x40012800
 8002a40:	08002dab 	.word	0x08002dab
 8002a44:	08002e27 	.word	0x08002e27
 8002a48:	08002e43 	.word	0x08002e43

08002a4c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x20>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e0dc      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1da>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d81c      	bhi.n	8002aee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4019      	ands	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b05      	subs	r3, #5
 8002ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
 8002aec:	e03c      	b.n	8002b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d81c      	bhi.n	8002b30 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b23      	subs	r3, #35	; 0x23
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4019      	ands	r1, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b2e:	e01b      	b.n	8002b68 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b41      	subs	r3, #65	; 0x41
 8002b42:	221f      	movs	r2, #31
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b41      	subs	r3, #65	; 0x41
 8002b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d91c      	bls.n	8002baa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68d9      	ldr	r1, [r3, #12]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b1e      	subs	r3, #30
 8002b82:	2207      	movs	r2, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6898      	ldr	r0, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b1e      	subs	r3, #30
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	e019      	b.n	8002bde <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6919      	ldr	r1, [r3, #16]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4019      	ands	r1, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6898      	ldr	r0, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d003      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bea:	2b11      	cmp	r3, #17
 8002bec:	d132      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d125      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d126      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c14:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d11a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	0c9a      	lsrs	r2, r3, #18
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f9      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x1b2>
 8002c42:	e007      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012400 	.word	0x40012400
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	431bde83 	.word	0x431bde83

08002c74 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d040      	beq.n	8002d14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 0201 	orr.w	r2, r2, #1
 8002ca0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <ADC_Enable+0xac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <ADC_Enable+0xb0>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb0:	e002      	b.n	8002cb8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f9      	bne.n	8002cb2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cbe:	f7ff fce1 	bl	8002684 <HAL_GetTick>
 8002cc2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cc4:	e01f      	b.n	8002d06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cc6:	f7ff fcdd 	bl	8002684 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d918      	bls.n	8002d06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d011      	beq.n	8002d06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e007      	b.n	8002d16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d1d8      	bne.n	8002cc6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000000 	.word	0x20000000
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d12e      	bne.n	8002da0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d52:	f7ff fc97 	bl	8002684 <HAL_GetTick>
 8002d56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d58:	e01b      	b.n	8002d92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d5a:	f7ff fc93 	bl	8002684 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d914      	bls.n	8002d92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	f043 0210 	orr.w	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e007      	b.n	8002da2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d0dc      	beq.n	8002d5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d127      	bne.n	8002e14 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002dda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002dde:	d115      	bne.n	8002e0c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d111      	bne.n	8002e0c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fe1d 	bl	8002a4c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002e12:	e004      	b.n	8002e1e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	4798      	blx	r3
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fe12 	bl	8002a5e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	f043 0204 	orr.w	r2, r3, #4
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff fe01 	bl	8002a70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ed      	b.n	8003064 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe ffaf 	bl	8001df8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0201 	orr.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eaa:	f7ff fbeb 	bl	8002684 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb0:	e012      	b.n	8002ed8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb2:	f7ff fbe7 	bl	8002684 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b0a      	cmp	r3, #10
 8002ebe:	d90b      	bls.n	8002ed8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2205      	movs	r2, #5
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0c5      	b.n	8003064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0e5      	beq.n	8002eb2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0202 	bic.w	r2, r2, #2
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef6:	f7ff fbc5 	bl	8002684 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002efc:	e012      	b.n	8002f24 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002efe:	f7ff fbc1 	bl	8002684 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b0a      	cmp	r3, #10
 8002f0a:	d90b      	bls.n	8002f24 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2205      	movs	r2, #5
 8002f1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e09f      	b.n	8003064 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e1b      	ldrb	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e9b      	ldrb	r3, [r3, #26]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0220 	orr.w	r2, r2, #32
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0220 	bic.w	r2, r2, #32
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7edb      	ldrb	r3, [r3, #27]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0210 	bic.w	r2, r2, #16
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0210 	orr.w	r2, r2, #16
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0208 	orr.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0208 	bic.w	r2, r2, #8
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7f5b      	ldrb	r3, [r3, #29]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f042 0204 	orr.w	r2, r2, #4
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0204 	bic.w	r2, r2, #4
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	ea42 0103 	orr.w	r1, r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003082:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d003      	beq.n	8003092 <HAL_CAN_ConfigFilter+0x26>
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b02      	cmp	r3, #2
 800308e:	f040 80aa 	bne.w	80031e6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	401a      	ands	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d123      	bne.n	8003114 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3248      	adds	r2, #72	; 0x48
 80030f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003108:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800310a:	6979      	ldr	r1, [r7, #20]
 800310c:	3348      	adds	r3, #72	; 0x48
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d122      	bne.n	8003162 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800313c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3248      	adds	r2, #72	; 0x48
 8003142:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003156:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003158:	6979      	ldr	r1, [r7, #20]
 800315a:	3348      	adds	r3, #72	; 0x48
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	43db      	mvns	r3, r3
 8003174:	401a      	ands	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800317c:	e007      	b.n	800318e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	431a      	orrs	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d109      	bne.n	80031aa <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	401a      	ands	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031a8:	e007      	b.n	80031ba <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d107      	bne.n	80031d2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031d8:	f023 0201 	bic.w	r2, r3, #1
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e006      	b.n	80031f4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
  }
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d12e      	bne.n	8003270 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0201 	bic.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800322a:	f7ff fa2b 	bl	8002684 <HAL_GetTick>
 800322e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003230:	e012      	b.n	8003258 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003232:	f7ff fa27 	bl	8002684 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b0a      	cmp	r3, #10
 800323e:	d90b      	bls.n	8003258 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e012      	b.n	800327e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	e006      	b.n	800327e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003274:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003286:	b480      	push	{r7}
 8003288:	b089      	sub	sp, #36	; 0x24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	60b9      	str	r1, [r7, #8]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800329a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032a4:	7ffb      	ldrb	r3, [r7, #31]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d003      	beq.n	80032b2 <HAL_CAN_AddTxMessage+0x2c>
 80032aa:	7ffb      	ldrb	r3, [r7, #31]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f040 80b8 	bne.w	8003422 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d105      	bne.n	80032d2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a0 	beq.w	8003412 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	0e1b      	lsrs	r3, r3, #24
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d907      	bls.n	80032f2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e09e      	b.n	8003430 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032f2:	2201      	movs	r2, #1
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10d      	bne.n	8003320 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	6809      	ldr	r1, [r1, #0]
 8003312:	431a      	orrs	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3318      	adds	r3, #24
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	440b      	add	r3, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e00f      	b.n	8003340 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800332a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003330:	68f9      	ldr	r1, [r7, #12]
 8003332:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003334:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3318      	adds	r3, #24
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3318      	adds	r3, #24
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	440b      	add	r3, r1
 8003350:	3304      	adds	r3, #4
 8003352:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	7d1b      	ldrb	r3, [r3, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d111      	bne.n	8003380 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3318      	adds	r3, #24
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	6811      	ldr	r1, [r2, #0]
 8003370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3318      	adds	r3, #24
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	440b      	add	r3, r1
 800337c:	3304      	adds	r3, #4
 800337e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3307      	adds	r3, #7
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	061a      	lsls	r2, r3, #24
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3306      	adds	r3, #6
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3305      	adds	r3, #5
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	4313      	orrs	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	3204      	adds	r2, #4
 80033a0:	7812      	ldrb	r2, [r2, #0]
 80033a2:	4610      	mov	r0, r2
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	6811      	ldr	r1, [r2, #0]
 80033a8:	ea43 0200 	orr.w	r2, r3, r0
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3303      	adds	r3, #3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	061a      	lsls	r2, r3, #24
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3302      	adds	r3, #2
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	4313      	orrs	r3, r2
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	7812      	ldrb	r2, [r2, #0]
 80033d8:	4610      	mov	r0, r2
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6811      	ldr	r1, [r2, #0]
 80033de:	ea43 0200 	orr.w	r2, r3, r0
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	440b      	add	r3, r1
 80033e8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3318      	adds	r3, #24
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4413      	add	r3, r2
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	6811      	ldr	r1, [r2, #0]
 8003400:	f043 0201 	orr.w	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	3318      	adds	r3, #24
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	440b      	add	r3, r1
 800340c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800340e:	2300      	movs	r3, #0
 8003410:	e00e      	b.n	8003430 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e006      	b.n	8003430 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
  }
}
 8003430:	4618      	mov	r0, r3
 8003432:	3724      	adds	r7, #36	; 0x24
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr

0800343a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800343a:	b480      	push	{r7}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d003      	beq.n	800345e <HAL_CAN_GetRxMessage+0x24>
 8003456:	7dfb      	ldrb	r3, [r7, #23]
 8003458:	2b02      	cmp	r3, #2
 800345a:	f040 80f3 	bne.w	8003644 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10e      	bne.n	8003482 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d116      	bne.n	80034a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e0e7      	b.n	8003652 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0d8      	b.n	8003652 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	331b      	adds	r3, #27
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4413      	add	r3, r2
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0204 	and.w	r2, r3, #4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10c      	bne.n	80034d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	331b      	adds	r3, #27
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0d5b      	lsrs	r3, r3, #21
 80034ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	e00b      	b.n	80034f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	331b      	adds	r3, #27
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	4413      	add	r3, r2
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	08db      	lsrs	r3, r3, #3
 80034e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	331b      	adds	r3, #27
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0202 	and.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	331b      	adds	r3, #27
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4413      	add	r3, r2
 8003512:	3304      	adds	r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 020f 	and.w	r2, r3, #15
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	331b      	adds	r3, #27
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b2da      	uxtb	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	331b      	adds	r3, #27
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	4413      	add	r3, r2
 8003542:	3304      	adds	r3, #4
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	0c1b      	lsrs	r3, r3, #16
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	4413      	add	r3, r2
 8003558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0a1a      	lsrs	r2, r3, #8
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	4413      	add	r3, r2
 8003588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0c1a      	lsrs	r2, r3, #16
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	3302      	adds	r3, #2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	0e1a      	lsrs	r2, r3, #24
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	3303      	adds	r3, #3
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0a1a      	lsrs	r2, r3, #8
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	3305      	adds	r3, #5
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	0c1a      	lsrs	r2, r3, #16
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	3306      	adds	r3, #6
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	4413      	add	r3, r2
 8003608:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0e1a      	lsrs	r2, r3, #24
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3307      	adds	r3, #7
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d108      	bne.n	8003630 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	e007      	b.n	8003640 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	e006      	b.n	8003652 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	371c      	adds	r7, #28
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800366c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d002      	beq.n	800367a <HAL_CAN_ActivateNotification+0x1e>
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6959      	ldr	r1, [r3, #20]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e006      	b.n	800369c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
  }
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr

080036a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b08a      	sub	sp, #40	; 0x28
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d07c      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d023      	beq.n	800373e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f983 	bl	8003a14 <HAL_CAN_TxMailbox0CompleteCallback>
 800370e:	e016      	b.n	800373e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
 8003722:	e00c      	b.n	800373e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
 8003736:	e002      	b.n	800373e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f986 	bl	8003a4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d024      	beq.n	8003792 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003750:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f962 	bl	8003a26 <HAL_CAN_TxMailbox1CompleteCallback>
 8003762:	e016      	b.n	8003792 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e00c      	b.n	8003792 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e002      	b.n	8003792 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f965 	bl	8003a5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d024      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f941 	bl	8003a38 <HAL_CAN_TxMailbox2CompleteCallback>
 80037b6:	e016      	b.n	80037e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e00c      	b.n	80037e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e002      	b.n	80037e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f944 	bl	8003a6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00c      	beq.n	800380a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003800:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f003 0304 	and.w	r3, r3, #4
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d006      	beq.n	800382c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2208      	movs	r2, #8
 8003824:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 f92a 	bl	8003a80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7fe fe6f 	bl	8002528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00c      	beq.n	800386e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003864:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2210      	movs	r2, #16
 800386c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2208      	movs	r2, #8
 8003888:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f90a 	bl	8003aa4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8f2 	bl	8003a92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00b      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0310 	and.w	r3, r3, #16
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d006      	beq.n	80038d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2210      	movs	r2, #16
 80038c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f8f3 	bl	8003ab6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2208      	movs	r2, #8
 80038ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8eb 	bl	8003ac8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d07b      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d072      	beq.n	80039ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003960:	2b00      	cmp	r3, #0
 8003962:	d043      	beq.n	80039ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d03e      	beq.n	80039ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d02b      	beq.n	80039d0 <HAL_CAN_IRQHandler+0x32a>
 8003978:	2b60      	cmp	r3, #96	; 0x60
 800397a:	d82e      	bhi.n	80039da <HAL_CAN_IRQHandler+0x334>
 800397c:	2b50      	cmp	r3, #80	; 0x50
 800397e:	d022      	beq.n	80039c6 <HAL_CAN_IRQHandler+0x320>
 8003980:	2b50      	cmp	r3, #80	; 0x50
 8003982:	d82a      	bhi.n	80039da <HAL_CAN_IRQHandler+0x334>
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d019      	beq.n	80039bc <HAL_CAN_IRQHandler+0x316>
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	d826      	bhi.n	80039da <HAL_CAN_IRQHandler+0x334>
 800398c:	2b30      	cmp	r3, #48	; 0x30
 800398e:	d010      	beq.n	80039b2 <HAL_CAN_IRQHandler+0x30c>
 8003990:	2b30      	cmp	r3, #48	; 0x30
 8003992:	d822      	bhi.n	80039da <HAL_CAN_IRQHandler+0x334>
 8003994:	2b10      	cmp	r3, #16
 8003996:	d002      	beq.n	800399e <HAL_CAN_IRQHandler+0x2f8>
 8003998:	2b20      	cmp	r3, #32
 800399a:	d005      	beq.n	80039a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800399c:	e01d      	b.n	80039da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	f043 0308 	orr.w	r3, r3, #8
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a6:	e019      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f043 0310 	orr.w	r3, r3, #16
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039b0:	e014      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	f043 0320 	orr.w	r3, r3, #32
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ba:	e00f      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c4:	e00a      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ce:	e005      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039d8:	e000      	b.n	80039dc <HAL_CAN_IRQHandler+0x336>
            break;
 80039da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699a      	ldr	r2, [r3, #24]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2204      	movs	r2, #4
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f867 	bl	8003ada <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	3728      	adds	r7, #40	; 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr

08003a4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	b083      	sub	sp, #12
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr

08003ada <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b14:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b20:	4013      	ands	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b36:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <__NVIC_SetPriorityGrouping+0x44>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	60d3      	str	r3, [r2, #12]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b50:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <__NVIC_GetPriorityGrouping+0x18>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	0a1b      	lsrs	r3, r3, #8
 8003b56:	f003 0307 	and.w	r3, r3, #7
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000ed00 	.word	0xe000ed00

08003b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	db0b      	blt.n	8003b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 021f 	and.w	r2, r3, #31
 8003b80:	4906      	ldr	r1, [pc, #24]	; (8003b9c <__NVIC_EnableIRQ+0x34>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	2001      	movs	r0, #1
 8003b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	; (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	; (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f1c3 0307 	rsb	r3, r3, #7
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf28      	it	cs
 8003c12:	2304      	movcs	r3, #4
 8003c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d902      	bls.n	8003c24 <NVIC_EncodePriority+0x30>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3b03      	subs	r3, #3
 8003c22:	e000      	b.n	8003c26 <NVIC_EncodePriority+0x32>
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	4313      	orrs	r3, r2
         );
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	; 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr

08003c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c68:	d301      	bcc.n	8003c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00f      	b.n	8003c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <SysTick_Config+0x40>)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c76:	210f      	movs	r1, #15
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	f7ff ff90 	bl	8003ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <SysTick_Config+0x40>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c86:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <SysTick_Config+0x40>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	e000e010 	.word	0xe000e010

08003c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff2d 	bl	8003b04 <__NVIC_SetPriorityGrouping>
}
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc4:	f7ff ff42 	bl	8003b4c <__NVIC_GetPriorityGrouping>
 8003cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6978      	ldr	r0, [r7, #20]
 8003cd0:	f7ff ff90 	bl	8003bf4 <NVIC_EncodePriority>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff5f 	bl	8003ba0 <__NVIC_SetPriority>
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff35 	bl	8003b68 <__NVIC_EnableIRQ>
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ffa2 	bl	8003c58 <SysTick_Config>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e043      	b.n	8003dbe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b22      	ldr	r3, [pc, #136]	; (8003dc8 <HAL_DMA_Init+0xa8>)
 8003d3e:	4413      	add	r3, r2
 8003d40:	4a22      	ldr	r2, [pc, #136]	; (8003dcc <HAL_DMA_Init+0xac>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	009a      	lsls	r2, r3, #2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <HAL_DMA_Init+0xb0>)
 8003d52:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d6a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	bffdfff8 	.word	0xbffdfff8
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	40020000 	.word	0x40020000

08003dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_DMA_Start_IT+0x20>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e04a      	b.n	8003e8a <HAL_DMA_Start_IT+0xb6>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d13a      	bne.n	8003e7c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0201 	bic.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	68b9      	ldr	r1, [r7, #8]
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f8e2 	bl	8003ff4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 020e 	orr.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e00f      	b.n	8003e6a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0204 	bic.w	r2, r2, #4
 8003e58:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 020a 	orr.w	r2, r2, #10
 8003e68:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e005      	b.n	8003e88 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
 8003e86:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d008      	beq.n	8003eba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e020      	b.n	8003efc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 020e 	bic.w	r2, r2, #14
 8003ec8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
	...

08003f08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d005      	beq.n	8003f2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
 8003f28:	e051      	b.n	8003fce <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 020e 	bic.w	r2, r2, #14
 8003f38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_DMA_Abort_IT+0xd0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d029      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0xa0>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <HAL_DMA_Abort_IT+0xd4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d022      	beq.n	8003fa4 <HAL_DMA_Abort_IT+0x9c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_DMA_Abort_IT+0xd8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d01a      	beq.n	8003f9e <HAL_DMA_Abort_IT+0x96>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_DMA_Abort_IT+0xdc>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d012      	beq.n	8003f98 <HAL_DMA_Abort_IT+0x90>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_DMA_Abort_IT+0xe0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00a      	beq.n	8003f92 <HAL_DMA_Abort_IT+0x8a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a1a      	ldr	r2, [pc, #104]	; (8003fec <HAL_DMA_Abort_IT+0xe4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d102      	bne.n	8003f8c <HAL_DMA_Abort_IT+0x84>
 8003f86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f8a:	e00e      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003f8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f90:	e00b      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f96:	e008      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f9c:	e005      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fa2:	e002      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	e000      	b.n	8003faa <HAL_DMA_Abort_IT+0xa2>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <HAL_DMA_Abort_IT+0xe8>)
 8003fac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	4798      	blx	r3
    } 
  }
  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40020008 	.word	0x40020008
 8003fdc:	4002001c 	.word	0x4002001c
 8003fe0:	40020030 	.word	0x40020030
 8003fe4:	40020044 	.word	0x40020044
 8003fe8:	40020058 	.word	0x40020058
 8003fec:	4002006c 	.word	0x4002006c
 8003ff0:	40020000 	.word	0x40020000

08003ff4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	2101      	movs	r1, #1
 800400c:	fa01 f202 	lsl.w	r2, r1, r2
 8004010:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b10      	cmp	r3, #16
 8004020:	d108      	bne.n	8004034 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004032:	e007      	b.n	8004044 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	60da      	str	r2, [r3, #12]
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr
	...

08004050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004050:	b480      	push	{r7}
 8004052:	b08b      	sub	sp, #44	; 0x2c
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800405e:	2300      	movs	r3, #0
 8004060:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004062:	e169      	b.n	8004338 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004064:	2201      	movs	r2, #1
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	429a      	cmp	r2, r3
 800407e:	f040 8158 	bne.w	8004332 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a9a      	ldr	r2, [pc, #616]	; (80042f0 <HAL_GPIO_Init+0x2a0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d05e      	beq.n	800414a <HAL_GPIO_Init+0xfa>
 800408c:	4a98      	ldr	r2, [pc, #608]	; (80042f0 <HAL_GPIO_Init+0x2a0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d875      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 8004092:	4a98      	ldr	r2, [pc, #608]	; (80042f4 <HAL_GPIO_Init+0x2a4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d058      	beq.n	800414a <HAL_GPIO_Init+0xfa>
 8004098:	4a96      	ldr	r2, [pc, #600]	; (80042f4 <HAL_GPIO_Init+0x2a4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d86f      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 800409e:	4a96      	ldr	r2, [pc, #600]	; (80042f8 <HAL_GPIO_Init+0x2a8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d052      	beq.n	800414a <HAL_GPIO_Init+0xfa>
 80040a4:	4a94      	ldr	r2, [pc, #592]	; (80042f8 <HAL_GPIO_Init+0x2a8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d869      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 80040aa:	4a94      	ldr	r2, [pc, #592]	; (80042fc <HAL_GPIO_Init+0x2ac>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04c      	beq.n	800414a <HAL_GPIO_Init+0xfa>
 80040b0:	4a92      	ldr	r2, [pc, #584]	; (80042fc <HAL_GPIO_Init+0x2ac>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d863      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 80040b6:	4a92      	ldr	r2, [pc, #584]	; (8004300 <HAL_GPIO_Init+0x2b0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d046      	beq.n	800414a <HAL_GPIO_Init+0xfa>
 80040bc:	4a90      	ldr	r2, [pc, #576]	; (8004300 <HAL_GPIO_Init+0x2b0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d85d      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 80040c2:	2b12      	cmp	r3, #18
 80040c4:	d82a      	bhi.n	800411c <HAL_GPIO_Init+0xcc>
 80040c6:	2b12      	cmp	r3, #18
 80040c8:	d859      	bhi.n	800417e <HAL_GPIO_Init+0x12e>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <HAL_GPIO_Init+0x80>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	0800414b 	.word	0x0800414b
 80040d4:	08004125 	.word	0x08004125
 80040d8:	08004137 	.word	0x08004137
 80040dc:	08004179 	.word	0x08004179
 80040e0:	0800417f 	.word	0x0800417f
 80040e4:	0800417f 	.word	0x0800417f
 80040e8:	0800417f 	.word	0x0800417f
 80040ec:	0800417f 	.word	0x0800417f
 80040f0:	0800417f 	.word	0x0800417f
 80040f4:	0800417f 	.word	0x0800417f
 80040f8:	0800417f 	.word	0x0800417f
 80040fc:	0800417f 	.word	0x0800417f
 8004100:	0800417f 	.word	0x0800417f
 8004104:	0800417f 	.word	0x0800417f
 8004108:	0800417f 	.word	0x0800417f
 800410c:	0800417f 	.word	0x0800417f
 8004110:	0800417f 	.word	0x0800417f
 8004114:	0800412d 	.word	0x0800412d
 8004118:	08004141 	.word	0x08004141
 800411c:	4a79      	ldr	r2, [pc, #484]	; (8004304 <HAL_GPIO_Init+0x2b4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d013      	beq.n	800414a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004122:	e02c      	b.n	800417e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	623b      	str	r3, [r7, #32]
          break;
 800412a:	e029      	b.n	8004180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	623b      	str	r3, [r7, #32]
          break;
 8004134:	e024      	b.n	8004180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	3308      	adds	r3, #8
 800413c:	623b      	str	r3, [r7, #32]
          break;
 800413e:	e01f      	b.n	8004180 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	330c      	adds	r3, #12
 8004146:	623b      	str	r3, [r7, #32]
          break;
 8004148:	e01a      	b.n	8004180 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004152:	2304      	movs	r3, #4
 8004154:	623b      	str	r3, [r7, #32]
          break;
 8004156:	e013      	b.n	8004180 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004160:	2308      	movs	r3, #8
 8004162:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	611a      	str	r2, [r3, #16]
          break;
 800416a:	e009      	b.n	8004180 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800416c:	2308      	movs	r3, #8
 800416e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	615a      	str	r2, [r3, #20]
          break;
 8004176:	e003      	b.n	8004180 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004178:	2300      	movs	r3, #0
 800417a:	623b      	str	r3, [r7, #32]
          break;
 800417c:	e000      	b.n	8004180 <HAL_GPIO_Init+0x130>
          break;
 800417e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2bff      	cmp	r3, #255	; 0xff
 8004184:	d801      	bhi.n	800418a <HAL_GPIO_Init+0x13a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	e001      	b.n	800418e <HAL_GPIO_Init+0x13e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2bff      	cmp	r3, #255	; 0xff
 8004194:	d802      	bhi.n	800419c <HAL_GPIO_Init+0x14c>
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	e002      	b.n	80041a2 <HAL_GPIO_Init+0x152>
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	3b08      	subs	r3, #8
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	210f      	movs	r1, #15
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 80b1 	beq.w	8004332 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80041d0:	4b4d      	ldr	r3, [pc, #308]	; (8004308 <HAL_GPIO_Init+0x2b8>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	4a4c      	ldr	r2, [pc, #304]	; (8004308 <HAL_GPIO_Init+0x2b8>)
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	6193      	str	r3, [r2, #24]
 80041dc:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_GPIO_Init+0x2b8>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80041e8:	4a48      	ldr	r2, [pc, #288]	; (800430c <HAL_GPIO_Init+0x2bc>)
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	3302      	adds	r3, #2
 80041f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	220f      	movs	r2, #15
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a40      	ldr	r2, [pc, #256]	; (8004310 <HAL_GPIO_Init+0x2c0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_GPIO_Init+0x1ec>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3f      	ldr	r2, [pc, #252]	; (8004314 <HAL_GPIO_Init+0x2c4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00d      	beq.n	8004238 <HAL_GPIO_Init+0x1e8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3e      	ldr	r2, [pc, #248]	; (8004318 <HAL_GPIO_Init+0x2c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <HAL_GPIO_Init+0x1e4>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3d      	ldr	r2, [pc, #244]	; (800431c <HAL_GPIO_Init+0x2cc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_GPIO_Init+0x1e0>
 800422c:	2303      	movs	r3, #3
 800422e:	e006      	b.n	800423e <HAL_GPIO_Init+0x1ee>
 8004230:	2304      	movs	r3, #4
 8004232:	e004      	b.n	800423e <HAL_GPIO_Init+0x1ee>
 8004234:	2302      	movs	r3, #2
 8004236:	e002      	b.n	800423e <HAL_GPIO_Init+0x1ee>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_GPIO_Init+0x1ee>
 800423c:	2300      	movs	r3, #0
 800423e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004240:	f002 0203 	and.w	r2, r2, #3
 8004244:	0092      	lsls	r2, r2, #2
 8004246:	4093      	lsls	r3, r2
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800424e:	492f      	ldr	r1, [pc, #188]	; (800430c <HAL_GPIO_Init+0x2bc>)
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d006      	beq.n	8004276 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	492c      	ldr	r1, [pc, #176]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
 8004274:	e006      	b.n	8004284 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	43db      	mvns	r3, r3
 800427e:	4928      	ldr	r1, [pc, #160]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 8004280:	4013      	ands	r3, r2
 8004282:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004290:	4b23      	ldr	r3, [pc, #140]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4922      	ldr	r1, [pc, #136]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	e006      	b.n	80042ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	491e      	ldr	r1, [pc, #120]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d006      	beq.n	80042c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042b8:	4b19      	ldr	r3, [pc, #100]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4918      	ldr	r1, [pc, #96]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]
 80042c4:	e006      	b.n	80042d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	4914      	ldr	r1, [pc, #80]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d021      	beq.n	8004324 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	490e      	ldr	r1, [pc, #56]	; (8004320 <HAL_GPIO_Init+0x2d0>)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60cb      	str	r3, [r1, #12]
 80042ec:	e021      	b.n	8004332 <HAL_GPIO_Init+0x2e2>
 80042ee:	bf00      	nop
 80042f0:	10320000 	.word	0x10320000
 80042f4:	10310000 	.word	0x10310000
 80042f8:	10220000 	.word	0x10220000
 80042fc:	10210000 	.word	0x10210000
 8004300:	10120000 	.word	0x10120000
 8004304:	10110000 	.word	0x10110000
 8004308:	40021000 	.word	0x40021000
 800430c:	40010000 	.word	0x40010000
 8004310:	40010800 	.word	0x40010800
 8004314:	40010c00 	.word	0x40010c00
 8004318:	40011000 	.word	0x40011000
 800431c:	40011400 	.word	0x40011400
 8004320:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <HAL_GPIO_Init+0x304>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	43db      	mvns	r3, r3
 800432c:	4909      	ldr	r1, [pc, #36]	; (8004354 <HAL_GPIO_Init+0x304>)
 800432e:	4013      	ands	r3, r2
 8004330:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	3301      	adds	r3, #1
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f47f ae8e 	bne.w	8004064 <HAL_GPIO_Init+0x14>
  }
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	372c      	adds	r7, #44	; 0x2c
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40010400 	.word	0x40010400

08004358 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004370:	2301      	movs	r3, #1
 8004372:	73fb      	strb	r3, [r7, #15]
 8004374:	e001      	b.n	800437a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004376:	2300      	movs	r3, #0
 8004378:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	807b      	strh	r3, [r7, #2]
 8004392:	4613      	mov	r3, r2
 8004394:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004396:	787b      	ldrb	r3, [r7, #1]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800439c:	887a      	ldrh	r2, [r7, #2]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80043a2:	e003      	b.n	80043ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	041a      	lsls	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	611a      	str	r2, [r3, #16]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4013      	ands	r3, r2
 80043ce:	041a      	lsls	r2, r3, #16
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	43d9      	mvns	r1, r3
 80043d4:	887b      	ldrh	r3, [r7, #2]
 80043d6:	400b      	ands	r3, r1
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	611a      	str	r2, [r3, #16]
}
 80043de:	bf00      	nop
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bc80      	pop	{r7}
 80043e6:	4770      	bx	lr

080043e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043f2:	4b08      	ldr	r3, [pc, #32]	; (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d006      	beq.n	800440c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe f81e 	bl	8002448 <HAL_GPIO_EXTI_Callback>
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e12b      	b.n	8004682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d106      	bne.n	8004444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fd42 	bl	8001ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	; 0x24
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800446a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800447a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800447c:	f000 fce4 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8004480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	4a81      	ldr	r2, [pc, #516]	; (800468c <HAL_I2C_Init+0x274>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d807      	bhi.n	800449c <HAL_I2C_Init+0x84>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	4a80      	ldr	r2, [pc, #512]	; (8004690 <HAL_I2C_Init+0x278>)
 8004490:	4293      	cmp	r3, r2
 8004492:	bf94      	ite	ls
 8004494:	2301      	movls	r3, #1
 8004496:	2300      	movhi	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e006      	b.n	80044aa <HAL_I2C_Init+0x92>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a7d      	ldr	r2, [pc, #500]	; (8004694 <HAL_I2C_Init+0x27c>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	bf94      	ite	ls
 80044a4:	2301      	movls	r3, #1
 80044a6:	2300      	movhi	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e0e7      	b.n	8004682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a78      	ldr	r2, [pc, #480]	; (8004698 <HAL_I2C_Init+0x280>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	0c9b      	lsrs	r3, r3, #18
 80044bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	4a6a      	ldr	r2, [pc, #424]	; (800468c <HAL_I2C_Init+0x274>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d802      	bhi.n	80044ec <HAL_I2C_Init+0xd4>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3301      	adds	r3, #1
 80044ea:	e009      	b.n	8004500 <HAL_I2C_Init+0xe8>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	4a69      	ldr	r2, [pc, #420]	; (800469c <HAL_I2C_Init+0x284>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	099b      	lsrs	r3, r3, #6
 80044fe:	3301      	adds	r3, #1
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	430b      	orrs	r3, r1
 8004506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004512:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	495c      	ldr	r1, [pc, #368]	; (800468c <HAL_I2C_Init+0x274>)
 800451c:	428b      	cmp	r3, r1
 800451e:	d819      	bhi.n	8004554 <HAL_I2C_Init+0x13c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e59      	subs	r1, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fbb1 f3f3 	udiv	r3, r1, r3
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004534:	400b      	ands	r3, r1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_I2C_Init+0x138>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1e59      	subs	r1, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fbb1 f3f3 	udiv	r3, r1, r3
 8004548:	3301      	adds	r3, #1
 800454a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800454e:	e051      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 8004550:	2304      	movs	r3, #4
 8004552:	e04f      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d111      	bne.n	8004580 <HAL_I2C_Init+0x168>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e58      	subs	r0, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6859      	ldr	r1, [r3, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	440b      	add	r3, r1
 800456a:	fbb0 f3f3 	udiv	r3, r0, r3
 800456e:	3301      	adds	r3, #1
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e012      	b.n	80045a6 <HAL_I2C_Init+0x18e>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	0099      	lsls	r1, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Init+0x196>
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10e      	bne.n	80045d4 <HAL_I2C_Init+0x1bc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1e58      	subs	r0, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	440b      	add	r3, r1
 80045c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c8:	3301      	adds	r3, #1
 80045ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d2:	e00f      	b.n	80045f4 <HAL_I2C_Init+0x1dc>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1e58      	subs	r0, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	0099      	lsls	r1, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ea:	3301      	adds	r3, #1
 80045ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	6809      	ldr	r1, [r1, #0]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69da      	ldr	r2, [r3, #28]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004622:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6911      	ldr	r1, [r2, #16]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68d2      	ldr	r2, [r2, #12]
 800462e:	4311      	orrs	r1, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	430b      	orrs	r3, r1
 8004636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	000186a0 	.word	0x000186a0
 8004690:	001e847f 	.word	0x001e847f
 8004694:	003d08ff 	.word	0x003d08ff
 8004698:	431bde83 	.word	0x431bde83
 800469c:	10624dd3 	.word	0x10624dd3

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e272      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8087 	beq.w	80047ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c0:	4b92      	ldr	r3, [pc, #584]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d00c      	beq.n	80046e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046cc:	4b8f      	ldr	r3, [pc, #572]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 030c 	and.w	r3, r3, #12
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d112      	bne.n	80046fe <HAL_RCC_OscConfig+0x5e>
 80046d8:	4b8c      	ldr	r3, [pc, #560]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e4:	d10b      	bne.n	80046fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e6:	4b89      	ldr	r3, [pc, #548]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d06c      	beq.n	80047cc <HAL_RCC_OscConfig+0x12c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d168      	bne.n	80047cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e24c      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x76>
 8004708:	4b80      	ldr	r3, [pc, #512]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a7f      	ldr	r2, [pc, #508]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	e02e      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x98>
 800471e:	4b7b      	ldr	r3, [pc, #492]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7a      	ldr	r2, [pc, #488]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	4b78      	ldr	r3, [pc, #480]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a77      	ldr	r2, [pc, #476]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	e01d      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0xbc>
 8004742:	4b72      	ldr	r3, [pc, #456]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a71      	ldr	r2, [pc, #452]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b6f      	ldr	r3, [pc, #444]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a6e      	ldr	r2, [pc, #440]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0xd4>
 800475c:	4b6b      	ldr	r3, [pc, #428]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6a      	ldr	r2, [pc, #424]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	4b68      	ldr	r3, [pc, #416]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a67      	ldr	r2, [pc, #412]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 800476e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d013      	beq.n	80047a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd ff82 	bl	8002684 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fd ff7e 	bl	8002684 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e200      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004796:	4b5d      	ldr	r3, [pc, #372]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0xe4>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fd ff6e 	bl	8002684 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fd ff6a 	bl	8002684 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e1ec      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047be:	4b53      	ldr	r3, [pc, #332]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1f0      	bne.n	80047ac <HAL_RCC_OscConfig+0x10c>
 80047ca:	e000      	b.n	80047ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d063      	beq.n	80048a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047da:	4b4c      	ldr	r3, [pc, #304]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047e6:	4b49      	ldr	r3, [pc, #292]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11c      	bne.n	800482c <HAL_RCC_OscConfig+0x18c>
 80047f2:	4b46      	ldr	r3, [pc, #280]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d116      	bne.n	800482c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_RCC_OscConfig+0x176>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d001      	beq.n	8004816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e1c0      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004816:	4b3d      	ldr	r3, [pc, #244]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4939      	ldr	r1, [pc, #228]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004826:	4313      	orrs	r3, r2
 8004828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482a:	e03a      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d020      	beq.n	8004876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x270>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd ff23 	bl	8002684 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004842:	f7fd ff1f 	bl	8002684 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e1a1      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004854:	4b2d      	ldr	r3, [pc, #180]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004860:	4b2a      	ldr	r3, [pc, #168]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4927      	ldr	r1, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	600b      	str	r3, [r1, #0]
 8004874:	e015      	b.n	80048a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004876:	4b26      	ldr	r3, [pc, #152]	; (8004910 <HAL_RCC_OscConfig+0x270>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd ff02 	bl	8002684 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004884:	f7fd fefe 	bl	8002684 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e180      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004896:	4b1d      	ldr	r3, [pc, #116]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03a      	beq.n	8004924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d019      	beq.n	80048ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_RCC_OscConfig+0x274>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fd fee2 	bl	8002684 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c4:	f7fd fede 	bl	8002684 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e160      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <HAL_RCC_OscConfig+0x26c>)
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048e2:	2001      	movs	r0, #1
 80048e4:	f000 fad8 	bl	8004e98 <RCC_Delay>
 80048e8:	e01c      	b.n	8004924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <HAL_RCC_OscConfig+0x274>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fd fec8 	bl	8002684 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f6:	e00f      	b.n	8004918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f8:	f7fd fec4 	bl	8002684 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d908      	bls.n	8004918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e146      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
 800490a:	bf00      	nop
 800490c:	40021000 	.word	0x40021000
 8004910:	42420000 	.word	0x42420000
 8004914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004918:	4b92      	ldr	r3, [pc, #584]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e9      	bne.n	80048f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80a6 	beq.w	8004a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004936:	4b8b      	ldr	r3, [pc, #556]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10d      	bne.n	800495e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004942:	4b88      	ldr	r3, [pc, #544]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4a87      	ldr	r2, [pc, #540]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494c:	61d3      	str	r3, [r2, #28]
 800494e:	4b85      	ldr	r3, [pc, #532]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800495a:	2301      	movs	r3, #1
 800495c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495e:	4b82      	ldr	r3, [pc, #520]	; (8004b68 <HAL_RCC_OscConfig+0x4c8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d118      	bne.n	800499c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800496a:	4b7f      	ldr	r3, [pc, #508]	; (8004b68 <HAL_RCC_OscConfig+0x4c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a7e      	ldr	r2, [pc, #504]	; (8004b68 <HAL_RCC_OscConfig+0x4c8>)
 8004970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004976:	f7fd fe85 	bl	8002684 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800497e:	f7fd fe81 	bl	8002684 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b64      	cmp	r3, #100	; 0x64
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e103      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	4b75      	ldr	r3, [pc, #468]	; (8004b68 <HAL_RCC_OscConfig+0x4c8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x312>
 80049a4:	4b6f      	ldr	r3, [pc, #444]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	4a6e      	ldr	r2, [pc, #440]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	6213      	str	r3, [r2, #32]
 80049b0:	e02d      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x334>
 80049ba:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	4a69      	ldr	r2, [pc, #420]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	6213      	str	r3, [r2, #32]
 80049c6:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	6213      	str	r3, [r2, #32]
 80049d2:	e01c      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b05      	cmp	r3, #5
 80049da:	d10c      	bne.n	80049f6 <HAL_RCC_OscConfig+0x356>
 80049dc:	4b61      	ldr	r3, [pc, #388]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4a60      	ldr	r2, [pc, #384]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049e2:	f043 0304 	orr.w	r3, r3, #4
 80049e6:	6213      	str	r3, [r2, #32]
 80049e8:	4b5e      	ldr	r3, [pc, #376]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	4a5d      	ldr	r2, [pc, #372]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	6213      	str	r3, [r2, #32]
 80049f4:	e00b      	b.n	8004a0e <HAL_RCC_OscConfig+0x36e>
 80049f6:	4b5b      	ldr	r3, [pc, #364]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	4a5a      	ldr	r2, [pc, #360]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	6213      	str	r3, [r2, #32]
 8004a02:	4b58      	ldr	r3, [pc, #352]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a57      	ldr	r2, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a08:	f023 0304 	bic.w	r3, r3, #4
 8004a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d015      	beq.n	8004a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fd fe35 	bl	8002684 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fd fe31 	bl	8002684 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e0b1      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a34:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ee      	beq.n	8004a1e <HAL_RCC_OscConfig+0x37e>
 8004a40:	e014      	b.n	8004a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a42:	f7fd fe1f 	bl	8002684 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a48:	e00a      	b.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4a:	f7fd fe1b 	bl	8002684 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e09b      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a60:	4b40      	ldr	r3, [pc, #256]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ee      	bne.n	8004a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a72:	4b3c      	ldr	r3, [pc, #240]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4a3b      	ldr	r2, [pc, #236]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8087 	beq.w	8004b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a88:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 030c 	and.w	r3, r3, #12
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d061      	beq.n	8004b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d146      	bne.n	8004b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	4b33      	ldr	r3, [pc, #204]	; (8004b6c <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fdef 	bl	8002684 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd fdeb 	bl	8002684 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e06d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004abc:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d108      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ad2:	4b24      	ldr	r3, [pc, #144]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	4921      	ldr	r1, [pc, #132]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a19      	ldr	r1, [r3, #32]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	430b      	orrs	r3, r1
 8004af6:	491b      	ldr	r1, [pc, #108]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCC_OscConfig+0x4cc>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fd fdbf 	bl	8002684 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0a:	f7fd fdbb 	bl	8002684 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e03d      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x46a>
 8004b28:	e035      	b.n	8004b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_RCC_OscConfig+0x4cc>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fd fda8 	bl	8002684 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fd fda4 	bl	8002684 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e026      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b4a:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCC_OscConfig+0x4c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0x498>
 8004b56:	e01e      	b.n	8004b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d107      	bne.n	8004b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e019      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <HAL_RCC_OscConfig+0x500>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d106      	bne.n	8004b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d001      	beq.n	8004b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0d0      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb8:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d910      	bls.n	8004be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc6:	4b67      	ldr	r3, [pc, #412]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 0207 	bic.w	r2, r3, #7
 8004bce:	4965      	ldr	r1, [pc, #404]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bd6:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0b8      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c00:	4b59      	ldr	r3, [pc, #356]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	4a58      	ldr	r2, [pc, #352]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c18:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a52      	ldr	r2, [pc, #328]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c24:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	494d      	ldr	r1, [pc, #308]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d040      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c4a:	4b47      	ldr	r3, [pc, #284]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d115      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07f      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e073      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c72:	4b3d      	ldr	r3, [pc, #244]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e06b      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b39      	ldr	r3, [pc, #228]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4936      	ldr	r1, [pc, #216]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c94:	f7fd fcf6 	bl	8002684 <HAL_GetTick>
 8004c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9c:	f7fd fcf2 	bl	8002684 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e053      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cb2:	4b2d      	ldr	r3, [pc, #180]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f003 020c 	and.w	r2, r3, #12
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1eb      	bne.n	8004c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d210      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 0207 	bic.w	r2, r3, #7
 8004cda:	4922      	ldr	r1, [pc, #136]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_RCC_ClockConfig+0x1c0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e032      	b.n	8004d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b19      	ldr	r3, [pc, #100]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4916      	ldr	r1, [pc, #88]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	490e      	ldr	r1, [pc, #56]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d32:	f000 f821 	bl	8004d78 <HAL_RCC_GetSysClockFreq>
 8004d36:	4602      	mov	r2, r0
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <HAL_RCC_ClockConfig+0x1c4>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	490a      	ldr	r1, [pc, #40]	; (8004d6c <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	5ccb      	ldrb	r3, [r1, r3]
 8004d46:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1cc>)
 8004d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <HAL_RCC_ClockConfig+0x1d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd fc54 	bl	8002600 <HAL_InitTick>

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40022000 	.word	0x40022000
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	08008f60 	.word	0x08008f60
 8004d70:	20000000 	.word	0x20000000
 8004d74:	20000034 	.word	0x20000034

08004d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d78:	b490      	push	{r4, r7}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d80:	1d3c      	adds	r4, r7, #4
 8004d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d88:	f240 2301 	movw	r3, #513	; 0x201
 8004d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004da2:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x40>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x46>
 8004db6:	e02b      	b.n	8004e10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dba:	623b      	str	r3, [r7, #32]
      break;
 8004dbc:	e02b      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	f003 030f 	and.w	r3, r3, #15
 8004dc6:	3328      	adds	r3, #40	; 0x28
 8004dc8:	443b      	add	r3, r7
 8004dca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d012      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	0c5b      	lsrs	r3, r3, #17
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	3328      	adds	r3, #40	; 0x28
 8004de6:	443b      	add	r3, r7
 8004de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	4a0e      	ldr	r2, [pc, #56]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004df2:	fb03 f202 	mul.w	r2, r3, r2
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	e004      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	623b      	str	r3, [r7, #32]
      break;
 8004e0e:	e002      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004e12:	623b      	str	r3, [r7, #32]
      break;
 8004e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e16:	6a3b      	ldr	r3, [r7, #32]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc90      	pop	{r4, r7}
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	08008f50 	.word	0x08008f50
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	007a1200 	.word	0x007a1200
 8004e30:	003d0900 	.word	0x003d0900

08004e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	20000000 	.word	0x20000000

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e4c:	f7ff fff2 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4903      	ldr	r1, [pc, #12]	; (8004e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	08008f70 	.word	0x08008f70

08004e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e74:	f7ff ffde 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	0adb      	lsrs	r3, r3, #11
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4903      	ldr	r1, [pc, #12]	; (8004e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000
 8004e94:	08008f70 	.word	0x08008f70

08004e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <RCC_Delay+0x34>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <RCC_Delay+0x38>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0a5b      	lsrs	r3, r3, #9
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	fb02 f303 	mul.w	r3, r2, r3
 8004eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004eb4:	bf00      	nop
  }
  while (Delay --);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1e5a      	subs	r2, r3, #1
 8004eba:	60fa      	str	r2, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <RCC_Delay+0x1c>
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr
 8004ecc:	20000000 	.word	0x20000000
 8004ed0:	10624dd3 	.word	0x10624dd3

08004ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f00:	4b4c      	ldr	r3, [pc, #304]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	61d3      	str	r3, [r2, #28]
 8004f0c:	4b49      	ldr	r3, [pc, #292]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1c:	4b46      	ldr	r3, [pc, #280]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d118      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f28:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a42      	ldr	r2, [pc, #264]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f34:	f7fd fba6 	bl	8002684 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3a:	e008      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fd fba2 	bl	8002684 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	; 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e06d      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4e:	4b3a      	ldr	r3, [pc, #232]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f5a:	4b36      	ldr	r3, [pc, #216]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02e      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d027      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f78:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f88:	4b2c      	ldr	r3, [pc, #176]	; (800503c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f8e:	4a29      	ldr	r2, [pc, #164]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d014      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9e:	f7fd fb71 	bl	8002684 <HAL_GetTick>
 8004fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	e00a      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fa6:	f7fd fb6d 	bl	8002684 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e036      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0ee      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	4917      	ldr	r1, [pc, #92]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe0:	4b14      	ldr	r3, [pc, #80]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	490b      	ldr	r1, [pc, #44]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005006:	4313      	orrs	r3, r2
 8005008:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d008      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	4904      	ldr	r1, [pc, #16]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
 800503c:	42420440 	.word	0x42420440

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc ff6c 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 fa70 	bl	8005564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d001      	beq.n	80050f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e03a      	b.n	800516e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <HAL_TIM_Base_Start_IT+0x98>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d009      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a14      	ldr	r2, [pc, #80]	; (800517c <HAL_TIM_Base_Start_IT+0x9c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x58>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a13      	ldr	r2, [pc, #76]	; (8005180 <HAL_TIM_Base_Start_IT+0xa0>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr
 8005178:	40012c00 	.word	0x40012c00
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800

08005184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0202 	mvn.w	r2, #2
 80051b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9b1 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f9a4 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f9b3 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0204 	mvn.w	r2, #4
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f987 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f97a 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f989 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b08      	cmp	r3, #8
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b08      	cmp	r3, #8
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0208 	mvn.w	r2, #8
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f95d 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f950 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f95f 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0310 	and.w	r3, r3, #16
 80052a0:	2b10      	cmp	r3, #16
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0210 	mvn.w	r2, #16
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2208      	movs	r2, #8
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f933 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f926 	bl	800551c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f935 	bl	8005540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d10e      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0201 	mvn.w	r2, #1
 8005300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd f8e4 	bl	80024d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d10e      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d107      	bne.n	8005334 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800532c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa77 	bl	8005822 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534c:	2b40      	cmp	r3, #64	; 0x40
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8f9 	bl	8005552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b20      	cmp	r3, #32
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0220 	mvn.w	r2, #32
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fa42 	bl	8005810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIM_ConfigClockSource+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e0b3      	b.n	8005514 <HAL_TIM_ConfigClockSource+0x180>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053e4:	d03e      	beq.n	8005464 <HAL_TIM_ConfigClockSource+0xd0>
 80053e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ea:	f200 8087 	bhi.w	80054fc <HAL_TIM_ConfigClockSource+0x168>
 80053ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f2:	f000 8085 	beq.w	8005500 <HAL_TIM_ConfigClockSource+0x16c>
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fa:	d87f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 80053fc:	2b70      	cmp	r3, #112	; 0x70
 80053fe:	d01a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0xa2>
 8005400:	2b70      	cmp	r3, #112	; 0x70
 8005402:	d87b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d050      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0x116>
 8005408:	2b60      	cmp	r3, #96	; 0x60
 800540a:	d877      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800540c:	2b50      	cmp	r3, #80	; 0x50
 800540e:	d03c      	beq.n	800548a <HAL_TIM_ConfigClockSource+0xf6>
 8005410:	2b50      	cmp	r3, #80	; 0x50
 8005412:	d873      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d058      	beq.n	80054ca <HAL_TIM_ConfigClockSource+0x136>
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	d86f      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800541c:	2b30      	cmp	r3, #48	; 0x30
 800541e:	d064      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005420:	2b30      	cmp	r3, #48	; 0x30
 8005422:	d86b      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d060      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005428:	2b20      	cmp	r3, #32
 800542a:	d867      	bhi.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
 8005430:	2b10      	cmp	r3, #16
 8005432:	d05a      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005434:	e062      	b.n	80054fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f000 f966 	bl	8005716 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005458:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	609a      	str	r2, [r3, #8]
      break;
 8005462:	e04e      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	6899      	ldr	r1, [r3, #8]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f000 f94f 	bl	8005716 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005486:	609a      	str	r2, [r3, #8]
      break;
 8005488:	e03b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	461a      	mov	r2, r3
 8005498:	f000 f8c6 	bl	8005628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2150      	movs	r1, #80	; 0x50
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f91d 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 80054a8:	e02b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f000 f8e4 	bl	8005684 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2160      	movs	r1, #96	; 0x60
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 f90d 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 80054c8:	e01b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6859      	ldr	r1, [r3, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f000 f8a6 	bl	8005628 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2140      	movs	r1, #64	; 0x40
 80054e2:	4618      	mov	r0, r3
 80054e4:	f000 f8fd 	bl	80056e2 <TIM_ITRx_SetConfig>
      break;
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 f8f4 	bl	80056e2 <TIM_ITRx_SetConfig>
        break;
 80054fa:	e002      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005500:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr

08005564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a29      	ldr	r2, [pc, #164]	; (800561c <TIM_Base_SetConfig+0xb8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0x30>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0x30>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a26      	ldr	r2, [pc, #152]	; (8005620 <TIM_Base_SetConfig+0xbc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0x30>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a25      	ldr	r2, [pc, #148]	; (8005624 <TIM_Base_SetConfig+0xc0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <TIM_Base_SetConfig+0xb8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_Base_SetConfig+0x62>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b4:	d007      	beq.n	80055c6 <TIM_Base_SetConfig+0x62>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a19      	ldr	r2, [pc, #100]	; (8005620 <TIM_Base_SetConfig+0xbc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_Base_SetConfig+0x62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <TIM_Base_SetConfig+0xc0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a07      	ldr	r2, [pc, #28]	; (800561c <TIM_Base_SetConfig+0xb8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40000400 	.word	0x40000400
 8005624:	40000800 	.word	0x40000800

08005628 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	f023 0201 	bic.w	r2, r3, #1
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f023 030a 	bic.w	r3, r3, #10
 8005664:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
 800566c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 0210 	bic.w	r2, r3, #16
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	031b      	lsls	r3, r3, #12
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	621a      	str	r2, [r3, #32]
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f043 0307 	orr.w	r3, r3, #7
 8005704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005716:	b480      	push	{r7}
 8005718:	b087      	sub	sp, #28
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005730:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	021a      	lsls	r2, r3, #8
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	431a      	orrs	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4313      	orrs	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	609a      	str	r2, [r3, #8]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e046      	b.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b8:	d009      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a12      	ldr	r2, [pc, #72]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a10      	ldr	r2, [pc, #64]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10c      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40000400 	.word	0x40000400
 800580c:	40000800 	.word	0x40000800

08005810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e03f      	b.n	80058c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fb98 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	; 0x24
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fc25 	bl	80060c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800588c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800589c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08a      	sub	sp, #40	; 0x28
 80058d2:	af02      	add	r7, sp, #8
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d17c      	bne.n	80059e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Transmit+0x2c>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e075      	b.n	80059ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_UART_Transmit+0x3e>
 8005908:	2302      	movs	r3, #2
 800590a:	e06e      	b.n	80059ea <HAL_UART_Transmit+0x11c>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005922:	f7fc feaf 	bl	8002684 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	88fa      	ldrh	r2, [r7, #6]
 800592c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	88fa      	ldrh	r2, [r7, #6]
 8005932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800593c:	d108      	bne.n	8005950 <HAL_UART_Transmit+0x82>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	61bb      	str	r3, [r7, #24]
 800594e:	e003      	b.n	8005958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005960:	e02a      	b.n	80059b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2200      	movs	r2, #0
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 fa11 	bl	8005d94 <UART_WaitOnFlagUntilTimeout>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e036      	b.n	80059ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10b      	bne.n	800599a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	3302      	adds	r3, #2
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	e007      	b.n	80059aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	3301      	adds	r3, #1
 80059a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1cf      	bne.n	8005962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f9e1 	bl	8005d94 <UART_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e006      	b.n	80059ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	e000      	b.n	80059ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059e8:	2302      	movs	r3, #2
  }
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3720      	adds	r7, #32
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	f003 0320 	and.w	r3, r3, #32
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_UART_IRQHandler+0x52>
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa99 	bl	8005f76 <UART_Receive_IT>
      return;
 8005a44:	e17b      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80b1 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x1bc>
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d105      	bne.n	8005a64 <HAL_UART_IRQHandler+0x70>
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a6 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <HAL_UART_IRQHandler+0x90>
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d005      	beq.n	8005a84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f043 0201 	orr.w	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xb0>
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	f043 0202 	orr.w	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xd0>
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	f043 0204 	orr.w	r2, r3, #4
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <HAL_UART_IRQHandler+0xfa>
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f003 0320 	and.w	r3, r3, #32
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <HAL_UART_IRQHandler+0xee>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	f043 0208 	orr.w	r2, r3, #8
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 811e 	beq.w	8005d34 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_UART_IRQHandler+0x11e>
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa32 	bl	8005f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf14      	ite	ne
 8005b20:	2301      	movne	r3, #1
 8005b22:	2300      	moveq	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <HAL_UART_IRQHandler+0x146>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d031      	beq.n	8005b9e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f974 	bl	8005e28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d023      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b5c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	4a76      	ldr	r2, [pc, #472]	; (8005d44 <HAL_UART_IRQHandler+0x350>)
 8005b6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe f9c8 	bl	8003f08 <HAL_DMA_Abort_IT>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d016      	beq.n	8005bac <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b8c:	e00e      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8ec 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e00a      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f8e8 	bl	8005d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8e4 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005baa:	e0c3      	b.n	8005d34 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	bf00      	nop
    return;
 8005bae:	e0c1      	b.n	8005d34 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	f040 80a1 	bne.w	8005cfc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 809b 	beq.w	8005cfc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8095 	beq.w	8005cfc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d04e      	beq.n	8005c94 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005c00:	8a3b      	ldrh	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 8098 	beq.w	8005d38 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c0c:	8a3a      	ldrh	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	f080 8092 	bcs.w	8005d38 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8a3a      	ldrh	r2, [r7, #16]
 8005c18:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	d02b      	beq.n	8005c7c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c32:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695a      	ldr	r2, [r3, #20]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c52:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68da      	ldr	r2, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0210 	bic.w	r2, r2, #16
 8005c70:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fe f90b 	bl	8003e92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f876 	bl	8005d7e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c92:	e051      	b.n	8005d38 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d047      	beq.n	8005d3c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005cac:	8a7b      	ldrh	r3, [r7, #18]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d044      	beq.n	8005d3c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cc0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0210 	bic.w	r2, r2, #16
 8005cee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cf0:	8a7b      	ldrh	r3, [r7, #18]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f842 	bl	8005d7e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005cfa:	e01f      	b.n	8005d3c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d008      	beq.n	8005d18 <HAL_UART_IRQHandler+0x324>
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8c9 	bl	8005ea8 <UART_Transmit_IT>
    return;
 8005d16:	e012      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <HAL_UART_IRQHandler+0x34a>
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f90a 	bl	8005f46 <UART_EndTransmit_IT>
    return;
 8005d32:	e004      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
    return;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
      return;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_UART_IRQHandler+0x34a>
      return;
 8005d3c:	bf00      	nop
  }
}
 8005d3e:	3728      	adds	r7, #40	; 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	08005e81 	.word	0x08005e81

08005d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bc80      	pop	{r7}
 8005d58:	4770      	bx	lr

08005d5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d62:	bf00      	nop
 8005d64:	370c      	adds	r7, #12
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d8a:	bf00      	nop
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr

08005d94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da4:	e02c      	b.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d028      	beq.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005db4:	f7fc fc66 	bl	8002684 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d21d      	bcs.n	8005e00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0201 	bic.w	r2, r2, #1
 8005de2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e00f      	b.n	8005e20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d0c3      	beq.n	8005da6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d107      	bne.n	8005e68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0210 	bic.w	r2, r2, #16
 8005e66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff66 	bl	8005d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b21      	cmp	r3, #33	; 0x21
 8005eba:	d13e      	bne.n	8005f3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec4:	d114      	bne.n	8005ef0 <UART_Transmit_IT+0x48>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d110      	bne.n	8005ef0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ee2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]
 8005eee:	e008      	b.n	8005f02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6211      	str	r1, [r2, #32]
 8005efa:	781a      	ldrb	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10f      	bne.n	8005f36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e000      	b.n	8005f3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
  }
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff feee 	bl	8005d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b086      	sub	sp, #24
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b22      	cmp	r3, #34	; 0x22
 8005f88:	f040 8099 	bne.w	80060be <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f94:	d117      	bne.n	8005fc6 <UART_Receive_IT+0x50>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d113      	bne.n	8005fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8005fc4:	e026      	b.n	8006014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d007      	beq.n	8005fea <UART_Receive_IT+0x74>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <UART_Receive_IT+0x82>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d106      	bne.n	8005ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	701a      	strb	r2, [r3, #0]
 8005ff6:	e008      	b.n	800600a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006004:	b2da      	uxtb	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29b      	uxth	r3, r3
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4619      	mov	r1, r3
 8006022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006024:	2b00      	cmp	r3, #0
 8006026:	d148      	bne.n	80060ba <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0220 	bic.w	r2, r2, #32
 8006036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0201 	bic.w	r2, r2, #1
 8006056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	2b01      	cmp	r3, #1
 8006066:	d123      	bne.n	80060b0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0210 	bic.w	r2, r2, #16
 800607c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0310 	and.w	r3, r3, #16
 8006088:	2b10      	cmp	r3, #16
 800608a:	d10a      	bne.n	80060a2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	60fb      	str	r3, [r7, #12]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff fe68 	bl	8005d7e <HAL_UARTEx_RxEventCallback>
 80060ae:	e002      	b.n	80060b6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff fe52 	bl	8005d5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e002      	b.n	80060c0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006102:	f023 030c 	bic.w	r3, r3, #12
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	430b      	orrs	r3, r1
 800610e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2c      	ldr	r2, [pc, #176]	; (80061dc <UART_SetConfig+0x114>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d103      	bne.n	8006138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006130:	f7fe fe9e 	bl	8004e70 <HAL_RCC_GetPCLK2Freq>
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	e002      	b.n	800613e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fe fe86 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 800613c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	009a      	lsls	r2, r3, #2
 8006148:	441a      	add	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	4a22      	ldr	r2, [pc, #136]	; (80061e0 <UART_SetConfig+0x118>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	0119      	lsls	r1, r3, #4
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009a      	lsls	r2, r3, #2
 8006168:	441a      	add	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	fbb2 f2f3 	udiv	r2, r2, r3
 8006174:	4b1a      	ldr	r3, [pc, #104]	; (80061e0 <UART_SetConfig+0x118>)
 8006176:	fba3 0302 	umull	r0, r3, r3, r2
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	2064      	movs	r0, #100	; 0x64
 800617e:	fb00 f303 	mul.w	r3, r0, r3
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	3332      	adds	r3, #50	; 0x32
 8006188:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <UART_SetConfig+0x118>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006194:	4419      	add	r1, r3
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009a      	lsls	r2, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <UART_SetConfig+0x118>)
 80061ae:	fba3 0302 	umull	r0, r3, r3, r2
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	2064      	movs	r0, #100	; 0x64
 80061b6:	fb00 f303 	mul.w	r3, r0, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	3332      	adds	r3, #50	; 0x32
 80061c0:	4a07      	ldr	r2, [pc, #28]	; (80061e0 <UART_SetConfig+0x118>)
 80061c2:	fba2 2303 	umull	r2, r3, r2, r3
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	f003 020f 	and.w	r2, r3, #15
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	440a      	add	r2, r1
 80061d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40013800 	.word	0x40013800
 80061e0:	51eb851f 	.word	0x51eb851f

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	2000003c 	.word	0x2000003c

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4d0c      	ldr	r5, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4c0d      	ldr	r4, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	f002 fe78 	bl	8008ef4 <_init>
 8006204:	2600      	movs	r6, #0
 8006206:	4d0a      	ldr	r5, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4c0a      	ldr	r4, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	f855 3b04 	ldr.w	r3, [r5], #4
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	08009354 	.word	0x08009354
 800622c:	08009354 	.word	0x08009354
 8006230:	08009354 	.word	0x08009354
 8006234:	08009358 	.word	0x08009358

08006238 <memset>:
 8006238:	4603      	mov	r3, r0
 800623a:	4402      	add	r2, r0
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	f803 1b01 	strb.w	r1, [r3], #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <__cvt>:
 8006248:	2b00      	cmp	r3, #0
 800624a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800624e:	461f      	mov	r7, r3
 8006250:	bfbb      	ittet	lt
 8006252:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006256:	461f      	movlt	r7, r3
 8006258:	2300      	movge	r3, #0
 800625a:	232d      	movlt	r3, #45	; 0x2d
 800625c:	b088      	sub	sp, #32
 800625e:	4614      	mov	r4, r2
 8006260:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006262:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006264:	7013      	strb	r3, [r2, #0]
 8006266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006268:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800626c:	f023 0820 	bic.w	r8, r3, #32
 8006270:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006274:	d005      	beq.n	8006282 <__cvt+0x3a>
 8006276:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800627a:	d100      	bne.n	800627e <__cvt+0x36>
 800627c:	3501      	adds	r5, #1
 800627e:	2302      	movs	r3, #2
 8006280:	e000      	b.n	8006284 <__cvt+0x3c>
 8006282:	2303      	movs	r3, #3
 8006284:	aa07      	add	r2, sp, #28
 8006286:	9204      	str	r2, [sp, #16]
 8006288:	aa06      	add	r2, sp, #24
 800628a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800628e:	e9cd 3500 	strd	r3, r5, [sp]
 8006292:	4622      	mov	r2, r4
 8006294:	463b      	mov	r3, r7
 8006296:	f000 fdfb 	bl	8006e90 <_dtoa_r>
 800629a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800629e:	4606      	mov	r6, r0
 80062a0:	d102      	bne.n	80062a8 <__cvt+0x60>
 80062a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062a4:	07db      	lsls	r3, r3, #31
 80062a6:	d522      	bpl.n	80062ee <__cvt+0xa6>
 80062a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062ac:	eb06 0905 	add.w	r9, r6, r5
 80062b0:	d110      	bne.n	80062d4 <__cvt+0x8c>
 80062b2:	7833      	ldrb	r3, [r6, #0]
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d10a      	bne.n	80062ce <__cvt+0x86>
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	4639      	mov	r1, r7
 80062c0:	f7fa fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80062c4:	b918      	cbnz	r0, 80062ce <__cvt+0x86>
 80062c6:	f1c5 0501 	rsb	r5, r5, #1
 80062ca:	f8ca 5000 	str.w	r5, [sl]
 80062ce:	f8da 3000 	ldr.w	r3, [sl]
 80062d2:	4499      	add	r9, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	2300      	movs	r3, #0
 80062d8:	4620      	mov	r0, r4
 80062da:	4639      	mov	r1, r7
 80062dc:	f7fa fb64 	bl	80009a8 <__aeabi_dcmpeq>
 80062e0:	b108      	cbz	r0, 80062e6 <__cvt+0x9e>
 80062e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80062e6:	2230      	movs	r2, #48	; 0x30
 80062e8:	9b07      	ldr	r3, [sp, #28]
 80062ea:	454b      	cmp	r3, r9
 80062ec:	d307      	bcc.n	80062fe <__cvt+0xb6>
 80062ee:	4630      	mov	r0, r6
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80062f4:	1b9b      	subs	r3, r3, r6
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	b008      	add	sp, #32
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	1c59      	adds	r1, r3, #1
 8006300:	9107      	str	r1, [sp, #28]
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	e7f0      	b.n	80062e8 <__cvt+0xa0>

08006306 <__exponent>:
 8006306:	4603      	mov	r3, r0
 8006308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800630a:	2900      	cmp	r1, #0
 800630c:	f803 2b02 	strb.w	r2, [r3], #2
 8006310:	bfb6      	itet	lt
 8006312:	222d      	movlt	r2, #45	; 0x2d
 8006314:	222b      	movge	r2, #43	; 0x2b
 8006316:	4249      	neglt	r1, r1
 8006318:	2909      	cmp	r1, #9
 800631a:	7042      	strb	r2, [r0, #1]
 800631c:	dd2b      	ble.n	8006376 <__exponent+0x70>
 800631e:	f10d 0407 	add.w	r4, sp, #7
 8006322:	46a4      	mov	ip, r4
 8006324:	270a      	movs	r7, #10
 8006326:	fb91 f6f7 	sdiv	r6, r1, r7
 800632a:	460a      	mov	r2, r1
 800632c:	46a6      	mov	lr, r4
 800632e:	fb07 1516 	mls	r5, r7, r6, r1
 8006332:	2a63      	cmp	r2, #99	; 0x63
 8006334:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006338:	4631      	mov	r1, r6
 800633a:	f104 34ff 	add.w	r4, r4, #4294967295
 800633e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006342:	dcf0      	bgt.n	8006326 <__exponent+0x20>
 8006344:	3130      	adds	r1, #48	; 0x30
 8006346:	f1ae 0502 	sub.w	r5, lr, #2
 800634a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800634e:	4629      	mov	r1, r5
 8006350:	1c44      	adds	r4, r0, #1
 8006352:	4561      	cmp	r1, ip
 8006354:	d30a      	bcc.n	800636c <__exponent+0x66>
 8006356:	f10d 0209 	add.w	r2, sp, #9
 800635a:	eba2 020e 	sub.w	r2, r2, lr
 800635e:	4565      	cmp	r5, ip
 8006360:	bf88      	it	hi
 8006362:	2200      	movhi	r2, #0
 8006364:	4413      	add	r3, r2
 8006366:	1a18      	subs	r0, r3, r0
 8006368:	b003      	add	sp, #12
 800636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006370:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006374:	e7ed      	b.n	8006352 <__exponent+0x4c>
 8006376:	2330      	movs	r3, #48	; 0x30
 8006378:	3130      	adds	r1, #48	; 0x30
 800637a:	7083      	strb	r3, [r0, #2]
 800637c:	70c1      	strb	r1, [r0, #3]
 800637e:	1d03      	adds	r3, r0, #4
 8006380:	e7f1      	b.n	8006366 <__exponent+0x60>
	...

08006384 <_printf_float>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	b091      	sub	sp, #68	; 0x44
 800638a:	460c      	mov	r4, r1
 800638c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006390:	4616      	mov	r6, r2
 8006392:	461f      	mov	r7, r3
 8006394:	4605      	mov	r5, r0
 8006396:	f001 fd1d 	bl	8007dd4 <_localeconv_r>
 800639a:	6803      	ldr	r3, [r0, #0]
 800639c:	4618      	mov	r0, r3
 800639e:	9309      	str	r3, [sp, #36]	; 0x24
 80063a0:	f7f9 fed6 	bl	8000150 <strlen>
 80063a4:	2300      	movs	r3, #0
 80063a6:	930e      	str	r3, [sp, #56]	; 0x38
 80063a8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ac:	900a      	str	r0, [sp, #40]	; 0x28
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	f103 0208 	add.w	r2, r3, #8
 80063b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80063bc:	f8d4 b000 	ldr.w	fp, [r4]
 80063c0:	f8c8 2000 	str.w	r2, [r8]
 80063c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063cc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80063d0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80063d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	4640      	mov	r0, r8
 80063dc:	4b9c      	ldr	r3, [pc, #624]	; (8006650 <_printf_float+0x2cc>)
 80063de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063e0:	f7fa fb14 	bl	8000a0c <__aeabi_dcmpun>
 80063e4:	bb70      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	4640      	mov	r0, r8
 80063ec:	4b98      	ldr	r3, [pc, #608]	; (8006650 <_printf_float+0x2cc>)
 80063ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063f0:	f7fa faee 	bl	80009d0 <__aeabi_dcmple>
 80063f4:	bb30      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	4651      	mov	r1, sl
 80063fe:	f7fa fadd 	bl	80009bc <__aeabi_dcmplt>
 8006402:	b110      	cbz	r0, 800640a <_printf_float+0x86>
 8006404:	232d      	movs	r3, #45	; 0x2d
 8006406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800640a:	4b92      	ldr	r3, [pc, #584]	; (8006654 <_printf_float+0x2d0>)
 800640c:	4892      	ldr	r0, [pc, #584]	; (8006658 <_printf_float+0x2d4>)
 800640e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006412:	bf94      	ite	ls
 8006414:	4698      	movls	r8, r3
 8006416:	4680      	movhi	r8, r0
 8006418:	2303      	movs	r3, #3
 800641a:	f04f 0a00 	mov.w	sl, #0
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	f02b 0304 	bic.w	r3, fp, #4
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	4633      	mov	r3, r6
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	9700      	str	r7, [sp, #0]
 800642e:	aa0f      	add	r2, sp, #60	; 0x3c
 8006430:	f000 f9d4 	bl	80067dc <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	f040 8090 	bne.w	800655a <_printf_float+0x1d6>
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	b011      	add	sp, #68	; 0x44
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	4642      	mov	r2, r8
 8006446:	4653      	mov	r3, sl
 8006448:	4640      	mov	r0, r8
 800644a:	4651      	mov	r1, sl
 800644c:	f7fa fade 	bl	8000a0c <__aeabi_dcmpun>
 8006450:	b148      	cbz	r0, 8006466 <_printf_float+0xe2>
 8006452:	f1ba 0f00 	cmp.w	sl, #0
 8006456:	bfb8      	it	lt
 8006458:	232d      	movlt	r3, #45	; 0x2d
 800645a:	4880      	ldr	r0, [pc, #512]	; (800665c <_printf_float+0x2d8>)
 800645c:	bfb8      	it	lt
 800645e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006462:	4b7f      	ldr	r3, [pc, #508]	; (8006660 <_printf_float+0x2dc>)
 8006464:	e7d3      	b.n	800640e <_printf_float+0x8a>
 8006466:	6863      	ldr	r3, [r4, #4]
 8006468:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	d142      	bne.n	80064f6 <_printf_float+0x172>
 8006470:	2306      	movs	r3, #6
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	9206      	str	r2, [sp, #24]
 8006478:	aa0e      	add	r2, sp, #56	; 0x38
 800647a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800647e:	aa0d      	add	r2, sp, #52	; 0x34
 8006480:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006484:	9203      	str	r2, [sp, #12]
 8006486:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800648a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800648e:	6023      	str	r3, [r4, #0]
 8006490:	6863      	ldr	r3, [r4, #4]
 8006492:	4642      	mov	r2, r8
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4628      	mov	r0, r5
 8006498:	4653      	mov	r3, sl
 800649a:	910b      	str	r1, [sp, #44]	; 0x2c
 800649c:	f7ff fed4 	bl	8006248 <__cvt>
 80064a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80064a2:	4680      	mov	r8, r0
 80064a4:	2947      	cmp	r1, #71	; 0x47
 80064a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064a8:	d108      	bne.n	80064bc <_printf_float+0x138>
 80064aa:	1cc8      	adds	r0, r1, #3
 80064ac:	db02      	blt.n	80064b4 <_printf_float+0x130>
 80064ae:	6863      	ldr	r3, [r4, #4]
 80064b0:	4299      	cmp	r1, r3
 80064b2:	dd40      	ble.n	8006536 <_printf_float+0x1b2>
 80064b4:	f1a9 0902 	sub.w	r9, r9, #2
 80064b8:	fa5f f989 	uxtb.w	r9, r9
 80064bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064c0:	d81f      	bhi.n	8006502 <_printf_float+0x17e>
 80064c2:	464a      	mov	r2, r9
 80064c4:	3901      	subs	r1, #1
 80064c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064ca:	910d      	str	r1, [sp, #52]	; 0x34
 80064cc:	f7ff ff1b 	bl	8006306 <__exponent>
 80064d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064d2:	4682      	mov	sl, r0
 80064d4:	1813      	adds	r3, r2, r0
 80064d6:	2a01      	cmp	r2, #1
 80064d8:	6123      	str	r3, [r4, #16]
 80064da:	dc02      	bgt.n	80064e2 <_printf_float+0x15e>
 80064dc:	6822      	ldr	r2, [r4, #0]
 80064de:	07d2      	lsls	r2, r2, #31
 80064e0:	d501      	bpl.n	80064e6 <_printf_float+0x162>
 80064e2:	3301      	adds	r3, #1
 80064e4:	6123      	str	r3, [r4, #16]
 80064e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d09b      	beq.n	8006426 <_printf_float+0xa2>
 80064ee:	232d      	movs	r3, #45	; 0x2d
 80064f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064f4:	e797      	b.n	8006426 <_printf_float+0xa2>
 80064f6:	2947      	cmp	r1, #71	; 0x47
 80064f8:	d1bc      	bne.n	8006474 <_printf_float+0xf0>
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ba      	bne.n	8006474 <_printf_float+0xf0>
 80064fe:	2301      	movs	r3, #1
 8006500:	e7b7      	b.n	8006472 <_printf_float+0xee>
 8006502:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006506:	d118      	bne.n	800653a <_printf_float+0x1b6>
 8006508:	2900      	cmp	r1, #0
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	dd0b      	ble.n	8006526 <_printf_float+0x1a2>
 800650e:	6121      	str	r1, [r4, #16]
 8006510:	b913      	cbnz	r3, 8006518 <_printf_float+0x194>
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	07d0      	lsls	r0, r2, #31
 8006516:	d502      	bpl.n	800651e <_printf_float+0x19a>
 8006518:	3301      	adds	r3, #1
 800651a:	440b      	add	r3, r1
 800651c:	6123      	str	r3, [r4, #16]
 800651e:	f04f 0a00 	mov.w	sl, #0
 8006522:	65a1      	str	r1, [r4, #88]	; 0x58
 8006524:	e7df      	b.n	80064e6 <_printf_float+0x162>
 8006526:	b913      	cbnz	r3, 800652e <_printf_float+0x1aa>
 8006528:	6822      	ldr	r2, [r4, #0]
 800652a:	07d2      	lsls	r2, r2, #31
 800652c:	d501      	bpl.n	8006532 <_printf_float+0x1ae>
 800652e:	3302      	adds	r3, #2
 8006530:	e7f4      	b.n	800651c <_printf_float+0x198>
 8006532:	2301      	movs	r3, #1
 8006534:	e7f2      	b.n	800651c <_printf_float+0x198>
 8006536:	f04f 0967 	mov.w	r9, #103	; 0x67
 800653a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800653c:	4299      	cmp	r1, r3
 800653e:	db05      	blt.n	800654c <_printf_float+0x1c8>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	6121      	str	r1, [r4, #16]
 8006544:	07d8      	lsls	r0, r3, #31
 8006546:	d5ea      	bpl.n	800651e <_printf_float+0x19a>
 8006548:	1c4b      	adds	r3, r1, #1
 800654a:	e7e7      	b.n	800651c <_printf_float+0x198>
 800654c:	2900      	cmp	r1, #0
 800654e:	bfcc      	ite	gt
 8006550:	2201      	movgt	r2, #1
 8006552:	f1c1 0202 	rsble	r2, r1, #2
 8006556:	4413      	add	r3, r2
 8006558:	e7e0      	b.n	800651c <_printf_float+0x198>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	055a      	lsls	r2, r3, #21
 800655e:	d407      	bmi.n	8006570 <_printf_float+0x1ec>
 8006560:	6923      	ldr	r3, [r4, #16]
 8006562:	4642      	mov	r2, r8
 8006564:	4631      	mov	r1, r6
 8006566:	4628      	mov	r0, r5
 8006568:	47b8      	blx	r7
 800656a:	3001      	adds	r0, #1
 800656c:	d12b      	bne.n	80065c6 <_printf_float+0x242>
 800656e:	e764      	b.n	800643a <_printf_float+0xb6>
 8006570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006574:	f240 80dd 	bls.w	8006732 <_printf_float+0x3ae>
 8006578:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800657c:	2200      	movs	r2, #0
 800657e:	2300      	movs	r3, #0
 8006580:	f7fa fa12 	bl	80009a8 <__aeabi_dcmpeq>
 8006584:	2800      	cmp	r0, #0
 8006586:	d033      	beq.n	80065f0 <_printf_float+0x26c>
 8006588:	2301      	movs	r3, #1
 800658a:	4631      	mov	r1, r6
 800658c:	4628      	mov	r0, r5
 800658e:	4a35      	ldr	r2, [pc, #212]	; (8006664 <_printf_float+0x2e0>)
 8006590:	47b8      	blx	r7
 8006592:	3001      	adds	r0, #1
 8006594:	f43f af51 	beq.w	800643a <_printf_float+0xb6>
 8006598:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800659c:	429a      	cmp	r2, r3
 800659e:	db02      	blt.n	80065a6 <_printf_float+0x222>
 80065a0:	6823      	ldr	r3, [r4, #0]
 80065a2:	07d8      	lsls	r0, r3, #31
 80065a4:	d50f      	bpl.n	80065c6 <_printf_float+0x242>
 80065a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af42 	beq.w	800643a <_printf_float+0xb6>
 80065b6:	f04f 0800 	mov.w	r8, #0
 80065ba:	f104 091a 	add.w	r9, r4, #26
 80065be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065c0:	3b01      	subs	r3, #1
 80065c2:	4543      	cmp	r3, r8
 80065c4:	dc09      	bgt.n	80065da <_printf_float+0x256>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	079b      	lsls	r3, r3, #30
 80065ca:	f100 8102 	bmi.w	80067d2 <_printf_float+0x44e>
 80065ce:	68e0      	ldr	r0, [r4, #12]
 80065d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065d2:	4298      	cmp	r0, r3
 80065d4:	bfb8      	it	lt
 80065d6:	4618      	movlt	r0, r3
 80065d8:	e731      	b.n	800643e <_printf_float+0xba>
 80065da:	2301      	movs	r3, #1
 80065dc:	464a      	mov	r2, r9
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f af28 	beq.w	800643a <_printf_float+0xb6>
 80065ea:	f108 0801 	add.w	r8, r8, #1
 80065ee:	e7e6      	b.n	80065be <_printf_float+0x23a>
 80065f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	dc38      	bgt.n	8006668 <_printf_float+0x2e4>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	4a19      	ldr	r2, [pc, #100]	; (8006664 <_printf_float+0x2e0>)
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	f43f af1a 	beq.w	800643a <_printf_float+0xb6>
 8006606:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800660a:	4313      	orrs	r3, r2
 800660c:	d102      	bne.n	8006614 <_printf_float+0x290>
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	07d9      	lsls	r1, r3, #31
 8006612:	d5d8      	bpl.n	80065c6 <_printf_float+0x242>
 8006614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af0b 	beq.w	800643a <_printf_float+0xb6>
 8006624:	f04f 0900 	mov.w	r9, #0
 8006628:	f104 0a1a 	add.w	sl, r4, #26
 800662c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800662e:	425b      	negs	r3, r3
 8006630:	454b      	cmp	r3, r9
 8006632:	dc01      	bgt.n	8006638 <_printf_float+0x2b4>
 8006634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006636:	e794      	b.n	8006562 <_printf_float+0x1de>
 8006638:	2301      	movs	r3, #1
 800663a:	4652      	mov	r2, sl
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	f43f aef9 	beq.w	800643a <_printf_float+0xb6>
 8006648:	f109 0901 	add.w	r9, r9, #1
 800664c:	e7ee      	b.n	800662c <_printf_float+0x2a8>
 800664e:	bf00      	nop
 8006650:	7fefffff 	.word	0x7fefffff
 8006654:	08008f7c 	.word	0x08008f7c
 8006658:	08008f80 	.word	0x08008f80
 800665c:	08008f88 	.word	0x08008f88
 8006660:	08008f84 	.word	0x08008f84
 8006664:	08008f8c 	.word	0x08008f8c
 8006668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800666a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800666c:	429a      	cmp	r2, r3
 800666e:	bfa8      	it	ge
 8006670:	461a      	movge	r2, r3
 8006672:	2a00      	cmp	r2, #0
 8006674:	4691      	mov	r9, r2
 8006676:	dc37      	bgt.n	80066e8 <_printf_float+0x364>
 8006678:	f04f 0b00 	mov.w	fp, #0
 800667c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006680:	f104 021a 	add.w	r2, r4, #26
 8006684:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006688:	ebaa 0309 	sub.w	r3, sl, r9
 800668c:	455b      	cmp	r3, fp
 800668e:	dc33      	bgt.n	80066f8 <_printf_float+0x374>
 8006690:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006694:	429a      	cmp	r2, r3
 8006696:	db3b      	blt.n	8006710 <_printf_float+0x38c>
 8006698:	6823      	ldr	r3, [r4, #0]
 800669a:	07da      	lsls	r2, r3, #31
 800669c:	d438      	bmi.n	8006710 <_printf_float+0x38c>
 800669e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066a2:	eba3 020a 	sub.w	r2, r3, sl
 80066a6:	eba3 0901 	sub.w	r9, r3, r1
 80066aa:	4591      	cmp	r9, r2
 80066ac:	bfa8      	it	ge
 80066ae:	4691      	movge	r9, r2
 80066b0:	f1b9 0f00 	cmp.w	r9, #0
 80066b4:	dc34      	bgt.n	8006720 <_printf_float+0x39c>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066be:	f104 0a1a 	add.w	sl, r4, #26
 80066c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	eba3 0309 	sub.w	r3, r3, r9
 80066cc:	4543      	cmp	r3, r8
 80066ce:	f77f af7a 	ble.w	80065c6 <_printf_float+0x242>
 80066d2:	2301      	movs	r3, #1
 80066d4:	4652      	mov	r2, sl
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f aeac 	beq.w	800643a <_printf_float+0xb6>
 80066e2:	f108 0801 	add.w	r8, r8, #1
 80066e6:	e7ec      	b.n	80066c2 <_printf_float+0x33e>
 80066e8:	4613      	mov	r3, r2
 80066ea:	4631      	mov	r1, r6
 80066ec:	4642      	mov	r2, r8
 80066ee:	4628      	mov	r0, r5
 80066f0:	47b8      	blx	r7
 80066f2:	3001      	adds	r0, #1
 80066f4:	d1c0      	bne.n	8006678 <_printf_float+0x2f4>
 80066f6:	e6a0      	b.n	800643a <_printf_float+0xb6>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f ae99 	beq.w	800643a <_printf_float+0xb6>
 8006708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800670a:	f10b 0b01 	add.w	fp, fp, #1
 800670e:	e7b9      	b.n	8006684 <_printf_float+0x300>
 8006710:	4631      	mov	r1, r6
 8006712:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006716:	4628      	mov	r0, r5
 8006718:	47b8      	blx	r7
 800671a:	3001      	adds	r0, #1
 800671c:	d1bf      	bne.n	800669e <_printf_float+0x31a>
 800671e:	e68c      	b.n	800643a <_printf_float+0xb6>
 8006720:	464b      	mov	r3, r9
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	eb08 020a 	add.w	r2, r8, sl
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	d1c2      	bne.n	80066b6 <_printf_float+0x332>
 8006730:	e683      	b.n	800643a <_printf_float+0xb6>
 8006732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006734:	2a01      	cmp	r2, #1
 8006736:	dc01      	bgt.n	800673c <_printf_float+0x3b8>
 8006738:	07db      	lsls	r3, r3, #31
 800673a:	d537      	bpl.n	80067ac <_printf_float+0x428>
 800673c:	2301      	movs	r3, #1
 800673e:	4642      	mov	r2, r8
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f ae77 	beq.w	800643a <_printf_float+0xb6>
 800674c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f ae6f 	beq.w	800643a <_printf_float+0xb6>
 800675c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006760:	2200      	movs	r2, #0
 8006762:	2300      	movs	r3, #0
 8006764:	f7fa f920 	bl	80009a8 <__aeabi_dcmpeq>
 8006768:	b9d8      	cbnz	r0, 80067a2 <_printf_float+0x41e>
 800676a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800676c:	f108 0201 	add.w	r2, r8, #1
 8006770:	3b01      	subs	r3, #1
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d10e      	bne.n	800679a <_printf_float+0x416>
 800677c:	e65d      	b.n	800643a <_printf_float+0xb6>
 800677e:	2301      	movs	r3, #1
 8006780:	464a      	mov	r2, r9
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f ae56 	beq.w	800643a <_printf_float+0xb6>
 800678e:	f108 0801 	add.w	r8, r8, #1
 8006792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006794:	3b01      	subs	r3, #1
 8006796:	4543      	cmp	r3, r8
 8006798:	dcf1      	bgt.n	800677e <_printf_float+0x3fa>
 800679a:	4653      	mov	r3, sl
 800679c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067a0:	e6e0      	b.n	8006564 <_printf_float+0x1e0>
 80067a2:	f04f 0800 	mov.w	r8, #0
 80067a6:	f104 091a 	add.w	r9, r4, #26
 80067aa:	e7f2      	b.n	8006792 <_printf_float+0x40e>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4642      	mov	r2, r8
 80067b0:	e7df      	b.n	8006772 <_printf_float+0x3ee>
 80067b2:	2301      	movs	r3, #1
 80067b4:	464a      	mov	r2, r9
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	f43f ae3c 	beq.w	800643a <_printf_float+0xb6>
 80067c2:	f108 0801 	add.w	r8, r8, #1
 80067c6:	68e3      	ldr	r3, [r4, #12]
 80067c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80067ca:	1a5b      	subs	r3, r3, r1
 80067cc:	4543      	cmp	r3, r8
 80067ce:	dcf0      	bgt.n	80067b2 <_printf_float+0x42e>
 80067d0:	e6fd      	b.n	80065ce <_printf_float+0x24a>
 80067d2:	f04f 0800 	mov.w	r8, #0
 80067d6:	f104 0919 	add.w	r9, r4, #25
 80067da:	e7f4      	b.n	80067c6 <_printf_float+0x442>

080067dc <_printf_common>:
 80067dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067e0:	4616      	mov	r6, r2
 80067e2:	4699      	mov	r9, r3
 80067e4:	688a      	ldr	r2, [r1, #8]
 80067e6:	690b      	ldr	r3, [r1, #16]
 80067e8:	4607      	mov	r7, r0
 80067ea:	4293      	cmp	r3, r2
 80067ec:	bfb8      	it	lt
 80067ee:	4613      	movlt	r3, r2
 80067f0:	6033      	str	r3, [r6, #0]
 80067f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80067f6:	460c      	mov	r4, r1
 80067f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80067fc:	b10a      	cbz	r2, 8006802 <_printf_common+0x26>
 80067fe:	3301      	adds	r3, #1
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	0699      	lsls	r1, r3, #26
 8006806:	bf42      	ittt	mi
 8006808:	6833      	ldrmi	r3, [r6, #0]
 800680a:	3302      	addmi	r3, #2
 800680c:	6033      	strmi	r3, [r6, #0]
 800680e:	6825      	ldr	r5, [r4, #0]
 8006810:	f015 0506 	ands.w	r5, r5, #6
 8006814:	d106      	bne.n	8006824 <_printf_common+0x48>
 8006816:	f104 0a19 	add.w	sl, r4, #25
 800681a:	68e3      	ldr	r3, [r4, #12]
 800681c:	6832      	ldr	r2, [r6, #0]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	42ab      	cmp	r3, r5
 8006822:	dc28      	bgt.n	8006876 <_printf_common+0x9a>
 8006824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006828:	1e13      	subs	r3, r2, #0
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	bf18      	it	ne
 800682e:	2301      	movne	r3, #1
 8006830:	0692      	lsls	r2, r2, #26
 8006832:	d42d      	bmi.n	8006890 <_printf_common+0xb4>
 8006834:	4649      	mov	r1, r9
 8006836:	4638      	mov	r0, r7
 8006838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800683c:	47c0      	blx	r8
 800683e:	3001      	adds	r0, #1
 8006840:	d020      	beq.n	8006884 <_printf_common+0xa8>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	68e5      	ldr	r5, [r4, #12]
 8006846:	f003 0306 	and.w	r3, r3, #6
 800684a:	2b04      	cmp	r3, #4
 800684c:	bf18      	it	ne
 800684e:	2500      	movne	r5, #0
 8006850:	6832      	ldr	r2, [r6, #0]
 8006852:	f04f 0600 	mov.w	r6, #0
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	bf08      	it	eq
 800685a:	1aad      	subeq	r5, r5, r2
 800685c:	6922      	ldr	r2, [r4, #16]
 800685e:	bf08      	it	eq
 8006860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006864:	4293      	cmp	r3, r2
 8006866:	bfc4      	itt	gt
 8006868:	1a9b      	subgt	r3, r3, r2
 800686a:	18ed      	addgt	r5, r5, r3
 800686c:	341a      	adds	r4, #26
 800686e:	42b5      	cmp	r5, r6
 8006870:	d11a      	bne.n	80068a8 <_printf_common+0xcc>
 8006872:	2000      	movs	r0, #0
 8006874:	e008      	b.n	8006888 <_printf_common+0xac>
 8006876:	2301      	movs	r3, #1
 8006878:	4652      	mov	r2, sl
 800687a:	4649      	mov	r1, r9
 800687c:	4638      	mov	r0, r7
 800687e:	47c0      	blx	r8
 8006880:	3001      	adds	r0, #1
 8006882:	d103      	bne.n	800688c <_printf_common+0xb0>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800688c:	3501      	adds	r5, #1
 800688e:	e7c4      	b.n	800681a <_printf_common+0x3e>
 8006890:	2030      	movs	r0, #48	; 0x30
 8006892:	18e1      	adds	r1, r4, r3
 8006894:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800689e:	4422      	add	r2, r4
 80068a0:	3302      	adds	r3, #2
 80068a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068a6:	e7c5      	b.n	8006834 <_printf_common+0x58>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4622      	mov	r2, r4
 80068ac:	4649      	mov	r1, r9
 80068ae:	4638      	mov	r0, r7
 80068b0:	47c0      	blx	r8
 80068b2:	3001      	adds	r0, #1
 80068b4:	d0e6      	beq.n	8006884 <_printf_common+0xa8>
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7d9      	b.n	800686e <_printf_common+0x92>
	...

080068bc <_printf_i>:
 80068bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	7e0f      	ldrb	r7, [r1, #24]
 80068c2:	4691      	mov	r9, r2
 80068c4:	2f78      	cmp	r7, #120	; 0x78
 80068c6:	4680      	mov	r8, r0
 80068c8:	460c      	mov	r4, r1
 80068ca:	469a      	mov	sl, r3
 80068cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068d2:	d807      	bhi.n	80068e4 <_printf_i+0x28>
 80068d4:	2f62      	cmp	r7, #98	; 0x62
 80068d6:	d80a      	bhi.n	80068ee <_printf_i+0x32>
 80068d8:	2f00      	cmp	r7, #0
 80068da:	f000 80d9 	beq.w	8006a90 <_printf_i+0x1d4>
 80068de:	2f58      	cmp	r7, #88	; 0x58
 80068e0:	f000 80a4 	beq.w	8006a2c <_printf_i+0x170>
 80068e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80068ec:	e03a      	b.n	8006964 <_printf_i+0xa8>
 80068ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80068f2:	2b15      	cmp	r3, #21
 80068f4:	d8f6      	bhi.n	80068e4 <_printf_i+0x28>
 80068f6:	a101      	add	r1, pc, #4	; (adr r1, 80068fc <_printf_i+0x40>)
 80068f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068fc:	08006955 	.word	0x08006955
 8006900:	08006969 	.word	0x08006969
 8006904:	080068e5 	.word	0x080068e5
 8006908:	080068e5 	.word	0x080068e5
 800690c:	080068e5 	.word	0x080068e5
 8006910:	080068e5 	.word	0x080068e5
 8006914:	08006969 	.word	0x08006969
 8006918:	080068e5 	.word	0x080068e5
 800691c:	080068e5 	.word	0x080068e5
 8006920:	080068e5 	.word	0x080068e5
 8006924:	080068e5 	.word	0x080068e5
 8006928:	08006a77 	.word	0x08006a77
 800692c:	08006999 	.word	0x08006999
 8006930:	08006a59 	.word	0x08006a59
 8006934:	080068e5 	.word	0x080068e5
 8006938:	080068e5 	.word	0x080068e5
 800693c:	08006a99 	.word	0x08006a99
 8006940:	080068e5 	.word	0x080068e5
 8006944:	08006999 	.word	0x08006999
 8006948:	080068e5 	.word	0x080068e5
 800694c:	080068e5 	.word	0x080068e5
 8006950:	08006a61 	.word	0x08006a61
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	1d1a      	adds	r2, r3, #4
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	602a      	str	r2, [r5, #0]
 800695c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006964:	2301      	movs	r3, #1
 8006966:	e0a4      	b.n	8006ab2 <_printf_i+0x1f6>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	6829      	ldr	r1, [r5, #0]
 800696c:	0606      	lsls	r6, r0, #24
 800696e:	f101 0304 	add.w	r3, r1, #4
 8006972:	d50a      	bpl.n	800698a <_printf_i+0xce>
 8006974:	680e      	ldr	r6, [r1, #0]
 8006976:	602b      	str	r3, [r5, #0]
 8006978:	2e00      	cmp	r6, #0
 800697a:	da03      	bge.n	8006984 <_printf_i+0xc8>
 800697c:	232d      	movs	r3, #45	; 0x2d
 800697e:	4276      	negs	r6, r6
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006984:	230a      	movs	r3, #10
 8006986:	485e      	ldr	r0, [pc, #376]	; (8006b00 <_printf_i+0x244>)
 8006988:	e019      	b.n	80069be <_printf_i+0x102>
 800698a:	680e      	ldr	r6, [r1, #0]
 800698c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006990:	602b      	str	r3, [r5, #0]
 8006992:	bf18      	it	ne
 8006994:	b236      	sxthne	r6, r6
 8006996:	e7ef      	b.n	8006978 <_printf_i+0xbc>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	6820      	ldr	r0, [r4, #0]
 800699c:	1d19      	adds	r1, r3, #4
 800699e:	6029      	str	r1, [r5, #0]
 80069a0:	0601      	lsls	r1, r0, #24
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0xec>
 80069a4:	681e      	ldr	r6, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0xf2>
 80069a8:	0646      	lsls	r6, r0, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0xe8>
 80069ac:	881e      	ldrh	r6, [r3, #0]
 80069ae:	2f6f      	cmp	r7, #111	; 0x6f
 80069b0:	bf0c      	ite	eq
 80069b2:	2308      	moveq	r3, #8
 80069b4:	230a      	movne	r3, #10
 80069b6:	4852      	ldr	r0, [pc, #328]	; (8006b00 <_printf_i+0x244>)
 80069b8:	2100      	movs	r1, #0
 80069ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069be:	6865      	ldr	r5, [r4, #4]
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	bfa8      	it	ge
 80069c4:	6821      	ldrge	r1, [r4, #0]
 80069c6:	60a5      	str	r5, [r4, #8]
 80069c8:	bfa4      	itt	ge
 80069ca:	f021 0104 	bicge.w	r1, r1, #4
 80069ce:	6021      	strge	r1, [r4, #0]
 80069d0:	b90e      	cbnz	r6, 80069d6 <_printf_i+0x11a>
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	d04d      	beq.n	8006a72 <_printf_i+0x1b6>
 80069d6:	4615      	mov	r5, r2
 80069d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80069dc:	fb03 6711 	mls	r7, r3, r1, r6
 80069e0:	5dc7      	ldrb	r7, [r0, r7]
 80069e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80069e6:	4637      	mov	r7, r6
 80069e8:	42bb      	cmp	r3, r7
 80069ea:	460e      	mov	r6, r1
 80069ec:	d9f4      	bls.n	80069d8 <_printf_i+0x11c>
 80069ee:	2b08      	cmp	r3, #8
 80069f0:	d10b      	bne.n	8006a0a <_printf_i+0x14e>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	07de      	lsls	r6, r3, #31
 80069f6:	d508      	bpl.n	8006a0a <_printf_i+0x14e>
 80069f8:	6923      	ldr	r3, [r4, #16]
 80069fa:	6861      	ldr	r1, [r4, #4]
 80069fc:	4299      	cmp	r1, r3
 80069fe:	bfde      	ittt	le
 8006a00:	2330      	movle	r3, #48	; 0x30
 8006a02:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a06:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a0a:	1b52      	subs	r2, r2, r5
 8006a0c:	6122      	str	r2, [r4, #16]
 8006a0e:	464b      	mov	r3, r9
 8006a10:	4621      	mov	r1, r4
 8006a12:	4640      	mov	r0, r8
 8006a14:	f8cd a000 	str.w	sl, [sp]
 8006a18:	aa03      	add	r2, sp, #12
 8006a1a:	f7ff fedf 	bl	80067dc <_printf_common>
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d14c      	bne.n	8006abc <_printf_i+0x200>
 8006a22:	f04f 30ff 	mov.w	r0, #4294967295
 8006a26:	b004      	add	sp, #16
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	4834      	ldr	r0, [pc, #208]	; (8006b00 <_printf_i+0x244>)
 8006a2e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006a32:	6829      	ldr	r1, [r5, #0]
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a3a:	6029      	str	r1, [r5, #0]
 8006a3c:	061d      	lsls	r5, r3, #24
 8006a3e:	d514      	bpl.n	8006a6a <_printf_i+0x1ae>
 8006a40:	07df      	lsls	r7, r3, #31
 8006a42:	bf44      	itt	mi
 8006a44:	f043 0320 	orrmi.w	r3, r3, #32
 8006a48:	6023      	strmi	r3, [r4, #0]
 8006a4a:	b91e      	cbnz	r6, 8006a54 <_printf_i+0x198>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	f023 0320 	bic.w	r3, r3, #32
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	2310      	movs	r3, #16
 8006a56:	e7af      	b.n	80069b8 <_printf_i+0xfc>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f043 0320 	orr.w	r3, r3, #32
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	2378      	movs	r3, #120	; 0x78
 8006a62:	4828      	ldr	r0, [pc, #160]	; (8006b04 <_printf_i+0x248>)
 8006a64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006a68:	e7e3      	b.n	8006a32 <_printf_i+0x176>
 8006a6a:	0659      	lsls	r1, r3, #25
 8006a6c:	bf48      	it	mi
 8006a6e:	b2b6      	uxthmi	r6, r6
 8006a70:	e7e6      	b.n	8006a40 <_printf_i+0x184>
 8006a72:	4615      	mov	r5, r2
 8006a74:	e7bb      	b.n	80069ee <_printf_i+0x132>
 8006a76:	682b      	ldr	r3, [r5, #0]
 8006a78:	6826      	ldr	r6, [r4, #0]
 8006a7a:	1d18      	adds	r0, r3, #4
 8006a7c:	6961      	ldr	r1, [r4, #20]
 8006a7e:	6028      	str	r0, [r5, #0]
 8006a80:	0635      	lsls	r5, r6, #24
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	d501      	bpl.n	8006a8a <_printf_i+0x1ce>
 8006a86:	6019      	str	r1, [r3, #0]
 8006a88:	e002      	b.n	8006a90 <_printf_i+0x1d4>
 8006a8a:	0670      	lsls	r0, r6, #25
 8006a8c:	d5fb      	bpl.n	8006a86 <_printf_i+0x1ca>
 8006a8e:	8019      	strh	r1, [r3, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	4615      	mov	r5, r2
 8006a94:	6123      	str	r3, [r4, #16]
 8006a96:	e7ba      	b.n	8006a0e <_printf_i+0x152>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	1d1a      	adds	r2, r3, #4
 8006a9e:	602a      	str	r2, [r5, #0]
 8006aa0:	681d      	ldr	r5, [r3, #0]
 8006aa2:	6862      	ldr	r2, [r4, #4]
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f001 fa09 	bl	8007ebc <memchr>
 8006aaa:	b108      	cbz	r0, 8006ab0 <_printf_i+0x1f4>
 8006aac:	1b40      	subs	r0, r0, r5
 8006aae:	6060      	str	r0, [r4, #4]
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	6123      	str	r3, [r4, #16]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aba:	e7a8      	b.n	8006a0e <_printf_i+0x152>
 8006abc:	462a      	mov	r2, r5
 8006abe:	4649      	mov	r1, r9
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	6923      	ldr	r3, [r4, #16]
 8006ac4:	47d0      	blx	sl
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0ab      	beq.n	8006a22 <_printf_i+0x166>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	079b      	lsls	r3, r3, #30
 8006ace:	d413      	bmi.n	8006af8 <_printf_i+0x23c>
 8006ad0:	68e0      	ldr	r0, [r4, #12]
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	4298      	cmp	r0, r3
 8006ad6:	bfb8      	it	lt
 8006ad8:	4618      	movlt	r0, r3
 8006ada:	e7a4      	b.n	8006a26 <_printf_i+0x16a>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4632      	mov	r2, r6
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	4640      	mov	r0, r8
 8006ae4:	47d0      	blx	sl
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d09b      	beq.n	8006a22 <_printf_i+0x166>
 8006aea:	3501      	adds	r5, #1
 8006aec:	68e3      	ldr	r3, [r4, #12]
 8006aee:	9903      	ldr	r1, [sp, #12]
 8006af0:	1a5b      	subs	r3, r3, r1
 8006af2:	42ab      	cmp	r3, r5
 8006af4:	dcf2      	bgt.n	8006adc <_printf_i+0x220>
 8006af6:	e7eb      	b.n	8006ad0 <_printf_i+0x214>
 8006af8:	2500      	movs	r5, #0
 8006afa:	f104 0619 	add.w	r6, r4, #25
 8006afe:	e7f5      	b.n	8006aec <_printf_i+0x230>
 8006b00:	08008f8e 	.word	0x08008f8e
 8006b04:	08008f9f 	.word	0x08008f9f

08006b08 <_puts_r>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	460e      	mov	r6, r1
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	b118      	cbz	r0, 8006b18 <_puts_r+0x10>
 8006b10:	6983      	ldr	r3, [r0, #24]
 8006b12:	b90b      	cbnz	r3, 8006b18 <_puts_r+0x10>
 8006b14:	f001 f8c0 	bl	8007c98 <__sinit>
 8006b18:	69ab      	ldr	r3, [r5, #24]
 8006b1a:	68ac      	ldr	r4, [r5, #8]
 8006b1c:	b913      	cbnz	r3, 8006b24 <_puts_r+0x1c>
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f001 f8ba 	bl	8007c98 <__sinit>
 8006b24:	4b2c      	ldr	r3, [pc, #176]	; (8006bd8 <_puts_r+0xd0>)
 8006b26:	429c      	cmp	r4, r3
 8006b28:	d120      	bne.n	8006b6c <_puts_r+0x64>
 8006b2a:	686c      	ldr	r4, [r5, #4]
 8006b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b2e:	07db      	lsls	r3, r3, #31
 8006b30:	d405      	bmi.n	8006b3e <_puts_r+0x36>
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	0598      	lsls	r0, r3, #22
 8006b36:	d402      	bmi.n	8006b3e <_puts_r+0x36>
 8006b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b3a:	f001 f950 	bl	8007dde <__retarget_lock_acquire_recursive>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	0719      	lsls	r1, r3, #28
 8006b42:	d51d      	bpl.n	8006b80 <_puts_r+0x78>
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	b1db      	cbz	r3, 8006b80 <_puts_r+0x78>
 8006b48:	3e01      	subs	r6, #1
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b50:	3b01      	subs	r3, #1
 8006b52:	60a3      	str	r3, [r4, #8]
 8006b54:	bb39      	cbnz	r1, 8006ba6 <_puts_r+0x9e>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da38      	bge.n	8006bcc <_puts_r+0xc4>
 8006b5a:	4622      	mov	r2, r4
 8006b5c:	210a      	movs	r1, #10
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f000 f848 	bl	8006bf4 <__swbuf_r>
 8006b64:	3001      	adds	r0, #1
 8006b66:	d011      	beq.n	8006b8c <_puts_r+0x84>
 8006b68:	250a      	movs	r5, #10
 8006b6a:	e011      	b.n	8006b90 <_puts_r+0x88>
 8006b6c:	4b1b      	ldr	r3, [pc, #108]	; (8006bdc <_puts_r+0xd4>)
 8006b6e:	429c      	cmp	r4, r3
 8006b70:	d101      	bne.n	8006b76 <_puts_r+0x6e>
 8006b72:	68ac      	ldr	r4, [r5, #8]
 8006b74:	e7da      	b.n	8006b2c <_puts_r+0x24>
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <_puts_r+0xd8>)
 8006b78:	429c      	cmp	r4, r3
 8006b7a:	bf08      	it	eq
 8006b7c:	68ec      	ldreq	r4, [r5, #12]
 8006b7e:	e7d5      	b.n	8006b2c <_puts_r+0x24>
 8006b80:	4621      	mov	r1, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f888 	bl	8006c98 <__swsetup_r>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d0dd      	beq.n	8006b48 <_puts_r+0x40>
 8006b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b92:	07da      	lsls	r2, r3, #31
 8006b94:	d405      	bmi.n	8006ba2 <_puts_r+0x9a>
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	059b      	lsls	r3, r3, #22
 8006b9a:	d402      	bmi.n	8006ba2 <_puts_r+0x9a>
 8006b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9e:	f001 f91f 	bl	8007de0 <__retarget_lock_release_recursive>
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da04      	bge.n	8006bb4 <_puts_r+0xac>
 8006baa:	69a2      	ldr	r2, [r4, #24]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	dc06      	bgt.n	8006bbe <_puts_r+0xb6>
 8006bb0:	290a      	cmp	r1, #10
 8006bb2:	d004      	beq.n	8006bbe <_puts_r+0xb6>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	7019      	strb	r1, [r3, #0]
 8006bbc:	e7c5      	b.n	8006b4a <_puts_r+0x42>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 f817 	bl	8006bf4 <__swbuf_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d1bf      	bne.n	8006b4a <_puts_r+0x42>
 8006bca:	e7df      	b.n	8006b8c <_puts_r+0x84>
 8006bcc:	250a      	movs	r5, #10
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	701d      	strb	r5, [r3, #0]
 8006bd6:	e7db      	b.n	8006b90 <_puts_r+0x88>
 8006bd8:	08009060 	.word	0x08009060
 8006bdc:	08009080 	.word	0x08009080
 8006be0:	08009040 	.word	0x08009040

08006be4 <puts>:
 8006be4:	4b02      	ldr	r3, [pc, #8]	; (8006bf0 <puts+0xc>)
 8006be6:	4601      	mov	r1, r0
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	f7ff bf8d 	b.w	8006b08 <_puts_r>
 8006bee:	bf00      	nop
 8006bf0:	2000003c 	.word	0x2000003c

08006bf4 <__swbuf_r>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	460e      	mov	r6, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	b118      	cbz	r0, 8006c06 <__swbuf_r+0x12>
 8006bfe:	6983      	ldr	r3, [r0, #24]
 8006c00:	b90b      	cbnz	r3, 8006c06 <__swbuf_r+0x12>
 8006c02:	f001 f849 	bl	8007c98 <__sinit>
 8006c06:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <__swbuf_r+0x98>)
 8006c08:	429c      	cmp	r4, r3
 8006c0a:	d12b      	bne.n	8006c64 <__swbuf_r+0x70>
 8006c0c:	686c      	ldr	r4, [r5, #4]
 8006c0e:	69a3      	ldr	r3, [r4, #24]
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	071a      	lsls	r2, r3, #28
 8006c16:	d52f      	bpl.n	8006c78 <__swbuf_r+0x84>
 8006c18:	6923      	ldr	r3, [r4, #16]
 8006c1a:	b36b      	cbz	r3, 8006c78 <__swbuf_r+0x84>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	6820      	ldr	r0, [r4, #0]
 8006c20:	b2f6      	uxtb	r6, r6
 8006c22:	1ac0      	subs	r0, r0, r3
 8006c24:	6963      	ldr	r3, [r4, #20]
 8006c26:	4637      	mov	r7, r6
 8006c28:	4283      	cmp	r3, r0
 8006c2a:	dc04      	bgt.n	8006c36 <__swbuf_r+0x42>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f000 ff9e 	bl	8007b70 <_fflush_r>
 8006c34:	bb30      	cbnz	r0, 8006c84 <__swbuf_r+0x90>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	3001      	adds	r0, #1
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	701e      	strb	r6, [r3, #0]
 8006c46:	6963      	ldr	r3, [r4, #20]
 8006c48:	4283      	cmp	r3, r0
 8006c4a:	d004      	beq.n	8006c56 <__swbuf_r+0x62>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	07db      	lsls	r3, r3, #31
 8006c50:	d506      	bpl.n	8006c60 <__swbuf_r+0x6c>
 8006c52:	2e0a      	cmp	r6, #10
 8006c54:	d104      	bne.n	8006c60 <__swbuf_r+0x6c>
 8006c56:	4621      	mov	r1, r4
 8006c58:	4628      	mov	r0, r5
 8006c5a:	f000 ff89 	bl	8007b70 <_fflush_r>
 8006c5e:	b988      	cbnz	r0, 8006c84 <__swbuf_r+0x90>
 8006c60:	4638      	mov	r0, r7
 8006c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c64:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <__swbuf_r+0x9c>)
 8006c66:	429c      	cmp	r4, r3
 8006c68:	d101      	bne.n	8006c6e <__swbuf_r+0x7a>
 8006c6a:	68ac      	ldr	r4, [r5, #8]
 8006c6c:	e7cf      	b.n	8006c0e <__swbuf_r+0x1a>
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <__swbuf_r+0xa0>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	bf08      	it	eq
 8006c74:	68ec      	ldreq	r4, [r5, #12]
 8006c76:	e7ca      	b.n	8006c0e <__swbuf_r+0x1a>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f80c 	bl	8006c98 <__swsetup_r>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d0cb      	beq.n	8006c1c <__swbuf_r+0x28>
 8006c84:	f04f 37ff 	mov.w	r7, #4294967295
 8006c88:	e7ea      	b.n	8006c60 <__swbuf_r+0x6c>
 8006c8a:	bf00      	nop
 8006c8c:	08009060 	.word	0x08009060
 8006c90:	08009080 	.word	0x08009080
 8006c94:	08009040 	.word	0x08009040

08006c98 <__swsetup_r>:
 8006c98:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <__swsetup_r+0xcc>)
 8006c9a:	b570      	push	{r4, r5, r6, lr}
 8006c9c:	681d      	ldr	r5, [r3, #0]
 8006c9e:	4606      	mov	r6, r0
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	b125      	cbz	r5, 8006cae <__swsetup_r+0x16>
 8006ca4:	69ab      	ldr	r3, [r5, #24]
 8006ca6:	b913      	cbnz	r3, 8006cae <__swsetup_r+0x16>
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 fff5 	bl	8007c98 <__sinit>
 8006cae:	4b2e      	ldr	r3, [pc, #184]	; (8006d68 <__swsetup_r+0xd0>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d10f      	bne.n	8006cd4 <__swsetup_r+0x3c>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	89a3      	ldrh	r3, [r4, #12]
 8006cb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbc:	0719      	lsls	r1, r3, #28
 8006cbe:	d42c      	bmi.n	8006d1a <__swsetup_r+0x82>
 8006cc0:	06dd      	lsls	r5, r3, #27
 8006cc2:	d411      	bmi.n	8006ce8 <__swsetup_r+0x50>
 8006cc4:	2309      	movs	r3, #9
 8006cc6:	6033      	str	r3, [r6, #0]
 8006cc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	e03e      	b.n	8006d52 <__swsetup_r+0xba>
 8006cd4:	4b25      	ldr	r3, [pc, #148]	; (8006d6c <__swsetup_r+0xd4>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d101      	bne.n	8006cde <__swsetup_r+0x46>
 8006cda:	68ac      	ldr	r4, [r5, #8]
 8006cdc:	e7eb      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006cde:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <__swsetup_r+0xd8>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	bf08      	it	eq
 8006ce4:	68ec      	ldreq	r4, [r5, #12]
 8006ce6:	e7e6      	b.n	8006cb6 <__swsetup_r+0x1e>
 8006ce8:	0758      	lsls	r0, r3, #29
 8006cea:	d512      	bpl.n	8006d12 <__swsetup_r+0x7a>
 8006cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cee:	b141      	cbz	r1, 8006d02 <__swsetup_r+0x6a>
 8006cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf4:	4299      	cmp	r1, r3
 8006cf6:	d002      	beq.n	8006cfe <__swsetup_r+0x66>
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	f001 fc91 	bl	8008620 <_free_r>
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6363      	str	r3, [r4, #52]	; 0x34
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d08:	81a3      	strh	r3, [r4, #12]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6063      	str	r3, [r4, #4]
 8006d0e:	6923      	ldr	r3, [r4, #16]
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	f043 0308 	orr.w	r3, r3, #8
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	b94b      	cbnz	r3, 8006d32 <__swsetup_r+0x9a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d28:	d003      	beq.n	8006d32 <__swsetup_r+0x9a>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	f001 f87d 	bl	8007e2c <__smakebuf_r>
 8006d32:	89a0      	ldrh	r0, [r4, #12]
 8006d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d38:	f010 0301 	ands.w	r3, r0, #1
 8006d3c:	d00a      	beq.n	8006d54 <__swsetup_r+0xbc>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60a3      	str	r3, [r4, #8]
 8006d42:	6963      	ldr	r3, [r4, #20]
 8006d44:	425b      	negs	r3, r3
 8006d46:	61a3      	str	r3, [r4, #24]
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	b943      	cbnz	r3, 8006d5e <__swsetup_r+0xc6>
 8006d4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d50:	d1ba      	bne.n	8006cc8 <__swsetup_r+0x30>
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	0781      	lsls	r1, r0, #30
 8006d56:	bf58      	it	pl
 8006d58:	6963      	ldrpl	r3, [r4, #20]
 8006d5a:	60a3      	str	r3, [r4, #8]
 8006d5c:	e7f4      	b.n	8006d48 <__swsetup_r+0xb0>
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7f7      	b.n	8006d52 <__swsetup_r+0xba>
 8006d62:	bf00      	nop
 8006d64:	2000003c 	.word	0x2000003c
 8006d68:	08009060 	.word	0x08009060
 8006d6c:	08009080 	.word	0x08009080
 8006d70:	08009040 	.word	0x08009040

08006d74 <quorem>:
 8006d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d78:	6903      	ldr	r3, [r0, #16]
 8006d7a:	690c      	ldr	r4, [r1, #16]
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	42a3      	cmp	r3, r4
 8006d80:	f2c0 8082 	blt.w	8006e88 <quorem+0x114>
 8006d84:	3c01      	subs	r4, #1
 8006d86:	f100 0514 	add.w	r5, r0, #20
 8006d8a:	f101 0814 	add.w	r8, r1, #20
 8006d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006da4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006da8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dac:	d331      	bcc.n	8006e12 <quorem+0x9e>
 8006dae:	f04f 0e00 	mov.w	lr, #0
 8006db2:	4640      	mov	r0, r8
 8006db4:	46ac      	mov	ip, r5
 8006db6:	46f2      	mov	sl, lr
 8006db8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006dbc:	b293      	uxth	r3, r2
 8006dbe:	fb06 e303 	mla	r3, r6, r3, lr
 8006dc2:	0c12      	lsrs	r2, r2, #16
 8006dc4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	fb06 e202 	mla	r2, r6, r2, lr
 8006dce:	ebaa 0303 	sub.w	r3, sl, r3
 8006dd2:	f8dc a000 	ldr.w	sl, [ip]
 8006dd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006dda:	fa1f fa8a 	uxth.w	sl, sl
 8006dde:	4453      	add	r3, sl
 8006de0:	f8dc a000 	ldr.w	sl, [ip]
 8006de4:	b292      	uxth	r2, r2
 8006de6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006dea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006df4:	4581      	cmp	r9, r0
 8006df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006dfa:	f84c 3b04 	str.w	r3, [ip], #4
 8006dfe:	d2db      	bcs.n	8006db8 <quorem+0x44>
 8006e00:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e04:	b92b      	cbnz	r3, 8006e12 <quorem+0x9e>
 8006e06:	9b01      	ldr	r3, [sp, #4]
 8006e08:	3b04      	subs	r3, #4
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	d32f      	bcc.n	8006e70 <quorem+0xfc>
 8006e10:	613c      	str	r4, [r7, #16]
 8006e12:	4638      	mov	r0, r7
 8006e14:	f001 faec 	bl	80083f0 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	db25      	blt.n	8006e68 <quorem+0xf4>
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	3601      	adds	r6, #1
 8006e24:	f858 1b04 	ldr.w	r1, [r8], #4
 8006e28:	f8d0 e000 	ldr.w	lr, [r0]
 8006e2c:	b28b      	uxth	r3, r1
 8006e2e:	ebac 0303 	sub.w	r3, ip, r3
 8006e32:	fa1f f28e 	uxth.w	r2, lr
 8006e36:	4413      	add	r3, r2
 8006e38:	0c0a      	lsrs	r2, r1, #16
 8006e3a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e48:	45c1      	cmp	r9, r8
 8006e4a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e4e:	f840 3b04 	str.w	r3, [r0], #4
 8006e52:	d2e7      	bcs.n	8006e24 <quorem+0xb0>
 8006e54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e5c:	b922      	cbnz	r2, 8006e68 <quorem+0xf4>
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	429d      	cmp	r5, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	d30a      	bcc.n	8006e7c <quorem+0x108>
 8006e66:	613c      	str	r4, [r7, #16]
 8006e68:	4630      	mov	r0, r6
 8006e6a:	b003      	add	sp, #12
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	6812      	ldr	r2, [r2, #0]
 8006e72:	3b04      	subs	r3, #4
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d1cb      	bne.n	8006e10 <quorem+0x9c>
 8006e78:	3c01      	subs	r4, #1
 8006e7a:	e7c6      	b.n	8006e0a <quorem+0x96>
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	3b04      	subs	r3, #4
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d1f0      	bne.n	8006e66 <quorem+0xf2>
 8006e84:	3c01      	subs	r4, #1
 8006e86:	e7eb      	b.n	8006e60 <quorem+0xec>
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e7ee      	b.n	8006e6a <quorem+0xf6>
 8006e8c:	0000      	movs	r0, r0
	...

08006e90 <_dtoa_r>:
 8006e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e94:	4616      	mov	r6, r2
 8006e96:	461f      	mov	r7, r3
 8006e98:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006e9a:	b099      	sub	sp, #100	; 0x64
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006ea2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006ea6:	b974      	cbnz	r4, 8006ec6 <_dtoa_r+0x36>
 8006ea8:	2010      	movs	r0, #16
 8006eaa:	f000 ffff 	bl	8007eac <malloc>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6268      	str	r0, [r5, #36]	; 0x24
 8006eb2:	b920      	cbnz	r0, 8006ebe <_dtoa_r+0x2e>
 8006eb4:	21ea      	movs	r1, #234	; 0xea
 8006eb6:	4ba8      	ldr	r3, [pc, #672]	; (8007158 <_dtoa_r+0x2c8>)
 8006eb8:	48a8      	ldr	r0, [pc, #672]	; (800715c <_dtoa_r+0x2cc>)
 8006eba:	f001 fcf3 	bl	80088a4 <__assert_func>
 8006ebe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ec2:	6004      	str	r4, [r0, #0]
 8006ec4:	60c4      	str	r4, [r0, #12]
 8006ec6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ec8:	6819      	ldr	r1, [r3, #0]
 8006eca:	b151      	cbz	r1, 8006ee2 <_dtoa_r+0x52>
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4093      	lsls	r3, r2
 8006ed2:	604a      	str	r2, [r1, #4]
 8006ed4:	608b      	str	r3, [r1, #8]
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f001 f84c 	bl	8007f74 <_Bfree>
 8006edc:	2200      	movs	r2, #0
 8006ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	1e3b      	subs	r3, r7, #0
 8006ee4:	bfaf      	iteee	ge
 8006ee6:	2300      	movge	r3, #0
 8006ee8:	2201      	movlt	r2, #1
 8006eea:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006eee:	9305      	strlt	r3, [sp, #20]
 8006ef0:	bfa8      	it	ge
 8006ef2:	f8c8 3000 	strge.w	r3, [r8]
 8006ef6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006efa:	4b99      	ldr	r3, [pc, #612]	; (8007160 <_dtoa_r+0x2d0>)
 8006efc:	bfb8      	it	lt
 8006efe:	f8c8 2000 	strlt.w	r2, [r8]
 8006f02:	ea33 0309 	bics.w	r3, r3, r9
 8006f06:	d119      	bne.n	8006f3c <_dtoa_r+0xac>
 8006f08:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f14:	4333      	orrs	r3, r6
 8006f16:	f000 857f 	beq.w	8007a18 <_dtoa_r+0xb88>
 8006f1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f1c:	b953      	cbnz	r3, 8006f34 <_dtoa_r+0xa4>
 8006f1e:	4b91      	ldr	r3, [pc, #580]	; (8007164 <_dtoa_r+0x2d4>)
 8006f20:	e022      	b.n	8006f68 <_dtoa_r+0xd8>
 8006f22:	4b91      	ldr	r3, [pc, #580]	; (8007168 <_dtoa_r+0x2d8>)
 8006f24:	9303      	str	r3, [sp, #12]
 8006f26:	3308      	adds	r3, #8
 8006f28:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	9803      	ldr	r0, [sp, #12]
 8006f2e:	b019      	add	sp, #100	; 0x64
 8006f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f34:	4b8b      	ldr	r3, [pc, #556]	; (8007164 <_dtoa_r+0x2d4>)
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	3303      	adds	r3, #3
 8006f3a:	e7f5      	b.n	8006f28 <_dtoa_r+0x98>
 8006f3c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f40:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f48:	2200      	movs	r2, #0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f7f9 fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006f50:	4680      	mov	r8, r0
 8006f52:	b158      	cbz	r0, 8006f6c <_dtoa_r+0xdc>
 8006f54:	2301      	movs	r3, #1
 8006f56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8558 	beq.w	8007a12 <_dtoa_r+0xb82>
 8006f62:	4882      	ldr	r0, [pc, #520]	; (800716c <_dtoa_r+0x2dc>)
 8006f64:	6018      	str	r0, [r3, #0]
 8006f66:	1e43      	subs	r3, r0, #1
 8006f68:	9303      	str	r3, [sp, #12]
 8006f6a:	e7df      	b.n	8006f2c <_dtoa_r+0x9c>
 8006f6c:	ab16      	add	r3, sp, #88	; 0x58
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	ab17      	add	r3, sp, #92	; 0x5c
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	4628      	mov	r0, r5
 8006f76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f7a:	f001 fae1 	bl	8008540 <__d2b>
 8006f7e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f82:	4683      	mov	fp, r0
 8006f84:	2c00      	cmp	r4, #0
 8006f86:	d07f      	beq.n	8007088 <_dtoa_r+0x1f8>
 8006f88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f8e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006f92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006f9a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006f9e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4b72      	ldr	r3, [pc, #456]	; (8007170 <_dtoa_r+0x2e0>)
 8006fa6:	f7f9 f8df 	bl	8000168 <__aeabi_dsub>
 8006faa:	a365      	add	r3, pc, #404	; (adr r3, 8007140 <_dtoa_r+0x2b0>)
 8006fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb0:	f7f9 fa92 	bl	80004d8 <__aeabi_dmul>
 8006fb4:	a364      	add	r3, pc, #400	; (adr r3, 8007148 <_dtoa_r+0x2b8>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f8d7 	bl	800016c <__adddf3>
 8006fbe:	4606      	mov	r6, r0
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	460f      	mov	r7, r1
 8006fc4:	f7f9 fa1e 	bl	8000404 <__aeabi_i2d>
 8006fc8:	a361      	add	r3, pc, #388	; (adr r3, 8007150 <_dtoa_r+0x2c0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fa83 	bl	80004d8 <__aeabi_dmul>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	4639      	mov	r1, r7
 8006fda:	f7f9 f8c7 	bl	800016c <__adddf3>
 8006fde:	4606      	mov	r6, r0
 8006fe0:	460f      	mov	r7, r1
 8006fe2:	f7f9 fd29 	bl	8000a38 <__aeabi_d2iz>
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	4682      	mov	sl, r0
 8006fea:	2300      	movs	r3, #0
 8006fec:	4630      	mov	r0, r6
 8006fee:	4639      	mov	r1, r7
 8006ff0:	f7f9 fce4 	bl	80009bc <__aeabi_dcmplt>
 8006ff4:	b148      	cbz	r0, 800700a <_dtoa_r+0x17a>
 8006ff6:	4650      	mov	r0, sl
 8006ff8:	f7f9 fa04 	bl	8000404 <__aeabi_i2d>
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	f7f9 fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8007004:	b908      	cbnz	r0, 800700a <_dtoa_r+0x17a>
 8007006:	f10a 3aff 	add.w	sl, sl, #4294967295
 800700a:	f1ba 0f16 	cmp.w	sl, #22
 800700e:	d858      	bhi.n	80070c2 <_dtoa_r+0x232>
 8007010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007014:	4b57      	ldr	r3, [pc, #348]	; (8007174 <_dtoa_r+0x2e4>)
 8007016:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 fccd 	bl	80009bc <__aeabi_dcmplt>
 8007022:	2800      	cmp	r0, #0
 8007024:	d04f      	beq.n	80070c6 <_dtoa_r+0x236>
 8007026:	2300      	movs	r3, #0
 8007028:	f10a 3aff 	add.w	sl, sl, #4294967295
 800702c:	930f      	str	r3, [sp, #60]	; 0x3c
 800702e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007030:	1b1c      	subs	r4, r3, r4
 8007032:	1e63      	subs	r3, r4, #1
 8007034:	9309      	str	r3, [sp, #36]	; 0x24
 8007036:	bf49      	itett	mi
 8007038:	f1c4 0301 	rsbmi	r3, r4, #1
 800703c:	2300      	movpl	r3, #0
 800703e:	9306      	strmi	r3, [sp, #24]
 8007040:	2300      	movmi	r3, #0
 8007042:	bf54      	ite	pl
 8007044:	9306      	strpl	r3, [sp, #24]
 8007046:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007048:	f1ba 0f00 	cmp.w	sl, #0
 800704c:	db3d      	blt.n	80070ca <_dtoa_r+0x23a>
 800704e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007050:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007054:	4453      	add	r3, sl
 8007056:	9309      	str	r3, [sp, #36]	; 0x24
 8007058:	2300      	movs	r3, #0
 800705a:	930a      	str	r3, [sp, #40]	; 0x28
 800705c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800705e:	2b09      	cmp	r3, #9
 8007060:	f200 808c 	bhi.w	800717c <_dtoa_r+0x2ec>
 8007064:	2b05      	cmp	r3, #5
 8007066:	bfc4      	itt	gt
 8007068:	3b04      	subgt	r3, #4
 800706a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800706c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800706e:	bfc8      	it	gt
 8007070:	2400      	movgt	r4, #0
 8007072:	f1a3 0302 	sub.w	r3, r3, #2
 8007076:	bfd8      	it	le
 8007078:	2401      	movle	r4, #1
 800707a:	2b03      	cmp	r3, #3
 800707c:	f200 808a 	bhi.w	8007194 <_dtoa_r+0x304>
 8007080:	e8df f003 	tbb	[pc, r3]
 8007084:	5b4d4f2d 	.word	0x5b4d4f2d
 8007088:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800708c:	441c      	add	r4, r3
 800708e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007092:	2b20      	cmp	r3, #32
 8007094:	bfc3      	ittte	gt
 8007096:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800709a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800709e:	fa09 f303 	lslgt.w	r3, r9, r3
 80070a2:	f1c3 0320 	rsble	r3, r3, #32
 80070a6:	bfc6      	itte	gt
 80070a8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070ac:	4318      	orrgt	r0, r3
 80070ae:	fa06 f003 	lslle.w	r0, r6, r3
 80070b2:	f7f9 f997 	bl	80003e4 <__aeabi_ui2d>
 80070b6:	2301      	movs	r3, #1
 80070b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80070bc:	3c01      	subs	r4, #1
 80070be:	9313      	str	r3, [sp, #76]	; 0x4c
 80070c0:	e76f      	b.n	8006fa2 <_dtoa_r+0x112>
 80070c2:	2301      	movs	r3, #1
 80070c4:	e7b2      	b.n	800702c <_dtoa_r+0x19c>
 80070c6:	900f      	str	r0, [sp, #60]	; 0x3c
 80070c8:	e7b1      	b.n	800702e <_dtoa_r+0x19e>
 80070ca:	9b06      	ldr	r3, [sp, #24]
 80070cc:	eba3 030a 	sub.w	r3, r3, sl
 80070d0:	9306      	str	r3, [sp, #24]
 80070d2:	f1ca 0300 	rsb	r3, sl, #0
 80070d6:	930a      	str	r3, [sp, #40]	; 0x28
 80070d8:	2300      	movs	r3, #0
 80070da:	930e      	str	r3, [sp, #56]	; 0x38
 80070dc:	e7be      	b.n	800705c <_dtoa_r+0x1cc>
 80070de:	2300      	movs	r3, #0
 80070e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	dc58      	bgt.n	800719a <_dtoa_r+0x30a>
 80070e8:	f04f 0901 	mov.w	r9, #1
 80070ec:	464b      	mov	r3, r9
 80070ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80070f2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80070f6:	2200      	movs	r2, #0
 80070f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80070fa:	6042      	str	r2, [r0, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	f102 0614 	add.w	r6, r2, #20
 8007102:	429e      	cmp	r6, r3
 8007104:	6841      	ldr	r1, [r0, #4]
 8007106:	d94e      	bls.n	80071a6 <_dtoa_r+0x316>
 8007108:	4628      	mov	r0, r5
 800710a:	f000 fef3 	bl	8007ef4 <_Balloc>
 800710e:	9003      	str	r0, [sp, #12]
 8007110:	2800      	cmp	r0, #0
 8007112:	d14c      	bne.n	80071ae <_dtoa_r+0x31e>
 8007114:	4602      	mov	r2, r0
 8007116:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <_dtoa_r+0x2e8>)
 800711c:	e6cc      	b.n	8006eb8 <_dtoa_r+0x28>
 800711e:	2301      	movs	r3, #1
 8007120:	e7de      	b.n	80070e0 <_dtoa_r+0x250>
 8007122:	2300      	movs	r3, #0
 8007124:	930b      	str	r3, [sp, #44]	; 0x2c
 8007126:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007128:	eb0a 0903 	add.w	r9, sl, r3
 800712c:	f109 0301 	add.w	r3, r9, #1
 8007130:	2b01      	cmp	r3, #1
 8007132:	9308      	str	r3, [sp, #32]
 8007134:	bfb8      	it	lt
 8007136:	2301      	movlt	r3, #1
 8007138:	e7dd      	b.n	80070f6 <_dtoa_r+0x266>
 800713a:	2301      	movs	r3, #1
 800713c:	e7f2      	b.n	8007124 <_dtoa_r+0x294>
 800713e:	bf00      	nop
 8007140:	636f4361 	.word	0x636f4361
 8007144:	3fd287a7 	.word	0x3fd287a7
 8007148:	8b60c8b3 	.word	0x8b60c8b3
 800714c:	3fc68a28 	.word	0x3fc68a28
 8007150:	509f79fb 	.word	0x509f79fb
 8007154:	3fd34413 	.word	0x3fd34413
 8007158:	08008fbd 	.word	0x08008fbd
 800715c:	08008fd4 	.word	0x08008fd4
 8007160:	7ff00000 	.word	0x7ff00000
 8007164:	08008fb9 	.word	0x08008fb9
 8007168:	08008fb0 	.word	0x08008fb0
 800716c:	08008f8d 	.word	0x08008f8d
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	08009128 	.word	0x08009128
 8007178:	0800902f 	.word	0x0800902f
 800717c:	2401      	movs	r4, #1
 800717e:	2300      	movs	r3, #0
 8007180:	940b      	str	r4, [sp, #44]	; 0x2c
 8007182:	9322      	str	r3, [sp, #136]	; 0x88
 8007184:	f04f 39ff 	mov.w	r9, #4294967295
 8007188:	2200      	movs	r2, #0
 800718a:	2312      	movs	r3, #18
 800718c:	f8cd 9020 	str.w	r9, [sp, #32]
 8007190:	9223      	str	r2, [sp, #140]	; 0x8c
 8007192:	e7b0      	b.n	80070f6 <_dtoa_r+0x266>
 8007194:	2301      	movs	r3, #1
 8007196:	930b      	str	r3, [sp, #44]	; 0x2c
 8007198:	e7f4      	b.n	8007184 <_dtoa_r+0x2f4>
 800719a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800719e:	464b      	mov	r3, r9
 80071a0:	f8cd 9020 	str.w	r9, [sp, #32]
 80071a4:	e7a7      	b.n	80070f6 <_dtoa_r+0x266>
 80071a6:	3101      	adds	r1, #1
 80071a8:	6041      	str	r1, [r0, #4]
 80071aa:	0052      	lsls	r2, r2, #1
 80071ac:	e7a7      	b.n	80070fe <_dtoa_r+0x26e>
 80071ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80071b0:	9a03      	ldr	r2, [sp, #12]
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	9b08      	ldr	r3, [sp, #32]
 80071b6:	2b0e      	cmp	r3, #14
 80071b8:	f200 80a8 	bhi.w	800730c <_dtoa_r+0x47c>
 80071bc:	2c00      	cmp	r4, #0
 80071be:	f000 80a5 	beq.w	800730c <_dtoa_r+0x47c>
 80071c2:	f1ba 0f00 	cmp.w	sl, #0
 80071c6:	dd34      	ble.n	8007232 <_dtoa_r+0x3a2>
 80071c8:	4a9a      	ldr	r2, [pc, #616]	; (8007434 <_dtoa_r+0x5a4>)
 80071ca:	f00a 030f 	and.w	r3, sl, #15
 80071ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071d2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80071d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80071de:	ea4f 142a 	mov.w	r4, sl, asr #4
 80071e2:	d016      	beq.n	8007212 <_dtoa_r+0x382>
 80071e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80071e8:	4b93      	ldr	r3, [pc, #588]	; (8007438 <_dtoa_r+0x5a8>)
 80071ea:	2703      	movs	r7, #3
 80071ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071f0:	f7f9 fa9c 	bl	800072c <__aeabi_ddiv>
 80071f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071f8:	f004 040f 	and.w	r4, r4, #15
 80071fc:	4e8e      	ldr	r6, [pc, #568]	; (8007438 <_dtoa_r+0x5a8>)
 80071fe:	b954      	cbnz	r4, 8007216 <_dtoa_r+0x386>
 8007200:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007208:	f7f9 fa90 	bl	800072c <__aeabi_ddiv>
 800720c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007210:	e029      	b.n	8007266 <_dtoa_r+0x3d6>
 8007212:	2702      	movs	r7, #2
 8007214:	e7f2      	b.n	80071fc <_dtoa_r+0x36c>
 8007216:	07e1      	lsls	r1, r4, #31
 8007218:	d508      	bpl.n	800722c <_dtoa_r+0x39c>
 800721a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800721e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007222:	f7f9 f959 	bl	80004d8 <__aeabi_dmul>
 8007226:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800722a:	3701      	adds	r7, #1
 800722c:	1064      	asrs	r4, r4, #1
 800722e:	3608      	adds	r6, #8
 8007230:	e7e5      	b.n	80071fe <_dtoa_r+0x36e>
 8007232:	f000 80a5 	beq.w	8007380 <_dtoa_r+0x4f0>
 8007236:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800723a:	f1ca 0400 	rsb	r4, sl, #0
 800723e:	4b7d      	ldr	r3, [pc, #500]	; (8007434 <_dtoa_r+0x5a4>)
 8007240:	f004 020f 	and.w	r2, r4, #15
 8007244:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 f944 	bl	80004d8 <__aeabi_dmul>
 8007250:	2702      	movs	r7, #2
 8007252:	2300      	movs	r3, #0
 8007254:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007258:	4e77      	ldr	r6, [pc, #476]	; (8007438 <_dtoa_r+0x5a8>)
 800725a:	1124      	asrs	r4, r4, #4
 800725c:	2c00      	cmp	r4, #0
 800725e:	f040 8084 	bne.w	800736a <_dtoa_r+0x4da>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1d2      	bne.n	800720c <_dtoa_r+0x37c>
 8007266:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 808b 	beq.w	8007384 <_dtoa_r+0x4f4>
 800726e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007272:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007276:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800727a:	2200      	movs	r2, #0
 800727c:	4b6f      	ldr	r3, [pc, #444]	; (800743c <_dtoa_r+0x5ac>)
 800727e:	f7f9 fb9d 	bl	80009bc <__aeabi_dcmplt>
 8007282:	2800      	cmp	r0, #0
 8007284:	d07e      	beq.n	8007384 <_dtoa_r+0x4f4>
 8007286:	9b08      	ldr	r3, [sp, #32]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d07b      	beq.n	8007384 <_dtoa_r+0x4f4>
 800728c:	f1b9 0f00 	cmp.w	r9, #0
 8007290:	dd38      	ble.n	8007304 <_dtoa_r+0x474>
 8007292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007296:	2200      	movs	r2, #0
 8007298:	4b69      	ldr	r3, [pc, #420]	; (8007440 <_dtoa_r+0x5b0>)
 800729a:	f7f9 f91d 	bl	80004d8 <__aeabi_dmul>
 800729e:	464c      	mov	r4, r9
 80072a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072a4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80072a8:	3701      	adds	r7, #1
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7f9 f8aa 	bl	8000404 <__aeabi_i2d>
 80072b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072b4:	f7f9 f910 	bl	80004d8 <__aeabi_dmul>
 80072b8:	2200      	movs	r2, #0
 80072ba:	4b62      	ldr	r3, [pc, #392]	; (8007444 <_dtoa_r+0x5b4>)
 80072bc:	f7f8 ff56 	bl	800016c <__adddf3>
 80072c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80072c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072c8:	9611      	str	r6, [sp, #68]	; 0x44
 80072ca:	2c00      	cmp	r4, #0
 80072cc:	d15d      	bne.n	800738a <_dtoa_r+0x4fa>
 80072ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072d2:	2200      	movs	r2, #0
 80072d4:	4b5c      	ldr	r3, [pc, #368]	; (8007448 <_dtoa_r+0x5b8>)
 80072d6:	f7f8 ff47 	bl	8000168 <__aeabi_dsub>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072e2:	4633      	mov	r3, r6
 80072e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072e6:	f7f9 fb87 	bl	80009f8 <__aeabi_dcmpgt>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f040 829c 	bne.w	8007828 <_dtoa_r+0x998>
 80072f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072f6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80072fa:	f7f9 fb5f 	bl	80009bc <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f040 8290 	bne.w	8007824 <_dtoa_r+0x994>
 8007304:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007308:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800730c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800730e:	2b00      	cmp	r3, #0
 8007310:	f2c0 8152 	blt.w	80075b8 <_dtoa_r+0x728>
 8007314:	f1ba 0f0e 	cmp.w	sl, #14
 8007318:	f300 814e 	bgt.w	80075b8 <_dtoa_r+0x728>
 800731c:	4b45      	ldr	r3, [pc, #276]	; (8007434 <_dtoa_r+0x5a4>)
 800731e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007322:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007326:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800732a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800732c:	2b00      	cmp	r3, #0
 800732e:	f280 80db 	bge.w	80074e8 <_dtoa_r+0x658>
 8007332:	9b08      	ldr	r3, [sp, #32]
 8007334:	2b00      	cmp	r3, #0
 8007336:	f300 80d7 	bgt.w	80074e8 <_dtoa_r+0x658>
 800733a:	f040 8272 	bne.w	8007822 <_dtoa_r+0x992>
 800733e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007342:	2200      	movs	r2, #0
 8007344:	4b40      	ldr	r3, [pc, #256]	; (8007448 <_dtoa_r+0x5b8>)
 8007346:	f7f9 f8c7 	bl	80004d8 <__aeabi_dmul>
 800734a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734e:	f7f9 fb49 	bl	80009e4 <__aeabi_dcmpge>
 8007352:	9c08      	ldr	r4, [sp, #32]
 8007354:	4626      	mov	r6, r4
 8007356:	2800      	cmp	r0, #0
 8007358:	f040 8248 	bne.w	80077ec <_dtoa_r+0x95c>
 800735c:	2331      	movs	r3, #49	; 0x31
 800735e:	9f03      	ldr	r7, [sp, #12]
 8007360:	f10a 0a01 	add.w	sl, sl, #1
 8007364:	f807 3b01 	strb.w	r3, [r7], #1
 8007368:	e244      	b.n	80077f4 <_dtoa_r+0x964>
 800736a:	07e2      	lsls	r2, r4, #31
 800736c:	d505      	bpl.n	800737a <_dtoa_r+0x4ea>
 800736e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007372:	f7f9 f8b1 	bl	80004d8 <__aeabi_dmul>
 8007376:	2301      	movs	r3, #1
 8007378:	3701      	adds	r7, #1
 800737a:	1064      	asrs	r4, r4, #1
 800737c:	3608      	adds	r6, #8
 800737e:	e76d      	b.n	800725c <_dtoa_r+0x3cc>
 8007380:	2702      	movs	r7, #2
 8007382:	e770      	b.n	8007266 <_dtoa_r+0x3d6>
 8007384:	46d0      	mov	r8, sl
 8007386:	9c08      	ldr	r4, [sp, #32]
 8007388:	e78f      	b.n	80072aa <_dtoa_r+0x41a>
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	4b29      	ldr	r3, [pc, #164]	; (8007434 <_dtoa_r+0x5a4>)
 800738e:	4421      	add	r1, r4
 8007390:	9112      	str	r1, [sp, #72]	; 0x48
 8007392:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007394:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007398:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800739c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073a0:	2900      	cmp	r1, #0
 80073a2:	d055      	beq.n	8007450 <_dtoa_r+0x5c0>
 80073a4:	2000      	movs	r0, #0
 80073a6:	4929      	ldr	r1, [pc, #164]	; (800744c <_dtoa_r+0x5bc>)
 80073a8:	f7f9 f9c0 	bl	800072c <__aeabi_ddiv>
 80073ac:	463b      	mov	r3, r7
 80073ae:	4632      	mov	r2, r6
 80073b0:	f7f8 feda 	bl	8000168 <__aeabi_dsub>
 80073b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073b8:	9f03      	ldr	r7, [sp, #12]
 80073ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073be:	f7f9 fb3b 	bl	8000a38 <__aeabi_d2iz>
 80073c2:	4604      	mov	r4, r0
 80073c4:	f7f9 f81e 	bl	8000404 <__aeabi_i2d>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d0:	f7f8 feca 	bl	8000168 <__aeabi_dsub>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	3430      	adds	r4, #48	; 0x30
 80073da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073e2:	f807 4b01 	strb.w	r4, [r7], #1
 80073e6:	f7f9 fae9 	bl	80009bc <__aeabi_dcmplt>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d174      	bne.n	80074d8 <_dtoa_r+0x648>
 80073ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f2:	2000      	movs	r0, #0
 80073f4:	4911      	ldr	r1, [pc, #68]	; (800743c <_dtoa_r+0x5ac>)
 80073f6:	f7f8 feb7 	bl	8000168 <__aeabi_dsub>
 80073fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073fe:	f7f9 fadd 	bl	80009bc <__aeabi_dcmplt>
 8007402:	2800      	cmp	r0, #0
 8007404:	f040 80b7 	bne.w	8007576 <_dtoa_r+0x6e6>
 8007408:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800740a:	429f      	cmp	r7, r3
 800740c:	f43f af7a 	beq.w	8007304 <_dtoa_r+0x474>
 8007410:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007414:	2200      	movs	r2, #0
 8007416:	4b0a      	ldr	r3, [pc, #40]	; (8007440 <_dtoa_r+0x5b0>)
 8007418:	f7f9 f85e 	bl	80004d8 <__aeabi_dmul>
 800741c:	2200      	movs	r2, #0
 800741e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007422:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007426:	4b06      	ldr	r3, [pc, #24]	; (8007440 <_dtoa_r+0x5b0>)
 8007428:	f7f9 f856 	bl	80004d8 <__aeabi_dmul>
 800742c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007430:	e7c3      	b.n	80073ba <_dtoa_r+0x52a>
 8007432:	bf00      	nop
 8007434:	08009128 	.word	0x08009128
 8007438:	08009100 	.word	0x08009100
 800743c:	3ff00000 	.word	0x3ff00000
 8007440:	40240000 	.word	0x40240000
 8007444:	401c0000 	.word	0x401c0000
 8007448:	40140000 	.word	0x40140000
 800744c:	3fe00000 	.word	0x3fe00000
 8007450:	4630      	mov	r0, r6
 8007452:	4639      	mov	r1, r7
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800745a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800745e:	9c03      	ldr	r4, [sp, #12]
 8007460:	9314      	str	r3, [sp, #80]	; 0x50
 8007462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007466:	f7f9 fae7 	bl	8000a38 <__aeabi_d2iz>
 800746a:	9015      	str	r0, [sp, #84]	; 0x54
 800746c:	f7f8 ffca 	bl	8000404 <__aeabi_i2d>
 8007470:	4602      	mov	r2, r0
 8007472:	460b      	mov	r3, r1
 8007474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007478:	f7f8 fe76 	bl	8000168 <__aeabi_dsub>
 800747c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800747e:	4606      	mov	r6, r0
 8007480:	3330      	adds	r3, #48	; 0x30
 8007482:	f804 3b01 	strb.w	r3, [r4], #1
 8007486:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007488:	460f      	mov	r7, r1
 800748a:	429c      	cmp	r4, r3
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	d124      	bne.n	80074dc <_dtoa_r+0x64c>
 8007492:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007496:	4bb0      	ldr	r3, [pc, #704]	; (8007758 <_dtoa_r+0x8c8>)
 8007498:	f7f8 fe68 	bl	800016c <__adddf3>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f9 faa8 	bl	80009f8 <__aeabi_dcmpgt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d163      	bne.n	8007574 <_dtoa_r+0x6e4>
 80074ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80074b0:	2000      	movs	r0, #0
 80074b2:	49a9      	ldr	r1, [pc, #676]	; (8007758 <_dtoa_r+0x8c8>)
 80074b4:	f7f8 fe58 	bl	8000168 <__aeabi_dsub>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4630      	mov	r0, r6
 80074be:	4639      	mov	r1, r7
 80074c0:	f7f9 fa7c 	bl	80009bc <__aeabi_dcmplt>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f43f af1d 	beq.w	8007304 <_dtoa_r+0x474>
 80074ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80074cc:	1e7b      	subs	r3, r7, #1
 80074ce:	9314      	str	r3, [sp, #80]	; 0x50
 80074d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d0f8      	beq.n	80074ca <_dtoa_r+0x63a>
 80074d8:	46c2      	mov	sl, r8
 80074da:	e03b      	b.n	8007554 <_dtoa_r+0x6c4>
 80074dc:	4b9f      	ldr	r3, [pc, #636]	; (800775c <_dtoa_r+0x8cc>)
 80074de:	f7f8 fffb 	bl	80004d8 <__aeabi_dmul>
 80074e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e6:	e7bc      	b.n	8007462 <_dtoa_r+0x5d2>
 80074e8:	9f03      	ldr	r7, [sp, #12]
 80074ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f7f9 f919 	bl	800072c <__aeabi_ddiv>
 80074fa:	f7f9 fa9d 	bl	8000a38 <__aeabi_d2iz>
 80074fe:	4604      	mov	r4, r0
 8007500:	f7f8 ff80 	bl	8000404 <__aeabi_i2d>
 8007504:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007508:	f7f8 ffe6 	bl	80004d8 <__aeabi_dmul>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7f8 fe28 	bl	8000168 <__aeabi_dsub>
 8007518:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800751c:	f807 6b01 	strb.w	r6, [r7], #1
 8007520:	9e03      	ldr	r6, [sp, #12]
 8007522:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007526:	1bbe      	subs	r6, r7, r6
 8007528:	45b4      	cmp	ip, r6
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	d136      	bne.n	800759e <_dtoa_r+0x70e>
 8007530:	f7f8 fe1c 	bl	800016c <__adddf3>
 8007534:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	f7f9 fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8007540:	bb58      	cbnz	r0, 800759a <_dtoa_r+0x70a>
 8007542:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f9 fa2d 	bl	80009a8 <__aeabi_dcmpeq>
 800754e:	b108      	cbz	r0, 8007554 <_dtoa_r+0x6c4>
 8007550:	07e1      	lsls	r1, r4, #31
 8007552:	d422      	bmi.n	800759a <_dtoa_r+0x70a>
 8007554:	4628      	mov	r0, r5
 8007556:	4659      	mov	r1, fp
 8007558:	f000 fd0c 	bl	8007f74 <_Bfree>
 800755c:	2300      	movs	r3, #0
 800755e:	703b      	strb	r3, [r7, #0]
 8007560:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007562:	f10a 0001 	add.w	r0, sl, #1
 8007566:	6018      	str	r0, [r3, #0]
 8007568:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800756a:	2b00      	cmp	r3, #0
 800756c:	f43f acde 	beq.w	8006f2c <_dtoa_r+0x9c>
 8007570:	601f      	str	r7, [r3, #0]
 8007572:	e4db      	b.n	8006f2c <_dtoa_r+0x9c>
 8007574:	4627      	mov	r7, r4
 8007576:	463b      	mov	r3, r7
 8007578:	461f      	mov	r7, r3
 800757a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757e:	2a39      	cmp	r2, #57	; 0x39
 8007580:	d107      	bne.n	8007592 <_dtoa_r+0x702>
 8007582:	9a03      	ldr	r2, [sp, #12]
 8007584:	429a      	cmp	r2, r3
 8007586:	d1f7      	bne.n	8007578 <_dtoa_r+0x6e8>
 8007588:	2230      	movs	r2, #48	; 0x30
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	f108 0801 	add.w	r8, r8, #1
 8007590:	700a      	strb	r2, [r1, #0]
 8007592:	781a      	ldrb	r2, [r3, #0]
 8007594:	3201      	adds	r2, #1
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e79e      	b.n	80074d8 <_dtoa_r+0x648>
 800759a:	46d0      	mov	r8, sl
 800759c:	e7eb      	b.n	8007576 <_dtoa_r+0x6e6>
 800759e:	2200      	movs	r2, #0
 80075a0:	4b6e      	ldr	r3, [pc, #440]	; (800775c <_dtoa_r+0x8cc>)
 80075a2:	f7f8 ff99 	bl	80004d8 <__aeabi_dmul>
 80075a6:	2200      	movs	r2, #0
 80075a8:	2300      	movs	r3, #0
 80075aa:	4680      	mov	r8, r0
 80075ac:	4689      	mov	r9, r1
 80075ae:	f7f9 f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	d09b      	beq.n	80074ee <_dtoa_r+0x65e>
 80075b6:	e7cd      	b.n	8007554 <_dtoa_r+0x6c4>
 80075b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80075ba:	2a00      	cmp	r2, #0
 80075bc:	f000 80d0 	beq.w	8007760 <_dtoa_r+0x8d0>
 80075c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80075c2:	2a01      	cmp	r2, #1
 80075c4:	f300 80ae 	bgt.w	8007724 <_dtoa_r+0x894>
 80075c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	f000 80a6 	beq.w	800771c <_dtoa_r+0x88c>
 80075d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075d6:	9f06      	ldr	r7, [sp, #24]
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	2101      	movs	r1, #1
 80075dc:	441a      	add	r2, r3
 80075de:	9206      	str	r2, [sp, #24]
 80075e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075e2:	4628      	mov	r0, r5
 80075e4:	441a      	add	r2, r3
 80075e6:	9209      	str	r2, [sp, #36]	; 0x24
 80075e8:	f000 fd7a 	bl	80080e0 <__i2b>
 80075ec:	4606      	mov	r6, r0
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	dd0c      	ble.n	800760c <_dtoa_r+0x77c>
 80075f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	dd09      	ble.n	800760c <_dtoa_r+0x77c>
 80075f8:	42bb      	cmp	r3, r7
 80075fa:	bfa8      	it	ge
 80075fc:	463b      	movge	r3, r7
 80075fe:	9a06      	ldr	r2, [sp, #24]
 8007600:	1aff      	subs	r7, r7, r3
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	9206      	str	r2, [sp, #24]
 8007606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	9309      	str	r3, [sp, #36]	; 0x24
 800760c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800760e:	b1f3      	cbz	r3, 800764e <_dtoa_r+0x7be>
 8007610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007612:	2b00      	cmp	r3, #0
 8007614:	f000 80a8 	beq.w	8007768 <_dtoa_r+0x8d8>
 8007618:	2c00      	cmp	r4, #0
 800761a:	dd10      	ble.n	800763e <_dtoa_r+0x7ae>
 800761c:	4631      	mov	r1, r6
 800761e:	4622      	mov	r2, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 fe1b 	bl	800825c <__pow5mult>
 8007626:	465a      	mov	r2, fp
 8007628:	4601      	mov	r1, r0
 800762a:	4606      	mov	r6, r0
 800762c:	4628      	mov	r0, r5
 800762e:	f000 fd6d 	bl	800810c <__multiply>
 8007632:	4680      	mov	r8, r0
 8007634:	4659      	mov	r1, fp
 8007636:	4628      	mov	r0, r5
 8007638:	f000 fc9c 	bl	8007f74 <_Bfree>
 800763c:	46c3      	mov	fp, r8
 800763e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007640:	1b1a      	subs	r2, r3, r4
 8007642:	d004      	beq.n	800764e <_dtoa_r+0x7be>
 8007644:	4659      	mov	r1, fp
 8007646:	4628      	mov	r0, r5
 8007648:	f000 fe08 	bl	800825c <__pow5mult>
 800764c:	4683      	mov	fp, r0
 800764e:	2101      	movs	r1, #1
 8007650:	4628      	mov	r0, r5
 8007652:	f000 fd45 	bl	80080e0 <__i2b>
 8007656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007658:	4604      	mov	r4, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	f340 8086 	ble.w	800776c <_dtoa_r+0x8dc>
 8007660:	461a      	mov	r2, r3
 8007662:	4601      	mov	r1, r0
 8007664:	4628      	mov	r0, r5
 8007666:	f000 fdf9 	bl	800825c <__pow5mult>
 800766a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800766c:	4604      	mov	r4, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	dd7f      	ble.n	8007772 <_dtoa_r+0x8e2>
 8007672:	f04f 0800 	mov.w	r8, #0
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800767c:	6918      	ldr	r0, [r3, #16]
 800767e:	f000 fce1 	bl	8008044 <__hi0bits>
 8007682:	f1c0 0020 	rsb	r0, r0, #32
 8007686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007688:	4418      	add	r0, r3
 800768a:	f010 001f 	ands.w	r0, r0, #31
 800768e:	f000 8092 	beq.w	80077b6 <_dtoa_r+0x926>
 8007692:	f1c0 0320 	rsb	r3, r0, #32
 8007696:	2b04      	cmp	r3, #4
 8007698:	f340 808a 	ble.w	80077b0 <_dtoa_r+0x920>
 800769c:	f1c0 001c 	rsb	r0, r0, #28
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	4407      	add	r7, r0
 80076a4:	4403      	add	r3, r0
 80076a6:	9306      	str	r3, [sp, #24]
 80076a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076aa:	4403      	add	r3, r0
 80076ac:	9309      	str	r3, [sp, #36]	; 0x24
 80076ae:	9b06      	ldr	r3, [sp, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dd05      	ble.n	80076c0 <_dtoa_r+0x830>
 80076b4:	4659      	mov	r1, fp
 80076b6:	461a      	mov	r2, r3
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 fe29 	bl	8008310 <__lshift>
 80076be:	4683      	mov	fp, r0
 80076c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dd05      	ble.n	80076d2 <_dtoa_r+0x842>
 80076c6:	4621      	mov	r1, r4
 80076c8:	461a      	mov	r2, r3
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 fe20 	bl	8008310 <__lshift>
 80076d0:	4604      	mov	r4, r0
 80076d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d070      	beq.n	80077ba <_dtoa_r+0x92a>
 80076d8:	4621      	mov	r1, r4
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 fe88 	bl	80083f0 <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	da6a      	bge.n	80077ba <_dtoa_r+0x92a>
 80076e4:	2300      	movs	r3, #0
 80076e6:	4659      	mov	r1, fp
 80076e8:	220a      	movs	r2, #10
 80076ea:	4628      	mov	r0, r5
 80076ec:	f000 fc64 	bl	8007fb8 <__multadd>
 80076f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076f2:	4683      	mov	fp, r0
 80076f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 8194 	beq.w	8007a26 <_dtoa_r+0xb96>
 80076fe:	4631      	mov	r1, r6
 8007700:	2300      	movs	r3, #0
 8007702:	220a      	movs	r2, #10
 8007704:	4628      	mov	r0, r5
 8007706:	f000 fc57 	bl	8007fb8 <__multadd>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	4606      	mov	r6, r0
 8007710:	f300 8093 	bgt.w	800783a <_dtoa_r+0x9aa>
 8007714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007716:	2b02      	cmp	r3, #2
 8007718:	dc57      	bgt.n	80077ca <_dtoa_r+0x93a>
 800771a:	e08e      	b.n	800783a <_dtoa_r+0x9aa>
 800771c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800771e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007722:	e757      	b.n	80075d4 <_dtoa_r+0x744>
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	1e5c      	subs	r4, r3, #1
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	42a3      	cmp	r3, r4
 800772c:	bfb7      	itett	lt
 800772e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007730:	1b1c      	subge	r4, r3, r4
 8007732:	1ae2      	sublt	r2, r4, r3
 8007734:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007736:	bfbe      	ittt	lt
 8007738:	940a      	strlt	r4, [sp, #40]	; 0x28
 800773a:	189b      	addlt	r3, r3, r2
 800773c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	bfb8      	it	lt
 8007742:	2400      	movlt	r4, #0
 8007744:	2b00      	cmp	r3, #0
 8007746:	bfbb      	ittet	lt
 8007748:	9b06      	ldrlt	r3, [sp, #24]
 800774a:	9a08      	ldrlt	r2, [sp, #32]
 800774c:	9f06      	ldrge	r7, [sp, #24]
 800774e:	1a9f      	sublt	r7, r3, r2
 8007750:	bfac      	ite	ge
 8007752:	9b08      	ldrge	r3, [sp, #32]
 8007754:	2300      	movlt	r3, #0
 8007756:	e73f      	b.n	80075d8 <_dtoa_r+0x748>
 8007758:	3fe00000 	.word	0x3fe00000
 800775c:	40240000 	.word	0x40240000
 8007760:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007762:	9f06      	ldr	r7, [sp, #24]
 8007764:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007766:	e742      	b.n	80075ee <_dtoa_r+0x75e>
 8007768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776a:	e76b      	b.n	8007644 <_dtoa_r+0x7b4>
 800776c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800776e:	2b01      	cmp	r3, #1
 8007770:	dc19      	bgt.n	80077a6 <_dtoa_r+0x916>
 8007772:	9b04      	ldr	r3, [sp, #16]
 8007774:	b9bb      	cbnz	r3, 80077a6 <_dtoa_r+0x916>
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800777c:	b99b      	cbnz	r3, 80077a6 <_dtoa_r+0x916>
 800777e:	9b05      	ldr	r3, [sp, #20]
 8007780:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007784:	0d1b      	lsrs	r3, r3, #20
 8007786:	051b      	lsls	r3, r3, #20
 8007788:	b183      	cbz	r3, 80077ac <_dtoa_r+0x91c>
 800778a:	f04f 0801 	mov.w	r8, #1
 800778e:	9b06      	ldr	r3, [sp, #24]
 8007790:	3301      	adds	r3, #1
 8007792:	9306      	str	r3, [sp, #24]
 8007794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007796:	3301      	adds	r3, #1
 8007798:	9309      	str	r3, [sp, #36]	; 0x24
 800779a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800779c:	2b00      	cmp	r3, #0
 800779e:	f47f af6a 	bne.w	8007676 <_dtoa_r+0x7e6>
 80077a2:	2001      	movs	r0, #1
 80077a4:	e76f      	b.n	8007686 <_dtoa_r+0x7f6>
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	e7f6      	b.n	800779a <_dtoa_r+0x90a>
 80077ac:	4698      	mov	r8, r3
 80077ae:	e7f4      	b.n	800779a <_dtoa_r+0x90a>
 80077b0:	f43f af7d 	beq.w	80076ae <_dtoa_r+0x81e>
 80077b4:	4618      	mov	r0, r3
 80077b6:	301c      	adds	r0, #28
 80077b8:	e772      	b.n	80076a0 <_dtoa_r+0x810>
 80077ba:	9b08      	ldr	r3, [sp, #32]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	dc36      	bgt.n	800782e <_dtoa_r+0x99e>
 80077c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	dd33      	ble.n	800782e <_dtoa_r+0x99e>
 80077c6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077ca:	f1b9 0f00 	cmp.w	r9, #0
 80077ce:	d10d      	bne.n	80077ec <_dtoa_r+0x95c>
 80077d0:	4621      	mov	r1, r4
 80077d2:	464b      	mov	r3, r9
 80077d4:	2205      	movs	r2, #5
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fbee 	bl	8007fb8 <__multadd>
 80077dc:	4601      	mov	r1, r0
 80077de:	4604      	mov	r4, r0
 80077e0:	4658      	mov	r0, fp
 80077e2:	f000 fe05 	bl	80083f0 <__mcmp>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f73f adb8 	bgt.w	800735c <_dtoa_r+0x4cc>
 80077ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077ee:	9f03      	ldr	r7, [sp, #12]
 80077f0:	ea6f 0a03 	mvn.w	sl, r3
 80077f4:	f04f 0800 	mov.w	r8, #0
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fbba 	bl	8007f74 <_Bfree>
 8007800:	2e00      	cmp	r6, #0
 8007802:	f43f aea7 	beq.w	8007554 <_dtoa_r+0x6c4>
 8007806:	f1b8 0f00 	cmp.w	r8, #0
 800780a:	d005      	beq.n	8007818 <_dtoa_r+0x988>
 800780c:	45b0      	cmp	r8, r6
 800780e:	d003      	beq.n	8007818 <_dtoa_r+0x988>
 8007810:	4641      	mov	r1, r8
 8007812:	4628      	mov	r0, r5
 8007814:	f000 fbae 	bl	8007f74 <_Bfree>
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	f000 fbaa 	bl	8007f74 <_Bfree>
 8007820:	e698      	b.n	8007554 <_dtoa_r+0x6c4>
 8007822:	2400      	movs	r4, #0
 8007824:	4626      	mov	r6, r4
 8007826:	e7e1      	b.n	80077ec <_dtoa_r+0x95c>
 8007828:	46c2      	mov	sl, r8
 800782a:	4626      	mov	r6, r4
 800782c:	e596      	b.n	800735c <_dtoa_r+0x4cc>
 800782e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007830:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80fd 	beq.w	8007a34 <_dtoa_r+0xba4>
 800783a:	2f00      	cmp	r7, #0
 800783c:	dd05      	ble.n	800784a <_dtoa_r+0x9ba>
 800783e:	4631      	mov	r1, r6
 8007840:	463a      	mov	r2, r7
 8007842:	4628      	mov	r0, r5
 8007844:	f000 fd64 	bl	8008310 <__lshift>
 8007848:	4606      	mov	r6, r0
 800784a:	f1b8 0f00 	cmp.w	r8, #0
 800784e:	d05c      	beq.n	800790a <_dtoa_r+0xa7a>
 8007850:	4628      	mov	r0, r5
 8007852:	6871      	ldr	r1, [r6, #4]
 8007854:	f000 fb4e 	bl	8007ef4 <_Balloc>
 8007858:	4607      	mov	r7, r0
 800785a:	b928      	cbnz	r0, 8007868 <_dtoa_r+0x9d8>
 800785c:	4602      	mov	r2, r0
 800785e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007862:	4b7f      	ldr	r3, [pc, #508]	; (8007a60 <_dtoa_r+0xbd0>)
 8007864:	f7ff bb28 	b.w	8006eb8 <_dtoa_r+0x28>
 8007868:	6932      	ldr	r2, [r6, #16]
 800786a:	f106 010c 	add.w	r1, r6, #12
 800786e:	3202      	adds	r2, #2
 8007870:	0092      	lsls	r2, r2, #2
 8007872:	300c      	adds	r0, #12
 8007874:	f000 fb30 	bl	8007ed8 <memcpy>
 8007878:	2201      	movs	r2, #1
 800787a:	4639      	mov	r1, r7
 800787c:	4628      	mov	r0, r5
 800787e:	f000 fd47 	bl	8008310 <__lshift>
 8007882:	46b0      	mov	r8, r6
 8007884:	4606      	mov	r6, r0
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	3301      	adds	r3, #1
 800788a:	9308      	str	r3, [sp, #32]
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	444b      	add	r3, r9
 8007890:	930a      	str	r3, [sp, #40]	; 0x28
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	9309      	str	r3, [sp, #36]	; 0x24
 800789a:	9b08      	ldr	r3, [sp, #32]
 800789c:	4621      	mov	r1, r4
 800789e:	3b01      	subs	r3, #1
 80078a0:	4658      	mov	r0, fp
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	f7ff fa66 	bl	8006d74 <quorem>
 80078a8:	4603      	mov	r3, r0
 80078aa:	4641      	mov	r1, r8
 80078ac:	3330      	adds	r3, #48	; 0x30
 80078ae:	9006      	str	r0, [sp, #24]
 80078b0:	4658      	mov	r0, fp
 80078b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078b4:	f000 fd9c 	bl	80083f0 <__mcmp>
 80078b8:	4632      	mov	r2, r6
 80078ba:	4681      	mov	r9, r0
 80078bc:	4621      	mov	r1, r4
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fdb2 	bl	8008428 <__mdiff>
 80078c4:	68c2      	ldr	r2, [r0, #12]
 80078c6:	4607      	mov	r7, r0
 80078c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ca:	bb02      	cbnz	r2, 800790e <_dtoa_r+0xa7e>
 80078cc:	4601      	mov	r1, r0
 80078ce:	4658      	mov	r0, fp
 80078d0:	f000 fd8e 	bl	80083f0 <__mcmp>
 80078d4:	4602      	mov	r2, r0
 80078d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078d8:	4639      	mov	r1, r7
 80078da:	4628      	mov	r0, r5
 80078dc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80078e0:	f000 fb48 	bl	8007f74 <_Bfree>
 80078e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078e8:	9f08      	ldr	r7, [sp, #32]
 80078ea:	ea43 0102 	orr.w	r1, r3, r2
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	430b      	orrs	r3, r1
 80078f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078f4:	d10d      	bne.n	8007912 <_dtoa_r+0xa82>
 80078f6:	2b39      	cmp	r3, #57	; 0x39
 80078f8:	d029      	beq.n	800794e <_dtoa_r+0xabe>
 80078fa:	f1b9 0f00 	cmp.w	r9, #0
 80078fe:	dd01      	ble.n	8007904 <_dtoa_r+0xa74>
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	3331      	adds	r3, #49	; 0x31
 8007904:	9a04      	ldr	r2, [sp, #16]
 8007906:	7013      	strb	r3, [r2, #0]
 8007908:	e776      	b.n	80077f8 <_dtoa_r+0x968>
 800790a:	4630      	mov	r0, r6
 800790c:	e7b9      	b.n	8007882 <_dtoa_r+0x9f2>
 800790e:	2201      	movs	r2, #1
 8007910:	e7e2      	b.n	80078d8 <_dtoa_r+0xa48>
 8007912:	f1b9 0f00 	cmp.w	r9, #0
 8007916:	db06      	blt.n	8007926 <_dtoa_r+0xa96>
 8007918:	9922      	ldr	r1, [sp, #136]	; 0x88
 800791a:	ea41 0909 	orr.w	r9, r1, r9
 800791e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007920:	ea59 0101 	orrs.w	r1, r9, r1
 8007924:	d120      	bne.n	8007968 <_dtoa_r+0xad8>
 8007926:	2a00      	cmp	r2, #0
 8007928:	ddec      	ble.n	8007904 <_dtoa_r+0xa74>
 800792a:	4659      	mov	r1, fp
 800792c:	2201      	movs	r2, #1
 800792e:	4628      	mov	r0, r5
 8007930:	9308      	str	r3, [sp, #32]
 8007932:	f000 fced 	bl	8008310 <__lshift>
 8007936:	4621      	mov	r1, r4
 8007938:	4683      	mov	fp, r0
 800793a:	f000 fd59 	bl	80083f0 <__mcmp>
 800793e:	2800      	cmp	r0, #0
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	dc02      	bgt.n	800794a <_dtoa_r+0xaba>
 8007944:	d1de      	bne.n	8007904 <_dtoa_r+0xa74>
 8007946:	07da      	lsls	r2, r3, #31
 8007948:	d5dc      	bpl.n	8007904 <_dtoa_r+0xa74>
 800794a:	2b39      	cmp	r3, #57	; 0x39
 800794c:	d1d8      	bne.n	8007900 <_dtoa_r+0xa70>
 800794e:	2339      	movs	r3, #57	; 0x39
 8007950:	9a04      	ldr	r2, [sp, #16]
 8007952:	7013      	strb	r3, [r2, #0]
 8007954:	463b      	mov	r3, r7
 8007956:	461f      	mov	r7, r3
 8007958:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800795c:	3b01      	subs	r3, #1
 800795e:	2a39      	cmp	r2, #57	; 0x39
 8007960:	d050      	beq.n	8007a04 <_dtoa_r+0xb74>
 8007962:	3201      	adds	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e747      	b.n	80077f8 <_dtoa_r+0x968>
 8007968:	2a00      	cmp	r2, #0
 800796a:	dd03      	ble.n	8007974 <_dtoa_r+0xae4>
 800796c:	2b39      	cmp	r3, #57	; 0x39
 800796e:	d0ee      	beq.n	800794e <_dtoa_r+0xabe>
 8007970:	3301      	adds	r3, #1
 8007972:	e7c7      	b.n	8007904 <_dtoa_r+0xa74>
 8007974:	9a08      	ldr	r2, [sp, #32]
 8007976:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007978:	f802 3c01 	strb.w	r3, [r2, #-1]
 800797c:	428a      	cmp	r2, r1
 800797e:	d02a      	beq.n	80079d6 <_dtoa_r+0xb46>
 8007980:	4659      	mov	r1, fp
 8007982:	2300      	movs	r3, #0
 8007984:	220a      	movs	r2, #10
 8007986:	4628      	mov	r0, r5
 8007988:	f000 fb16 	bl	8007fb8 <__multadd>
 800798c:	45b0      	cmp	r8, r6
 800798e:	4683      	mov	fp, r0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	f04f 020a 	mov.w	r2, #10
 8007998:	4641      	mov	r1, r8
 800799a:	4628      	mov	r0, r5
 800799c:	d107      	bne.n	80079ae <_dtoa_r+0xb1e>
 800799e:	f000 fb0b 	bl	8007fb8 <__multadd>
 80079a2:	4680      	mov	r8, r0
 80079a4:	4606      	mov	r6, r0
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	3301      	adds	r3, #1
 80079aa:	9308      	str	r3, [sp, #32]
 80079ac:	e775      	b.n	800789a <_dtoa_r+0xa0a>
 80079ae:	f000 fb03 	bl	8007fb8 <__multadd>
 80079b2:	4631      	mov	r1, r6
 80079b4:	4680      	mov	r8, r0
 80079b6:	2300      	movs	r3, #0
 80079b8:	220a      	movs	r2, #10
 80079ba:	4628      	mov	r0, r5
 80079bc:	f000 fafc 	bl	8007fb8 <__multadd>
 80079c0:	4606      	mov	r6, r0
 80079c2:	e7f0      	b.n	80079a6 <_dtoa_r+0xb16>
 80079c4:	f1b9 0f00 	cmp.w	r9, #0
 80079c8:	bfcc      	ite	gt
 80079ca:	464f      	movgt	r7, r9
 80079cc:	2701      	movle	r7, #1
 80079ce:	f04f 0800 	mov.w	r8, #0
 80079d2:	9a03      	ldr	r2, [sp, #12]
 80079d4:	4417      	add	r7, r2
 80079d6:	4659      	mov	r1, fp
 80079d8:	2201      	movs	r2, #1
 80079da:	4628      	mov	r0, r5
 80079dc:	9308      	str	r3, [sp, #32]
 80079de:	f000 fc97 	bl	8008310 <__lshift>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4683      	mov	fp, r0
 80079e6:	f000 fd03 	bl	80083f0 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	dcb2      	bgt.n	8007954 <_dtoa_r+0xac4>
 80079ee:	d102      	bne.n	80079f6 <_dtoa_r+0xb66>
 80079f0:	9b08      	ldr	r3, [sp, #32]
 80079f2:	07db      	lsls	r3, r3, #31
 80079f4:	d4ae      	bmi.n	8007954 <_dtoa_r+0xac4>
 80079f6:	463b      	mov	r3, r7
 80079f8:	461f      	mov	r7, r3
 80079fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079fe:	2a30      	cmp	r2, #48	; 0x30
 8007a00:	d0fa      	beq.n	80079f8 <_dtoa_r+0xb68>
 8007a02:	e6f9      	b.n	80077f8 <_dtoa_r+0x968>
 8007a04:	9a03      	ldr	r2, [sp, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d1a5      	bne.n	8007956 <_dtoa_r+0xac6>
 8007a0a:	2331      	movs	r3, #49	; 0x31
 8007a0c:	f10a 0a01 	add.w	sl, sl, #1
 8007a10:	e779      	b.n	8007906 <_dtoa_r+0xa76>
 8007a12:	4b14      	ldr	r3, [pc, #80]	; (8007a64 <_dtoa_r+0xbd4>)
 8007a14:	f7ff baa8 	b.w	8006f68 <_dtoa_r+0xd8>
 8007a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	f47f aa81 	bne.w	8006f22 <_dtoa_r+0x92>
 8007a20:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <_dtoa_r+0xbd8>)
 8007a22:	f7ff baa1 	b.w	8006f68 <_dtoa_r+0xd8>
 8007a26:	f1b9 0f00 	cmp.w	r9, #0
 8007a2a:	dc03      	bgt.n	8007a34 <_dtoa_r+0xba4>
 8007a2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	f73f aecb 	bgt.w	80077ca <_dtoa_r+0x93a>
 8007a34:	9f03      	ldr	r7, [sp, #12]
 8007a36:	4621      	mov	r1, r4
 8007a38:	4658      	mov	r0, fp
 8007a3a:	f7ff f99b 	bl	8006d74 <quorem>
 8007a3e:	9a03      	ldr	r2, [sp, #12]
 8007a40:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007a44:	f807 3b01 	strb.w	r3, [r7], #1
 8007a48:	1aba      	subs	r2, r7, r2
 8007a4a:	4591      	cmp	r9, r2
 8007a4c:	ddba      	ble.n	80079c4 <_dtoa_r+0xb34>
 8007a4e:	4659      	mov	r1, fp
 8007a50:	2300      	movs	r3, #0
 8007a52:	220a      	movs	r2, #10
 8007a54:	4628      	mov	r0, r5
 8007a56:	f000 faaf 	bl	8007fb8 <__multadd>
 8007a5a:	4683      	mov	fp, r0
 8007a5c:	e7eb      	b.n	8007a36 <_dtoa_r+0xba6>
 8007a5e:	bf00      	nop
 8007a60:	0800902f 	.word	0x0800902f
 8007a64:	08008f8c 	.word	0x08008f8c
 8007a68:	08008fb0 	.word	0x08008fb0

08007a6c <__sflush_r>:
 8007a6c:	898a      	ldrh	r2, [r1, #12]
 8007a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a70:	4605      	mov	r5, r0
 8007a72:	0710      	lsls	r0, r2, #28
 8007a74:	460c      	mov	r4, r1
 8007a76:	d457      	bmi.n	8007b28 <__sflush_r+0xbc>
 8007a78:	684b      	ldr	r3, [r1, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	dc04      	bgt.n	8007a88 <__sflush_r+0x1c>
 8007a7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dc01      	bgt.n	8007a88 <__sflush_r+0x1c>
 8007a84:	2000      	movs	r0, #0
 8007a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a8a:	2e00      	cmp	r6, #0
 8007a8c:	d0fa      	beq.n	8007a84 <__sflush_r+0x18>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a94:	682f      	ldr	r7, [r5, #0]
 8007a96:	602b      	str	r3, [r5, #0]
 8007a98:	d032      	beq.n	8007b00 <__sflush_r+0x94>
 8007a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	075a      	lsls	r2, r3, #29
 8007aa0:	d505      	bpl.n	8007aae <__sflush_r+0x42>
 8007aa2:	6863      	ldr	r3, [r4, #4]
 8007aa4:	1ac0      	subs	r0, r0, r3
 8007aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aa8:	b10b      	cbz	r3, 8007aae <__sflush_r+0x42>
 8007aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007aac:	1ac0      	subs	r0, r0, r3
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	6a21      	ldr	r1, [r4, #32]
 8007ab8:	47b0      	blx	r6
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	d106      	bne.n	8007ace <__sflush_r+0x62>
 8007ac0:	6829      	ldr	r1, [r5, #0]
 8007ac2:	291d      	cmp	r1, #29
 8007ac4:	d82c      	bhi.n	8007b20 <__sflush_r+0xb4>
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <__sflush_r+0x100>)
 8007ac8:	40ca      	lsrs	r2, r1
 8007aca:	07d6      	lsls	r6, r2, #31
 8007acc:	d528      	bpl.n	8007b20 <__sflush_r+0xb4>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	6062      	str	r2, [r4, #4]
 8007ad2:	6922      	ldr	r2, [r4, #16]
 8007ad4:	04d9      	lsls	r1, r3, #19
 8007ad6:	6022      	str	r2, [r4, #0]
 8007ad8:	d504      	bpl.n	8007ae4 <__sflush_r+0x78>
 8007ada:	1c42      	adds	r2, r0, #1
 8007adc:	d101      	bne.n	8007ae2 <__sflush_r+0x76>
 8007ade:	682b      	ldr	r3, [r5, #0]
 8007ae0:	b903      	cbnz	r3, 8007ae4 <__sflush_r+0x78>
 8007ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8007ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ae6:	602f      	str	r7, [r5, #0]
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	d0cb      	beq.n	8007a84 <__sflush_r+0x18>
 8007aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af0:	4299      	cmp	r1, r3
 8007af2:	d002      	beq.n	8007afa <__sflush_r+0x8e>
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 fd93 	bl	8008620 <_free_r>
 8007afa:	2000      	movs	r0, #0
 8007afc:	6360      	str	r0, [r4, #52]	; 0x34
 8007afe:	e7c2      	b.n	8007a86 <__sflush_r+0x1a>
 8007b00:	6a21      	ldr	r1, [r4, #32]
 8007b02:	2301      	movs	r3, #1
 8007b04:	4628      	mov	r0, r5
 8007b06:	47b0      	blx	r6
 8007b08:	1c41      	adds	r1, r0, #1
 8007b0a:	d1c7      	bne.n	8007a9c <__sflush_r+0x30>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0c4      	beq.n	8007a9c <__sflush_r+0x30>
 8007b12:	2b1d      	cmp	r3, #29
 8007b14:	d001      	beq.n	8007b1a <__sflush_r+0xae>
 8007b16:	2b16      	cmp	r3, #22
 8007b18:	d101      	bne.n	8007b1e <__sflush_r+0xb2>
 8007b1a:	602f      	str	r7, [r5, #0]
 8007b1c:	e7b2      	b.n	8007a84 <__sflush_r+0x18>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	e7ae      	b.n	8007a86 <__sflush_r+0x1a>
 8007b28:	690f      	ldr	r7, [r1, #16]
 8007b2a:	2f00      	cmp	r7, #0
 8007b2c:	d0aa      	beq.n	8007a84 <__sflush_r+0x18>
 8007b2e:	0793      	lsls	r3, r2, #30
 8007b30:	bf18      	it	ne
 8007b32:	2300      	movne	r3, #0
 8007b34:	680e      	ldr	r6, [r1, #0]
 8007b36:	bf08      	it	eq
 8007b38:	694b      	ldreq	r3, [r1, #20]
 8007b3a:	1bf6      	subs	r6, r6, r7
 8007b3c:	600f      	str	r7, [r1, #0]
 8007b3e:	608b      	str	r3, [r1, #8]
 8007b40:	2e00      	cmp	r6, #0
 8007b42:	dd9f      	ble.n	8007a84 <__sflush_r+0x18>
 8007b44:	4633      	mov	r3, r6
 8007b46:	463a      	mov	r2, r7
 8007b48:	4628      	mov	r0, r5
 8007b4a:	6a21      	ldr	r1, [r4, #32]
 8007b4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b50:	47e0      	blx	ip
 8007b52:	2800      	cmp	r0, #0
 8007b54:	dc06      	bgt.n	8007b64 <__sflush_r+0xf8>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b60:	81a3      	strh	r3, [r4, #12]
 8007b62:	e790      	b.n	8007a86 <__sflush_r+0x1a>
 8007b64:	4407      	add	r7, r0
 8007b66:	1a36      	subs	r6, r6, r0
 8007b68:	e7ea      	b.n	8007b40 <__sflush_r+0xd4>
 8007b6a:	bf00      	nop
 8007b6c:	20400001 	.word	0x20400001

08007b70 <_fflush_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	690b      	ldr	r3, [r1, #16]
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	b913      	cbnz	r3, 8007b80 <_fflush_r+0x10>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	b118      	cbz	r0, 8007b8a <_fflush_r+0x1a>
 8007b82:	6983      	ldr	r3, [r0, #24]
 8007b84:	b90b      	cbnz	r3, 8007b8a <_fflush_r+0x1a>
 8007b86:	f000 f887 	bl	8007c98 <__sinit>
 8007b8a:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <_fflush_r+0x6c>)
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	d11b      	bne.n	8007bc8 <_fflush_r+0x58>
 8007b90:	686c      	ldr	r4, [r5, #4]
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0ef      	beq.n	8007b7a <_fflush_r+0xa>
 8007b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b9c:	07d0      	lsls	r0, r2, #31
 8007b9e:	d404      	bmi.n	8007baa <_fflush_r+0x3a>
 8007ba0:	0599      	lsls	r1, r3, #22
 8007ba2:	d402      	bmi.n	8007baa <_fflush_r+0x3a>
 8007ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ba6:	f000 f91a 	bl	8007dde <__retarget_lock_acquire_recursive>
 8007baa:	4628      	mov	r0, r5
 8007bac:	4621      	mov	r1, r4
 8007bae:	f7ff ff5d 	bl	8007a6c <__sflush_r>
 8007bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	07da      	lsls	r2, r3, #31
 8007bb8:	d4e0      	bmi.n	8007b7c <_fflush_r+0xc>
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	059b      	lsls	r3, r3, #22
 8007bbe:	d4dd      	bmi.n	8007b7c <_fflush_r+0xc>
 8007bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bc2:	f000 f90d 	bl	8007de0 <__retarget_lock_release_recursive>
 8007bc6:	e7d9      	b.n	8007b7c <_fflush_r+0xc>
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <_fflush_r+0x70>)
 8007bca:	429c      	cmp	r4, r3
 8007bcc:	d101      	bne.n	8007bd2 <_fflush_r+0x62>
 8007bce:	68ac      	ldr	r4, [r5, #8]
 8007bd0:	e7df      	b.n	8007b92 <_fflush_r+0x22>
 8007bd2:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <_fflush_r+0x74>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	bf08      	it	eq
 8007bd8:	68ec      	ldreq	r4, [r5, #12]
 8007bda:	e7da      	b.n	8007b92 <_fflush_r+0x22>
 8007bdc:	08009060 	.word	0x08009060
 8007be0:	08009080 	.word	0x08009080
 8007be4:	08009040 	.word	0x08009040

08007be8 <std>:
 8007be8:	2300      	movs	r3, #0
 8007bea:	b510      	push	{r4, lr}
 8007bec:	4604      	mov	r4, r0
 8007bee:	e9c0 3300 	strd	r3, r3, [r0]
 8007bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bf6:	6083      	str	r3, [r0, #8]
 8007bf8:	8181      	strh	r1, [r0, #12]
 8007bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8007bfc:	81c2      	strh	r2, [r0, #14]
 8007bfe:	6183      	str	r3, [r0, #24]
 8007c00:	4619      	mov	r1, r3
 8007c02:	2208      	movs	r2, #8
 8007c04:	305c      	adds	r0, #92	; 0x5c
 8007c06:	f7fe fb17 	bl	8006238 <memset>
 8007c0a:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <std+0x38>)
 8007c0c:	6224      	str	r4, [r4, #32]
 8007c0e:	6263      	str	r3, [r4, #36]	; 0x24
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <std+0x3c>)
 8007c12:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c14:	4b04      	ldr	r3, [pc, #16]	; (8007c28 <std+0x40>)
 8007c16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c18:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <std+0x44>)
 8007c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c1c:	bd10      	pop	{r4, pc}
 8007c1e:	bf00      	nop
 8007c20:	080087f9 	.word	0x080087f9
 8007c24:	0800881b 	.word	0x0800881b
 8007c28:	08008853 	.word	0x08008853
 8007c2c:	08008877 	.word	0x08008877

08007c30 <_cleanup_r>:
 8007c30:	4901      	ldr	r1, [pc, #4]	; (8007c38 <_cleanup_r+0x8>)
 8007c32:	f000 b8af 	b.w	8007d94 <_fwalk_reent>
 8007c36:	bf00      	nop
 8007c38:	08007b71 	.word	0x08007b71

08007c3c <__sfmoreglue>:
 8007c3c:	2268      	movs	r2, #104	; 0x68
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	1e4d      	subs	r5, r1, #1
 8007c42:	4355      	muls	r5, r2
 8007c44:	460e      	mov	r6, r1
 8007c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c4a:	f000 fd51 	bl	80086f0 <_malloc_r>
 8007c4e:	4604      	mov	r4, r0
 8007c50:	b140      	cbz	r0, 8007c64 <__sfmoreglue+0x28>
 8007c52:	2100      	movs	r1, #0
 8007c54:	e9c0 1600 	strd	r1, r6, [r0]
 8007c58:	300c      	adds	r0, #12
 8007c5a:	60a0      	str	r0, [r4, #8]
 8007c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c60:	f7fe faea 	bl	8006238 <memset>
 8007c64:	4620      	mov	r0, r4
 8007c66:	bd70      	pop	{r4, r5, r6, pc}

08007c68 <__sfp_lock_acquire>:
 8007c68:	4801      	ldr	r0, [pc, #4]	; (8007c70 <__sfp_lock_acquire+0x8>)
 8007c6a:	f000 b8b8 	b.w	8007dde <__retarget_lock_acquire_recursive>
 8007c6e:	bf00      	nop
 8007c70:	2000040d 	.word	0x2000040d

08007c74 <__sfp_lock_release>:
 8007c74:	4801      	ldr	r0, [pc, #4]	; (8007c7c <__sfp_lock_release+0x8>)
 8007c76:	f000 b8b3 	b.w	8007de0 <__retarget_lock_release_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	2000040d 	.word	0x2000040d

08007c80 <__sinit_lock_acquire>:
 8007c80:	4801      	ldr	r0, [pc, #4]	; (8007c88 <__sinit_lock_acquire+0x8>)
 8007c82:	f000 b8ac 	b.w	8007dde <__retarget_lock_acquire_recursive>
 8007c86:	bf00      	nop
 8007c88:	2000040e 	.word	0x2000040e

08007c8c <__sinit_lock_release>:
 8007c8c:	4801      	ldr	r0, [pc, #4]	; (8007c94 <__sinit_lock_release+0x8>)
 8007c8e:	f000 b8a7 	b.w	8007de0 <__retarget_lock_release_recursive>
 8007c92:	bf00      	nop
 8007c94:	2000040e 	.word	0x2000040e

08007c98 <__sinit>:
 8007c98:	b510      	push	{r4, lr}
 8007c9a:	4604      	mov	r4, r0
 8007c9c:	f7ff fff0 	bl	8007c80 <__sinit_lock_acquire>
 8007ca0:	69a3      	ldr	r3, [r4, #24]
 8007ca2:	b11b      	cbz	r3, 8007cac <__sinit+0x14>
 8007ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ca8:	f7ff bff0 	b.w	8007c8c <__sinit_lock_release>
 8007cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8007cb2:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <__sinit+0x68>)
 8007cb4:	4a13      	ldr	r2, [pc, #76]	; (8007d04 <__sinit+0x6c>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cba:	42a3      	cmp	r3, r4
 8007cbc:	bf08      	it	eq
 8007cbe:	2301      	moveq	r3, #1
 8007cc0:	4620      	mov	r0, r4
 8007cc2:	bf08      	it	eq
 8007cc4:	61a3      	streq	r3, [r4, #24]
 8007cc6:	f000 f81f 	bl	8007d08 <__sfp>
 8007cca:	6060      	str	r0, [r4, #4]
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 f81b 	bl	8007d08 <__sfp>
 8007cd2:	60a0      	str	r0, [r4, #8]
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 f817 	bl	8007d08 <__sfp>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2104      	movs	r1, #4
 8007cde:	60e0      	str	r0, [r4, #12]
 8007ce0:	6860      	ldr	r0, [r4, #4]
 8007ce2:	f7ff ff81 	bl	8007be8 <std>
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	2109      	movs	r1, #9
 8007cea:	68a0      	ldr	r0, [r4, #8]
 8007cec:	f7ff ff7c 	bl	8007be8 <std>
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	2112      	movs	r1, #18
 8007cf4:	68e0      	ldr	r0, [r4, #12]
 8007cf6:	f7ff ff77 	bl	8007be8 <std>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	61a3      	str	r3, [r4, #24]
 8007cfe:	e7d1      	b.n	8007ca4 <__sinit+0xc>
 8007d00:	08008f78 	.word	0x08008f78
 8007d04:	08007c31 	.word	0x08007c31

08007d08 <__sfp>:
 8007d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0a:	4607      	mov	r7, r0
 8007d0c:	f7ff ffac 	bl	8007c68 <__sfp_lock_acquire>
 8007d10:	4b1e      	ldr	r3, [pc, #120]	; (8007d8c <__sfp+0x84>)
 8007d12:	681e      	ldr	r6, [r3, #0]
 8007d14:	69b3      	ldr	r3, [r6, #24]
 8007d16:	b913      	cbnz	r3, 8007d1e <__sfp+0x16>
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff ffbd 	bl	8007c98 <__sinit>
 8007d1e:	3648      	adds	r6, #72	; 0x48
 8007d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	d503      	bpl.n	8007d30 <__sfp+0x28>
 8007d28:	6833      	ldr	r3, [r6, #0]
 8007d2a:	b30b      	cbz	r3, 8007d70 <__sfp+0x68>
 8007d2c:	6836      	ldr	r6, [r6, #0]
 8007d2e:	e7f7      	b.n	8007d20 <__sfp+0x18>
 8007d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d34:	b9d5      	cbnz	r5, 8007d6c <__sfp+0x64>
 8007d36:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <__sfp+0x88>)
 8007d38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d3c:	60e3      	str	r3, [r4, #12]
 8007d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d40:	f000 f84c 	bl	8007ddc <__retarget_lock_init_recursive>
 8007d44:	f7ff ff96 	bl	8007c74 <__sfp_lock_release>
 8007d48:	2208      	movs	r2, #8
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d54:	6025      	str	r5, [r4, #0]
 8007d56:	61a5      	str	r5, [r4, #24]
 8007d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d5c:	f7fe fa6c 	bl	8006238 <memset>
 8007d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d68:	4620      	mov	r0, r4
 8007d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d6c:	3468      	adds	r4, #104	; 0x68
 8007d6e:	e7d9      	b.n	8007d24 <__sfp+0x1c>
 8007d70:	2104      	movs	r1, #4
 8007d72:	4638      	mov	r0, r7
 8007d74:	f7ff ff62 	bl	8007c3c <__sfmoreglue>
 8007d78:	4604      	mov	r4, r0
 8007d7a:	6030      	str	r0, [r6, #0]
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	d1d5      	bne.n	8007d2c <__sfp+0x24>
 8007d80:	f7ff ff78 	bl	8007c74 <__sfp_lock_release>
 8007d84:	230c      	movs	r3, #12
 8007d86:	603b      	str	r3, [r7, #0]
 8007d88:	e7ee      	b.n	8007d68 <__sfp+0x60>
 8007d8a:	bf00      	nop
 8007d8c:	08008f78 	.word	0x08008f78
 8007d90:	ffff0001 	.word	0xffff0001

08007d94 <_fwalk_reent>:
 8007d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4606      	mov	r6, r0
 8007d9a:	4688      	mov	r8, r1
 8007d9c:	2700      	movs	r7, #0
 8007d9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007da6:	f1b9 0901 	subs.w	r9, r9, #1
 8007daa:	d505      	bpl.n	8007db8 <_fwalk_reent+0x24>
 8007dac:	6824      	ldr	r4, [r4, #0]
 8007dae:	2c00      	cmp	r4, #0
 8007db0:	d1f7      	bne.n	8007da2 <_fwalk_reent+0xe>
 8007db2:	4638      	mov	r0, r7
 8007db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007db8:	89ab      	ldrh	r3, [r5, #12]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d907      	bls.n	8007dce <_fwalk_reent+0x3a>
 8007dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	d003      	beq.n	8007dce <_fwalk_reent+0x3a>
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	4630      	mov	r0, r6
 8007dca:	47c0      	blx	r8
 8007dcc:	4307      	orrs	r7, r0
 8007dce:	3568      	adds	r5, #104	; 0x68
 8007dd0:	e7e9      	b.n	8007da6 <_fwalk_reent+0x12>
	...

08007dd4 <_localeconv_r>:
 8007dd4:	4800      	ldr	r0, [pc, #0]	; (8007dd8 <_localeconv_r+0x4>)
 8007dd6:	4770      	bx	lr
 8007dd8:	20000190 	.word	0x20000190

08007ddc <__retarget_lock_init_recursive>:
 8007ddc:	4770      	bx	lr

08007dde <__retarget_lock_acquire_recursive>:
 8007dde:	4770      	bx	lr

08007de0 <__retarget_lock_release_recursive>:
 8007de0:	4770      	bx	lr

08007de2 <__swhatbuf_r>:
 8007de2:	b570      	push	{r4, r5, r6, lr}
 8007de4:	460e      	mov	r6, r1
 8007de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dea:	4614      	mov	r4, r2
 8007dec:	2900      	cmp	r1, #0
 8007dee:	461d      	mov	r5, r3
 8007df0:	b096      	sub	sp, #88	; 0x58
 8007df2:	da08      	bge.n	8007e06 <__swhatbuf_r+0x24>
 8007df4:	2200      	movs	r2, #0
 8007df6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007dfa:	602a      	str	r2, [r5, #0]
 8007dfc:	061a      	lsls	r2, r3, #24
 8007dfe:	d410      	bmi.n	8007e22 <__swhatbuf_r+0x40>
 8007e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e04:	e00e      	b.n	8007e24 <__swhatbuf_r+0x42>
 8007e06:	466a      	mov	r2, sp
 8007e08:	f000 fd8c 	bl	8008924 <_fstat_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	dbf1      	blt.n	8007df4 <__swhatbuf_r+0x12>
 8007e10:	9a01      	ldr	r2, [sp, #4]
 8007e12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e1a:	425a      	negs	r2, r3
 8007e1c:	415a      	adcs	r2, r3
 8007e1e:	602a      	str	r2, [r5, #0]
 8007e20:	e7ee      	b.n	8007e00 <__swhatbuf_r+0x1e>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	2000      	movs	r0, #0
 8007e26:	6023      	str	r3, [r4, #0]
 8007e28:	b016      	add	sp, #88	; 0x58
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}

08007e2c <__smakebuf_r>:
 8007e2c:	898b      	ldrh	r3, [r1, #12]
 8007e2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e30:	079d      	lsls	r5, r3, #30
 8007e32:	4606      	mov	r6, r0
 8007e34:	460c      	mov	r4, r1
 8007e36:	d507      	bpl.n	8007e48 <__smakebuf_r+0x1c>
 8007e38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	2301      	movs	r3, #1
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	b002      	add	sp, #8
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	466a      	mov	r2, sp
 8007e4a:	ab01      	add	r3, sp, #4
 8007e4c:	f7ff ffc9 	bl	8007de2 <__swhatbuf_r>
 8007e50:	9900      	ldr	r1, [sp, #0]
 8007e52:	4605      	mov	r5, r0
 8007e54:	4630      	mov	r0, r6
 8007e56:	f000 fc4b 	bl	80086f0 <_malloc_r>
 8007e5a:	b948      	cbnz	r0, 8007e70 <__smakebuf_r+0x44>
 8007e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e60:	059a      	lsls	r2, r3, #22
 8007e62:	d4ef      	bmi.n	8007e44 <__smakebuf_r+0x18>
 8007e64:	f023 0303 	bic.w	r3, r3, #3
 8007e68:	f043 0302 	orr.w	r3, r3, #2
 8007e6c:	81a3      	strh	r3, [r4, #12]
 8007e6e:	e7e3      	b.n	8007e38 <__smakebuf_r+0xc>
 8007e70:	4b0d      	ldr	r3, [pc, #52]	; (8007ea8 <__smakebuf_r+0x7c>)
 8007e72:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	6020      	str	r0, [r4, #0]
 8007e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	9b00      	ldr	r3, [sp, #0]
 8007e80:	6120      	str	r0, [r4, #16]
 8007e82:	6163      	str	r3, [r4, #20]
 8007e84:	9b01      	ldr	r3, [sp, #4]
 8007e86:	b15b      	cbz	r3, 8007ea0 <__smakebuf_r+0x74>
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e8e:	f000 fd5b 	bl	8008948 <_isatty_r>
 8007e92:	b128      	cbz	r0, 8007ea0 <__smakebuf_r+0x74>
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f023 0303 	bic.w	r3, r3, #3
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	81a3      	strh	r3, [r4, #12]
 8007ea0:	89a0      	ldrh	r0, [r4, #12]
 8007ea2:	4305      	orrs	r5, r0
 8007ea4:	81a5      	strh	r5, [r4, #12]
 8007ea6:	e7cd      	b.n	8007e44 <__smakebuf_r+0x18>
 8007ea8:	08007c31 	.word	0x08007c31

08007eac <malloc>:
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <malloc+0xc>)
 8007eae:	4601      	mov	r1, r0
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f000 bc1d 	b.w	80086f0 <_malloc_r>
 8007eb6:	bf00      	nop
 8007eb8:	2000003c 	.word	0x2000003c

08007ebc <memchr>:
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	b2c9      	uxtb	r1, r1
 8007ec2:	4402      	add	r2, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	d101      	bne.n	8007ece <memchr+0x12>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e003      	b.n	8007ed6 <memchr+0x1a>
 8007ece:	7804      	ldrb	r4, [r0, #0]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	428c      	cmp	r4, r1
 8007ed4:	d1f6      	bne.n	8007ec4 <memchr+0x8>
 8007ed6:	bd10      	pop	{r4, pc}

08007ed8 <memcpy>:
 8007ed8:	440a      	add	r2, r1
 8007eda:	4291      	cmp	r1, r2
 8007edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee0:	d100      	bne.n	8007ee4 <memcpy+0xc>
 8007ee2:	4770      	bx	lr
 8007ee4:	b510      	push	{r4, lr}
 8007ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eea:	4291      	cmp	r1, r2
 8007eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef0:	d1f9      	bne.n	8007ee6 <memcpy+0xe>
 8007ef2:	bd10      	pop	{r4, pc}

08007ef4 <_Balloc>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ef8:	4604      	mov	r4, r0
 8007efa:	460d      	mov	r5, r1
 8007efc:	b976      	cbnz	r6, 8007f1c <_Balloc+0x28>
 8007efe:	2010      	movs	r0, #16
 8007f00:	f7ff ffd4 	bl	8007eac <malloc>
 8007f04:	4602      	mov	r2, r0
 8007f06:	6260      	str	r0, [r4, #36]	; 0x24
 8007f08:	b920      	cbnz	r0, 8007f14 <_Balloc+0x20>
 8007f0a:	2166      	movs	r1, #102	; 0x66
 8007f0c:	4b17      	ldr	r3, [pc, #92]	; (8007f6c <_Balloc+0x78>)
 8007f0e:	4818      	ldr	r0, [pc, #96]	; (8007f70 <_Balloc+0x7c>)
 8007f10:	f000 fcc8 	bl	80088a4 <__assert_func>
 8007f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f18:	6006      	str	r6, [r0, #0]
 8007f1a:	60c6      	str	r6, [r0, #12]
 8007f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f1e:	68f3      	ldr	r3, [r6, #12]
 8007f20:	b183      	cbz	r3, 8007f44 <_Balloc+0x50>
 8007f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f2a:	b9b8      	cbnz	r0, 8007f5c <_Balloc+0x68>
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8007f32:	1d72      	adds	r2, r6, #5
 8007f34:	4620      	mov	r0, r4
 8007f36:	0092      	lsls	r2, r2, #2
 8007f38:	f000 fb5e 	bl	80085f8 <_calloc_r>
 8007f3c:	b160      	cbz	r0, 8007f58 <_Balloc+0x64>
 8007f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f42:	e00e      	b.n	8007f62 <_Balloc+0x6e>
 8007f44:	2221      	movs	r2, #33	; 0x21
 8007f46:	2104      	movs	r1, #4
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 fb55 	bl	80085f8 <_calloc_r>
 8007f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f50:	60f0      	str	r0, [r6, #12]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1e4      	bne.n	8007f22 <_Balloc+0x2e>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	bd70      	pop	{r4, r5, r6, pc}
 8007f5c:	6802      	ldr	r2, [r0, #0]
 8007f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f62:	2300      	movs	r3, #0
 8007f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f68:	e7f7      	b.n	8007f5a <_Balloc+0x66>
 8007f6a:	bf00      	nop
 8007f6c:	08008fbd 	.word	0x08008fbd
 8007f70:	080090a0 	.word	0x080090a0

08007f74 <_Bfree>:
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f78:	4605      	mov	r5, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b976      	cbnz	r6, 8007f9c <_Bfree+0x28>
 8007f7e:	2010      	movs	r0, #16
 8007f80:	f7ff ff94 	bl	8007eac <malloc>
 8007f84:	4602      	mov	r2, r0
 8007f86:	6268      	str	r0, [r5, #36]	; 0x24
 8007f88:	b920      	cbnz	r0, 8007f94 <_Bfree+0x20>
 8007f8a:	218a      	movs	r1, #138	; 0x8a
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <_Bfree+0x3c>)
 8007f8e:	4809      	ldr	r0, [pc, #36]	; (8007fb4 <_Bfree+0x40>)
 8007f90:	f000 fc88 	bl	80088a4 <__assert_func>
 8007f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f98:	6006      	str	r6, [r0, #0]
 8007f9a:	60c6      	str	r6, [r0, #12]
 8007f9c:	b13c      	cbz	r4, 8007fae <_Bfree+0x3a>
 8007f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fa0:	6862      	ldr	r2, [r4, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fa8:	6021      	str	r1, [r4, #0]
 8007faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fae:	bd70      	pop	{r4, r5, r6, pc}
 8007fb0:	08008fbd 	.word	0x08008fbd
 8007fb4:	080090a0 	.word	0x080090a0

08007fb8 <__multadd>:
 8007fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	461e      	mov	r6, r3
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	690d      	ldr	r5, [r1, #16]
 8007fc6:	f101 0c14 	add.w	ip, r1, #20
 8007fca:	f8dc 3000 	ldr.w	r3, [ip]
 8007fce:	3001      	adds	r0, #1
 8007fd0:	b299      	uxth	r1, r3
 8007fd2:	fb02 6101 	mla	r1, r2, r1, r6
 8007fd6:	0c1e      	lsrs	r6, r3, #16
 8007fd8:	0c0b      	lsrs	r3, r1, #16
 8007fda:	fb02 3306 	mla	r3, r2, r6, r3
 8007fde:	b289      	uxth	r1, r1
 8007fe0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007fe4:	4285      	cmp	r5, r0
 8007fe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007fea:	f84c 1b04 	str.w	r1, [ip], #4
 8007fee:	dcec      	bgt.n	8007fca <__multadd+0x12>
 8007ff0:	b30e      	cbz	r6, 8008036 <__multadd+0x7e>
 8007ff2:	68a3      	ldr	r3, [r4, #8]
 8007ff4:	42ab      	cmp	r3, r5
 8007ff6:	dc19      	bgt.n	800802c <__multadd+0x74>
 8007ff8:	6861      	ldr	r1, [r4, #4]
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	3101      	adds	r1, #1
 8007ffe:	f7ff ff79 	bl	8007ef4 <_Balloc>
 8008002:	4680      	mov	r8, r0
 8008004:	b928      	cbnz	r0, 8008012 <__multadd+0x5a>
 8008006:	4602      	mov	r2, r0
 8008008:	21b5      	movs	r1, #181	; 0xb5
 800800a:	4b0c      	ldr	r3, [pc, #48]	; (800803c <__multadd+0x84>)
 800800c:	480c      	ldr	r0, [pc, #48]	; (8008040 <__multadd+0x88>)
 800800e:	f000 fc49 	bl	80088a4 <__assert_func>
 8008012:	6922      	ldr	r2, [r4, #16]
 8008014:	f104 010c 	add.w	r1, r4, #12
 8008018:	3202      	adds	r2, #2
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	300c      	adds	r0, #12
 800801e:	f7ff ff5b 	bl	8007ed8 <memcpy>
 8008022:	4621      	mov	r1, r4
 8008024:	4638      	mov	r0, r7
 8008026:	f7ff ffa5 	bl	8007f74 <_Bfree>
 800802a:	4644      	mov	r4, r8
 800802c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008030:	3501      	adds	r5, #1
 8008032:	615e      	str	r6, [r3, #20]
 8008034:	6125      	str	r5, [r4, #16]
 8008036:	4620      	mov	r0, r4
 8008038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800803c:	0800902f 	.word	0x0800902f
 8008040:	080090a0 	.word	0x080090a0

08008044 <__hi0bits>:
 8008044:	0c02      	lsrs	r2, r0, #16
 8008046:	0412      	lsls	r2, r2, #16
 8008048:	4603      	mov	r3, r0
 800804a:	b9ca      	cbnz	r2, 8008080 <__hi0bits+0x3c>
 800804c:	0403      	lsls	r3, r0, #16
 800804e:	2010      	movs	r0, #16
 8008050:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008054:	bf04      	itt	eq
 8008056:	021b      	lsleq	r3, r3, #8
 8008058:	3008      	addeq	r0, #8
 800805a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800805e:	bf04      	itt	eq
 8008060:	011b      	lsleq	r3, r3, #4
 8008062:	3004      	addeq	r0, #4
 8008064:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008068:	bf04      	itt	eq
 800806a:	009b      	lsleq	r3, r3, #2
 800806c:	3002      	addeq	r0, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	db05      	blt.n	800807e <__hi0bits+0x3a>
 8008072:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008076:	f100 0001 	add.w	r0, r0, #1
 800807a:	bf08      	it	eq
 800807c:	2020      	moveq	r0, #32
 800807e:	4770      	bx	lr
 8008080:	2000      	movs	r0, #0
 8008082:	e7e5      	b.n	8008050 <__hi0bits+0xc>

08008084 <__lo0bits>:
 8008084:	6803      	ldr	r3, [r0, #0]
 8008086:	4602      	mov	r2, r0
 8008088:	f013 0007 	ands.w	r0, r3, #7
 800808c:	d00b      	beq.n	80080a6 <__lo0bits+0x22>
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d421      	bmi.n	80080d6 <__lo0bits+0x52>
 8008092:	0798      	lsls	r0, r3, #30
 8008094:	bf49      	itett	mi
 8008096:	085b      	lsrmi	r3, r3, #1
 8008098:	089b      	lsrpl	r3, r3, #2
 800809a:	2001      	movmi	r0, #1
 800809c:	6013      	strmi	r3, [r2, #0]
 800809e:	bf5c      	itt	pl
 80080a0:	2002      	movpl	r0, #2
 80080a2:	6013      	strpl	r3, [r2, #0]
 80080a4:	4770      	bx	lr
 80080a6:	b299      	uxth	r1, r3
 80080a8:	b909      	cbnz	r1, 80080ae <__lo0bits+0x2a>
 80080aa:	2010      	movs	r0, #16
 80080ac:	0c1b      	lsrs	r3, r3, #16
 80080ae:	b2d9      	uxtb	r1, r3
 80080b0:	b909      	cbnz	r1, 80080b6 <__lo0bits+0x32>
 80080b2:	3008      	adds	r0, #8
 80080b4:	0a1b      	lsrs	r3, r3, #8
 80080b6:	0719      	lsls	r1, r3, #28
 80080b8:	bf04      	itt	eq
 80080ba:	091b      	lsreq	r3, r3, #4
 80080bc:	3004      	addeq	r0, #4
 80080be:	0799      	lsls	r1, r3, #30
 80080c0:	bf04      	itt	eq
 80080c2:	089b      	lsreq	r3, r3, #2
 80080c4:	3002      	addeq	r0, #2
 80080c6:	07d9      	lsls	r1, r3, #31
 80080c8:	d403      	bmi.n	80080d2 <__lo0bits+0x4e>
 80080ca:	085b      	lsrs	r3, r3, #1
 80080cc:	f100 0001 	add.w	r0, r0, #1
 80080d0:	d003      	beq.n	80080da <__lo0bits+0x56>
 80080d2:	6013      	str	r3, [r2, #0]
 80080d4:	4770      	bx	lr
 80080d6:	2000      	movs	r0, #0
 80080d8:	4770      	bx	lr
 80080da:	2020      	movs	r0, #32
 80080dc:	4770      	bx	lr
	...

080080e0 <__i2b>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	460c      	mov	r4, r1
 80080e4:	2101      	movs	r1, #1
 80080e6:	f7ff ff05 	bl	8007ef4 <_Balloc>
 80080ea:	4602      	mov	r2, r0
 80080ec:	b928      	cbnz	r0, 80080fa <__i2b+0x1a>
 80080ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80080f2:	4b04      	ldr	r3, [pc, #16]	; (8008104 <__i2b+0x24>)
 80080f4:	4804      	ldr	r0, [pc, #16]	; (8008108 <__i2b+0x28>)
 80080f6:	f000 fbd5 	bl	80088a4 <__assert_func>
 80080fa:	2301      	movs	r3, #1
 80080fc:	6144      	str	r4, [r0, #20]
 80080fe:	6103      	str	r3, [r0, #16]
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	0800902f 	.word	0x0800902f
 8008108:	080090a0 	.word	0x080090a0

0800810c <__multiply>:
 800810c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008110:	4691      	mov	r9, r2
 8008112:	690a      	ldr	r2, [r1, #16]
 8008114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008118:	460c      	mov	r4, r1
 800811a:	429a      	cmp	r2, r3
 800811c:	bfbe      	ittt	lt
 800811e:	460b      	movlt	r3, r1
 8008120:	464c      	movlt	r4, r9
 8008122:	4699      	movlt	r9, r3
 8008124:	6927      	ldr	r7, [r4, #16]
 8008126:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	6861      	ldr	r1, [r4, #4]
 800812e:	eb07 060a 	add.w	r6, r7, sl
 8008132:	42b3      	cmp	r3, r6
 8008134:	b085      	sub	sp, #20
 8008136:	bfb8      	it	lt
 8008138:	3101      	addlt	r1, #1
 800813a:	f7ff fedb 	bl	8007ef4 <_Balloc>
 800813e:	b930      	cbnz	r0, 800814e <__multiply+0x42>
 8008140:	4602      	mov	r2, r0
 8008142:	f240 115d 	movw	r1, #349	; 0x15d
 8008146:	4b43      	ldr	r3, [pc, #268]	; (8008254 <__multiply+0x148>)
 8008148:	4843      	ldr	r0, [pc, #268]	; (8008258 <__multiply+0x14c>)
 800814a:	f000 fbab 	bl	80088a4 <__assert_func>
 800814e:	f100 0514 	add.w	r5, r0, #20
 8008152:	462b      	mov	r3, r5
 8008154:	2200      	movs	r2, #0
 8008156:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800815a:	4543      	cmp	r3, r8
 800815c:	d321      	bcc.n	80081a2 <__multiply+0x96>
 800815e:	f104 0314 	add.w	r3, r4, #20
 8008162:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008166:	f109 0314 	add.w	r3, r9, #20
 800816a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800816e:	9202      	str	r2, [sp, #8]
 8008170:	1b3a      	subs	r2, r7, r4
 8008172:	3a15      	subs	r2, #21
 8008174:	f022 0203 	bic.w	r2, r2, #3
 8008178:	3204      	adds	r2, #4
 800817a:	f104 0115 	add.w	r1, r4, #21
 800817e:	428f      	cmp	r7, r1
 8008180:	bf38      	it	cc
 8008182:	2204      	movcc	r2, #4
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9a02      	ldr	r2, [sp, #8]
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	429a      	cmp	r2, r3
 800818c:	d80c      	bhi.n	80081a8 <__multiply+0x9c>
 800818e:	2e00      	cmp	r6, #0
 8008190:	dd03      	ble.n	800819a <__multiply+0x8e>
 8008192:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008196:	2b00      	cmp	r3, #0
 8008198:	d059      	beq.n	800824e <__multiply+0x142>
 800819a:	6106      	str	r6, [r0, #16]
 800819c:	b005      	add	sp, #20
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	f843 2b04 	str.w	r2, [r3], #4
 80081a6:	e7d8      	b.n	800815a <__multiply+0x4e>
 80081a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80081ac:	f1ba 0f00 	cmp.w	sl, #0
 80081b0:	d023      	beq.n	80081fa <__multiply+0xee>
 80081b2:	46a9      	mov	r9, r5
 80081b4:	f04f 0c00 	mov.w	ip, #0
 80081b8:	f104 0e14 	add.w	lr, r4, #20
 80081bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80081c0:	f8d9 1000 	ldr.w	r1, [r9]
 80081c4:	fa1f fb82 	uxth.w	fp, r2
 80081c8:	b289      	uxth	r1, r1
 80081ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80081ce:	4461      	add	r1, ip
 80081d0:	f8d9 c000 	ldr.w	ip, [r9]
 80081d4:	0c12      	lsrs	r2, r2, #16
 80081d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80081da:	fb0a c202 	mla	r2, sl, r2, ip
 80081de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80081e2:	b289      	uxth	r1, r1
 80081e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80081e8:	4577      	cmp	r7, lr
 80081ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80081ee:	f849 1b04 	str.w	r1, [r9], #4
 80081f2:	d8e3      	bhi.n	80081bc <__multiply+0xb0>
 80081f4:	9a01      	ldr	r2, [sp, #4]
 80081f6:	f845 c002 	str.w	ip, [r5, r2]
 80081fa:	9a03      	ldr	r2, [sp, #12]
 80081fc:	3304      	adds	r3, #4
 80081fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	d020      	beq.n	800824a <__multiply+0x13e>
 8008208:	46ae      	mov	lr, r5
 800820a:	f04f 0a00 	mov.w	sl, #0
 800820e:	6829      	ldr	r1, [r5, #0]
 8008210:	f104 0c14 	add.w	ip, r4, #20
 8008214:	f8bc b000 	ldrh.w	fp, [ip]
 8008218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800821c:	b289      	uxth	r1, r1
 800821e:	fb09 220b 	mla	r2, r9, fp, r2
 8008222:	4492      	add	sl, r2
 8008224:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008228:	f84e 1b04 	str.w	r1, [lr], #4
 800822c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008230:	f8be 1000 	ldrh.w	r1, [lr]
 8008234:	0c12      	lsrs	r2, r2, #16
 8008236:	fb09 1102 	mla	r1, r9, r2, r1
 800823a:	4567      	cmp	r7, ip
 800823c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008240:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008244:	d8e6      	bhi.n	8008214 <__multiply+0x108>
 8008246:	9a01      	ldr	r2, [sp, #4]
 8008248:	50a9      	str	r1, [r5, r2]
 800824a:	3504      	adds	r5, #4
 800824c:	e79b      	b.n	8008186 <__multiply+0x7a>
 800824e:	3e01      	subs	r6, #1
 8008250:	e79d      	b.n	800818e <__multiply+0x82>
 8008252:	bf00      	nop
 8008254:	0800902f 	.word	0x0800902f
 8008258:	080090a0 	.word	0x080090a0

0800825c <__pow5mult>:
 800825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008260:	4615      	mov	r5, r2
 8008262:	f012 0203 	ands.w	r2, r2, #3
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	d007      	beq.n	800827c <__pow5mult+0x20>
 800826c:	4c25      	ldr	r4, [pc, #148]	; (8008304 <__pow5mult+0xa8>)
 800826e:	3a01      	subs	r2, #1
 8008270:	2300      	movs	r3, #0
 8008272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008276:	f7ff fe9f 	bl	8007fb8 <__multadd>
 800827a:	4607      	mov	r7, r0
 800827c:	10ad      	asrs	r5, r5, #2
 800827e:	d03d      	beq.n	80082fc <__pow5mult+0xa0>
 8008280:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008282:	b97c      	cbnz	r4, 80082a4 <__pow5mult+0x48>
 8008284:	2010      	movs	r0, #16
 8008286:	f7ff fe11 	bl	8007eac <malloc>
 800828a:	4602      	mov	r2, r0
 800828c:	6270      	str	r0, [r6, #36]	; 0x24
 800828e:	b928      	cbnz	r0, 800829c <__pow5mult+0x40>
 8008290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008294:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <__pow5mult+0xac>)
 8008296:	481d      	ldr	r0, [pc, #116]	; (800830c <__pow5mult+0xb0>)
 8008298:	f000 fb04 	bl	80088a4 <__assert_func>
 800829c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a0:	6004      	str	r4, [r0, #0]
 80082a2:	60c4      	str	r4, [r0, #12]
 80082a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082ac:	b94c      	cbnz	r4, 80082c2 <__pow5mult+0x66>
 80082ae:	f240 2171 	movw	r1, #625	; 0x271
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ff14 	bl	80080e0 <__i2b>
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	f04f 0900 	mov.w	r9, #0
 80082c6:	07eb      	lsls	r3, r5, #31
 80082c8:	d50a      	bpl.n	80082e0 <__pow5mult+0x84>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4622      	mov	r2, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ff1c 	bl	800810c <__multiply>
 80082d4:	4680      	mov	r8, r0
 80082d6:	4639      	mov	r1, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff fe4b 	bl	8007f74 <_Bfree>
 80082de:	4647      	mov	r7, r8
 80082e0:	106d      	asrs	r5, r5, #1
 80082e2:	d00b      	beq.n	80082fc <__pow5mult+0xa0>
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	b938      	cbnz	r0, 80082f8 <__pow5mult+0x9c>
 80082e8:	4622      	mov	r2, r4
 80082ea:	4621      	mov	r1, r4
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff ff0d 	bl	800810c <__multiply>
 80082f2:	6020      	str	r0, [r4, #0]
 80082f4:	f8c0 9000 	str.w	r9, [r0]
 80082f8:	4604      	mov	r4, r0
 80082fa:	e7e4      	b.n	80082c6 <__pow5mult+0x6a>
 80082fc:	4638      	mov	r0, r7
 80082fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008302:	bf00      	nop
 8008304:	080091f0 	.word	0x080091f0
 8008308:	08008fbd 	.word	0x08008fbd
 800830c:	080090a0 	.word	0x080090a0

08008310 <__lshift>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	4607      	mov	r7, r0
 8008318:	4691      	mov	r9, r2
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6849      	ldr	r1, [r1, #4]
 800831e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008328:	f108 0601 	add.w	r6, r8, #1
 800832c:	42b3      	cmp	r3, r6
 800832e:	db0b      	blt.n	8008348 <__lshift+0x38>
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fddf 	bl	8007ef4 <_Balloc>
 8008336:	4605      	mov	r5, r0
 8008338:	b948      	cbnz	r0, 800834e <__lshift+0x3e>
 800833a:	4602      	mov	r2, r0
 800833c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008340:	4b29      	ldr	r3, [pc, #164]	; (80083e8 <__lshift+0xd8>)
 8008342:	482a      	ldr	r0, [pc, #168]	; (80083ec <__lshift+0xdc>)
 8008344:	f000 faae 	bl	80088a4 <__assert_func>
 8008348:	3101      	adds	r1, #1
 800834a:	005b      	lsls	r3, r3, #1
 800834c:	e7ee      	b.n	800832c <__lshift+0x1c>
 800834e:	2300      	movs	r3, #0
 8008350:	f100 0114 	add.w	r1, r0, #20
 8008354:	f100 0210 	add.w	r2, r0, #16
 8008358:	4618      	mov	r0, r3
 800835a:	4553      	cmp	r3, sl
 800835c:	db37      	blt.n	80083ce <__lshift+0xbe>
 800835e:	6920      	ldr	r0, [r4, #16]
 8008360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008364:	f104 0314 	add.w	r3, r4, #20
 8008368:	f019 091f 	ands.w	r9, r9, #31
 800836c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008374:	d02f      	beq.n	80083d6 <__lshift+0xc6>
 8008376:	468a      	mov	sl, r1
 8008378:	f04f 0c00 	mov.w	ip, #0
 800837c:	f1c9 0e20 	rsb	lr, r9, #32
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	fa02 f209 	lsl.w	r2, r2, r9
 8008386:	ea42 020c 	orr.w	r2, r2, ip
 800838a:	f84a 2b04 	str.w	r2, [sl], #4
 800838e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008392:	4298      	cmp	r0, r3
 8008394:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008398:	d8f2      	bhi.n	8008380 <__lshift+0x70>
 800839a:	1b03      	subs	r3, r0, r4
 800839c:	3b15      	subs	r3, #21
 800839e:	f023 0303 	bic.w	r3, r3, #3
 80083a2:	3304      	adds	r3, #4
 80083a4:	f104 0215 	add.w	r2, r4, #21
 80083a8:	4290      	cmp	r0, r2
 80083aa:	bf38      	it	cc
 80083ac:	2304      	movcc	r3, #4
 80083ae:	f841 c003 	str.w	ip, [r1, r3]
 80083b2:	f1bc 0f00 	cmp.w	ip, #0
 80083b6:	d001      	beq.n	80083bc <__lshift+0xac>
 80083b8:	f108 0602 	add.w	r6, r8, #2
 80083bc:	3e01      	subs	r6, #1
 80083be:	4638      	mov	r0, r7
 80083c0:	4621      	mov	r1, r4
 80083c2:	612e      	str	r6, [r5, #16]
 80083c4:	f7ff fdd6 	bl	8007f74 <_Bfree>
 80083c8:	4628      	mov	r0, r5
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80083d2:	3301      	adds	r3, #1
 80083d4:	e7c1      	b.n	800835a <__lshift+0x4a>
 80083d6:	3904      	subs	r1, #4
 80083d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083dc:	4298      	cmp	r0, r3
 80083de:	f841 2f04 	str.w	r2, [r1, #4]!
 80083e2:	d8f9      	bhi.n	80083d8 <__lshift+0xc8>
 80083e4:	e7ea      	b.n	80083bc <__lshift+0xac>
 80083e6:	bf00      	nop
 80083e8:	0800902f 	.word	0x0800902f
 80083ec:	080090a0 	.word	0x080090a0

080083f0 <__mcmp>:
 80083f0:	4603      	mov	r3, r0
 80083f2:	690a      	ldr	r2, [r1, #16]
 80083f4:	6900      	ldr	r0, [r0, #16]
 80083f6:	b530      	push	{r4, r5, lr}
 80083f8:	1a80      	subs	r0, r0, r2
 80083fa:	d10d      	bne.n	8008418 <__mcmp+0x28>
 80083fc:	3314      	adds	r3, #20
 80083fe:	3114      	adds	r1, #20
 8008400:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008404:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008408:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800840c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008410:	4295      	cmp	r5, r2
 8008412:	d002      	beq.n	800841a <__mcmp+0x2a>
 8008414:	d304      	bcc.n	8008420 <__mcmp+0x30>
 8008416:	2001      	movs	r0, #1
 8008418:	bd30      	pop	{r4, r5, pc}
 800841a:	42a3      	cmp	r3, r4
 800841c:	d3f4      	bcc.n	8008408 <__mcmp+0x18>
 800841e:	e7fb      	b.n	8008418 <__mcmp+0x28>
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	e7f8      	b.n	8008418 <__mcmp+0x28>
	...

08008428 <__mdiff>:
 8008428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	460d      	mov	r5, r1
 800842e:	4607      	mov	r7, r0
 8008430:	4611      	mov	r1, r2
 8008432:	4628      	mov	r0, r5
 8008434:	4614      	mov	r4, r2
 8008436:	f7ff ffdb 	bl	80083f0 <__mcmp>
 800843a:	1e06      	subs	r6, r0, #0
 800843c:	d111      	bne.n	8008462 <__mdiff+0x3a>
 800843e:	4631      	mov	r1, r6
 8008440:	4638      	mov	r0, r7
 8008442:	f7ff fd57 	bl	8007ef4 <_Balloc>
 8008446:	4602      	mov	r2, r0
 8008448:	b928      	cbnz	r0, 8008456 <__mdiff+0x2e>
 800844a:	f240 2132 	movw	r1, #562	; 0x232
 800844e:	4b3a      	ldr	r3, [pc, #232]	; (8008538 <__mdiff+0x110>)
 8008450:	483a      	ldr	r0, [pc, #232]	; (800853c <__mdiff+0x114>)
 8008452:	f000 fa27 	bl	80088a4 <__assert_func>
 8008456:	2301      	movs	r3, #1
 8008458:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800845c:	4610      	mov	r0, r2
 800845e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	bfa4      	itt	ge
 8008464:	4623      	movge	r3, r4
 8008466:	462c      	movge	r4, r5
 8008468:	4638      	mov	r0, r7
 800846a:	6861      	ldr	r1, [r4, #4]
 800846c:	bfa6      	itte	ge
 800846e:	461d      	movge	r5, r3
 8008470:	2600      	movge	r6, #0
 8008472:	2601      	movlt	r6, #1
 8008474:	f7ff fd3e 	bl	8007ef4 <_Balloc>
 8008478:	4602      	mov	r2, r0
 800847a:	b918      	cbnz	r0, 8008484 <__mdiff+0x5c>
 800847c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008480:	4b2d      	ldr	r3, [pc, #180]	; (8008538 <__mdiff+0x110>)
 8008482:	e7e5      	b.n	8008450 <__mdiff+0x28>
 8008484:	f102 0814 	add.w	r8, r2, #20
 8008488:	46c2      	mov	sl, r8
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	6927      	ldr	r7, [r4, #16]
 8008490:	60c6      	str	r6, [r0, #12]
 8008492:	692e      	ldr	r6, [r5, #16]
 8008494:	f104 0014 	add.w	r0, r4, #20
 8008498:	f105 0914 	add.w	r9, r5, #20
 800849c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80084a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80084a4:	3410      	adds	r4, #16
 80084a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80084aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80084ae:	fa1f f18b 	uxth.w	r1, fp
 80084b2:	448c      	add	ip, r1
 80084b4:	b299      	uxth	r1, r3
 80084b6:	0c1b      	lsrs	r3, r3, #16
 80084b8:	ebac 0101 	sub.w	r1, ip, r1
 80084bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80084c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80084c4:	b289      	uxth	r1, r1
 80084c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80084ca:	454e      	cmp	r6, r9
 80084cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80084d0:	f84a 3b04 	str.w	r3, [sl], #4
 80084d4:	d8e7      	bhi.n	80084a6 <__mdiff+0x7e>
 80084d6:	1b73      	subs	r3, r6, r5
 80084d8:	3b15      	subs	r3, #21
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	3515      	adds	r5, #21
 80084e0:	3304      	adds	r3, #4
 80084e2:	42ae      	cmp	r6, r5
 80084e4:	bf38      	it	cc
 80084e6:	2304      	movcc	r3, #4
 80084e8:	4418      	add	r0, r3
 80084ea:	4443      	add	r3, r8
 80084ec:	461e      	mov	r6, r3
 80084ee:	4605      	mov	r5, r0
 80084f0:	4575      	cmp	r5, lr
 80084f2:	d30e      	bcc.n	8008512 <__mdiff+0xea>
 80084f4:	f10e 0103 	add.w	r1, lr, #3
 80084f8:	1a09      	subs	r1, r1, r0
 80084fa:	f021 0103 	bic.w	r1, r1, #3
 80084fe:	3803      	subs	r0, #3
 8008500:	4586      	cmp	lr, r0
 8008502:	bf38      	it	cc
 8008504:	2100      	movcc	r1, #0
 8008506:	4419      	add	r1, r3
 8008508:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800850c:	b18b      	cbz	r3, 8008532 <__mdiff+0x10a>
 800850e:	6117      	str	r7, [r2, #16]
 8008510:	e7a4      	b.n	800845c <__mdiff+0x34>
 8008512:	f855 8b04 	ldr.w	r8, [r5], #4
 8008516:	fa1f f188 	uxth.w	r1, r8
 800851a:	4461      	add	r1, ip
 800851c:	140c      	asrs	r4, r1, #16
 800851e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008522:	b289      	uxth	r1, r1
 8008524:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008528:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800852c:	f846 1b04 	str.w	r1, [r6], #4
 8008530:	e7de      	b.n	80084f0 <__mdiff+0xc8>
 8008532:	3f01      	subs	r7, #1
 8008534:	e7e8      	b.n	8008508 <__mdiff+0xe0>
 8008536:	bf00      	nop
 8008538:	0800902f 	.word	0x0800902f
 800853c:	080090a0 	.word	0x080090a0

08008540 <__d2b>:
 8008540:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008544:	2101      	movs	r1, #1
 8008546:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800854a:	4690      	mov	r8, r2
 800854c:	461d      	mov	r5, r3
 800854e:	f7ff fcd1 	bl	8007ef4 <_Balloc>
 8008552:	4604      	mov	r4, r0
 8008554:	b930      	cbnz	r0, 8008564 <__d2b+0x24>
 8008556:	4602      	mov	r2, r0
 8008558:	f240 310a 	movw	r1, #778	; 0x30a
 800855c:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <__d2b+0xb0>)
 800855e:	4825      	ldr	r0, [pc, #148]	; (80085f4 <__d2b+0xb4>)
 8008560:	f000 f9a0 	bl	80088a4 <__assert_func>
 8008564:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008568:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800856c:	bb2d      	cbnz	r5, 80085ba <__d2b+0x7a>
 800856e:	9301      	str	r3, [sp, #4]
 8008570:	f1b8 0300 	subs.w	r3, r8, #0
 8008574:	d026      	beq.n	80085c4 <__d2b+0x84>
 8008576:	4668      	mov	r0, sp
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	f7ff fd83 	bl	8008084 <__lo0bits>
 800857e:	9900      	ldr	r1, [sp, #0]
 8008580:	b1f0      	cbz	r0, 80085c0 <__d2b+0x80>
 8008582:	9a01      	ldr	r2, [sp, #4]
 8008584:	f1c0 0320 	rsb	r3, r0, #32
 8008588:	fa02 f303 	lsl.w	r3, r2, r3
 800858c:	430b      	orrs	r3, r1
 800858e:	40c2      	lsrs	r2, r0
 8008590:	6163      	str	r3, [r4, #20]
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	9b01      	ldr	r3, [sp, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	bf14      	ite	ne
 800859a:	2102      	movne	r1, #2
 800859c:	2101      	moveq	r1, #1
 800859e:	61a3      	str	r3, [r4, #24]
 80085a0:	6121      	str	r1, [r4, #16]
 80085a2:	b1c5      	cbz	r5, 80085d6 <__d2b+0x96>
 80085a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80085a8:	4405      	add	r5, r0
 80085aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80085ae:	603d      	str	r5, [r7, #0]
 80085b0:	6030      	str	r0, [r6, #0]
 80085b2:	4620      	mov	r0, r4
 80085b4:	b002      	add	sp, #8
 80085b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085be:	e7d6      	b.n	800856e <__d2b+0x2e>
 80085c0:	6161      	str	r1, [r4, #20]
 80085c2:	e7e7      	b.n	8008594 <__d2b+0x54>
 80085c4:	a801      	add	r0, sp, #4
 80085c6:	f7ff fd5d 	bl	8008084 <__lo0bits>
 80085ca:	2101      	movs	r1, #1
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	6121      	str	r1, [r4, #16]
 80085d0:	6163      	str	r3, [r4, #20]
 80085d2:	3020      	adds	r0, #32
 80085d4:	e7e5      	b.n	80085a2 <__d2b+0x62>
 80085d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80085da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80085de:	6038      	str	r0, [r7, #0]
 80085e0:	6918      	ldr	r0, [r3, #16]
 80085e2:	f7ff fd2f 	bl	8008044 <__hi0bits>
 80085e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80085ea:	6031      	str	r1, [r6, #0]
 80085ec:	e7e1      	b.n	80085b2 <__d2b+0x72>
 80085ee:	bf00      	nop
 80085f0:	0800902f 	.word	0x0800902f
 80085f4:	080090a0 	.word	0x080090a0

080085f8 <_calloc_r>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	fba1 5402 	umull	r5, r4, r1, r2
 80085fe:	b934      	cbnz	r4, 800860e <_calloc_r+0x16>
 8008600:	4629      	mov	r1, r5
 8008602:	f000 f875 	bl	80086f0 <_malloc_r>
 8008606:	4606      	mov	r6, r0
 8008608:	b928      	cbnz	r0, 8008616 <_calloc_r+0x1e>
 800860a:	4630      	mov	r0, r6
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	220c      	movs	r2, #12
 8008610:	2600      	movs	r6, #0
 8008612:	6002      	str	r2, [r0, #0]
 8008614:	e7f9      	b.n	800860a <_calloc_r+0x12>
 8008616:	462a      	mov	r2, r5
 8008618:	4621      	mov	r1, r4
 800861a:	f7fd fe0d 	bl	8006238 <memset>
 800861e:	e7f4      	b.n	800860a <_calloc_r+0x12>

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d040      	beq.n	80086aa <_free_r+0x8a>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f9bc 	bl	80089b0 <__malloc_lock>
 8008638:	4a1c      	ldr	r2, [pc, #112]	; (80086ac <_free_r+0x8c>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	b933      	cbnz	r3, 800864c <_free_r+0x2c>
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008648:	f000 b9b8 	b.w	80089bc <__malloc_unlock>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d908      	bls.n	8008662 <_free_r+0x42>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	1821      	adds	r1, r4, r0
 8008654:	428b      	cmp	r3, r1
 8008656:	bf01      	itttt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	1809      	addeq	r1, r1, r0
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	e7ed      	b.n	800863e <_free_r+0x1e>
 8008662:	461a      	mov	r2, r3
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b10b      	cbz	r3, 800866c <_free_r+0x4c>
 8008668:	42a3      	cmp	r3, r4
 800866a:	d9fa      	bls.n	8008662 <_free_r+0x42>
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	1850      	adds	r0, r2, r1
 8008670:	42a0      	cmp	r0, r4
 8008672:	d10b      	bne.n	800868c <_free_r+0x6c>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	4401      	add	r1, r0
 8008678:	1850      	adds	r0, r2, r1
 800867a:	4283      	cmp	r3, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	d1e0      	bne.n	8008642 <_free_r+0x22>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4401      	add	r1, r0
 8008686:	6011      	str	r1, [r2, #0]
 8008688:	6053      	str	r3, [r2, #4]
 800868a:	e7da      	b.n	8008642 <_free_r+0x22>
 800868c:	d902      	bls.n	8008694 <_free_r+0x74>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d6      	b.n	8008642 <_free_r+0x22>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf01      	itttt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	6063      	str	r3, [r4, #4]
 80086a6:	6054      	str	r4, [r2, #4]
 80086a8:	e7cb      	b.n	8008642 <_free_r+0x22>
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20000410 	.word	0x20000410

080086b0 <sbrk_aligned>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4e0e      	ldr	r6, [pc, #56]	; (80086ec <sbrk_aligned+0x3c>)
 80086b4:	460c      	mov	r4, r1
 80086b6:	6831      	ldr	r1, [r6, #0]
 80086b8:	4605      	mov	r5, r0
 80086ba:	b911      	cbnz	r1, 80086c2 <sbrk_aligned+0x12>
 80086bc:	f000 f88c 	bl	80087d8 <_sbrk_r>
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 f887 	bl	80087d8 <_sbrk_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d00a      	beq.n	80086e4 <sbrk_aligned+0x34>
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d007      	beq.n	80086e8 <sbrk_aligned+0x38>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 f87c 	bl	80087d8 <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d101      	bne.n	80086e8 <sbrk_aligned+0x38>
 80086e4:	f04f 34ff 	mov.w	r4, #4294967295
 80086e8:	4620      	mov	r0, r4
 80086ea:	bd70      	pop	{r4, r5, r6, pc}
 80086ec:	20000414 	.word	0x20000414

080086f0 <_malloc_r>:
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	1ccd      	adds	r5, r1, #3
 80086f6:	f025 0503 	bic.w	r5, r5, #3
 80086fa:	3508      	adds	r5, #8
 80086fc:	2d0c      	cmp	r5, #12
 80086fe:	bf38      	it	cc
 8008700:	250c      	movcc	r5, #12
 8008702:	2d00      	cmp	r5, #0
 8008704:	4607      	mov	r7, r0
 8008706:	db01      	blt.n	800870c <_malloc_r+0x1c>
 8008708:	42a9      	cmp	r1, r5
 800870a:	d905      	bls.n	8008718 <_malloc_r+0x28>
 800870c:	230c      	movs	r3, #12
 800870e:	2600      	movs	r6, #0
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4630      	mov	r0, r6
 8008714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008718:	4e2e      	ldr	r6, [pc, #184]	; (80087d4 <_malloc_r+0xe4>)
 800871a:	f000 f949 	bl	80089b0 <__malloc_lock>
 800871e:	6833      	ldr	r3, [r6, #0]
 8008720:	461c      	mov	r4, r3
 8008722:	bb34      	cbnz	r4, 8008772 <_malloc_r+0x82>
 8008724:	4629      	mov	r1, r5
 8008726:	4638      	mov	r0, r7
 8008728:	f7ff ffc2 	bl	80086b0 <sbrk_aligned>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	4604      	mov	r4, r0
 8008730:	d14d      	bne.n	80087ce <_malloc_r+0xde>
 8008732:	6834      	ldr	r4, [r6, #0]
 8008734:	4626      	mov	r6, r4
 8008736:	2e00      	cmp	r6, #0
 8008738:	d140      	bne.n	80087bc <_malloc_r+0xcc>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	4631      	mov	r1, r6
 800873e:	4638      	mov	r0, r7
 8008740:	eb04 0803 	add.w	r8, r4, r3
 8008744:	f000 f848 	bl	80087d8 <_sbrk_r>
 8008748:	4580      	cmp	r8, r0
 800874a:	d13a      	bne.n	80087c2 <_malloc_r+0xd2>
 800874c:	6821      	ldr	r1, [r4, #0]
 800874e:	3503      	adds	r5, #3
 8008750:	1a6d      	subs	r5, r5, r1
 8008752:	f025 0503 	bic.w	r5, r5, #3
 8008756:	3508      	adds	r5, #8
 8008758:	2d0c      	cmp	r5, #12
 800875a:	bf38      	it	cc
 800875c:	250c      	movcc	r5, #12
 800875e:	4638      	mov	r0, r7
 8008760:	4629      	mov	r1, r5
 8008762:	f7ff ffa5 	bl	80086b0 <sbrk_aligned>
 8008766:	3001      	adds	r0, #1
 8008768:	d02b      	beq.n	80087c2 <_malloc_r+0xd2>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	442b      	add	r3, r5
 800876e:	6023      	str	r3, [r4, #0]
 8008770:	e00e      	b.n	8008790 <_malloc_r+0xa0>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	1b52      	subs	r2, r2, r5
 8008776:	d41e      	bmi.n	80087b6 <_malloc_r+0xc6>
 8008778:	2a0b      	cmp	r2, #11
 800877a:	d916      	bls.n	80087aa <_malloc_r+0xba>
 800877c:	1961      	adds	r1, r4, r5
 800877e:	42a3      	cmp	r3, r4
 8008780:	6025      	str	r5, [r4, #0]
 8008782:	bf18      	it	ne
 8008784:	6059      	strne	r1, [r3, #4]
 8008786:	6863      	ldr	r3, [r4, #4]
 8008788:	bf08      	it	eq
 800878a:	6031      	streq	r1, [r6, #0]
 800878c:	5162      	str	r2, [r4, r5]
 800878e:	604b      	str	r3, [r1, #4]
 8008790:	4638      	mov	r0, r7
 8008792:	f104 060b 	add.w	r6, r4, #11
 8008796:	f000 f911 	bl	80089bc <__malloc_unlock>
 800879a:	f026 0607 	bic.w	r6, r6, #7
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	1af2      	subs	r2, r6, r3
 80087a2:	d0b6      	beq.n	8008712 <_malloc_r+0x22>
 80087a4:	1b9b      	subs	r3, r3, r6
 80087a6:	50a3      	str	r3, [r4, r2]
 80087a8:	e7b3      	b.n	8008712 <_malloc_r+0x22>
 80087aa:	6862      	ldr	r2, [r4, #4]
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	bf0c      	ite	eq
 80087b0:	6032      	streq	r2, [r6, #0]
 80087b2:	605a      	strne	r2, [r3, #4]
 80087b4:	e7ec      	b.n	8008790 <_malloc_r+0xa0>
 80087b6:	4623      	mov	r3, r4
 80087b8:	6864      	ldr	r4, [r4, #4]
 80087ba:	e7b2      	b.n	8008722 <_malloc_r+0x32>
 80087bc:	4634      	mov	r4, r6
 80087be:	6876      	ldr	r6, [r6, #4]
 80087c0:	e7b9      	b.n	8008736 <_malloc_r+0x46>
 80087c2:	230c      	movs	r3, #12
 80087c4:	4638      	mov	r0, r7
 80087c6:	603b      	str	r3, [r7, #0]
 80087c8:	f000 f8f8 	bl	80089bc <__malloc_unlock>
 80087cc:	e7a1      	b.n	8008712 <_malloc_r+0x22>
 80087ce:	6025      	str	r5, [r4, #0]
 80087d0:	e7de      	b.n	8008790 <_malloc_r+0xa0>
 80087d2:	bf00      	nop
 80087d4:	20000410 	.word	0x20000410

080087d8 <_sbrk_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	2300      	movs	r3, #0
 80087dc:	4d05      	ldr	r5, [pc, #20]	; (80087f4 <_sbrk_r+0x1c>)
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7f9 fd18 	bl	8002218 <_sbrk>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_sbrk_r+0x1a>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_sbrk_r+0x1a>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20000418 	.word	0x20000418

080087f8 <__sread>:
 80087f8:	b510      	push	{r4, lr}
 80087fa:	460c      	mov	r4, r1
 80087fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008800:	f000 fa3a 	bl	8008c78 <_read_r>
 8008804:	2800      	cmp	r0, #0
 8008806:	bfab      	itete	ge
 8008808:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800880a:	89a3      	ldrhlt	r3, [r4, #12]
 800880c:	181b      	addge	r3, r3, r0
 800880e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008812:	bfac      	ite	ge
 8008814:	6563      	strge	r3, [r4, #84]	; 0x54
 8008816:	81a3      	strhlt	r3, [r4, #12]
 8008818:	bd10      	pop	{r4, pc}

0800881a <__swrite>:
 800881a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800881e:	461f      	mov	r7, r3
 8008820:	898b      	ldrh	r3, [r1, #12]
 8008822:	4605      	mov	r5, r0
 8008824:	05db      	lsls	r3, r3, #23
 8008826:	460c      	mov	r4, r1
 8008828:	4616      	mov	r6, r2
 800882a:	d505      	bpl.n	8008838 <__swrite+0x1e>
 800882c:	2302      	movs	r3, #2
 800882e:	2200      	movs	r2, #0
 8008830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008834:	f000 f898 	bl	8008968 <_lseek_r>
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	4632      	mov	r2, r6
 800883c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	4628      	mov	r0, r5
 8008844:	463b      	mov	r3, r7
 8008846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800884a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800884e:	f000 b817 	b.w	8008880 <_write_r>

08008852 <__sseek>:
 8008852:	b510      	push	{r4, lr}
 8008854:	460c      	mov	r4, r1
 8008856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885a:	f000 f885 	bl	8008968 <_lseek_r>
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	bf15      	itete	ne
 8008864:	6560      	strne	r0, [r4, #84]	; 0x54
 8008866:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800886a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800886e:	81a3      	strheq	r3, [r4, #12]
 8008870:	bf18      	it	ne
 8008872:	81a3      	strhne	r3, [r4, #12]
 8008874:	bd10      	pop	{r4, pc}

08008876 <__sclose>:
 8008876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887a:	f000 b831 	b.w	80088e0 <_close_r>
	...

08008880 <_write_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	2200      	movs	r2, #0
 800888a:	4d05      	ldr	r5, [pc, #20]	; (80088a0 <_write_r+0x20>)
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f9 fc76 	bl	8002180 <_write>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_write_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_write_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20000418 	.word	0x20000418

080088a4 <__assert_func>:
 80088a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088a6:	4614      	mov	r4, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <__assert_func+0x2c>)
 80088ac:	4605      	mov	r5, r0
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68d8      	ldr	r0, [r3, #12]
 80088b2:	b14c      	cbz	r4, 80088c8 <__assert_func+0x24>
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <__assert_func+0x30>)
 80088b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088ba:	9100      	str	r1, [sp, #0]
 80088bc:	462b      	mov	r3, r5
 80088be:	4906      	ldr	r1, [pc, #24]	; (80088d8 <__assert_func+0x34>)
 80088c0:	f000 f81e 	bl	8008900 <fiprintf>
 80088c4:	f000 f9f7 	bl	8008cb6 <abort>
 80088c8:	4b04      	ldr	r3, [pc, #16]	; (80088dc <__assert_func+0x38>)
 80088ca:	461c      	mov	r4, r3
 80088cc:	e7f3      	b.n	80088b6 <__assert_func+0x12>
 80088ce:	bf00      	nop
 80088d0:	2000003c 	.word	0x2000003c
 80088d4:	080091fc 	.word	0x080091fc
 80088d8:	08009209 	.word	0x08009209
 80088dc:	08009237 	.word	0x08009237

080088e0 <_close_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	2300      	movs	r3, #0
 80088e4:	4d05      	ldr	r5, [pc, #20]	; (80088fc <_close_r+0x1c>)
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	f7f9 fc64 	bl	80021b8 <_close>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_close_r+0x1a>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_close_r+0x1a>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000418 	.word	0x20000418

08008900 <fiprintf>:
 8008900:	b40e      	push	{r1, r2, r3}
 8008902:	b503      	push	{r0, r1, lr}
 8008904:	4601      	mov	r1, r0
 8008906:	ab03      	add	r3, sp, #12
 8008908:	4805      	ldr	r0, [pc, #20]	; (8008920 <fiprintf+0x20>)
 800890a:	f853 2b04 	ldr.w	r2, [r3], #4
 800890e:	6800      	ldr	r0, [r0, #0]
 8008910:	9301      	str	r3, [sp, #4]
 8008912:	f000 f881 	bl	8008a18 <_vfiprintf_r>
 8008916:	b002      	add	sp, #8
 8008918:	f85d eb04 	ldr.w	lr, [sp], #4
 800891c:	b003      	add	sp, #12
 800891e:	4770      	bx	lr
 8008920:	2000003c 	.word	0x2000003c

08008924 <_fstat_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	2300      	movs	r3, #0
 8008928:	4d06      	ldr	r5, [pc, #24]	; (8008944 <_fstat_r+0x20>)
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	602b      	str	r3, [r5, #0]
 8008932:	f7f9 fc4c 	bl	80021ce <_fstat>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	d102      	bne.n	8008940 <_fstat_r+0x1c>
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	b103      	cbz	r3, 8008940 <_fstat_r+0x1c>
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	bd38      	pop	{r3, r4, r5, pc}
 8008942:	bf00      	nop
 8008944:	20000418 	.word	0x20000418

08008948 <_isatty_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	2300      	movs	r3, #0
 800894c:	4d05      	ldr	r5, [pc, #20]	; (8008964 <_isatty_r+0x1c>)
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	602b      	str	r3, [r5, #0]
 8008954:	f7f9 fc4a 	bl	80021ec <_isatty>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_isatty_r+0x1a>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_isatty_r+0x1a>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20000418 	.word	0x20000418

08008968 <_lseek_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	4611      	mov	r1, r2
 8008970:	2200      	movs	r2, #0
 8008972:	4d05      	ldr	r5, [pc, #20]	; (8008988 <_lseek_r+0x20>)
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7f9 fc42 	bl	8002200 <_lseek>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_lseek_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_lseek_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000418 	.word	0x20000418

0800898c <__ascii_mbtowc>:
 800898c:	b082      	sub	sp, #8
 800898e:	b901      	cbnz	r1, 8008992 <__ascii_mbtowc+0x6>
 8008990:	a901      	add	r1, sp, #4
 8008992:	b142      	cbz	r2, 80089a6 <__ascii_mbtowc+0x1a>
 8008994:	b14b      	cbz	r3, 80089aa <__ascii_mbtowc+0x1e>
 8008996:	7813      	ldrb	r3, [r2, #0]
 8008998:	600b      	str	r3, [r1, #0]
 800899a:	7812      	ldrb	r2, [r2, #0]
 800899c:	1e10      	subs	r0, r2, #0
 800899e:	bf18      	it	ne
 80089a0:	2001      	movne	r0, #1
 80089a2:	b002      	add	sp, #8
 80089a4:	4770      	bx	lr
 80089a6:	4610      	mov	r0, r2
 80089a8:	e7fb      	b.n	80089a2 <__ascii_mbtowc+0x16>
 80089aa:	f06f 0001 	mvn.w	r0, #1
 80089ae:	e7f8      	b.n	80089a2 <__ascii_mbtowc+0x16>

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_lock+0x8>)
 80089b2:	f7ff ba14 	b.w	8007dde <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	2000040c 	.word	0x2000040c

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_unlock+0x8>)
 80089be:	f7ff ba0f 	b.w	8007de0 <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	2000040c 	.word	0x2000040c

080089c8 <__sfputc_r>:
 80089c8:	6893      	ldr	r3, [r2, #8]
 80089ca:	b410      	push	{r4}
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	6093      	str	r3, [r2, #8]
 80089d2:	da07      	bge.n	80089e4 <__sfputc_r+0x1c>
 80089d4:	6994      	ldr	r4, [r2, #24]
 80089d6:	42a3      	cmp	r3, r4
 80089d8:	db01      	blt.n	80089de <__sfputc_r+0x16>
 80089da:	290a      	cmp	r1, #10
 80089dc:	d102      	bne.n	80089e4 <__sfputc_r+0x1c>
 80089de:	bc10      	pop	{r4}
 80089e0:	f7fe b908 	b.w	8006bf4 <__swbuf_r>
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	1c58      	adds	r0, r3, #1
 80089e8:	6010      	str	r0, [r2, #0]
 80089ea:	7019      	strb	r1, [r3, #0]
 80089ec:	4608      	mov	r0, r1
 80089ee:	bc10      	pop	{r4}
 80089f0:	4770      	bx	lr

080089f2 <__sfputs_r>:
 80089f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f4:	4606      	mov	r6, r0
 80089f6:	460f      	mov	r7, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	18d5      	adds	r5, r2, r3
 80089fc:	42ac      	cmp	r4, r5
 80089fe:	d101      	bne.n	8008a04 <__sfputs_r+0x12>
 8008a00:	2000      	movs	r0, #0
 8008a02:	e007      	b.n	8008a14 <__sfputs_r+0x22>
 8008a04:	463a      	mov	r2, r7
 8008a06:	4630      	mov	r0, r6
 8008a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0c:	f7ff ffdc 	bl	80089c8 <__sfputc_r>
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	d1f3      	bne.n	80089fc <__sfputs_r+0xa>
 8008a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a18 <_vfiprintf_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	4614      	mov	r4, r2
 8008a20:	4698      	mov	r8, r3
 8008a22:	4606      	mov	r6, r0
 8008a24:	b09d      	sub	sp, #116	; 0x74
 8008a26:	b118      	cbz	r0, 8008a30 <_vfiprintf_r+0x18>
 8008a28:	6983      	ldr	r3, [r0, #24]
 8008a2a:	b90b      	cbnz	r3, 8008a30 <_vfiprintf_r+0x18>
 8008a2c:	f7ff f934 	bl	8007c98 <__sinit>
 8008a30:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <_vfiprintf_r+0x240>)
 8008a32:	429d      	cmp	r5, r3
 8008a34:	d11b      	bne.n	8008a6e <_vfiprintf_r+0x56>
 8008a36:	6875      	ldr	r5, [r6, #4]
 8008a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3a:	07d9      	lsls	r1, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_vfiprintf_r+0x32>
 8008a3e:	89ab      	ldrh	r3, [r5, #12]
 8008a40:	059a      	lsls	r2, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_vfiprintf_r+0x32>
 8008a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a46:	f7ff f9ca 	bl	8007dde <__retarget_lock_acquire_recursive>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	071b      	lsls	r3, r3, #28
 8008a4e:	d501      	bpl.n	8008a54 <_vfiprintf_r+0x3c>
 8008a50:	692b      	ldr	r3, [r5, #16]
 8008a52:	b9eb      	cbnz	r3, 8008a90 <_vfiprintf_r+0x78>
 8008a54:	4629      	mov	r1, r5
 8008a56:	4630      	mov	r0, r6
 8008a58:	f7fe f91e 	bl	8006c98 <__swsetup_r>
 8008a5c:	b1c0      	cbz	r0, 8008a90 <_vfiprintf_r+0x78>
 8008a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a60:	07dc      	lsls	r4, r3, #31
 8008a62:	d50e      	bpl.n	8008a82 <_vfiprintf_r+0x6a>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	b01d      	add	sp, #116	; 0x74
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	4b7b      	ldr	r3, [pc, #492]	; (8008c5c <_vfiprintf_r+0x244>)
 8008a70:	429d      	cmp	r5, r3
 8008a72:	d101      	bne.n	8008a78 <_vfiprintf_r+0x60>
 8008a74:	68b5      	ldr	r5, [r6, #8]
 8008a76:	e7df      	b.n	8008a38 <_vfiprintf_r+0x20>
 8008a78:	4b79      	ldr	r3, [pc, #484]	; (8008c60 <_vfiprintf_r+0x248>)
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	bf08      	it	eq
 8008a7e:	68f5      	ldreq	r5, [r6, #12]
 8008a80:	e7da      	b.n	8008a38 <_vfiprintf_r+0x20>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	0598      	lsls	r0, r3, #22
 8008a86:	d4ed      	bmi.n	8008a64 <_vfiprintf_r+0x4c>
 8008a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8a:	f7ff f9a9 	bl	8007de0 <__retarget_lock_release_recursive>
 8008a8e:	e7e9      	b.n	8008a64 <_vfiprintf_r+0x4c>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9309      	str	r3, [sp, #36]	; 0x24
 8008a94:	2320      	movs	r3, #32
 8008a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a9a:	2330      	movs	r3, #48	; 0x30
 8008a9c:	f04f 0901 	mov.w	r9, #1
 8008aa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aa4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008c64 <_vfiprintf_r+0x24c>
 8008aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aac:	4623      	mov	r3, r4
 8008aae:	469a      	mov	sl, r3
 8008ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab4:	b10a      	cbz	r2, 8008aba <_vfiprintf_r+0xa2>
 8008ab6:	2a25      	cmp	r2, #37	; 0x25
 8008ab8:	d1f9      	bne.n	8008aae <_vfiprintf_r+0x96>
 8008aba:	ebba 0b04 	subs.w	fp, sl, r4
 8008abe:	d00b      	beq.n	8008ad8 <_vfiprintf_r+0xc0>
 8008ac0:	465b      	mov	r3, fp
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ff93 	bl	80089f2 <__sfputs_r>
 8008acc:	3001      	adds	r0, #1
 8008ace:	f000 80aa 	beq.w	8008c26 <_vfiprintf_r+0x20e>
 8008ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad4:	445a      	add	r2, fp
 8008ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80a2 	beq.w	8008c26 <_vfiprintf_r+0x20e>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aec:	f10a 0a01 	add.w	sl, sl, #1
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	9307      	str	r3, [sp, #28]
 8008af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af8:	931a      	str	r3, [sp, #104]	; 0x68
 8008afa:	4654      	mov	r4, sl
 8008afc:	2205      	movs	r2, #5
 8008afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b02:	4858      	ldr	r0, [pc, #352]	; (8008c64 <_vfiprintf_r+0x24c>)
 8008b04:	f7ff f9da 	bl	8007ebc <memchr>
 8008b08:	9a04      	ldr	r2, [sp, #16]
 8008b0a:	b9d8      	cbnz	r0, 8008b44 <_vfiprintf_r+0x12c>
 8008b0c:	06d1      	lsls	r1, r2, #27
 8008b0e:	bf44      	itt	mi
 8008b10:	2320      	movmi	r3, #32
 8008b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b16:	0713      	lsls	r3, r2, #28
 8008b18:	bf44      	itt	mi
 8008b1a:	232b      	movmi	r3, #43	; 0x2b
 8008b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b20:	f89a 3000 	ldrb.w	r3, [sl]
 8008b24:	2b2a      	cmp	r3, #42	; 0x2a
 8008b26:	d015      	beq.n	8008b54 <_vfiprintf_r+0x13c>
 8008b28:	4654      	mov	r4, sl
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f04f 0c0a 	mov.w	ip, #10
 8008b30:	9a07      	ldr	r2, [sp, #28]
 8008b32:	4621      	mov	r1, r4
 8008b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b38:	3b30      	subs	r3, #48	; 0x30
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d94e      	bls.n	8008bdc <_vfiprintf_r+0x1c4>
 8008b3e:	b1b0      	cbz	r0, 8008b6e <_vfiprintf_r+0x156>
 8008b40:	9207      	str	r2, [sp, #28]
 8008b42:	e014      	b.n	8008b6e <_vfiprintf_r+0x156>
 8008b44:	eba0 0308 	sub.w	r3, r0, r8
 8008b48:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	46a2      	mov	sl, r4
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	e7d2      	b.n	8008afa <_vfiprintf_r+0xe2>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1d19      	adds	r1, r3, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	9103      	str	r1, [sp, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bfbb      	ittet	lt
 8008b60:	425b      	neglt	r3, r3
 8008b62:	f042 0202 	orrlt.w	r2, r2, #2
 8008b66:	9307      	strge	r3, [sp, #28]
 8008b68:	9307      	strlt	r3, [sp, #28]
 8008b6a:	bfb8      	it	lt
 8008b6c:	9204      	strlt	r2, [sp, #16]
 8008b6e:	7823      	ldrb	r3, [r4, #0]
 8008b70:	2b2e      	cmp	r3, #46	; 0x2e
 8008b72:	d10c      	bne.n	8008b8e <_vfiprintf_r+0x176>
 8008b74:	7863      	ldrb	r3, [r4, #1]
 8008b76:	2b2a      	cmp	r3, #42	; 0x2a
 8008b78:	d135      	bne.n	8008be6 <_vfiprintf_r+0x1ce>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	3402      	adds	r4, #2
 8008b7e:	1d1a      	adds	r2, r3, #4
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	9203      	str	r2, [sp, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bfb8      	it	lt
 8008b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008c68 <_vfiprintf_r+0x250>
 8008b92:	2203      	movs	r2, #3
 8008b94:	4650      	mov	r0, sl
 8008b96:	7821      	ldrb	r1, [r4, #0]
 8008b98:	f7ff f990 	bl	8007ebc <memchr>
 8008b9c:	b140      	cbz	r0, 8008bb0 <_vfiprintf_r+0x198>
 8008b9e:	2340      	movs	r3, #64	; 0x40
 8008ba0:	eba0 000a 	sub.w	r0, r0, sl
 8008ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	3401      	adds	r4, #1
 8008bac:	4303      	orrs	r3, r0
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb4:	2206      	movs	r2, #6
 8008bb6:	482d      	ldr	r0, [pc, #180]	; (8008c6c <_vfiprintf_r+0x254>)
 8008bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bbc:	f7ff f97e 	bl	8007ebc <memchr>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d03f      	beq.n	8008c44 <_vfiprintf_r+0x22c>
 8008bc4:	4b2a      	ldr	r3, [pc, #168]	; (8008c70 <_vfiprintf_r+0x258>)
 8008bc6:	bb1b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x1f8>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	3307      	adds	r3, #7
 8008bcc:	f023 0307 	bic.w	r3, r3, #7
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd6:	443b      	add	r3, r7
 8008bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bda:	e767      	b.n	8008aac <_vfiprintf_r+0x94>
 8008bdc:	460c      	mov	r4, r1
 8008bde:	2001      	movs	r0, #1
 8008be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be4:	e7a5      	b.n	8008b32 <_vfiprintf_r+0x11a>
 8008be6:	2300      	movs	r3, #0
 8008be8:	f04f 0c0a 	mov.w	ip, #10
 8008bec:	4619      	mov	r1, r3
 8008bee:	3401      	adds	r4, #1
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf8:	3a30      	subs	r2, #48	; 0x30
 8008bfa:	2a09      	cmp	r2, #9
 8008bfc:	d903      	bls.n	8008c06 <_vfiprintf_r+0x1ee>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0c5      	beq.n	8008b8e <_vfiprintf_r+0x176>
 8008c02:	9105      	str	r1, [sp, #20]
 8008c04:	e7c3      	b.n	8008b8e <_vfiprintf_r+0x176>
 8008c06:	4604      	mov	r4, r0
 8008c08:	2301      	movs	r3, #1
 8008c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c0e:	e7f0      	b.n	8008bf2 <_vfiprintf_r+0x1da>
 8008c10:	ab03      	add	r3, sp, #12
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	462a      	mov	r2, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	4b16      	ldr	r3, [pc, #88]	; (8008c74 <_vfiprintf_r+0x25c>)
 8008c1a:	a904      	add	r1, sp, #16
 8008c1c:	f7fd fbb2 	bl	8006384 <_printf_float>
 8008c20:	4607      	mov	r7, r0
 8008c22:	1c78      	adds	r0, r7, #1
 8008c24:	d1d6      	bne.n	8008bd4 <_vfiprintf_r+0x1bc>
 8008c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c28:	07d9      	lsls	r1, r3, #31
 8008c2a:	d405      	bmi.n	8008c38 <_vfiprintf_r+0x220>
 8008c2c:	89ab      	ldrh	r3, [r5, #12]
 8008c2e:	059a      	lsls	r2, r3, #22
 8008c30:	d402      	bmi.n	8008c38 <_vfiprintf_r+0x220>
 8008c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c34:	f7ff f8d4 	bl	8007de0 <__retarget_lock_release_recursive>
 8008c38:	89ab      	ldrh	r3, [r5, #12]
 8008c3a:	065b      	lsls	r3, r3, #25
 8008c3c:	f53f af12 	bmi.w	8008a64 <_vfiprintf_r+0x4c>
 8008c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c42:	e711      	b.n	8008a68 <_vfiprintf_r+0x50>
 8008c44:	ab03      	add	r3, sp, #12
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	4b09      	ldr	r3, [pc, #36]	; (8008c74 <_vfiprintf_r+0x25c>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	f7fd fe34 	bl	80068bc <_printf_i>
 8008c54:	e7e4      	b.n	8008c20 <_vfiprintf_r+0x208>
 8008c56:	bf00      	nop
 8008c58:	08009060 	.word	0x08009060
 8008c5c:	08009080 	.word	0x08009080
 8008c60:	08009040 	.word	0x08009040
 8008c64:	08009242 	.word	0x08009242
 8008c68:	08009248 	.word	0x08009248
 8008c6c:	0800924c 	.word	0x0800924c
 8008c70:	08006385 	.word	0x08006385
 8008c74:	080089f3 	.word	0x080089f3

08008c78 <_read_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	4608      	mov	r0, r1
 8008c7e:	4611      	mov	r1, r2
 8008c80:	2200      	movs	r2, #0
 8008c82:	4d05      	ldr	r5, [pc, #20]	; (8008c98 <_read_r+0x20>)
 8008c84:	602a      	str	r2, [r5, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	f7f9 fa5d 	bl	8002146 <_read>
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	d102      	bne.n	8008c96 <_read_r+0x1e>
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	b103      	cbz	r3, 8008c96 <_read_r+0x1e>
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	20000418 	.word	0x20000418

08008c9c <__ascii_wctomb>:
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	b141      	cbz	r1, 8008cb4 <__ascii_wctomb+0x18>
 8008ca2:	2aff      	cmp	r2, #255	; 0xff
 8008ca4:	d904      	bls.n	8008cb0 <__ascii_wctomb+0x14>
 8008ca6:	228a      	movs	r2, #138	; 0x8a
 8008ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	4770      	bx	lr
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	700a      	strb	r2, [r1, #0]
 8008cb4:	4770      	bx	lr

08008cb6 <abort>:
 8008cb6:	2006      	movs	r0, #6
 8008cb8:	b508      	push	{r3, lr}
 8008cba:	f000 f82b 	bl	8008d14 <raise>
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	f7f9 fa37 	bl	8002132 <_exit>

08008cc4 <_raise_r>:
 8008cc4:	291f      	cmp	r1, #31
 8008cc6:	b538      	push	{r3, r4, r5, lr}
 8008cc8:	4604      	mov	r4, r0
 8008cca:	460d      	mov	r5, r1
 8008ccc:	d904      	bls.n	8008cd8 <_raise_r+0x14>
 8008cce:	2316      	movs	r3, #22
 8008cd0:	6003      	str	r3, [r0, #0]
 8008cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008cda:	b112      	cbz	r2, 8008ce2 <_raise_r+0x1e>
 8008cdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ce0:	b94b      	cbnz	r3, 8008cf6 <_raise_r+0x32>
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 f830 	bl	8008d48 <_getpid_r>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4601      	mov	r1, r0
 8008cec:	4620      	mov	r0, r4
 8008cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf2:	f000 b817 	b.w	8008d24 <_kill_r>
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d00a      	beq.n	8008d10 <_raise_r+0x4c>
 8008cfa:	1c59      	adds	r1, r3, #1
 8008cfc:	d103      	bne.n	8008d06 <_raise_r+0x42>
 8008cfe:	2316      	movs	r3, #22
 8008d00:	6003      	str	r3, [r0, #0]
 8008d02:	2001      	movs	r0, #1
 8008d04:	e7e7      	b.n	8008cd6 <_raise_r+0x12>
 8008d06:	2400      	movs	r4, #0
 8008d08:	4628      	mov	r0, r5
 8008d0a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d0e:	4798      	blx	r3
 8008d10:	2000      	movs	r0, #0
 8008d12:	e7e0      	b.n	8008cd6 <_raise_r+0x12>

08008d14 <raise>:
 8008d14:	4b02      	ldr	r3, [pc, #8]	; (8008d20 <raise+0xc>)
 8008d16:	4601      	mov	r1, r0
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	f7ff bfd3 	b.w	8008cc4 <_raise_r>
 8008d1e:	bf00      	nop
 8008d20:	2000003c 	.word	0x2000003c

08008d24 <_kill_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	2300      	movs	r3, #0
 8008d28:	4d06      	ldr	r5, [pc, #24]	; (8008d44 <_kill_r+0x20>)
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f9 f9ee 	bl	8002112 <_kill>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_kill_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_kill_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	20000418 	.word	0x20000418

08008d48 <_getpid_r>:
 8008d48:	f7f9 b9dc 	b.w	8002104 <_getpid>

08008d4c <sqrt>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	4606      	mov	r6, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	f000 f81f 	bl	8008d94 <__ieee754_sqrt>
 8008d56:	4632      	mov	r2, r6
 8008d58:	4604      	mov	r4, r0
 8008d5a:	460d      	mov	r5, r1
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	f7f7 fe53 	bl	8000a0c <__aeabi_dcmpun>
 8008d66:	b990      	cbnz	r0, 8008d8e <sqrt+0x42>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 fe24 	bl	80009bc <__aeabi_dcmplt>
 8008d74:	b158      	cbz	r0, 8008d8e <sqrt+0x42>
 8008d76:	f7fd fa35 	bl	80061e4 <__errno>
 8008d7a:	2321      	movs	r3, #33	; 0x21
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	6003      	str	r3, [r0, #0]
 8008d80:	2300      	movs	r3, #0
 8008d82:	4610      	mov	r0, r2
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7f7 fcd1 	bl	800072c <__aeabi_ddiv>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	460d      	mov	r5, r1
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4629      	mov	r1, r5
 8008d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d94 <__ieee754_sqrt>:
 8008d94:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008ef0 <__ieee754_sqrt+0x15c>
 8008d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9c:	ea3c 0c01 	bics.w	ip, ip, r1
 8008da0:	4606      	mov	r6, r0
 8008da2:	460d      	mov	r5, r1
 8008da4:	460c      	mov	r4, r1
 8008da6:	460a      	mov	r2, r1
 8008da8:	4607      	mov	r7, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	d10f      	bne.n	8008dce <__ieee754_sqrt+0x3a>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	f7f7 fb91 	bl	80004d8 <__aeabi_dmul>
 8008db6:	4602      	mov	r2, r0
 8008db8:	460b      	mov	r3, r1
 8008dba:	4630      	mov	r0, r6
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 f9d5 	bl	800016c <__adddf3>
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4629      	mov	r1, r5
 8008dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	dc0e      	bgt.n	8008df0 <__ieee754_sqrt+0x5c>
 8008dd2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008dd6:	ea5c 0707 	orrs.w	r7, ip, r7
 8008dda:	d0f4      	beq.n	8008dc6 <__ieee754_sqrt+0x32>
 8008ddc:	b141      	cbz	r1, 8008df0 <__ieee754_sqrt+0x5c>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	f7f7 f9c1 	bl	8000168 <__aeabi_dsub>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	f7f7 fc9f 	bl	800072c <__aeabi_ddiv>
 8008dee:	e7e8      	b.n	8008dc2 <__ieee754_sqrt+0x2e>
 8008df0:	1521      	asrs	r1, r4, #20
 8008df2:	d075      	beq.n	8008ee0 <__ieee754_sqrt+0x14c>
 8008df4:	07cc      	lsls	r4, r1, #31
 8008df6:	f04f 0400 	mov.w	r4, #0
 8008dfa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008dfe:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8008e02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e06:	bf5e      	ittt	pl
 8008e08:	0fd9      	lsrpl	r1, r3, #31
 8008e0a:	005b      	lslpl	r3, r3, #1
 8008e0c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008e10:	0fd9      	lsrs	r1, r3, #31
 8008e12:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8008e16:	2516      	movs	r5, #22
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e1e:	107f      	asrs	r7, r7, #1
 8008e20:	005b      	lsls	r3, r3, #1
 8008e22:	1846      	adds	r6, r0, r1
 8008e24:	4296      	cmp	r6, r2
 8008e26:	bfde      	ittt	le
 8008e28:	1b92      	suble	r2, r2, r6
 8008e2a:	1870      	addle	r0, r6, r1
 8008e2c:	1864      	addle	r4, r4, r1
 8008e2e:	0052      	lsls	r2, r2, #1
 8008e30:	3d01      	subs	r5, #1
 8008e32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008e36:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008e3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e3e:	d1f0      	bne.n	8008e22 <__ieee754_sqrt+0x8e>
 8008e40:	4629      	mov	r1, r5
 8008e42:	f04f 0e20 	mov.w	lr, #32
 8008e46:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e4a:	4282      	cmp	r2, r0
 8008e4c:	eb06 0c05 	add.w	ip, r6, r5
 8008e50:	dc02      	bgt.n	8008e58 <__ieee754_sqrt+0xc4>
 8008e52:	d113      	bne.n	8008e7c <__ieee754_sqrt+0xe8>
 8008e54:	459c      	cmp	ip, r3
 8008e56:	d811      	bhi.n	8008e7c <__ieee754_sqrt+0xe8>
 8008e58:	f1bc 0f00 	cmp.w	ip, #0
 8008e5c:	eb0c 0506 	add.w	r5, ip, r6
 8008e60:	da43      	bge.n	8008eea <__ieee754_sqrt+0x156>
 8008e62:	2d00      	cmp	r5, #0
 8008e64:	db41      	blt.n	8008eea <__ieee754_sqrt+0x156>
 8008e66:	f100 0801 	add.w	r8, r0, #1
 8008e6a:	1a12      	subs	r2, r2, r0
 8008e6c:	4640      	mov	r0, r8
 8008e6e:	459c      	cmp	ip, r3
 8008e70:	bf88      	it	hi
 8008e72:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008e76:	eba3 030c 	sub.w	r3, r3, ip
 8008e7a:	4431      	add	r1, r6
 8008e7c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008e80:	f1be 0e01 	subs.w	lr, lr, #1
 8008e84:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8008e88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e8c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e90:	d1db      	bne.n	8008e4a <__ieee754_sqrt+0xb6>
 8008e92:	4313      	orrs	r3, r2
 8008e94:	d006      	beq.n	8008ea4 <__ieee754_sqrt+0x110>
 8008e96:	1c48      	adds	r0, r1, #1
 8008e98:	bf0b      	itete	eq
 8008e9a:	4671      	moveq	r1, lr
 8008e9c:	3101      	addne	r1, #1
 8008e9e:	3401      	addeq	r4, #1
 8008ea0:	f021 0101 	bicne.w	r1, r1, #1
 8008ea4:	1063      	asrs	r3, r4, #1
 8008ea6:	0849      	lsrs	r1, r1, #1
 8008ea8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008eac:	07e2      	lsls	r2, r4, #31
 8008eae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008eb2:	bf48      	it	mi
 8008eb4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008eb8:	460e      	mov	r6, r1
 8008eba:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008ebe:	e782      	b.n	8008dc6 <__ieee754_sqrt+0x32>
 8008ec0:	0ada      	lsrs	r2, r3, #11
 8008ec2:	3815      	subs	r0, #21
 8008ec4:	055b      	lsls	r3, r3, #21
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	d0fa      	beq.n	8008ec0 <__ieee754_sqrt+0x12c>
 8008eca:	02d5      	lsls	r5, r2, #11
 8008ecc:	d50a      	bpl.n	8008ee4 <__ieee754_sqrt+0x150>
 8008ece:	f1c1 0420 	rsb	r4, r1, #32
 8008ed2:	fa23 f404 	lsr.w	r4, r3, r4
 8008ed6:	1e4d      	subs	r5, r1, #1
 8008ed8:	408b      	lsls	r3, r1
 8008eda:	4322      	orrs	r2, r4
 8008edc:	1b41      	subs	r1, r0, r5
 8008ede:	e789      	b.n	8008df4 <__ieee754_sqrt+0x60>
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	e7f0      	b.n	8008ec6 <__ieee754_sqrt+0x132>
 8008ee4:	0052      	lsls	r2, r2, #1
 8008ee6:	3101      	adds	r1, #1
 8008ee8:	e7ef      	b.n	8008eca <__ieee754_sqrt+0x136>
 8008eea:	4680      	mov	r8, r0
 8008eec:	e7bd      	b.n	8008e6a <__ieee754_sqrt+0xd6>
 8008eee:	bf00      	nop
 8008ef0:	7ff00000 	.word	0x7ff00000

08008ef4 <_init>:
 8008ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef6:	bf00      	nop
 8008ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efa:	bc08      	pop	{r3}
 8008efc:	469e      	mov	lr, r3
 8008efe:	4770      	bx	lr

08008f00 <_fini>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr
